
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00049278  08012180  08012180  00022180  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805b3f8  0805b3f8  0007101c  2**0
                  CONTENTS
  4 .ARM          00000008  0805b3f8  0805b3f8  0006b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805b400  0805b400  0007101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805b400  0805b400  0006b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805b404  0805b404  0006b404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000101c  20000000  0805b408  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012c1c  2000101c  0805c424  0007101c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20013c38  0805c424  00073c38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0007101c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002365c  00000000  00000000  0007104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055a2  00000000  00000000  000946a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00099c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be0  00000000  00000000  0009ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280cd  00000000  00000000  0009c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b178  00000000  00000000  000c49fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd44c  00000000  00000000  000efb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000014a  00000000  00000000  001ccfc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e84  00000000  00000000  001cd10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00013762  00000000  00000000  001d1f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001e56f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001e57c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000101c 	.word	0x2000101c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012164 	.word	0x08012164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001020 	.word	0x20001020
 80001cc:	08012164 	.word	0x08012164

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <audio_record>:
 *
 * @param  None
 *
 * @retval None
 */
void audio_record(void) {
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma_transfer_state = OFFSET_NONE;
 800101a:	4e35      	ldr	r6, [pc, #212]	; (80010f0 <audio_record+0xd8>)
 800101c:	2300      	movs	r3, #0

	/* Initialize audio peripheral */
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ,
 800101e:	2201      	movs	r2, #1
 8001020:	2110      	movs	r1, #16
 8001022:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
	dma_transfer_state = OFFSET_NONE;
 8001026:	7033      	strb	r3, [r6, #0]
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ,
 8001028:	f001 f8de 	bl	80021e8 <BSP_AUDIO_IN_Init>
 800102c:	b108      	cbz	r0, 8001032 <audio_record+0x1a>
	DEFAULT_AUDIO_IN_BIT_RESOLUTION,
	DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK) {
		Error_Handler();
 800102e:	f000 fdc5 	bl	8001bbc <Error_Handler>
	}

	/* Start the audio input record */
	if (BSP_AUDIO_IN_Record((uint16_t*) &pdm_buffer[0],
 8001032:	4830      	ldr	r0, [pc, #192]	; (80010f4 <audio_record+0xdc>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	f001 f817 	bl	8002068 <BSP_AUDIO_IN_Record>
 800103a:	b108      	cbz	r0, 8001040 <audio_record+0x28>
	PDM_BUFFER_SIZE) != AUDIO_OK) {
		Error_Handler();
 800103c:	f000 fdbe 	bl	8001bbc <Error_Handler>
	}

	data_ready = 0;
 8001040:	4d2d      	ldr	r5, [pc, #180]	; (80010f8 <audio_record+0xe0>)

			/* Copy of PCM data into the final buffer. It copies PCM_OUT_SIZE * 2
			 * because they are uint16_t, which are 2 bytes long and memcpy
			 * expects a size in bytes.
			 */
			memcpy((uint16_t*) &pcm_buffer[pcm_offset * PCM_OUT_SIZE],
 8001042:	4c2e      	ldr	r4, [pc, #184]	; (80010fc <audio_record+0xe4>)
	data_ready = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	602b      	str	r3, [r5, #0]
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &pdm_buffer[0],
 8001048:	4f2d      	ldr	r7, [pc, #180]	; (8001100 <audio_record+0xe8>)
 800104a:	e026      	b.n	800109a <audio_record+0x82>
		if (dma_transfer_state == OFFSET_HALF) {
 800104c:	7833      	ldrb	r3, [r6, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d12d      	bne.n	80010ae <audio_record+0x96>
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &pdm_buffer[0],
 8001052:	4639      	mov	r1, r7
 8001054:	4827      	ldr	r0, [pc, #156]	; (80010f4 <audio_record+0xdc>)
 8001056:	f001 f819 	bl	800208c <BSP_AUDIO_IN_PDMToPCM>
			memcpy((uint16_t*) &pcm_buffer[pcm_offset * PCM_OUT_SIZE],
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	4829      	ldr	r0, [pc, #164]	; (8001104 <audio_record+0xec>)
 800105e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001062:	4353      	muls	r3, r2
 8001064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001068:	fbb3 f3f2 	udiv	r3, r3, r2
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <audio_record+0xe8>)
 800106e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001072:	f102 0120 	add.w	r1, r2, #32
 8001076:	f852 0b04 	ldr.w	r0, [r2], #4
 800107a:	f843 0b04 	str.w	r0, [r3], #4
 800107e:	428a      	cmp	r2, r1
 8001080:	d1f9      	bne.n	8001076 <audio_record+0x5e>
					PCM_OUT_SIZE * 2);

			dma_transfer_state = OFFSET_NONE;

			/* if the buffer is full, audio acquisition is done */
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 8001082:	6821      	ldr	r1, [r4, #0]
 8001084:	f240 32fe 	movw	r2, #1022	; 0x3fe
			dma_transfer_state = OFFSET_NONE;
 8001088:	2300      	movs	r3, #0
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 800108a:	4291      	cmp	r1, r2
			dma_transfer_state = OFFSET_NONE;
 800108c:	7033      	strb	r3, [r6, #0]
				data_ready = 1;
				pcm_offset = 0;
			} else {
				pcm_offset++;
 800108e:	bf15      	itete	ne
 8001090:	6823      	ldrne	r3, [r4, #0]
				data_ready = 1;
 8001092:	2201      	moveq	r2, #1
				pcm_offset++;
 8001094:	3301      	addne	r3, #1
				data_ready = 1;
 8001096:	602a      	streq	r2, [r5, #0]
				pcm_offset++;
 8001098:	6023      	str	r3, [r4, #0]
	while (data_ready != 1) {
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d1d5      	bne.n	800104c <audio_record+0x34>
			}
		}
	}

	/* Stop audio record */
	if (BSP_AUDIO_IN_Stop() != AUDIO_OK) {
 80010a0:	f000 ffec 	bl	800207c <BSP_AUDIO_IN_Stop>
 80010a4:	b318      	cbz	r0, 80010ee <audio_record+0xd6>
		Error_Handler();
	}
}
 80010a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Error_Handler();
 80010aa:	f000 bd87 	b.w	8001bbc <Error_Handler>
		if (dma_transfer_state == OFFSET_FULL) {
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d1f3      	bne.n	800109a <audio_record+0x82>
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &pdm_buffer[PDM_BUFFER_SIZE / 2],
 80010b2:	4913      	ldr	r1, [pc, #76]	; (8001100 <audio_record+0xe8>)
 80010b4:	4814      	ldr	r0, [pc, #80]	; (8001108 <audio_record+0xf0>)
 80010b6:	f000 ffe9 	bl	800208c <BSP_AUDIO_IN_PDMToPCM>
			memcpy((uint16_t*) &pcm_buffer[pcm_offset * (PCM_OUT_SIZE)],
 80010ba:	6821      	ldr	r1, [r4, #0]
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <audio_record+0xe8>)
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <audio_record+0xec>)
 80010c0:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80010c4:	f103 0120 	add.w	r1, r3, #32
 80010c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80010cc:	f842 0b04 	str.w	r0, [r2], #4
 80010d0:	428b      	cmp	r3, r1
 80010d2:	d1f9      	bne.n	80010c8 <audio_record+0xb0>
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 80010d4:	6821      	ldr	r1, [r4, #0]
 80010d6:	f240 32fe 	movw	r2, #1022	; 0x3fe
			dma_transfer_state = OFFSET_NONE;
 80010da:	2300      	movs	r3, #0
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 80010dc:	4291      	cmp	r1, r2
			dma_transfer_state = OFFSET_NONE;
 80010de:	7033      	strb	r3, [r6, #0]
				pcm_offset++;
 80010e0:	bf15      	itete	ne
 80010e2:	6823      	ldrne	r3, [r4, #0]
				data_ready = 1;
 80010e4:	2201      	moveq	r2, #1
				pcm_offset++;
 80010e6:	3301      	addne	r3, #1
				data_ready = 1;
 80010e8:	602a      	streq	r2, [r5, #0]
				pcm_offset++;
 80010ea:	6023      	str	r3, [r4, #0]
 80010ec:	e7ac      	b.n	8001048 <audio_record+0x30>
}
 80010ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f0:	20001040 	.word	0x20001040
 80010f4:	20009028 	.word	0x20009028
 80010f8:	2000103c 	.word	0x2000103c
 80010fc:	20009024 	.word	0x20009024
 8001100:	20009128 	.word	0x20009128
 8001104:	20001042 	.word	0x20001042
 8001108:	200090a8 	.word	0x200090a8

0800110c <BSP_AUDIO_IN_TransferComplete_CallBack>:
 * @brief Manages the DMA Transfer complete interrupt
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
	dma_transfer_state = OFFSET_FULL;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	4770      	bx	lr
 8001114:	20001040 	.word	0x20001040

08001118 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
 * @brief  Manages the DMA Half Transfer complete interrupt
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
	dma_transfer_state = OFFSET_HALF;
 8001118:	4b01      	ldr	r3, [pc, #4]	; (8001120 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	4770      	bx	lr
 8001120:	20001040 	.word	0x20001040

08001124 <BSP_AUDIO_IN_Error_Callback>:
 * @brief  Audio IN Error callback function
 * @param  pData
 * @retval None
 */
void BSP_AUDIO_IN_Error_Callback(void) {
	Error_Handler();
 8001124:	f000 bd4a 	b.w	8001bbc <Error_Handler>

08001128 <argmax>:
 * @param  size  arr size. It must be positive and less than `DICTIONARY_SIZE`
 *
 * @retval idx:  arr maximum value index
 */
uint8_t argmax(const ai_float arr[], uint8_t size) {
	assert(size > 0 && size <= DICTIONARY_SIZE);
 8001128:	1e4b      	subs	r3, r1, #1
 800112a:	2b25      	cmp	r3, #37	; 0x25
uint8_t argmax(const ai_float arr[], uint8_t size) {
 800112c:	b510      	push	{r4, lr}
	assert(size > 0 && size <= DICTIONARY_SIZE);
 800112e:	d905      	bls.n	800113c <argmax+0x14>
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <argmax+0x40>)
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <argmax+0x44>)
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <argmax+0x48>)
 8001136:	2154      	movs	r1, #84	; 0x54
 8001138:	f00a fb38 	bl	800b7ac <__assert_func>
	uint8_t idx = 0;
	ai_float max = arr[0];
 800113c:	4603      	mov	r3, r0
 800113e:	ecf3 7a01 	vldmia	r3!, {s15}
	ai_float tmp;

	for (uint8_t i = 1; i < size; i++) {
 8001142:	2201      	movs	r2, #1
	uint8_t idx = 0;
 8001144:	2000      	movs	r0, #0
 8001146:	b2d4      	uxtb	r4, r2
	for (uint8_t i = 1; i < size; i++) {
 8001148:	42a1      	cmp	r1, r4
 800114a:	d800      	bhi.n	800114e <argmax+0x26>
			idx = i;
		}
	}

	return idx;
}
 800114c:	bd10      	pop	{r4, pc}
		tmp = arr[i];
 800114e:	ecb3 7a01 	vldmia	r3!, {s14}
		if (tmp > max) {
 8001152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			max = tmp;
 800115a:	bf44      	itt	mi
 800115c:	eef0 7a47 	vmovmi.f32	s15, s14
		if (tmp > max) {
 8001160:	4620      	movmi	r0, r4
	for (uint8_t i = 1; i < size; i++) {
 8001162:	3201      	adds	r2, #1
 8001164:	e7ef      	b.n	8001146 <argmax+0x1e>
 8001166:	bf00      	nop
 8001168:	080121ec 	.word	0x080121ec
 800116c:	08012321 	.word	0x08012321
 8001170:	08012210 	.word	0x08012210

08001174 <get_word>:
 * @param  idx   word index. It must be less than `DICTIONARY_SIZE`
 *
 * @retval       the dictionary word corresponding to the input index
 */
char * get_word(uint8_t idx) {
	assert(idx < DICTIONARY_SIZE);
 8001174:	2825      	cmp	r0, #37	; 0x25
char * get_word(uint8_t idx) {
 8001176:	b508      	push	{r3, lr}
	assert(idx < DICTIONARY_SIZE);
 8001178:	d905      	bls.n	8001186 <get_word+0x12>
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <get_word+0x1c>)
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <get_word+0x20>)
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <get_word+0x24>)
 8001180:	216d      	movs	r1, #109	; 0x6d
 8001182:	f00a fb13 	bl	800b7ac <__assert_func>
	return dictionary[idx];
}
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <get_word+0x28>)
 8001188:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800118c:	bd08      	pop	{r3, pc}
 800118e:	bf00      	nop
 8001190:	08012227 	.word	0x08012227
 8001194:	08012318 	.word	0x08012318
 8001198:	08012210 	.word	0x08012210
 800119c:	08012328 	.word	0x08012328

080011a0 <execution_time_start>:
 * 			   `EXECUTION_TIME_MAX_SECTIONS`.
 *
 * @retval None
 */
void execution_time_start(uint32_t i) {
	if (i < EXECUTION_TIME_MAX_SECTIONS)
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d804      	bhi.n	80011ae <execution_time_start+0xe>
		time_statistics_blocks[i].start = ARM_CM_DWT_CYCCNT;
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <execution_time_start+0x10>)
 80011a6:	0100      	lsls	r0, r0, #4
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <execution_time_start+0x14>)
 80011ac:	501a      	str	r2, [r3, r0]
}
 80011ae:	4770      	bx	lr
 80011b0:	e0001000 	.word	0xe0001000
 80011b4:	20009148 	.word	0x20009148

080011b8 <execution_time_stop>:
 * 			   `EXECUTION_TIME_MAX_SECTIONS`.
 *
 * @retval None
 */
void execution_time_stop(uint32_t i) {
	if (i < EXECUTION_TIME_MAX_SECTIONS) {
 80011b8:	2802      	cmp	r0, #2
void execution_time_stop(uint32_t i) {
 80011ba:	b510      	push	{r4, lr}
	if (i < EXECUTION_TIME_MAX_SECTIONS) {
 80011bc:	d811      	bhi.n	80011e2 <execution_time_stop+0x2a>
		uint32_t stop;
		Time_Statistics *p_tbl;

		stop = ARM_CM_DWT_CYCCNT;
		p_tbl = &time_statistics_blocks[i];
		p_tbl->elapsed = stop - p_tbl->start;
 80011be:	0101      	lsls	r1, r0, #4
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <execution_time_stop+0x2c>)
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <execution_time_stop+0x30>)
 80011c4:	5854      	ldr	r4, [r2, r1]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
		if (p_tbl->max < p_tbl->elapsed) {
			p_tbl->max = p_tbl->elapsed;
		}
		if (p_tbl->min > p_tbl->elapsed) {
 80011cc:	440a      	add	r2, r1
		p_tbl->elapsed = stop - p_tbl->start;
 80011ce:	1b1b      	subs	r3, r3, r4
		if (p_tbl->max < p_tbl->elapsed) {
 80011d0:	6884      	ldr	r4, [r0, #8]
		if (p_tbl->min > p_tbl->elapsed) {
 80011d2:	68d1      	ldr	r1, [r2, #12]
		p_tbl->elapsed = stop - p_tbl->start;
 80011d4:	6043      	str	r3, [r0, #4]
		if (p_tbl->max < p_tbl->elapsed) {
 80011d6:	42a3      	cmp	r3, r4
			p_tbl->max = p_tbl->elapsed;
 80011d8:	bf88      	it	hi
 80011da:	6083      	strhi	r3, [r0, #8]
		if (p_tbl->min > p_tbl->elapsed) {
 80011dc:	428b      	cmp	r3, r1
			p_tbl->min = p_tbl->elapsed;
 80011de:	bf38      	it	cc
 80011e0:	60d3      	strcc	r3, [r2, #12]
		}
	}
}
 80011e2:	bd10      	pop	{r4, pc}
 80011e4:	20009148 	.word	0x20009148
 80011e8:	e0001000 	.word	0xe0001000

080011ec <execution_time_clear>:
 * 			   `EXECUTION_TIME_MAX_SECTIONS`.
 *
 * @retval None
 */
void execution_time_clear(uint32_t i) {
	if (i < EXECUTION_TIME_MAX_SECTIONS) {
 80011ec:	2802      	cmp	r0, #2
 80011ee:	d80a      	bhi.n	8001206 <execution_time_clear+0x1a>
		Time_Statistics *p_tbl;

		p_tbl = &time_statistics_blocks[i];
		p_tbl->start = 0;
 80011f0:	4a05      	ldr	r2, [pc, #20]	; (8001208 <execution_time_clear+0x1c>)
 80011f2:	0101      	lsls	r1, r0, #4
 80011f4:	2300      	movs	r3, #0
 80011f6:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80011fa:	5053      	str	r3, [r2, r1]
		p_tbl->elapsed = 0;
		p_tbl->min = 0xFFFFFFFF;
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
		p_tbl->max = 0;
 8001200:	e9c0 3202 	strd	r3, r2, [r0, #8]
		p_tbl->elapsed = 0;
 8001204:	6043      	str	r3, [r0, #4]
	}
}
 8001206:	4770      	bx	lr
 8001208:	20009148 	.word	0x20009148

0800120c <execution_time_init>:
	if (ARM_CM_DWT_CTRL != 0) {
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <execution_time_init+0x38>)
void execution_time_init(void) {
 800120e:	b508      	push	{r3, lr}
	if (ARM_CM_DWT_CTRL != 0) {
 8001210:	6813      	ldr	r3, [r2, #0]
 8001212:	b163      	cbz	r3, 800122e <execution_time_init+0x22>
		ARM_CM_DEMCR |= 1 << 24; /* enable DWT and set bit 24 */
 8001214:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
		ARM_CM_DWT_CTRL |= 1; /* enable DWT cycle counter  */
 8001218:	f043 0301 	orr.w	r3, r3, #1
		ARM_CM_DEMCR |= 1 << 24; /* enable DWT and set bit 24 */
 800121c:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
 8001220:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001224:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
		ARM_CM_DWT_CYCCNT = 0; /* clear DWT cycle counter   */
 8001228:	2100      	movs	r1, #0
 800122a:	6051      	str	r1, [r2, #4]
		ARM_CM_DWT_CTRL |= 1; /* enable DWT cycle counter  */
 800122c:	6013      	str	r3, [r2, #0]
		execution_time_clear(i);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ffdc 	bl	80011ec <execution_time_clear>
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff ffd9 	bl	80011ec <execution_time_clear>
}
 800123a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		execution_time_clear(i);
 800123e:	2002      	movs	r0, #2
 8001240:	f7ff bfd4 	b.w	80011ec <execution_time_clear>
 8001244:	e0001000 	.word	0xe0001000

08001248 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 115200;
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x30>)
{
 800124c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800124e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001252:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800125a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001262:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001266:	f003 fd6f 	bl	8004d48 <HAL_UART_Init>
 800126a:	b108      	cbz	r0, 8001270 <MX_USART2_UART_Init+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800126e:	e7fe      	b.n	800126e <MX_USART2_UART_Init+0x26>
}
 8001270:	bd08      	pop	{r3, pc}
 8001272:	bf00      	nop
 8001274:	2000d2ec 	.word	0x2000d2ec
 8001278:	40004400 	.word	0x40004400

0800127c <preprocess_audio>:
		uint32_t signal_len) {
 800127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 8001280:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80012dc <preprocess_audio+0x60>
		buf_to_float_normed(&input_signal[HOP_LEN * frame_index], frame_buffer,
 8001284:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80012e0 <preprocess_audio+0x64>
		MfccColumn(&mfcc, frame_buffer, mfcc_col_buffer);
 8001288:	4f12      	ldr	r7, [pc, #72]	; (80012d4 <preprocess_audio+0x58>)
		uint32_t signal_len) {
 800128a:	4605      	mov	r5, r0
 800128c:	460e      	mov	r6, r1
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 800128e:	2400      	movs	r4, #0
 8001290:	f8d8 3000 	ldr.w	r3, [r8]
 8001294:	42a3      	cmp	r3, r4
 8001296:	d801      	bhi.n	800129c <preprocess_audio+0x20>
}
 8001298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		buf_to_float_normed(&input_signal[HOP_LEN * frame_index], frame_buffer,
 800129c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a0:	4649      	mov	r1, r9
 80012a2:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 80012a6:	f004 f881 	bl	80053ac <buf_to_float_normed>
		MfccColumn(&mfcc, frame_buffer, mfcc_col_buffer);
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <preprocess_audio+0x5c>)
 80012ac:	463a      	mov	r2, r7
 80012ae:	4649      	mov	r1, r9
 80012b0:	f004 f93d 	bl	800552e <MfccColumn>
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 80012b4:	f8d8 3000 	ldr.w	r3, [r8]
 80012b8:	4906      	ldr	r1, [pc, #24]	; (80012d4 <preprocess_audio+0x58>)
 80012ba:	0098      	lsls	r0, r3, #2
 80012bc:	eb06 0284 	add.w	r2, r6, r4, lsl #2
			out_mfcc[i * num_frames + frame_index] = mfcc_col_buffer[i];
 80012c0:	2310      	movs	r3, #16
 80012c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80012c6:	f8c2 c000 	str.w	ip, [r2]
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4402      	add	r2, r0
 80012ce:	d1f8      	bne.n	80012c2 <preprocess_audio+0x46>
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 80012d0:	3401      	adds	r4, #1
 80012d2:	e7dd      	b.n	8001290 <preprocess_audio+0x14>
 80012d4:	2000f71c 	.word	0x2000f71c
 80012d8:	2000f70c 	.word	0x2000f70c
 80012dc:	20000400 	.word	0x20000400
 80012e0:	2000b190 	.word	0x2000b190

080012e4 <recognize_commands>:
void recognize_commands(const char *word) {
 80012e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (strcmp(word, ONE) == 0) {
 80012e8:	49a2      	ldr	r1, [pc, #648]	; (8001574 <recognize_commands+0x290>)
		if (led_status != Green) {
 80012ea:	4ea3      	ldr	r6, [pc, #652]	; (8001578 <recognize_commands+0x294>)
void recognize_commands(const char *word) {
 80012ec:	4605      	mov	r5, r0
	if (strcmp(word, ONE) == 0) {
 80012ee:	f7fe ff6f 	bl	80001d0 <strcmp>
		if (led_status != Green) {
 80012f2:	7834      	ldrb	r4, [r6, #0]
	if (strcmp(word, ONE) == 0) {
 80012f4:	b9d8      	cbnz	r0, 800132e <recognize_commands+0x4a>
		if (led_status != Green) {
 80012f6:	2c01      	cmp	r4, #1
 80012f8:	d00d      	beq.n	8001316 <recognize_commands+0x32>
			if (led_status == Blue) {
 80012fa:	2c02      	cmp	r4, #2
 80012fc:	d10d      	bne.n	800131a <recognize_commands+0x36>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001302:	489e      	ldr	r0, [pc, #632]	; (800157c <recognize_commands+0x298>)
 8001304:	f002 fbef 	bl	8003ae6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001308:	489c      	ldr	r0, [pc, #624]	; (800157c <recognize_commands+0x298>)
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	f002 fbea 	bl	8003ae6 <HAL_GPIO_TogglePin>
			led_status = Green;
 8001312:	2301      	movs	r3, #1
			led_status = Blue;
 8001314:	7033      	strb	r3, [r6, #0]
}
 8001316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (led_status == Red) {
 800131a:	2c03      	cmp	r4, #3
 800131c:	d102      	bne.n	8001324 <recognize_commands+0x40>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800131e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001322:	e7ee      	b.n	8001302 <recognize_commands+0x1e>
			} else if (led_status == Orange) {
 8001324:	2c04      	cmp	r4, #4
 8001326:	d1ef      	bne.n	8001308 <recognize_commands+0x24>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	e7e9      	b.n	8001302 <recognize_commands+0x1e>
	} else if (strcmp(word, TWO) == 0) {
 800132e:	4994      	ldr	r1, [pc, #592]	; (8001580 <recognize_commands+0x29c>)
 8001330:	4628      	mov	r0, r5
 8001332:	f7fe ff4d 	bl	80001d0 <strcmp>
 8001336:	b9c8      	cbnz	r0, 800136c <recognize_commands+0x88>
		if (led_status != Blue) {
 8001338:	2c02      	cmp	r4, #2
 800133a:	d0ec      	beq.n	8001316 <recognize_commands+0x32>
			if (led_status == Green) {
 800133c:	2c01      	cmp	r4, #1
 800133e:	d10b      	bne.n	8001358 <recognize_commands+0x74>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001344:	488d      	ldr	r0, [pc, #564]	; (800157c <recognize_commands+0x298>)
 8001346:	f002 fbce 	bl	8003ae6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 800134a:	488c      	ldr	r0, [pc, #560]	; (800157c <recognize_commands+0x298>)
 800134c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001350:	f002 fbc9 	bl	8003ae6 <HAL_GPIO_TogglePin>
			led_status = Blue;
 8001354:	2302      	movs	r3, #2
 8001356:	e7dd      	b.n	8001314 <recognize_commands+0x30>
			} else if (led_status == Red) {
 8001358:	2c03      	cmp	r4, #3
 800135a:	d102      	bne.n	8001362 <recognize_commands+0x7e>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800135c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001360:	e7f0      	b.n	8001344 <recognize_commands+0x60>
			} else if (led_status == Orange) {
 8001362:	2c04      	cmp	r4, #4
 8001364:	d1f1      	bne.n	800134a <recognize_commands+0x66>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136a:	e7eb      	b.n	8001344 <recognize_commands+0x60>
	} else if (strcmp(word, THREE) == 0) {
 800136c:	4985      	ldr	r1, [pc, #532]	; (8001584 <recognize_commands+0x2a0>)
 800136e:	4628      	mov	r0, r5
 8001370:	f7fe ff2e 	bl	80001d0 <strcmp>
 8001374:	b9c8      	cbnz	r0, 80013aa <recognize_commands+0xc6>
		if (led_status != Red) {
 8001376:	2c03      	cmp	r4, #3
 8001378:	d0cd      	beq.n	8001316 <recognize_commands+0x32>
			if (led_status == Green) {
 800137a:	2c01      	cmp	r4, #1
 800137c:	d10b      	bne.n	8001396 <recognize_commands+0xb2>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001382:	487e      	ldr	r0, [pc, #504]	; (800157c <recognize_commands+0x298>)
 8001384:	f002 fbaf 	bl	8003ae6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001388:	487c      	ldr	r0, [pc, #496]	; (800157c <recognize_commands+0x298>)
 800138a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138e:	f002 fbaa 	bl	8003ae6 <HAL_GPIO_TogglePin>
			led_status = Red;
 8001392:	2303      	movs	r3, #3
 8001394:	e7be      	b.n	8001314 <recognize_commands+0x30>
			} else if (led_status == Blue) {
 8001396:	2c02      	cmp	r4, #2
 8001398:	d102      	bne.n	80013a0 <recognize_commands+0xbc>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 800139a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139e:	e7f0      	b.n	8001382 <recognize_commands+0x9e>
			} else if (led_status == Orange) {
 80013a0:	2c04      	cmp	r4, #4
 80013a2:	d1f1      	bne.n	8001388 <recognize_commands+0xa4>
				HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80013a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a8:	e7eb      	b.n	8001382 <recognize_commands+0x9e>
	} else if (strcmp(word, FOUR) == 0) {
 80013aa:	4977      	ldr	r1, [pc, #476]	; (8001588 <recognize_commands+0x2a4>)
 80013ac:	4628      	mov	r0, r5
 80013ae:	f7fe ff0f 	bl	80001d0 <strcmp>
 80013b2:	b9c8      	cbnz	r0, 80013e8 <recognize_commands+0x104>
		if (led_status != Orange) {
 80013b4:	2c04      	cmp	r4, #4
 80013b6:	d0ae      	beq.n	8001316 <recognize_commands+0x32>
			if (led_status == Green) {
 80013b8:	2c01      	cmp	r4, #1
 80013ba:	d10b      	bne.n	80013d4 <recognize_commands+0xf0>
				HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80013bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80013c0:	486e      	ldr	r0, [pc, #440]	; (800157c <recognize_commands+0x298>)
 80013c2:	f002 fb90 	bl	8003ae6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80013c6:	486d      	ldr	r0, [pc, #436]	; (800157c <recognize_commands+0x298>)
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	f002 fb8b 	bl	8003ae6 <HAL_GPIO_TogglePin>
			led_status = Orange;
 80013d0:	2304      	movs	r3, #4
 80013d2:	e79f      	b.n	8001314 <recognize_commands+0x30>
			} else if (led_status == Blue) {
 80013d4:	2c02      	cmp	r4, #2
 80013d6:	d102      	bne.n	80013de <recognize_commands+0xfa>
				HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80013d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013dc:	e7f0      	b.n	80013c0 <recognize_commands+0xdc>
			} else if (led_status == Red) {
 80013de:	2c03      	cmp	r4, #3
 80013e0:	d1f1      	bne.n	80013c6 <recognize_commands+0xe2>
				HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80013e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e6:	e7eb      	b.n	80013c0 <recognize_commands+0xdc>
		if (led_status == Green) {
 80013e8:	2c01      	cmp	r4, #1
 80013ea:	d11f      	bne.n	800142c <recognize_commands+0x148>
			HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80013ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80013f0:	4862      	ldr	r0, [pc, #392]	; (800157c <recognize_commands+0x298>)
 80013f2:	f002 fb78 	bl	8003ae6 <HAL_GPIO_TogglePin>
		led_status = Off;
 80013f6:	2300      	movs	r3, #0
		if (strcmp(word, ON) == 0) {
 80013f8:	4964      	ldr	r1, [pc, #400]	; (800158c <recognize_commands+0x2a8>)
		led_status = Off;
 80013fa:	7033      	strb	r3, [r6, #0]
		if (strcmp(word, ON) == 0) {
 80013fc:	4628      	mov	r0, r5
 80013fe:	f7fe fee7 	bl	80001d0 <strcmp>
 8001402:	bb40      	cbnz	r0, 8001456 <recognize_commands+0x172>
			print_words = 0;
 8001404:	4b62      	ldr	r3, [pc, #392]	; (8001590 <recognize_commands+0x2ac>)
			if (!display_words_enabled) {
 8001406:	4c63      	ldr	r4, [pc, #396]	; (8001594 <recognize_commands+0x2b0>)
			print_words = 0;
 8001408:	7018      	strb	r0, [r3, #0]
			if (!display_words_enabled) {
 800140a:	7823      	ldrb	r3, [r4, #0]
 800140c:	4d62      	ldr	r5, [pc, #392]	; (8001598 <recognize_commands+0x2b4>)
 800140e:	b9e3      	cbnz	r3, 800144a <recognize_commands+0x166>
				usart_buffer_length = sprintf(usart_buffer,
 8001410:	4962      	ldr	r1, [pc, #392]	; (800159c <recognize_commands+0x2b8>)
 8001412:	4863      	ldr	r0, [pc, #396]	; (80015a0 <recognize_commands+0x2bc>)
 8001414:	f00b fb26 	bl	800ca64 <strcpy>
 8001418:	2221      	movs	r2, #33	; 0x21
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	4960      	ldr	r1, [pc, #384]	; (80015a0 <recognize_commands+0x2bc>)
 800141e:	4861      	ldr	r0, [pc, #388]	; (80015a4 <recognize_commands+0x2c0>)
				usart_buffer_length = sprintf(usart_buffer,
 8001420:	602a      	str	r2, [r5, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001422:	f003 fcd8 	bl	8004dd6 <HAL_UART_Transmit>
			display_words_enabled = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	7023      	strb	r3, [r4, #0]
 800142a:	e774      	b.n	8001316 <recognize_commands+0x32>
		} else if (led_status == Blue) {
 800142c:	2c02      	cmp	r4, #2
 800142e:	d102      	bne.n	8001436 <recognize_commands+0x152>
			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001434:	e7dc      	b.n	80013f0 <recognize_commands+0x10c>
		} else if (led_status == Red) {
 8001436:	2c03      	cmp	r4, #3
 8001438:	d102      	bne.n	8001440 <recognize_commands+0x15c>
			HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	e7d7      	b.n	80013f0 <recognize_commands+0x10c>
		} else if (led_status == Orange) {
 8001440:	2c04      	cmp	r4, #4
 8001442:	d1d8      	bne.n	80013f6 <recognize_commands+0x112>
			HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8001444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001448:	e7d2      	b.n	80013f0 <recognize_commands+0x10c>
				usart_buffer_length = sprintf(usart_buffer,
 800144a:	4957      	ldr	r1, [pc, #348]	; (80015a8 <recognize_commands+0x2c4>)
 800144c:	4854      	ldr	r0, [pc, #336]	; (80015a0 <recognize_commands+0x2bc>)
 800144e:	f00b fb09 	bl	800ca64 <strcpy>
 8001452:	2222      	movs	r2, #34	; 0x22
 8001454:	e7e1      	b.n	800141a <recognize_commands+0x136>
		} else if (strcmp(word, OFF) == 0) {
 8001456:	4955      	ldr	r1, [pc, #340]	; (80015ac <recognize_commands+0x2c8>)
 8001458:	4628      	mov	r0, r5
 800145a:	f7fe feb9 	bl	80001d0 <strcmp>
 800145e:	b998      	cbnz	r0, 8001488 <recognize_commands+0x1a4>
			if (display_words_enabled) {
 8001460:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <recognize_commands+0x2b0>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	2a00      	cmp	r2, #0
 8001466:	f43f af56 	beq.w	8001316 <recognize_commands+0x32>
				display_words_enabled = 0;
 800146a:	7018      	strb	r0, [r3, #0]
				usart_buffer_length = sprintf(usart_buffer,
 800146c:	4950      	ldr	r1, [pc, #320]	; (80015b0 <recognize_commands+0x2cc>)
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <recognize_commands+0x2bc>)
 8001470:	f00b faf8 	bl	800ca64 <strcpy>
 8001474:	4b48      	ldr	r3, [pc, #288]	; (8001598 <recognize_commands+0x2b4>)
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001476:	494a      	ldr	r1, [pc, #296]	; (80015a0 <recognize_commands+0x2bc>)
 8001478:	484a      	ldr	r0, [pc, #296]	; (80015a4 <recognize_commands+0x2c0>)
				usart_buffer_length = sprintf(usart_buffer,
 800147a:	222d      	movs	r2, #45	; 0x2d
 800147c:	601a      	str	r2, [r3, #0]
}
 800147e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001482:	2364      	movs	r3, #100	; 0x64
 8001484:	f003 bca7 	b.w	8004dd6 <HAL_UART_Transmit>
		} else if (strcmp(word, VISUAL) == 0) {
 8001488:	494a      	ldr	r1, [pc, #296]	; (80015b4 <recognize_commands+0x2d0>)
 800148a:	4628      	mov	r0, r5
 800148c:	f7fe fea0 	bl	80001d0 <strcmp>
 8001490:	2800      	cmp	r0, #0
 8001492:	d14e      	bne.n	8001532 <recognize_commands+0x24e>
			print_words = 0;
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <recognize_commands+0x2ac>)
 8001496:	4f48      	ldr	r7, [pc, #288]	; (80015b8 <recognize_commands+0x2d4>)
					usart_buffer_length = sprintf(usart_buffer,
 8001498:	4d41      	ldr	r5, [pc, #260]	; (80015a0 <recognize_commands+0x2bc>)
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 800149a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80015a4 <recognize_commands+0x2c0>
			print_words = 0;
 800149e:	7018      	strb	r0, [r3, #0]
 80014a0:	4604      	mov	r4, r0
				switch (i) {
 80014a2:	2c01      	cmp	r4, #1
 80014a4:	4e3c      	ldr	r6, [pc, #240]	; (8001598 <recognize_commands+0x2b4>)
 80014a6:	b2e3      	uxtb	r3, r4
 80014a8:	d037      	beq.n	800151a <recognize_commands+0x236>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d03b      	beq.n	8001526 <recognize_commands+0x242>
					usart_buffer_length = sprintf(usart_buffer,
 80014ae:	4943      	ldr	r1, [pc, #268]	; (80015bc <recognize_commands+0x2d8>)
 80014b0:	4628      	mov	r0, r5
 80014b2:	f00b fad7 	bl	800ca64 <strcpy>
 80014b6:	2323      	movs	r3, #35	; 0x23
					usart_buffer_length = sprintf(usart_buffer,
 80014b8:	6033      	str	r3, [r6, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80014ba:	8832      	ldrh	r2, [r6, #0]
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	4629      	mov	r1, r5
 80014c0:	4640      	mov	r0, r8
 80014c2:	f003 fc88 	bl	8004dd6 <HAL_UART_Transmit>
				usart_buffer_length = sprintf(usart_buffer, "\telapsed=%lu\r\n",
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	493d      	ldr	r1, [pc, #244]	; (80015c0 <recognize_commands+0x2dc>)
 80014ca:	4628      	mov	r0, r5
 80014cc:	f00b faaa 	bl	800ca24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	b282      	uxth	r2, r0
				usart_buffer_length = sprintf(usart_buffer, "\telapsed=%lu\r\n",
 80014d4:	6030      	str	r0, [r6, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80014d6:	4629      	mov	r1, r5
 80014d8:	4640      	mov	r0, r8
 80014da:	f003 fc7c 	bl	8004dd6 <HAL_UART_Transmit>
				usart_buffer_length = sprintf(usart_buffer, "\tmax=%lu\r\n",
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	4938      	ldr	r1, [pc, #224]	; (80015c4 <recognize_commands+0x2e0>)
 80014e2:	4628      	mov	r0, r5
 80014e4:	f00b fa9e 	bl	800ca24 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80014e8:	2364      	movs	r3, #100	; 0x64
 80014ea:	b282      	uxth	r2, r0
				usart_buffer_length = sprintf(usart_buffer, "\tmax=%lu\r\n",
 80014ec:	6030      	str	r0, [r6, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80014ee:	4629      	mov	r1, r5
 80014f0:	4640      	mov	r0, r8
 80014f2:	f003 fc70 	bl	8004dd6 <HAL_UART_Transmit>
				usart_buffer_length = sprintf(usart_buffer, "\tmin=%lu\r\n",
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4933      	ldr	r1, [pc, #204]	; (80015c8 <recognize_commands+0x2e4>)
 80014fa:	4628      	mov	r0, r5
 80014fc:	f00b fa92 	bl	800ca24 <siprintf>
			for (uint8_t i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 8001500:	3401      	adds	r4, #1
				usart_buffer_length = sprintf(usart_buffer, "\tmin=%lu\r\n",
 8001502:	6030      	str	r0, [r6, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001504:	b282      	uxth	r2, r0
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	4629      	mov	r1, r5
 800150a:	4640      	mov	r0, r8
 800150c:	f003 fc63 	bl	8004dd6 <HAL_UART_Transmit>
			for (uint8_t i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 8001510:	2c03      	cmp	r4, #3
 8001512:	f107 0710 	add.w	r7, r7, #16
 8001516:	d1c4      	bne.n	80014a2 <recognize_commands+0x1be>
 8001518:	e6fd      	b.n	8001316 <recognize_commands+0x32>
					usart_buffer_length = sprintf(usart_buffer,
 800151a:	492c      	ldr	r1, [pc, #176]	; (80015cc <recognize_commands+0x2e8>)
 800151c:	4628      	mov	r0, r5
 800151e:	f00b faa1 	bl	800ca64 <strcpy>
 8001522:	2322      	movs	r3, #34	; 0x22
 8001524:	e7c8      	b.n	80014b8 <recognize_commands+0x1d4>
					usart_buffer_length = sprintf(usart_buffer,
 8001526:	492a      	ldr	r1, [pc, #168]	; (80015d0 <recognize_commands+0x2ec>)
 8001528:	4628      	mov	r0, r5
 800152a:	f00b fa9b 	bl	800ca64 <strcpy>
 800152e:	231b      	movs	r3, #27
 8001530:	e7c2      	b.n	80014b8 <recognize_commands+0x1d4>
		} else if (strcmp(word, STOP) == 0) {
 8001532:	4928      	ldr	r1, [pc, #160]	; (80015d4 <recognize_commands+0x2f0>)
 8001534:	4628      	mov	r0, r5
 8001536:	f7fe fe4b 	bl	80001d0 <strcmp>
 800153a:	4604      	mov	r4, r0
 800153c:	2800      	cmp	r0, #0
 800153e:	f47f aeea 	bne.w	8001316 <recognize_commands+0x32>
			print_words = 0;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <recognize_commands+0x2ac>)
			usart_buffer_length = sprintf(usart_buffer,
 8001544:	4924      	ldr	r1, [pc, #144]	; (80015d8 <recognize_commands+0x2f4>)
			print_words = 0;
 8001546:	7018      	strb	r0, [r3, #0]
			usart_buffer_length = sprintf(usart_buffer,
 8001548:	4815      	ldr	r0, [pc, #84]	; (80015a0 <recognize_commands+0x2bc>)
 800154a:	f00b fa8b 	bl	800ca64 <strcpy>
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <recognize_commands+0x2b4>)
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001550:	4913      	ldr	r1, [pc, #76]	; (80015a0 <recognize_commands+0x2bc>)
 8001552:	4814      	ldr	r0, [pc, #80]	; (80015a4 <recognize_commands+0x2c0>)
			usart_buffer_length = sprintf(usart_buffer,
 8001554:	221f      	movs	r2, #31
 8001556:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	f003 fc3c 	bl	8004dd6 <HAL_UART_Transmit>
				execution_time_clear(i);
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff fe44 	bl	80011ec <execution_time_clear>
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff fe41 	bl	80011ec <execution_time_clear>
}
 800156a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				execution_time_clear(i);
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff be3c 	b.w	80011ec <execution_time_clear>
 8001574:	080122ab 	.word	0x080122ab
 8001578:	2000d330 	.word	0x2000d330
 800157c:	40020c00 	.word	0x40020c00
 8001580:	080122d6 	.word	0x080122d6
 8001584:	080122cb 	.word	0x080122cb
 8001588:	08012276 	.word	0x08012276
 800158c:	080122a8 	.word	0x080122a8
 8001590:	20000404 	.word	0x20000404
 8001594:	2000b18c 	.word	0x2000b18c
 8001598:	200119c4 	.word	0x200119c4
 800159c:	080123c0 	.word	0x080123c0
 80015a0:	20011990 	.word	0x20011990
 80015a4:	2000d2ec 	.word	0x2000d2ec
 80015a8:	080123e2 	.word	0x080123e2
 80015ac:	080122a4 	.word	0x080122a4
 80015b0:	08012405 	.word	0x08012405
 80015b4:	080122dd 	.word	0x080122dd
 80015b8:	20009148 	.word	0x20009148
 80015bc:	08012433 	.word	0x08012433
 80015c0:	08012496 	.word	0x08012496
 80015c4:	080124a5 	.word	0x080124a5
 80015c8:	080124b0 	.word	0x080124b0
 80015cc:	08012457 	.word	0x08012457
 80015d0:	0801247a 	.word	0x0801247a
 80015d4:	080122c6 	.word	0x080122c6
 80015d8:	080124bb 	.word	0x080124bb

080015dc <SystemClock_Config>:
{
 80015dc:	b500      	push	{lr}
 80015de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e0:	222c      	movs	r2, #44	; 0x2c
 80015e2:	2100      	movs	r1, #0
 80015e4:	a809      	add	r0, sp, #36	; 0x24
 80015e6:	f00a f94b 	bl	800b880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ea:	2214      	movs	r2, #20
 80015ec:	2100      	movs	r1, #0
 80015ee:	a803      	add	r0, sp, #12
 80015f0:	f00a f946 	bl	800b880 <memset>
  __HAL_RCC_PLL_PLLM_CONFIG(10);
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <SystemClock_Config+0x98>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80015fc:	f042 020a 	orr.w	r2, r2, #10
 8001600:	605a      	str	r2, [r3, #4]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001608:	605a      	str	r2, [r3, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2200      	movs	r2, #0
 800160c:	9201      	str	r2, [sp, #4]
 800160e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001610:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001614:	6419      	str	r1, [r3, #64]	; 0x40
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <SystemClock_Config+0x9c>)
 8001622:	9202      	str	r2, [sp, #8]
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800162a:	6019      	str	r1, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001636:	2302      	movs	r3, #2
 8001638:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163a:	2001      	movs	r0, #1
 800163c:	2310      	movs	r3, #16
 800163e:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001642:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001648:	f002 ff1e 	bl	8004488 <HAL_RCC_OscConfig>
 800164c:	4601      	mov	r1, r0
 800164e:	b108      	cbz	r0, 8001654 <SystemClock_Config+0x78>
 8001650:	b672      	cpsid	i
	while (1) {
 8001652:	e7fe      	b.n	8001652 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001656:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165a:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001660:	a803      	add	r0, sp, #12
 8001662:	f003 f8ef 	bl	8004844 <HAL_RCC_ClockConfig>
 8001666:	b108      	cbz	r0, 800166c <SystemClock_Config+0x90>
 8001668:	b672      	cpsid	i
	while (1) {
 800166a:	e7fe      	b.n	800166a <SystemClock_Config+0x8e>
}
 800166c:	b015      	add	sp, #84	; 0x54
 800166e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <preprocessing_init>:
void preprocessing_init(void) {
 800167c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Window_Init(window_func_buffer, FRAME_LEN, WINDOW_HANN) != 0) {
 8001680:	4f32      	ldr	r7, [pc, #200]	; (800174c <preprocessing_init+0xd0>)
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001688:	4638      	mov	r0, r7
 800168a:	f004 f92d 	bl	80058e8 <Window_Init>
 800168e:	b100      	cbz	r0, 8001692 <preprocessing_init+0x16>
		while (1)
 8001690:	e7fe      	b.n	8001690 <preprocessing_init+0x14>
	arm_rfft_fast_init_f32(&rfft, FFT_LEN);
 8001692:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001784 <preprocessing_init+0x108>
	mel_filter.pStartIndices = mel_filter_start_indices;
 8001696:	4c2e      	ldr	r4, [pc, #184]	; (8001750 <preprocessing_init+0xd4>)
 8001698:	9001      	str	r0, [sp, #4]
	arm_rfft_fast_init_f32(&rfft, FFT_LEN);
 800169a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169e:	4640      	mov	r0, r8
 80016a0:	f001 fda2 	bl	80031e8 <arm_rfft_fast_init_f32>
	mel_filter.pStartIndices = mel_filter_start_indices;
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <preprocessing_init+0xd8>)
 80016a6:	6022      	str	r2, [r4, #0]
	mel_filter.pStopIndices = mel_filter_stop_indices;
 80016a8:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <preprocessing_init+0xdc>)
 80016aa:	6062      	str	r2, [r4, #4]
	mel_filter.FMin = 0.0;
 80016ac:	2100      	movs	r1, #0
	mel_filter.pCoefficients = mel_filter_coefs;
 80016ae:	4a2b      	ldr	r2, [pc, #172]	; (800175c <preprocessing_init+0xe0>)
 80016b0:	60a2      	str	r2, [r4, #8]
	mel_filter.FMin = 0.0;
 80016b2:	61e1      	str	r1, [r4, #28]
	mel_filter.FFTLen = FFT_LEN;
 80016b4:	2280      	movs	r2, #128	; 0x80
	mel_filter.FMax = mel_filter.SampRate / 2.0;
 80016b6:	492a      	ldr	r1, [pc, #168]	; (8001760 <preprocessing_init+0xe4>)
 80016b8:	6221      	str	r1, [r4, #32]
	mel_filter.Formula = MEL_SLANEY;
 80016ba:	f04f 0a01 	mov.w	sl, #1
	MelFilterbank_Init(&mel_filter);
 80016be:	4620      	mov	r0, r4
	mel_filter.FFTLen = FFT_LEN;
 80016c0:	f44f 6b00 	mov.w	fp, #2048	; 0x800
	mel_filter.SampRate = SAMPLE_RATE;
 80016c4:	f44f 567a 	mov.w	r6, #16000	; 0x3e80
	mel_filter.FFTLen = FFT_LEN;
 80016c8:	e9c4 2b04 	strd	r2, fp, [r4, #16]
	mel_filter.Mel2F = 1;
 80016cc:	e9c4 aa0a 	strd	sl, sl, [r4, #40]	; 0x28
	mel_filter.SampRate = SAMPLE_RATE;
 80016d0:	61a6      	str	r6, [r4, #24]
	mel_filter.Formula = MEL_SLANEY;
 80016d2:	f884 a024 	strb.w	sl, [r4, #36]	; 0x24
	MelFilterbank_Init(&mel_filter);
 80016d6:	f003 ffad 	bl	8005634 <MelFilterbank_Init>
	if (mel_filter.CoefficientsLength != NUM_MEL_COEFS) {
 80016da:	68e1      	ldr	r1, [r4, #12]
 80016dc:	9b01      	ldr	r3, [sp, #4]
 80016de:	f240 70e4 	movw	r0, #2020	; 0x7e4
 80016e2:	4281      	cmp	r1, r0
 80016e4:	f04f 0280 	mov.w	r2, #128	; 0x80
 80016e8:	d000      	beq.n	80016ec <preprocessing_init+0x70>
		while (1)
 80016ea:	e7fe      	b.n	80016ea <preprocessing_init+0x6e>
	dct.NumFilters = NUM_MFCC;
 80016ec:	4d1d      	ldr	r5, [pc, #116]	; (8001764 <preprocessing_init+0xe8>)
 80016ee:	f04f 0910 	mov.w	r9, #16
	dct.NumInputs = NUM_MELS;
 80016f2:	e9c5 9200 	strd	r9, r2, [r5]
	dct.RemoveDCTZero = 0;
 80016f6:	60eb      	str	r3, [r5, #12]
	dct.Type = DCT_TYPE_II_ORTHO;
 80016f8:	2202      	movs	r2, #2
	dct.pDCTCoefs = dct_coefs_buffer;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <preprocessing_init+0xec>)
	dct.Type = DCT_TYPE_II_ORTHO;
 80016fc:	722a      	strb	r2, [r5, #8]
	if (DCT_Init(&dct) != 0) {
 80016fe:	4628      	mov	r0, r5
	dct.pDCTCoefs = dct_coefs_buffer;
 8001700:	612b      	str	r3, [r5, #16]
	if (DCT_Init(&dct) != 0) {
 8001702:	f003 fbbd 	bl	8004e80 <DCT_Init>
 8001706:	b100      	cbz	r0, 800170a <preprocessing_init+0x8e>
		while (1)
 8001708:	e7fe      	b.n	8001708 <preprocessing_init+0x8c>
	spectrogram.pRfft = &rfft;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <preprocessing_init+0xf0>)
	spectrogram.pScratch = spectrogram_scratch_buffer;
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <preprocessing_init+0xf4>)
 800170e:	619a      	str	r2, [r3, #24]
	mel_spectrogram.SpectrogramConf = &spectrogram;
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <preprocessing_init+0xf8>)
	spectrogram.pRfft = &rfft;
 8001712:	f8c3 8000 	str.w	r8, [r3]
	spectrogram.SampRate = SAMPLE_RATE;
 8001716:	e9c3 7602 	strd	r7, r6, [r3, #8]
	mel_spectrogram.MelFilter = &mel_filter;
 800171a:	e9c2 3400 	strd	r3, r4, [r2]
	spectrogram.Type = SPECTRUM_TYPE_POWER;
 800171e:	f883 a004 	strb.w	sl, [r3, #4]
	spectrogram.FFTLen = FFT_LEN;
 8001722:	e9c3 bb04 	strd	fp, fp, [r3, #16]
	log_mel_spectrogram.MelSpectrogramConf = &mel_spectrogram;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <preprocessing_init+0xfc>)
 8001728:	601a      	str	r2, [r3, #0]
	log_mel_spectrogram.Ref = 1.0;
 800172a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172e:	609a      	str	r2, [r3, #8]
	log_mel_spectrogram.TopdB = HUGE_VALF;
 8001730:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8001734:	60da      	str	r2, [r3, #12]
	mfcc.LogMelConf = &log_mel_spectrogram;
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <preprocessing_init+0x100>)
	log_mel_spectrogram.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 8001738:	7118      	strb	r0, [r3, #4]
	mfcc.pDCT = &dct;
 800173a:	e9c2 3500 	strd	r3, r5, [r2]
	mfcc.pScratch = mfcc_scratch_buffer;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <preprocessing_init+0x104>)
	mfcc.NumMfccCoefs = NUM_MFCC;
 8001740:	f8c2 9008 	str.w	r9, [r2, #8]
	mfcc.pScratch = mfcc_scratch_buffer;
 8001744:	60d3      	str	r3, [r2, #12]
}
 8001746:	b003      	add	sp, #12
 8001748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174c:	200119c8 	.word	0x200119c8
 8001750:	2000d344 	.word	0x2000d344
 8001754:	2000f304 	.word	0x2000f304
 8001758:	2000f504 	.word	0x2000f504
 800175c:	2000d374 	.word	0x2000d374
 8001760:	45fa0000 	.word	0x45fa0000
 8001764:	20009178 	.word	0x20009178
 8001768:	2000918c 	.word	0x2000918c
 800176c:	2000f974 	.word	0x2000f974
 8001770:	2000f990 	.word	0x2000f990
 8001774:	2000f704 	.word	0x2000f704
 8001778:	2000d334 	.word	0x2000d334
 800177c:	2000f70c 	.word	0x2000f70c
 8001780:	2000f75c 	.word	0x2000f75c
 8001784:	2000f95c 	.word	0x2000f95c

08001788 <stop_mode>:
void stop_mode(void) {
 8001788:	b508      	push	{r3, lr}
	HAL_UART_DeInit(&huart2);
 800178a:	4807      	ldr	r0, [pc, #28]	; (80017a8 <stop_mode+0x20>)
 800178c:	f003 fb0a 	bl	8004da4 <HAL_UART_DeInit>
	HAL_SuspendTick();
 8001790:	f001 fdb4 	bl	80032fc <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001794:	2101      	movs	r1, #1
 8001796:	4608      	mov	r0, r1
 8001798:	f002 fe5a 	bl	8004450 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick();
 800179c:	f001 fdb5 	bl	800330a <HAL_ResumeTick>
}
 80017a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_USART2_UART_Init();
 80017a4:	f7ff bd50 	b.w	8001248 <MX_USART2_UART_Init>
 80017a8:	2000d2ec 	.word	0x2000d2ec

080017ac <main>:
{
 80017ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017b0:	f5ad 4da8 	sub.w	sp, sp, #21504	; 0x5400
 80017b4:	b088      	sub	sp, #32
	uint8_t test[20] = {'\0'};
 80017b6:	2400      	movs	r4, #0
 80017b8:	2210      	movs	r2, #16
 80017ba:	4621      	mov	r1, r4
	ai_buffer ai_input[AI_SPEECH_COMMANDS_MODEL_IN_NUM] = AI_SPEECH_COMMANDS_MODEL_IN;
 80017bc:	4dbe      	ldr	r5, [pc, #760]	; (8001ab8 <main+0x30c>)
	uint8_t test[20] = {'\0'};
 80017be:	9406      	str	r4, [sp, #24]
 80017c0:	a807      	add	r0, sp, #28
 80017c2:	ab06      	add	r3, sp, #24
 80017c4:	f00a f85c 	bl	800b880 <memset>
	ai_handle speech_commands_model = AI_HANDLE_NULL;
 80017c8:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
	ai_buffer ai_input[AI_SPEECH_COMMANDS_MODEL_IN_NUM] = AI_SPEECH_COMMANDS_MODEL_IN;
 80017cc:	f5a3 7778 	sub.w	r7, r3, #992	; 0x3e0
 80017d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d2:	46bc      	mov	ip, r7
 80017d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017d8:	e895 0003 	ldmia.w	r5, {r0, r1}
	ai_buffer ai_output[AI_SPEECH_COMMANDS_MODEL_OUT_NUM] = AI_SPEECH_COMMANDS_MODEL_OUT;
 80017dc:	3508      	adds	r5, #8
	ai_buffer ai_input[AI_SPEECH_COMMANDS_MODEL_IN_NUM] = AI_SPEECH_COMMANDS_MODEL_IN;
 80017de:	e88c 0003 	stmia.w	ip, {r0, r1}
	ai_buffer ai_output[AI_SPEECH_COMMANDS_MODEL_OUT_NUM] = AI_SPEECH_COMMANDS_MODEL_OUT;
 80017e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e4:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 80017e8:	46cc      	mov	ip, r9
 80017ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017ee:	e895 0003 	ldmia.w	r5, {r0, r1}
	ai_network_params ai_params =
 80017f2:	4bb2      	ldr	r3, [pc, #712]	; (8001abc <main+0x310>)
	ai_handle speech_commands_model = AI_HANDLE_NULL;
 80017f4:	9401      	str	r4, [sp, #4]
	ai_network_params ai_params =
 80017f6:	ad1c      	add	r5, sp, #112	; 0x70
 80017f8:	f04f 1801 	mov.w	r8, #65537	; 0x10001
 80017fc:	f04f 0a01 	mov.w	sl, #1
 8001800:	e9c5 3800 	strd	r3, r8, [r5]
 8001804:	4bae      	ldr	r3, [pc, #696]	; (8001ac0 <main+0x314>)
 8001806:	60eb      	str	r3, [r5, #12]
	ai_buffer ai_output[AI_SPEECH_COMMANDS_MODEL_OUT_NUM] = AI_SPEECH_COMMANDS_MODEL_OUT;
 8001808:	e88c 0003 	stmia.w	ip, {r0, r1}
	ai_network_params ai_params =
 800180c:	f8a5 a008 	strh.w	sl, [r5, #8]
					AI_NETWORK_PARAMS_INIT(
 8001810:	f004 f9aa 	bl	8005b68 <ai_speech_commands_model_data_weights_get>
	ai_network_params ai_params =
 8001814:	4bab      	ldr	r3, [pc, #684]	; (8001ac4 <main+0x318>)
	ai_input[0].n_batches = 1;
 8001816:	f8a7 a004 	strh.w	sl, [r7, #4]
	ai_network_params ai_params =
 800181a:	e9c5 3806 	strd	r3, r8, [r5, #24]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800181e:	f50d 7840 	add.w	r8, sp, #768	; 0x300
	ai_network_params ai_params =
 8001822:	f243 5320 	movw	r3, #13600	; 0x3520
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001826:	f8c7 8010 	str.w	r8, [r7, #16]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800182a:	af28      	add	r7, sp, #160	; 0xa0
	ai_output[0].n_batches = 1;
 800182c:	f8a9 a004 	strh.w	sl, [r9, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001830:	f8c9 7010 	str.w	r7, [r9, #16]
	ai_network_params ai_params =
 8001834:	626b      	str	r3, [r5, #36]	; 0x24
 8001836:	f50d 53f8 	add.w	r3, sp, #7936	; 0x1f00
 800183a:	e9c5 340a 	strd	r3, r4, [r5, #40]	; 0x28
 800183e:	e9c5 0404 	strd	r0, r4, [r5, #16]
 8001842:	f8a5 a020 	strh.w	sl, [r5, #32]
  HAL_Init();
 8001846:	f001 fd2d 	bl	80032a4 <HAL_Init>
	BSP_LED_Init(LED3);
 800184a:	4650      	mov	r0, sl
 800184c:	f000 fb6a 	bl	8001f24 <BSP_LED_Init>
	BSP_LED_Init(LED4);
 8001850:	4620      	mov	r0, r4
 8001852:	f000 fb67 	bl	8001f24 <BSP_LED_Init>
	BSP_LED_Init(LED5);
 8001856:	2002      	movs	r0, #2
 8001858:	f000 fb64 	bl	8001f24 <BSP_LED_Init>
	BSP_LED_Init(LED6);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 fb61 	bl	8001f24 <BSP_LED_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
	preprocessing_init();
 8001866:	f7ff ff09 	bl	800167c <preprocessing_init>
	execution_time_init();
 800186a:	f7ff fccf 	bl	800120c <execution_time_init>
  SystemClock_Config();
 800186e:	f7ff feb5 	bl	80015dc <SystemClock_Config>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001872:	4651      	mov	r1, sl
 8001874:	4620      	mov	r0, r4
 8001876:	f000 fbaf 	bl	8001fd8 <BSP_PB_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	2214      	movs	r2, #20
 800187c:	4621      	mov	r1, r4
 800187e:	4648      	mov	r0, r9
 8001880:	f009 fffe 	bl	800b880 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	4d90      	ldr	r5, [pc, #576]	; (8001ac8 <main+0x31c>)
 8001886:	9402      	str	r4, [sp, #8]
 8001888:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800188a:	4890      	ldr	r0, [pc, #576]	; (8001acc <main+0x320>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188c:	f042 0204 	orr.w	r2, r2, #4
 8001890:	632a      	str	r2, [r5, #48]	; 0x30
 8001892:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001894:	ab02      	add	r3, sp, #8
 8001896:	f002 0204 	and.w	r2, r2, #4
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	9403      	str	r4, [sp, #12]
 80018a0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018a2:	ea42 020a 	orr.w	r2, r2, sl
 80018a6:	632a      	str	r2, [r5, #48]	; 0x30
 80018a8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018aa:	ab03      	add	r3, sp, #12
 80018ac:	ea02 020a 	and.w	r2, r2, sl
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	9404      	str	r4, [sp, #16]
 80018b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018b8:	f042 0202 	orr.w	r2, r2, #2
 80018bc:	632a      	str	r2, [r5, #48]	; 0x30
 80018be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018c0:	ab04      	add	r3, sp, #16
 80018c2:	f002 0202 	and.w	r2, r2, #2
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	9405      	str	r4, [sp, #20]
 80018cc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018ce:	f042 0208 	orr.w	r2, r2, #8
 80018d2:	632a      	str	r2, [r5, #48]	; 0x30
 80018d4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018d6:	ab05      	add	r3, sp, #20
 80018d8:	f002 0208 	and.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80018de:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80018e2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e4:	681b      	ldr	r3, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80018e6:	f002 f8f9 	bl	8003adc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	e9c9 3401 	strd	r3, r4, [r9, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	4877      	ldr	r0, [pc, #476]	; (8001ad0 <main+0x324>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f4:	f8c9 a000 	str.w	sl, [r9]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	4649      	mov	r1, r9
 80018fa:	f001 ff7f 	bl	80037fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80018fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	e9c9 3a00 	strd	r3, sl, [r9]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	4871      	ldr	r0, [pc, #452]	; (8001acc <main+0x320>)
 8001908:	4649      	mov	r1, r9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	e9c9 4402 	strd	r4, r4, [r9, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190e:	f001 ff75 	bl	80037fc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001912:	4622      	mov	r2, r4
 8001914:	4621      	mov	r1, r4
 8001916:	2006      	movs	r0, #6
 8001918:	f001 fd10 	bl	800333c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800191c:	2006      	movs	r0, #6
 800191e:	f001 fd3f 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001922:	f8c9 4000 	str.w	r4, [r9]
 8001926:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800192c:	632b      	str	r3, [r5, #48]	; 0x30
 800192e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	f8c9 3000 	str.w	r3, [r9]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001938:	4622      	mov	r2, r4
 800193a:	4621      	mov	r1, r4
 800193c:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	f8d9 3000 	ldr.w	r3, [r9]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001942:	f001 fcfb 	bl	800333c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001946:	200e      	movs	r0, #14
 8001948:	f001 fd2a 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  hi2s2.Instance = SPI2;
 800194c:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <main+0x328>)
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800194e:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8001b10 <main+0x364>
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001952:	6084      	str	r4, [r0, #8]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001954:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001958:	e9c0 c300 	strd	ip, r3, [r0]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800195c:	2303      	movs	r3, #3
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800195e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001962:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
	ai_handle speech_commands_model = AI_HANDLE_NULL;
 8001966:	ae01      	add	r6, sp, #4
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001968:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800196c:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001970:	f002 f99e 	bl	8003cb0 <HAL_I2S_Init>
 8001974:	b108      	cbz	r0, 800197a <main+0x1ce>
 8001976:	b672      	cpsid	i
	while (1) {
 8001978:	e7fe      	b.n	8001978 <main+0x1cc>
  hcrc.Instance = CRC;
 800197a:	4d57      	ldr	r5, [pc, #348]	; (8001ad8 <main+0x32c>)
 800197c:	4b57      	ldr	r3, [pc, #348]	; (8001adc <main+0x330>)
 800197e:	602b      	str	r3, [r5, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001980:	4628      	mov	r0, r5
 8001982:	f001 fd2f 	bl	80033e4 <HAL_CRC_Init>
 8001986:	4604      	mov	r4, r0
 8001988:	b108      	cbz	r0, 800198e <main+0x1e2>
 800198a:	b672      	cpsid	i
	while (1) {
 800198c:	e7fe      	b.n	800198c <main+0x1e0>
  __HAL_CRC_DR_RESET(&hcrc);
 800198e:	682a      	ldr	r2, [r5, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001990:	4d53      	ldr	r5, [pc, #332]	; (8001ae0 <main+0x334>)
  __HAL_CRC_DR_RESET(&hcrc);
 8001992:	6893      	ldr	r3, [r2, #8]
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6093      	str	r3, [r2, #8]
  MX_PDM2PCM_Init();
 800199a:	f003 ffe1 	bl	8005960 <MX_PDM2PCM_Init>
  MX_USART2_UART_Init();
 800199e:	f7ff fc53 	bl	8001248 <MX_USART2_UART_Init>
  hi2c1.Instance = I2C1;
 80019a2:	4850      	ldr	r0, [pc, #320]	; (8001ae4 <main+0x338>)
  hi2c1.Init.ClockSpeed = 100000;
 80019a4:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <main+0x33c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a6:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 80019a8:	e9c0 5300 	strd	r5, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b0:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 80019b4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b8:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019bc:	f002 f8aa 	bl	8003b14 <HAL_I2C_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b108      	cbz	r0, 80019c8 <main+0x21c>
 80019c4:	b672      	cpsid	i
	while (1) {
 80019c6:	e7fe      	b.n	80019c6 <main+0x21a>
  hspi1.Instance = SPI1;
 80019c8:	4848      	ldr	r0, [pc, #288]	; (8001aec <main+0x340>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ca:	4949      	ldr	r1, [pc, #292]	; (8001af0 <main+0x344>)
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019cc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d2:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019de:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e2:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 80019ea:	230a      	movs	r3, #10
 80019ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ee:	f003 f8bb 	bl	8004b68 <HAL_SPI_Init>
 80019f2:	4601      	mov	r1, r0
 80019f4:	b108      	cbz	r0, 80019fa <main+0x24e>
 80019f6:	b672      	cpsid	i
	while (1) {
 80019f8:	e7fe      	b.n	80019f8 <main+0x24c>
	ai_err = ai_speech_commands_model_create(&speech_commands_model,
 80019fa:	a801      	add	r0, sp, #4
 80019fc:	f003 ffd0 	bl	80059a0 <ai_speech_commands_model_create>
	if (ai_err.type != AI_ERROR_NONE) {
 8001a00:	b2c0      	uxtb	r0, r0
 8001a02:	4c3c      	ldr	r4, [pc, #240]	; (8001af4 <main+0x348>)
 8001a04:	b158      	cbz	r0, 8001a1e <main+0x272>
		usart_buffer_length = sprintf(usart_buffer,
 8001a06:	493c      	ldr	r1, [pc, #240]	; (8001af8 <main+0x34c>)
 8001a08:	483c      	ldr	r0, [pc, #240]	; (8001afc <main+0x350>)
 8001a0a:	f00b f82b 	bl	800ca64 <strcpy>
 8001a0e:	2225      	movs	r2, #37	; 0x25
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 8001a10:	493a      	ldr	r1, [pc, #232]	; (8001afc <main+0x350>)
 8001a12:	483b      	ldr	r0, [pc, #236]	; (8001b00 <main+0x354>)
		usart_buffer_length = sprintf(usart_buffer,
 8001a14:	6022      	str	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	f003 f9dd 	bl	8004dd6 <HAL_UART_Transmit>
		while (1)
 8001a1c:	e7fe      	b.n	8001a1c <main+0x270>
	if (!ai_speech_commands_model_init(speech_commands_model, &ai_params)) {
 8001a1e:	6830      	ldr	r0, [r6, #0]
 8001a20:	f1a7 0130 	sub.w	r1, r7, #48	; 0x30
 8001a24:	f003 ffca 	bl	80059bc <ai_speech_commands_model_init>
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d073      	beq.n	8001b14 <main+0x368>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001a2c:	4e27      	ldr	r6, [pc, #156]	; (8001acc <main+0x320>)
		stop_mode();
 8001a2e:	f7ff feab 	bl	8001788 <stop_mode>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a36:	4630      	mov	r0, r6
 8001a38:	f002 f855 	bl	8003ae6 <HAL_GPIO_TogglePin>
		execution_time_start(0);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fbaf 	bl	80011a0 <execution_time_start>
		audio_record();
 8001a42:	f7ff fae9 	bl	8001018 <audio_record>
		execution_time_stop(0);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff fbb6 	bl	80011b8 <execution_time_stop>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a50:	4630      	mov	r0, r6
 8001a52:	f002 f848 	bl	8003ae6 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Hello world\n", strlen("Hello world\n"), 50);
 8001a56:	2332      	movs	r3, #50	; 0x32
 8001a58:	492a      	ldr	r1, [pc, #168]	; (8001b04 <main+0x358>)
 8001a5a:	4829      	ldr	r0, [pc, #164]	; (8001b00 <main+0x354>)
 8001a5c:	220c      	movs	r2, #12
 8001a5e:	f003 f9ba 	bl	8004dd6 <HAL_UART_Transmit>
		execution_time_start(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff fb9c 	bl	80011a0 <execution_time_start>
		preprocess_audio((int16_t*) &pcm_buffer[0], (ai_float*) &in_data[0],
 8001a68:	f643 72f0 	movw	r2, #16368	; 0x3ff0
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	4826      	ldr	r0, [pc, #152]	; (8001b08 <main+0x35c>)
 8001a70:	f7ff fc04 	bl	800127c <preprocess_audio>
		execution_time_stop(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f7ff fb9f 	bl	80011b8 <execution_time_stop>
		execution_time_start(2);
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f7ff fb90 	bl	80011a0 <execution_time_start>
		nbatch = ai_speech_commands_model_run(speech_commands_model,
 8001a80:	f1a7 0248 	sub.w	r2, r7, #72	; 0x48
 8001a84:	f1a7 0160 	sub.w	r1, r7, #96	; 0x60
 8001a88:	9801      	ldr	r0, [sp, #4]
 8001a8a:	ab01      	add	r3, sp, #4
 8001a8c:	f004 f86a 	bl	8005b64 <ai_speech_commands_model_run>
 8001a90:	4682      	mov	sl, r0
		execution_time_stop(2);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7ff fb90 	bl	80011b8 <execution_time_stop>
		if (nbatch != 1) {
 8001a98:	f1ba 0f01 	cmp.w	sl, #1
 8001a9c:	d046      	beq.n	8001b2c <main+0x380>
			usart_buffer_length = sprintf(usart_buffer,
 8001a9e:	491b      	ldr	r1, [pc, #108]	; (8001b0c <main+0x360>)
 8001aa0:	4816      	ldr	r0, [pc, #88]	; (8001afc <main+0x350>)
 8001aa2:	f00a ffdf 	bl	800ca64 <strcpy>
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	6022      	str	r2, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001aaa:	2364      	movs	r3, #100	; 0x64
					HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001aac:	4913      	ldr	r1, [pc, #76]	; (8001afc <main+0x350>)
 8001aae:	4814      	ldr	r0, [pc, #80]	; (8001b00 <main+0x354>)
 8001ab0:	f003 f991 	bl	8004dd6 <HAL_UART_Transmit>
 8001ab4:	e7bb      	b.n	8001a2e <main+0x282>
 8001ab6:	bf00      	nop
 8001ab8:	08012180 	.word	0x08012180
 8001abc:	40040440 	.word	0x40040440
 8001ac0:	0002b2f8 	.word	0x0002b2f8
 8001ac4:	00040440 	.word	0x00040440
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	2000d24c 	.word	0x2000d24c
 8001ad8:	2000d190 	.word	0x2000d190
 8001adc:	40023000 	.word	0x40023000
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	2000d1f8 	.word	0x2000d1f8
 8001ae8:	000186a0 	.word	0x000186a0
 8001aec:	2000d294 	.word	0x2000d294
 8001af0:	40013000 	.word	0x40013000
 8001af4:	200119c4 	.word	0x200119c4
 8001af8:	080124db 	.word	0x080124db
 8001afc:	20011990 	.word	0x20011990
 8001b00:	2000d2ec 	.word	0x2000d2ec
 8001b04:	08012522 	.word	0x08012522
 8001b08:	20001042 	.word	0x20001042
 8001b0c:	0801252f 	.word	0x0801252f
 8001b10:	40003800 	.word	0x40003800
		usart_buffer_length = sprintf(usart_buffer,
 8001b14:	4922      	ldr	r1, [pc, #136]	; (8001ba0 <main+0x3f4>)
 8001b16:	4823      	ldr	r0, [pc, #140]	; (8001ba4 <main+0x3f8>)
 8001b18:	f00a ffa4 	bl	800ca64 <strcpy>
 8001b1c:	2220      	movs	r2, #32
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 8001b1e:	4921      	ldr	r1, [pc, #132]	; (8001ba4 <main+0x3f8>)
 8001b20:	4821      	ldr	r0, [pc, #132]	; (8001ba8 <main+0x3fc>)
		usart_buffer_length = sprintf(usart_buffer,
 8001b22:	6022      	str	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 8001b24:	2364      	movs	r3, #100	; 0x64
 8001b26:	f003 f956 	bl	8004dd6 <HAL_UART_Transmit>
		while (1)
 8001b2a:	e7fe      	b.n	8001b2a <main+0x37e>
			uint8_t idx = argmax(out_data, AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE);
 8001b2c:	2126      	movs	r1, #38	; 0x26
 8001b2e:	4638      	mov	r0, r7
 8001b30:	f7ff fafa 	bl	8001128 <argmax>
			sprintf(test, "value of %d \n\r", idx);							//sometest
 8001b34:	491d      	ldr	r1, [pc, #116]	; (8001bac <main+0x400>)
			print_words = 1;
 8001b36:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001bb8 <main+0x40c>
			uint8_t idx = argmax(out_data, AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE);
 8001b3a:	4605      	mov	r5, r0
			sprintf(test, "value of %d \n\r", idx);							//sometest
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	a806      	add	r0, sp, #24
 8001b40:	f00a ff70 	bl	800ca24 <siprintf>
			HAL_UART_Transmit(&huart2, test, sizeof(test), 50);				//sometest
 8001b44:	2332      	movs	r3, #50	; 0x32
 8001b46:	2214      	movs	r2, #20
 8001b48:	a906      	add	r1, sp, #24
 8001b4a:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <main+0x3fc>)
 8001b4c:	f003 f943 	bl	8004dd6 <HAL_UART_Transmit>
			char * word = get_word(idx);										//ori: char * word
 8001b50:	4628      	mov	r0, r5
 8001b52:	f7ff fb0f 	bl	8001174 <get_word>
 8001b56:	4605      	mov	r5, r0
			print_words = 1;
 8001b58:	f889 a000 	strb.w	sl, [r9]
			recognize_commands(word);
 8001b5c:	f7ff fbc2 	bl	80012e4 <recognize_commands>
			usart_buffer_length = sprintf(usart_buffer, "%s\r\n", word);
 8001b60:	4913      	ldr	r1, [pc, #76]	; (8001bb0 <main+0x404>)
 8001b62:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <main+0x3f8>)
 8001b64:	462a      	mov	r2, r5
 8001b66:	f00a ff5d 	bl	800ca24 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001b6a:	2364      	movs	r3, #100	; 0x64
			usart_buffer_length = sprintf(usart_buffer, "%s\r\n", word);
 8001b6c:	6020      	str	r0, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001b6e:	b282      	uxth	r2, r0
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <main+0x3f8>)
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <main+0x3fc>)
 8001b74:	f003 f92f 	bl	8004dd6 <HAL_UART_Transmit>
			if (display_words_enabled) {
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <main+0x408>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f43f af56 	beq.w	8001a2e <main+0x282>
				if (print_words) {
 8001b82:	f899 3000 	ldrb.w	r3, [r9]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f43f af51 	beq.w	8001a2e <main+0x282>
					usart_buffer_length = sprintf(usart_buffer, "%s\r\n", word);
 8001b8c:	462a      	mov	r2, r5
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <main+0x404>)
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <main+0x3f8>)
 8001b92:	f00a ff47 	bl	800ca24 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001b96:	2364      	movs	r3, #100	; 0x64
					usart_buffer_length = sprintf(usart_buffer, "%s\r\n", word);
 8001b98:	6020      	str	r0, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001b9a:	b282      	uxth	r2, r0
 8001b9c:	e786      	b.n	8001aac <main+0x300>
 8001b9e:	bf00      	nop
 8001ba0:	08012501 	.word	0x08012501
 8001ba4:	20011990 	.word	0x20011990
 8001ba8:	2000d2ec 	.word	0x2000d2ec
 8001bac:	08012550 	.word	0x08012550
 8001bb0:	0801255f 	.word	0x0801255f
 8001bb4:	2000b18c 	.word	0x2000b18c
 8001bb8:	20000404 	.word	0x20000404

08001bbc <Error_Handler>:
 8001bbc:	b672      	cpsid	i
	while (1) {
 8001bbe:	e7fe      	b.n	8001bbe <Error_Handler+0x2>

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_MspInit+0x34>)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	9100      	str	r1, [sp, #0]
 8001bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
 8001bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bd2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bd6:	9200      	str	r2, [sp, #0]
 8001bd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	9101      	str	r1, [sp, #4]
 8001bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bee:	b002      	add	sp, #8
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001bf8:	6802      	ldr	r2, [r0, #0]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_CRC_MspInit+0x28>)
 8001bfc:	429a      	cmp	r2, r3
{
 8001bfe:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001c00:	d10b      	bne.n	8001c1a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_CRC_MspInit+0x2c>)
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c1a:	b002      	add	sp, #8
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023000 	.word	0x40023000
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c28:	b530      	push	{r4, r5, lr}
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	2214      	movs	r2, #20
 8001c30:	2100      	movs	r1, #0
 8001c32:	a803      	add	r0, sp, #12
 8001c34:	f009 fe24 	bl	800b880 <memset>
  if(hi2c->Instance==I2C1)
 8001c38:	6822      	ldr	r2, [r4, #0]
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_I2C_MspInit+0x60>)
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d121      	bne.n	8001c84 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4c12      	ldr	r4, [pc, #72]	; (8001c8c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	4813      	ldr	r0, [pc, #76]	; (8001c90 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	2500      	movs	r5, #0
 8001c46:	9501      	str	r5, [sp, #4]
 8001c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8001c50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5a:	22c0      	movs	r2, #192	; 0xc0
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c62:	2103      	movs	r1, #3
 8001c64:	2304      	movs	r3, #4
 8001c66:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	a903      	add	r1, sp, #12
 8001c6c:	f001 fdc6 	bl	80037fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c70:	9502      	str	r5, [sp, #8]
 8001c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c78:	6423      	str	r3, [r4, #64]	; 0x40
 8001c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c84:	b009      	add	sp, #36	; 0x24
 8001c86:	bd30      	pop	{r4, r5, pc}
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020400 	.word	0x40020400

08001c94 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c96:	b08d      	sub	sp, #52	; 0x34
 8001c98:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	2214      	movs	r2, #20
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	a807      	add	r0, sp, #28
 8001ca0:	f009 fdee 	bl	800b880 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	a803      	add	r0, sp, #12
 8001caa:	f009 fde9 	bl	800b880 <memset>
  if(hi2s->Instance==SPI2)
 8001cae:	6832      	ldr	r2, [r6, #0]
 8001cb0:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <HAL_I2S_MspInit+0xe8>)
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d160      	bne.n	8001d78 <HAL_I2S_MspInit+0xe4>

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	23c8      	movs	r3, #200	; 0xc8
 8001cba:	e9cd 0303 	strd	r0, r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8001cbe:	2305      	movs	r3, #5
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc0:	a803      	add	r0, sp, #12
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8001cc2:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc4:	f002 fe7a 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 8001cc8:	b108      	cbz	r0, 8001cce <HAL_I2S_MspInit+0x3a>
    {
      Error_Handler();
 8001cca:	f7ff ff77 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_I2S_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	482c      	ldr	r0, [pc, #176]	; (8001d84 <HAL_I2S_MspInit+0xf0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	9500      	str	r5, [sp, #0]
 8001cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ce4:	9200      	str	r2, [sp, #0]
 8001ce6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	9501      	str	r5, [sp, #4]
 8001cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cec:	f042 0204 	orr.w	r2, r2, #4
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf4:	f002 0204 	and.w	r2, r2, #4
 8001cf8:	9201      	str	r2, [sp, #4]
 8001cfa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	9502      	str	r5, [sp, #8]
 8001cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d00:	f042 0202 	orr.w	r2, r2, #2
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0e:	2405      	movs	r4, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d12:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2308      	movs	r3, #8
 8001d16:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d18:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f001 fd6b 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	4817      	ldr	r0, [pc, #92]	; (8001d88 <HAL_I2S_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	a907      	add	r1, sp, #28

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001d30:	4c16      	ldr	r4, [pc, #88]	; (8001d8c <HAL_I2S_MspInit+0xf8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f001 fd5f 	bl	80037fc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_I2S_MspInit+0xfc>)
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001d44:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d58:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d5c:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d62:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d66:	e9c4 3508 	strd	r3, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d6a:	f001 fb61 	bl	8003430 <HAL_DMA_Init>
 8001d6e:	b108      	cbz	r0, 8001d74 <HAL_I2S_MspInit+0xe0>
    {
      Error_Handler();
 8001d70:	f7ff ff24 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001d74:	63f4      	str	r4, [r6, #60]	; 0x3c
 8001d76:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d78:	b00d      	add	sp, #52	; 0x34
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7c:	40003800 	.word	0x40003800
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	2000d198 	.word	0x2000d198
 8001d90:	40026058 	.word	0x40026058

08001d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d94:	b510      	push	{r4, lr}
 8001d96:	4604      	mov	r4, r0
 8001d98:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	2214      	movs	r2, #20
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	a803      	add	r0, sp, #12
 8001da0:	f009 fd6e 	bl	800b880 <memset>
  if(hspi->Instance==SPI1)
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_SPI_MspInit+0x64>)
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d122      	bne.n	8001df2 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dac:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001db0:	2100      	movs	r1, #0
 8001db2:	9101      	str	r1, [sp, #4]
 8001db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	4811      	ldr	r0, [pc, #68]	; (8001dfc <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
 8001dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dc0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001dc4:	9201      	str	r2, [sp, #4]
 8001dc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	9102      	str	r1, [sp, #8]
 8001dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	22e0      	movs	r2, #224	; 0xe0
 8001dde:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de0:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de6:	2305      	movs	r3, #5
 8001de8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	a903      	add	r1, sp, #12
 8001dee:	f001 fd05 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001df2:	b008      	add	sp, #32
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	bf00      	nop
 8001df8:	40013000 	.word	0x40013000
 8001dfc:	40020000 	.word	0x40020000

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b510      	push	{r4, lr}
 8001e02:	4604      	mov	r4, r0
 8001e04:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	2214      	movs	r2, #20
 8001e08:	2100      	movs	r1, #0
 8001e0a:	a803      	add	r0, sp, #12
 8001e0c:	f009 fd38 	bl	800b880 <memset>
  if(huart->Instance==USART2)
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_UART_MspInit+0x64>)
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d122      	bne.n	8001e5e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e18:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	9101      	str	r1, [sp, #4]
 8001e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	4811      	ldr	r0, [pc, #68]	; (8001e68 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
 8001e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	9102      	str	r1, [sp, #8]
 8001e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	220c      	movs	r2, #12
 8001e4a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4c:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e52:	2307      	movs	r3, #7
 8001e54:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	a903      	add	r1, sp, #12
 8001e5a:	f001 fccf 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e5e:	b008      	add	sp, #32
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	bf00      	nop
 8001e64:	40004400 	.word	0x40004400
 8001e68:	40020000 	.word	0x40020000

08001e6c <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8001e6c:	6802      	ldr	r2, [r0, #0]
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_UART_MspDeInit+0x1c>)
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d108      	bne.n	8001e86 <HAL_UART_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_UART_MspDeInit+0x20>)

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <HAL_UART_MspDeInit+0x24>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8001e78:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001e80:	210c      	movs	r1, #12
 8001e82:	f001 bd95 	b.w	80039b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001e86:	4770      	bx	lr
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000

08001e94 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <NMI_Handler>

08001e96 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler>

08001e98 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler>

08001e9a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <BusFault_Handler>

08001e9c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler>

08001e9e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:
 8001ea0:	4770      	bx	lr

08001ea2 <PendSV_Handler>:
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f001 ba18 	b.w	80032d8 <HAL_IncTick>

08001ea8 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f001 be27 	b.w	8003afc <HAL_GPIO_EXTI_IRQHandler>
	...

08001eb0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001eb0:	4801      	ldr	r0, [pc, #4]	; (8001eb8 <DMA1_Stream3_IRQHandler+0x8>)
 8001eb2:	f001 bbe5 	b.w	8003680 <HAL_DMA_IRQHandler>
 8001eb6:	bf00      	nop
 8001eb8:	2000d198 	.word	0x2000d198

08001ebc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <SystemInit+0x10>)
 8001ebe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ec2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001efa:	f7ff ffdf 	bl	8001ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f009 fc85 	bl	800b80c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff fc53 	bl	80017ac <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	2000101c 	.word	0x2000101c
  ldr r2, =_sidata
 8001f14:	0805b408 	.word	0x0805b408
  ldr r2, =_sbss
 8001f18:	2000101c 	.word	0x2000101c
  ldr r4, =_ebss
 8001f1c:	20013c38 	.word	0x20013c38

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001f24:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f26:	4604      	mov	r4, r0
{
 8001f28:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f2a:	bb08      	cbnz	r0, 8001f70 <BSP_LED_Init+0x4c>
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <BSP_LED_Init+0xa8>)
 8001f2e:	9001      	str	r0, [sp, #4]
 8001f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <BSP_LED_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f44:	4d23      	ldr	r5, [pc, #140]	; (8001fd4 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001f46:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f4a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001f4e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f52:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f56:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f5c:	f001 fc4e 	bl	80037fc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001f60:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001f64:	2200      	movs	r2, #0
 8001f66:	4631      	mov	r1, r6
 8001f68:	f001 fdb8 	bl	8003adc <HAL_GPIO_WritePin>
}
 8001f6c:	b00a      	add	sp, #40	; 0x28
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f70:	2801      	cmp	r0, #1
 8001f72:	d10c      	bne.n	8001f8e <BSP_LED_Init+0x6a>
 8001f74:	2300      	movs	r3, #0
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <BSP_LED_Init+0xa8>)
 8001f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7c:	f042 0208 	orr.w	r2, r2, #8
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	9b02      	ldr	r3, [sp, #8]
 8001f8c:	e7d9      	b.n	8001f42 <BSP_LED_Init+0x1e>
 8001f8e:	2802      	cmp	r0, #2
 8001f90:	d10c      	bne.n	8001fac <BSP_LED_Init+0x88>
 8001f92:	2300      	movs	r3, #0
 8001f94:	9303      	str	r3, [sp, #12]
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <BSP_LED_Init+0xa8>)
 8001f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9a:	f042 0208 	orr.w	r2, r2, #8
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	9303      	str	r3, [sp, #12]
 8001fa8:	9b03      	ldr	r3, [sp, #12]
 8001faa:	e7ca      	b.n	8001f42 <BSP_LED_Init+0x1e>
 8001fac:	2803      	cmp	r0, #3
 8001fae:	d1c8      	bne.n	8001f42 <BSP_LED_Init+0x1e>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9304      	str	r3, [sp, #16]
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <BSP_LED_Init+0xa8>)
 8001fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb8:	f042 0208 	orr.w	r2, r2, #8
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	9304      	str	r3, [sp, #16]
 8001fc6:	9b04      	ldr	r3, [sp, #16]
 8001fc8:	e7bb      	b.n	8001f42 <BSP_LED_Init+0x1e>
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	0801257c 	.word	0x0801257c
 8001fd4:	20000410 	.word	0x20000410

08001fd8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Mode)
{
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001fdc:	b950      	cbnz	r0, 8001ff4 <BSP_PB_Init+0x1c>
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <BSP_PB_Init+0x6c>)
 8001fe0:	9000      	str	r0, [sp, #0]
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	9b00      	ldr	r3, [sp, #0]
  
  if (Mode == BUTTON_MODE_GPIO)
 8001ff4:	b969      	cbnz	r1, 8002012 <BSP_PB_Init+0x3a>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001ff6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff8:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	9304      	str	r3, [sp, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002004:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002008:	a901      	add	r1, sp, #4
 800200a:	f001 fbf7 	bl	80037fc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 800200e:	b006      	add	sp, #24
 8002010:	bd10      	pop	{r4, pc}
  if (Mode == BUTTON_MODE_EXTI)
 8002012:	2901      	cmp	r1, #1
 8002014:	d1fb      	bne.n	800200e <BSP_PB_Init+0x36>
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002016:	2400      	movs	r4, #0
 8002018:	2302      	movs	r3, #2
 800201a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800201e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002022:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002026:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002028:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800202c:	a901      	add	r1, sp, #4
 800202e:	f001 fbe5 	bl	80037fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8002032:	4622      	mov	r2, r4
 8002034:	210f      	movs	r1, #15
 8002036:	2006      	movs	r0, #6
 8002038:	f001 f980 	bl	800333c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800203c:	2006      	movs	r0, #6
 800203e:	f001 f9af 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 8002042:	e7e4      	b.n	800200e <BSP_PB_Init+0x36>
 8002044:	40023800 	.word	0x40023800
 8002048:	2000040c 	.word	0x2000040c

0800204c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
}
 800204c:	4770      	bx	lr
	...

08002050 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002050:	b508      	push	{r3, lr}
	if (hi2s->Instance == I2S3) {
 8002052:	6802      	ldr	r2, [r0, #0]
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <HAL_I2S_TxCpltCallback+0x10>)
 8002056:	429a      	cmp	r2, r3
 8002058:	d101      	bne.n	800205e <HAL_I2S_TxCpltCallback+0xe>
		BSP_AUDIO_OUT_TransferComplete_CallBack();
 800205a:	f7ff fff7 	bl	800204c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800205e:	bd08      	pop	{r3, pc}
 8002060:	40003c00 	.word	0x40003c00

08002064 <BSP_AUDIO_OUT_Error_CallBack>:
 8002064:	4770      	bx	lr
	...

08002068 <BSP_AUDIO_IN_Record>:
 * @brief  Starts audio recording.
 * @param  pbuf: Main buffer pointer for the recorded data storing
 * @param  size: Current size of the recorded buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Record(uint16_t *pbuf, uint32_t size) {
 8002068:	b508      	push	{r3, lr}
	uint32_t ret = AUDIO_ERROR;

	/* Start the process receive DMA */
	HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 800206a:	b28a      	uxth	r2, r1
 800206c:	4601      	mov	r1, r0
 800206e:	4802      	ldr	r0, [pc, #8]	; (8002078 <BSP_AUDIO_IN_Record+0x10>)
 8002070:	f001 feb8 	bl	8003de4 <HAL_I2S_Receive_DMA>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;

	return ret;
}
 8002074:	2000      	movs	r0, #0
 8002076:	bd08      	pop	{r3, pc}
 8002078:	20013a6c 	.word	0x20013a6c

0800207c <BSP_AUDIO_IN_Stop>:

/**
 * @brief  Stops audio recording.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Stop(void) {
 800207c:	b508      	push	{r3, lr}
	uint32_t ret = AUDIO_ERROR;

	/* Call the Media layer pause function */
	HAL_I2S_DMAStop(&hAudioInI2s);
 800207e:	4802      	ldr	r0, [pc, #8]	; (8002088 <BSP_AUDIO_IN_Stop+0xc>)
 8002080:	f001 ff20 	bl	8003ec4 <HAL_I2S_DMAStop>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;

	return ret;
}
 8002084:	2000      	movs	r0, #0
 8002086:	bd08      	pop	{r3, pc}
 8002088:	20013a6c 	.word	0x20013a6c

0800208c <BSP_AUDIO_IN_PDMToPCM>:
 * @brief  Converts audio format from PDM to PCM.
 * @param  PDMBuf: Pointer to data PDM buffer
 * @param  PCMBuf: Pointer to data PCM buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf) {
 800208c:	b530      	push	{r4, r5, lr}
 800208e:	b0a1      	sub	sp, #132	; 0x84
 8002090:	466c      	mov	r4, sp
 8002092:	1e82      	subs	r2, r0, #2
 8002094:	f100 037e 	add.w	r3, r0, #126	; 0x7e
 8002098:	4620      	mov	r0, r4
	uint16_t AppPDM[PDM_BUFFER_SIZE / 2];
	uint32_t index = 0;

	/* PDM Demux */
	for (index = 0; index < PDM_BUFFER_SIZE / 2; index++) {
		AppPDM[index] = HTONS(PDMBuf[index]);
 800209a:	f832 5f02 	ldrh.w	r5, [r2, #2]!
 800209e:	ba6d      	rev16	r5, r5
	for (index = 0; index < PDM_BUFFER_SIZE / 2; index++) {
 80020a0:	429a      	cmp	r2, r3
		AppPDM[index] = HTONS(PDMBuf[index]);
 80020a2:	f824 5b02 	strh.w	r5, [r4], #2
	for (index = 0; index < PDM_BUFFER_SIZE / 2; index++) {
 80020a6:	d1f8      	bne.n	800209a <BSP_AUDIO_IN_PDMToPCM+0xe>
	}

	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
		/* PDM to PCM filter */
		PDM_Filter((uint8_t*) &AppPDM[index], (uint16_t*) &(PCMBuf[index]),
 80020a8:	4a02      	ldr	r2, [pc, #8]	; (80020b4 <BSP_AUDIO_IN_PDMToPCM+0x28>)
 80020aa:	f005 fc2d 	bl	8007908 <PDM_Filter>
		PCMBuf[(index << 1) + 1] = PCMBuf[index << 1];
	}*/

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
}
 80020ae:	2000      	movs	r0, #0
 80020b0:	b021      	add	sp, #132	; 0x84
 80020b2:	bd30      	pop	{r4, r5, pc}
 80020b4:	200139d4 	.word	0x200139d4

080020b8 <BSP_AUDIO_IN_ClockConfig>:
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 * @note   This API is called by BSP_AUDIO_IN_Init()
 *         Being __weak it can be overwritten by the application
 */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s,
		uint32_t AudioFreq, void *Params) {
 80020b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80020ba:	460c      	mov	r4, r1
	RCC_PeriphCLKInitTypeDef rccclkinit;

	/*Enable PLLI2S clock*/
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80020bc:	4668      	mov	r0, sp
 80020be:	f002 fd15 	bl	8004aec <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	if ((AudioFreq & 0x7) == 0) {
 80020c2:	2301      	movs	r3, #1
 80020c4:	f014 0f07 	tst.w	r4, #7
		/* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
		/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
		/* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80020c8:	9300      	str	r3, [sp, #0]
		rccclkinit.PLLI2S.PLLI2SN = 192;
 80020ca:	bf0b      	itete	eq
 80020cc:	23c0      	moveq	r3, #192	; 0xc0
	} else {
		/* Other Frequency (11.025/22.500/44.100) */
		/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
		/* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
		rccclkinit.PLLI2S.PLLI2SN = 290;
 80020ce:	f44f 7391 	movne.w	r3, #290	; 0x122
		rccclkinit.PLLI2S.PLLI2SN = 192;
 80020d2:	9301      	streq	r3, [sp, #4]
		rccclkinit.PLLI2S.PLLI2SN = 290;
 80020d4:	9301      	strne	r3, [sp, #4]
		rccclkinit.PLLI2S.PLLI2SR = 6;
 80020d6:	bf0c      	ite	eq
 80020d8:	2306      	moveq	r3, #6
		rccclkinit.PLLI2S.PLLI2SR = 2;
 80020da:	2302      	movne	r3, #2
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80020dc:	4668      	mov	r0, sp
		rccclkinit.PLLI2S.PLLI2SR = 2;
 80020de:	9302      	str	r3, [sp, #8]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80020e0:	f002 fc6c 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
	}
}
 80020e4:	b004      	add	sp, #16
 80020e6:	bd10      	pop	{r4, pc}

080020e8 <BSP_AUDIO_IN_MspInit>:
/**
 * @brief  BSP AUDIO IN MSP Init.
 * @param  hi2s: I2S handle
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 80020e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ec:	b08a      	sub	sp, #40	; 0x28
	static DMA_HandleTypeDef hdma_i2sRx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the I2S2 peripheral clock */
	I2S2_CLK_ENABLE();
 80020ee:	4c38      	ldr	r4, [pc, #224]	; (80021d0 <BSP_AUDIO_IN_MspInit+0xe8>)
 80020f0:	2500      	movs	r5, #0
 80020f2:	9501      	str	r5, [sp, #4]
 80020f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fa:	6423      	str	r3, [r4, #64]	; 0x40
 80020fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	9b01      	ldr	r3, [sp, #4]

	/* Enable I2S GPIO clocks */
	I2S2_SCK_GPIO_CLK_ENABLE();
 8002106:	9502      	str	r5, [sp, #8]
 8002108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	6323      	str	r3, [r4, #48]	; 0x30
 8002110:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	9b02      	ldr	r3, [sp, #8]
	I2S2_MOSI_GPIO_CLK_ENABLE();
 800211a:	9503      	str	r5, [sp, #12]
 800211c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6323      	str	r3, [r4, #48]	; 0x30
 8002124:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	9303      	str	r3, [sp, #12]
 800212c:	9b03      	ldr	r3, [sp, #12]
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 800212e:	4606      	mov	r6, r0

	/* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;

	GPIO_InitStruct.Pin = I2S2_SCK_PIN;
	GPIO_InitStruct.Alternate = I2S2_SCK_AF;
	HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002132:	4828      	ldr	r0, [pc, #160]	; (80021d4 <BSP_AUDIO_IN_MspInit+0xec>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002134:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8002136:	f04f 0805 	mov.w	r8, #5
	HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800213a:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = I2S2_SCK_PIN;
 800213c:	f44f 6780 	mov.w	r7, #1024	; 0x400
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	e9cd 3506 	strd	r3, r5, [sp, #24]
	GPIO_InitStruct.Pin = I2S2_SCK_PIN;
 8002144:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8002146:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800214a:	f001 fb57 	bl	80037fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S2_MOSI_PIN;
 800214e:	2308      	movs	r3, #8
	GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
	HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002150:	4821      	ldr	r0, [pc, #132]	; (80021d8 <BSP_AUDIO_IN_MspInit+0xf0>)
	GPIO_InitStruct.Pin = I2S2_MOSI_PIN;
 8002152:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002154:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 8002156:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800215a:	f001 fb4f 	bl	80037fc <HAL_GPIO_Init>

	/* Enable the DMA clock */
	I2S2_DMAx_CLK_ENABLE();
 800215e:	9504      	str	r5, [sp, #16]
 8002160:	6b23      	ldr	r3, [r4, #48]	; 0x30

	if (hi2s->Instance == I2S2) {
 8002162:	6832      	ldr	r2, [r6, #0]
	I2S2_DMAx_CLK_ENABLE();
 8002164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002168:	6323      	str	r3, [r4, #48]	; 0x30
 800216a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	9304      	str	r3, [sp, #16]
 8002172:	9b04      	ldr	r3, [sp, #16]
	if (hi2s->Instance == I2S2) {
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <BSP_AUDIO_IN_MspInit+0xf4>)
 8002176:	429a      	cmp	r2, r3
 8002178:	d11f      	bne.n	80021ba <BSP_AUDIO_IN_MspInit+0xd2>
		/* Configure the hdma_i2sRx handle parameters */
		hdma_i2sRx.Init.Channel = I2S2_DMAx_CHANNEL;
 800217a:	4c19      	ldr	r4, [pc, #100]	; (80021e0 <BSP_AUDIO_IN_MspInit+0xf8>)
		hdma_i2sRx.Init.PeriphBurst = DMA_MBURST_SINGLE;

		hdma_i2sRx.Instance = I2S2_DMAx_STREAM;

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 800217c:	63f4      	str	r4, [r6, #60]	; 0x3c
		hdma_i2sRx.Init.MemDataAlignment = I2S2_DMAx_MEM_DATA_SIZE;
 800217e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002186:	e9c4 2305 	strd	r2, r3, [r4, #20]
		hdma_i2sRx.Init.Priority = DMA_PRIORITY_HIGH;
 800218a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002192:	e9c4 1307 	strd	r1, r3, [r4, #28]
		hdma_i2sRx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002196:	2303      	movs	r3, #3
		hdma_i2sRx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002198:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sRx);
 800219c:	4620      	mov	r0, r4
		hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <BSP_AUDIO_IN_MspInit+0xfc>)
		hdma_i2sRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021a0:	6265      	str	r5, [r4, #36]	; 0x24
		hdma_i2sRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a2:	e9c4 5501 	strd	r5, r5, [r4, #4]
		hdma_i2sRx.Init.MemInc = DMA_MINC_ENABLE;
 80021a6:	e9c4 5703 	strd	r5, r7, [r4, #12]
		hdma_i2sRx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 80021aa:	6325      	str	r5, [r4, #48]	; 0x30
		hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 80021ac:	6023      	str	r3, [r4, #0]
		__HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 80021ae:	63a6      	str	r6, [r4, #56]	; 0x38
		HAL_DMA_DeInit(&hdma_i2sRx);
 80021b0:	f001 f9be 	bl	8003530 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sRx);
 80021b4:	4620      	mov	r0, r4
 80021b6:	f001 f93b 	bl	8003430 <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	210f      	movs	r1, #15
 80021be:	200e      	movs	r0, #14
 80021c0:	f001 f8bc 	bl	800333c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ);
 80021c4:	200e      	movs	r0, #14
 80021c6:	f001 f8eb 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 80021ca:	b00a      	add	sp, #40	; 0x28
 80021cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40003800 	.word	0x40003800
 80021e0:	20013ab4 	.word	0x20013ab4
 80021e4:	40026058 	.word	0x40026058

080021e8 <BSP_AUDIO_IN_Init>:
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 80021e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ec:	4605      	mov	r5, r0
	BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 80021ee:	4601      	mov	r1, r0
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 80021f0:	4617      	mov	r7, r2
	BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 80021f2:	4830      	ldr	r0, [pc, #192]	; (80022b4 <BSP_AUDIO_IN_Init+0xcc>)
 80021f4:	4c30      	ldr	r4, [pc, #192]	; (80022b8 <BSP_AUDIO_IN_Init+0xd0>)
 80021f6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022c8 <BSP_AUDIO_IN_Init+0xe0>
 80021fa:	2200      	movs	r2, #0
 80021fc:	f7ff ff5c 	bl	80020b8 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn,
		uint32_t ChnlNbrOut) {
	uint32_t index = 0;

	/* Enable CRC peripheral to unlock the PDM library */
	__HAL_RCC_CRC_CLK_ENABLE();
 8002200:	2600      	movs	r6, #0
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <BSP_AUDIO_IN_Init+0xd4>)
 8002204:	9601      	str	r6, [sp, #4]
 8002206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	9b01      	ldr	r3, [sp, #4]
		PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
		PDM_FilterHandler[index].in_ptr_channels = ChnlNbrIn;
		PDM_Filter_Init((PDM_Filter_Handler_t*) (&PDM_FilterHandler[index]));

		/* PDM lib config phase */
		PDM_FilterConfig[index].output_samples_number = AudioFreq / 1000; //AudioFreq / 1000;
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	fbb5 f3f3 	udiv	r3, r5, r3
 8002220:	fa1f f983 	uxth.w	r9, r3
		PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8002224:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <BSP_AUDIO_IN_Init+0xd8>)
		PDM_FilterHandler[index].bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8002226:	46b2      	mov	sl, r6
		PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8002228:	f04f 0b01 	mov.w	fp, #1
	for (index = 0; index < ChnlNbrIn; index++) {
 800222c:	42b7      	cmp	r7, r6
 800222e:	d123      	bne.n	8002278 <BSP_AUDIO_IN_Init+0x90>
	hAudioInI2s.Instance = I2S2;
 8002230:	4c20      	ldr	r4, [pc, #128]	; (80022b4 <BSP_AUDIO_IN_Init+0xcc>)
 8002232:	4e24      	ldr	r6, [pc, #144]	; (80022c4 <BSP_AUDIO_IN_Init+0xdc>)
 8002234:	6026      	str	r6, [r4, #0]
	if (HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET) {
 8002236:	4620      	mov	r0, r4
 8002238:	f001 ffe1 	bl	80041fe <HAL_I2S_GetState>
 800223c:	4601      	mov	r1, r0
 800223e:	b910      	cbnz	r0, 8002246 <BSP_AUDIO_IN_Init+0x5e>
		BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff ff51 	bl	80020e8 <BSP_AUDIO_IN_MspInit>
static uint8_t I2S2_Init(uint32_t AudioFreq) {
	/* Initialize the hAudioInI2s Instance parameter */
	hAudioInI2s.Instance = I2S2;

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hAudioInI2s);
 8002246:	69f3      	ldr	r3, [r6, #28]
	hAudioInI2s.Instance = I2S2;
 8002248:	6026      	str	r6, [r4, #0]
	__HAL_I2S_DISABLE(&hAudioInI2s);
 800224a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	/* I2S2 peripheral configuration */
	hAudioInI2s.Init.AudioFreq = 2*AudioFreq;
 800224e:	006d      	lsls	r5, r5, #1
	__HAL_I2S_DISABLE(&hAudioInI2s);
 8002250:	61f3      	str	r3, [r6, #28]
	hAudioInI2s.Init.AudioFreq = 2*AudioFreq;
 8002252:	6165      	str	r5, [r4, #20]
	hAudioInI2s.Init.ClockSource = I2S_CLOCK_PLL;
	hAudioInI2s.Init.CPOL = I2S_CPOL_HIGH;
 8002254:	2308      	movs	r3, #8
 8002256:	2500      	movs	r5, #0
 8002258:	e9c4 3506 	strd	r3, r5, [r4, #24]
	hAudioInI2s.Init.DataFormat = I2S_DATAFORMAT_16B;
	hAudioInI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
	hAudioInI2s.Init.Mode = I2S_MODE_MASTER_RX;
	hAudioInI2s.Init.Standard = I2S_STANDARD_LSB;
 800225c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002260:	2320      	movs	r3, #32

	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK) {
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <BSP_AUDIO_IN_Init+0xcc>)
	hAudioInI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002264:	e9c4 5503 	strd	r5, r5, [r4, #12]
	hAudioInI2s.Init.Standard = I2S_STANDARD_LSB;
 8002268:	e9c4 2301 	strd	r2, r3, [r4, #4]
	if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK) {
 800226c:	f001 fd20 	bl	8003cb0 <HAL_I2S_Init>
}
 8002270:	4628      	mov	r0, r5
 8002272:	b003      	add	sp, #12
 8002274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8002278:	6063      	str	r3, [r4, #4]
		PDM_FilterHandler[index].bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800227a:	f8a4 a000 	strh.w	sl, [r4]
		PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800227e:	f8a4 a002 	strh.w	sl, [r4, #2]
		PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8002282:	f8a4 b00a 	strh.w	fp, [r4, #10]
		PDM_FilterHandler[index].in_ptr_channels = ChnlNbrIn;
 8002286:	8127      	strh	r7, [r4, #8]
		PDM_Filter_Init((PDM_Filter_Handler_t*) (&PDM_FilterHandler[index]));
 8002288:	4620      	mov	r0, r4
 800228a:	f005 f9c1 	bl	8007610 <PDM_Filter_Init>
		PDM_FilterConfig[index].mic_gain = 24;
 800228e:	2218      	movs	r2, #24
 8002290:	f8a8 2004 	strh.w	r2, [r8, #4]
		PDM_Filter_setConfig((PDM_Filter_Handler_t*) &PDM_FilterHandler[index],
 8002294:	4641      	mov	r1, r8
		PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8002296:	2202      	movs	r2, #2
		PDM_Filter_setConfig((PDM_Filter_Handler_t*) &PDM_FilterHandler[index],
 8002298:	4620      	mov	r0, r4
		PDM_FilterConfig[index].output_samples_number = AudioFreq / 1000; //AudioFreq / 1000;
 800229a:	f8a8 9002 	strh.w	r9, [r8, #2]
		PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800229e:	f8a8 2000 	strh.w	r2, [r8]
	for (index = 0; index < ChnlNbrIn; index++) {
 80022a2:	3601      	adds	r6, #1
		PDM_Filter_setConfig((PDM_Filter_Handler_t*) &PDM_FilterHandler[index],
 80022a4:	f005 fa3e 	bl	8007724 <PDM_Filter_setConfig>
	for (index = 0; index < ChnlNbrIn; index++) {
 80022a8:	344c      	adds	r4, #76	; 0x4c
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <BSP_AUDIO_IN_Init+0xd8>)
 80022ac:	f108 0806 	add.w	r8, r8, #6
 80022b0:	e7bc      	b.n	800222c <BSP_AUDIO_IN_Init+0x44>
 80022b2:	bf00      	nop
 80022b4:	20013a6c 	.word	0x20013a6c
 80022b8:	200139d4 	.word	0x200139d4
 80022bc:	40023800 	.word	0x40023800
 80022c0:	7e809d48 	.word	0x7e809d48
 80022c4:	40003800 	.word	0x40003800
 80022c8:	200139c8 	.word	0x200139c8

080022cc <HAL_I2S_RxCpltCallback>:
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80022cc:	b508      	push	{r3, lr}
	BSP_AUDIO_IN_TransferComplete_CallBack();
 80022ce:	f7fe ff1d 	bl	800110c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80022d2:	bd08      	pop	{r3, pc}

080022d4 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80022d4:	b508      	push	{r3, lr}
	BSP_AUDIO_IN_HalfTransfer_CallBack();
 80022d6:	f7fe ff1f 	bl	8001118 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80022da:	bd08      	pop	{r3, pc}

080022dc <HAL_I2S_ErrorCallback>:
 * @param  hi2s: I2S handle
 */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
	/* Manage the error generated on DMA FIFO: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	if (hi2s->Instance == I2S3) {
 80022dc:	6802      	ldr	r2, [r0, #0]
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_I2S_ErrorCallback+0x20>)
 80022e0:	429a      	cmp	r2, r3
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 80022e2:	b510      	push	{r4, lr}
 80022e4:	4604      	mov	r4, r0
	if (hi2s->Instance == I2S3) {
 80022e6:	d101      	bne.n	80022ec <HAL_I2S_ErrorCallback+0x10>
		BSP_AUDIO_OUT_Error_CallBack();
 80022e8:	f7ff febc 	bl	8002064 <BSP_AUDIO_OUT_Error_CallBack>
	}
	if (hi2s->Instance == I2S2) {
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_I2S_ErrorCallback+0x24>)
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d101      	bne.n	80022f8 <HAL_I2S_ErrorCallback+0x1c>
		BSP_AUDIO_IN_Error_Callback();
 80022f4:	f7fe ff16 	bl	8001124 <BSP_AUDIO_IN_Error_Callback>
	}
}
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	bf00      	nop
 80022fc:	40003c00 	.word	0x40003c00
 8002300:	40003800 	.word	0x40003800

08002304 <arm_mult_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8002304:	b903      	cbnz	r3, 8002308 <arm_mult_f32+0x4>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8002306:	4770      	bx	lr
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8002308:	ecf0 7a01 	vldmia	r0!, {s15}
 800230c:	ecb1 7a01 	vldmia	r1!, {s14}
 8002310:	ee67 7a87 	vmul.f32	s15, s15, s14
    blkCnt--;
 8002314:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8002316:	ece2 7a01 	vstmia	r2!, {s15}
    blkCnt--;
 800231a:	e7f3      	b.n	8002304 <arm_mult_f32>

0800231c <arm_cmplx_mag_squared_f32>:
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800231c:	3008      	adds	r0, #8
 800231e:	b902      	cbnz	r2, 8002322 <arm_cmplx_mag_squared_f32+0x6>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8002320:	4770      	bx	lr
    imag = *pSrc++;
 8002322:	ed50 7a01 	vldr	s15, [r0, #-4]
    real = *pSrc++;
 8002326:	ed10 7a02 	vldr	s14, [r0, #-8]
    *pDst++ = (real * real) + (imag * imag);
 800232a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    blkCnt--;
 800232e:	3a01      	subs	r2, #1
    *pDst++ = (real * real) + (imag * imag);
 8002330:	eee7 7a07 	vfma.f32	s15, s14, s14
 8002334:	ece1 7a01 	vstmia	r1!, {s15}
    blkCnt--;
 8002338:	e7f0      	b.n	800231c <arm_cmplx_mag_squared_f32>

0800233a <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800233a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233c:	468c      	mov	ip, r1
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800233e:	2500      	movs	r5, #0
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
 8002340:	1c96      	adds	r6, r2, #2
  for (i = 0; i < bitRevLen; )
 8002342:	45ac      	cmp	ip, r5
 8002344:	d800      	bhi.n	8002348 <arm_bitreversal_32+0xe>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
 8002346:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a = pBitRevTab[i    ] >> 2;
 8002348:	f832 4015 	ldrh.w	r4, [r2, r5, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
 800234c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
     a = pBitRevTab[i    ] >> 2;
 8002350:	08a4      	lsrs	r4, r4, #2
     b = pBitRevTab[i + 1] >> 2;
 8002352:	089b      	lsrs	r3, r3, #2
     tmp = pSrc[a];
 8002354:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a] = pSrc[b];
 8002358:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800235c:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b] = tmp;
 8002360:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
     tmp = pSrc[a+1];
 8002364:	3401      	adds	r4, #1
     pSrc[a+1] = pSrc[b+1];
 8002366:	3301      	adds	r3, #1
     tmp = pSrc[a+1];
 8002368:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
 800236c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8002370:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
    i += 2;
 8002374:	3502      	adds	r5, #2
     pSrc[b+1] = tmp;
 8002376:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    i += 2;
 800237a:	e7e2      	b.n	8002342 <arm_bitreversal_32+0x8>

0800237c <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800237c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002380:	4680      	mov	r8, r0
 8002382:	ed2d 8b02 	vpush	{d8}
  uint32_t    L  = S->fftLen;
 8002386:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800238a:	f8d8 2004 	ldr.w	r2, [r8, #4]
  float32_t * p2 = p1 + L;
 800238e:	eb01 0987 	add.w	r9, r1, r7, lsl #2
{
 8002392:	4608      	mov	r0, r1

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 8002394:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8002396:	08ff      	lsrs	r7, r7, #3
{
 8002398:	b083      	sub	sp, #12
 800239a:	4606      	mov	r6, r0
  pMid1 = p1 + L;
 800239c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  pMid2 = p2 + L;
 80023a0:	eb09 0481 	add.w	r4, r9, r1, lsl #2
 80023a4:	464b      	mov	r3, r9
 80023a6:	eb02 1707 	add.w	r7, r2, r7, lsl #4
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80023aa:	4694      	mov	ip, r2
  for (l = L >> 2; l > 0; l-- )
 80023ac:	45bc      	cmp	ip, r7
 80023ae:	f106 0610 	add.w	r6, r6, #16
 80023b2:	f105 0510 	add.w	r5, r5, #16
 80023b6:	f104 0410 	add.w	r4, r4, #16
 80023ba:	f103 0310 	add.w	r3, r3, #16
 80023be:	d110      	bne.n	80023e2 <arm_cfft_radix8by2_f32+0x66>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80023c0:	b289      	uxth	r1, r1
 80023c2:	2302      	movs	r3, #2
 80023c4:	9101      	str	r1, [sp, #4]
 80023c6:	f000 fb43 	bl	8002a50 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80023ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80023ce:	9901      	ldr	r1, [sp, #4]
 80023d0:	2302      	movs	r3, #2
 80023d2:	4648      	mov	r0, r9
}
 80023d4:	b003      	add	sp, #12
 80023d6:	ecbd 8b02 	vpop	{d8}
 80023da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80023de:	f000 bb37 	b.w	8002a50 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
 80023e2:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
 80023e6:	ed16 7a04 	vldr	s14, [r6, #-16]
    t2[1] = p2[1];
 80023ea:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
 80023ee:	ed56 3a03 	vldr	s7, [r6, #-12]
    t4[0] = pMid2[0];
 80023f2:	ed14 4a04 	vldr	s8, [r4, #-16]
    t4[1] = pMid2[1];
 80023f6:	ed54 4a03 	vldr	s9, [r4, #-12]
    t2[2] = p2[2];
 80023fa:	ed53 7a02 	vldr	s15, [r3, #-8]
    t2[3] = p2[3];
 80023fe:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
 8002402:	ed55 2a03 	vldr	s5, [r5, #-12]
    t3[2] = pMid1[2];
 8002406:	ed15 3a02 	vldr	s6, [r5, #-8]
    t3[3] = pMid1[3];
 800240a:	ed55 6a01 	vldr	s13, [r5, #-4]
    t4[2] = pMid2[2];
 800240e:	ed54 5a02 	vldr	s11, [r4, #-8]
    t4[3] = pMid2[3];
 8002412:	ed14 6a01 	vldr	s12, [r4, #-4]
    t1[2] = p1[2];
 8002416:	ed16 1a02 	vldr	s2, [r6, #-8]
    t3[0] = pMid1[0];
 800241a:	ed15 2a04 	vldr	s4, [r5, #-16]
    t1[3] = p1[3];
 800241e:	ed56 1a01 	vldr	s3, [r6, #-4]
    *p1++ = t1[0] + t2[0];
 8002422:	ee37 8a00 	vadd.f32	s16, s14, s0
    t2[0] = t1[0] - t2[0];
 8002426:	ee37 7a40 	vsub.f32	s14, s14, s0
    *p1++ = t1[0] + t2[0];
 800242a:	ed06 8a04 	vstr	s16, [r6, #-16]
    *p1++ = t1[1] + t2[1];
 800242e:	ee33 8aa0 	vadd.f32	s16, s7, s1
    t2[1] = t1[1] - t2[1];
 8002432:	ee73 3ae0 	vsub.f32	s7, s7, s1
    *p1++ = t1[1] + t2[1];
 8002436:	ed06 8a03 	vstr	s16, [r6, #-12]
    *p1++ = t1[2] + t2[2];
 800243a:	ee31 8a27 	vadd.f32	s16, s2, s15
 800243e:	f10c 0c10 	add.w	ip, ip, #16
 8002442:	ed06 8a02 	vstr	s16, [r6, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8002446:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800244a:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
 800244e:	ee72 1a04 	vadd.f32	s3, s4, s8
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8002452:	ed06 8a01 	vstr	s16, [r6, #-4]
    *pMid1++ = t3[0] + t4[0];
 8002456:	ed45 1a04 	vstr	s3, [r5, #-16]
    *pMid1++ = t3[1] + t4[1];
 800245a:	ee72 1aa4 	vadd.f32	s3, s5, s9
    t4[1] = t4[1] - t3[1];
 800245e:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *pMid1++ = t3[1] + t4[1];
 8002462:	ed45 1a03 	vstr	s3, [r5, #-12]
    *pMid1++ = t3[2] + t4[2];
 8002466:	ee73 1a25 	vadd.f32	s3, s6, s11
    t4[2] = t4[2] - t3[2];
 800246a:	ee75 5ac3 	vsub.f32	s11, s11, s6
    *pMid1++ = t3[2] + t4[2];
 800246e:	ed45 1a02 	vstr	s3, [r5, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8002472:	ee76 1a86 	vadd.f32	s3, s13, s12
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8002476:	ee36 6a66 	vsub.f32	s12, s12, s13
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800247a:	ed45 1a01 	vstr	s3, [r5, #-4]
    twI = *tw++;
 800247e:	ed1c 3a03 	vldr	s6, [ip, #-12]
    twR = *tw++;
 8002482:	ed5c 6a04 	vldr	s13, [ip, #-16]
    m1 = t2[1] * twI;
 8002486:	ee63 2a83 	vmul.f32	s5, s7, s6
    t4[0] = t4[0] - t3[0];
 800248a:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p2++ = m0 + m1;
 800248e:	eee7 2a26 	vfma.f32	s5, s14, s13
    *p2++ = m2 - m3;
 8002492:	ee23 7a47 	vnmul.f32	s14, s6, s14
    *p2++ = m0 + m1;
 8002496:	ed43 2a04 	vstr	s5, [r3, #-16]
    *p2++ = m2 - m3;
 800249a:	eea3 7aa6 	vfma.f32	s14, s7, s13
    t2[2] = t1[2] - t2[2];
 800249e:	ee71 7a67 	vsub.f32	s15, s2, s15
    *p2++ = m2 - m3;
 80024a2:	ed03 7a03 	vstr	s14, [r3, #-12]
    m3 = t4[0] * twR;
 80024a6:	ee24 7a26 	vmul.f32	s14, s8, s13
    *pMid2++ = m0 - m1;
 80024aa:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *pMid2++ = m2 + m3;
 80024ae:	eea4 7a83 	vfma.f32	s14, s9, s6
    *pMid2++ = m0 - m1;
 80024b2:	eee4 6a03 	vfma.f32	s13, s8, s6
    *pMid2++ = m2 + m3;
 80024b6:	ed04 7a03 	vstr	s14, [r4, #-12]
    *pMid2++ = m0 - m1;
 80024ba:	ed44 6a04 	vstr	s13, [r4, #-16]
    twR = *tw++;
 80024be:	ed1c 7a02 	vldr	s14, [ip, #-8]
    twI = *tw++;
 80024c2:	ed5c 6a01 	vldr	s13, [ip, #-4]
    m1 = t2[3] * twI;
 80024c6:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
 80024ca:	eee7 4a87 	vfma.f32	s9, s15, s14
    *p2++ = m2 - m3;
 80024ce:	ee66 7ae7 	vnmul.f32	s15, s13, s15
    *p2++ = m0 + m1;
 80024d2:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
 80024d6:	eee5 7a07 	vfma.f32	s15, s10, s14
 80024da:	ed43 7a01 	vstr	s15, [r3, #-4]
    m3 = t4[2] * twR;
 80024de:	ee65 7a87 	vmul.f32	s15, s11, s14
    *pMid2++ = m0 - m1;
 80024e2:	ee27 7a46 	vnmul.f32	s14, s14, s12
    *pMid2++ = m2 + m3;
 80024e6:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pMid2++ = m0 - m1;
 80024ea:	eea5 7aa6 	vfma.f32	s14, s11, s13
    *pMid2++ = m2 + m3;
 80024ee:	ed44 7a01 	vstr	s15, [r4, #-4]
    *pMid2++ = m0 - m1;
 80024f2:	ed04 7a02 	vstr	s14, [r4, #-8]
  for (l = L >> 2; l > 0; l-- )
 80024f6:	e759      	b.n	80023ac <arm_cfft_radix8by2_f32+0x30>

080024f8 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
    uint32_t    L  = S->fftLen >> 1;
 80024f8:	8803      	ldrh	r3, [r0, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80024fa:	edd1 7a00 	vldr	s15, [r1]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80024fe:	6842      	ldr	r2, [r0, #4]
    uint32_t    L  = S->fftLen >> 1;
 8002500:	085b      	lsrs	r3, r3, #1
{
 8002502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t * p3 = p2 + L;
 8002506:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
    p1ap3_0 = p1[0] + p3[0];
 800250a:	ed95 7a00 	vldr	s14, [r5]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 800250e:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
 8002512:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
 8002516:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 800251a:	ed91 7a01 	vldr	s14, [r1, #4]
    float32_t * p2 = p1 + L;
 800251e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_1 = p1[1] + p3[1];
 8002522:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
 8002526:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800252a:	ed96 7a00 	vldr	s14, [r6]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800252e:	edd6 3a01 	vldr	s7, [r6, #4]
{
 8002532:	ed2d 8b04 	vpush	{d8-d9}
    float32_t * p4 = p3 + L;
 8002536:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800253a:	edd4 4a00 	vldr	s9, [r4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800253e:	ed94 4a01 	vldr	s8, [r4, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002542:	ee37 5a06 	vadd.f32	s10, s14, s12
{
 8002546:	b08f      	sub	sp, #60	; 0x3c
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002548:	ee35 5a24 	vadd.f32	s10, s10, s9
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800254c:	9202      	str	r2, [sp, #8]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800254e:	ed81 5a00 	vstr	s10, [r1]
    L >>= 1;
 8002552:	085a      	lsrs	r2, r3, #1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002554:	ed96 5a01 	vldr	s10, [r6, #4]
    L >>= 1;
 8002558:	920a      	str	r2, [sp, #40]	; 0x28
    p1ap3_0 = p1[0] + p3[0];
 800255a:	460a      	mov	r2, r1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800255c:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800255e:	ed94 3a01 	vldr	s6, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002562:	9206      	str	r2, [sp, #24]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002564:	ee36 5a85 	vadd.f32	s10, s13, s10

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8002568:	4632      	mov	r2, r6
 800256a:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800256c:	ee35 5a03 	vadd.f32	s10, s10, s6
    *p2++ = t2[0];
 8002570:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002572:	462a      	mov	r2, r5
 8002574:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002576:	ed81 5a01 	vstr	s10, [r1, #4]
    *p3++ = t3[0];
 800257a:	920c      	str	r2, [sp, #48]	; 0x30
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800257c:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002580:	4622      	mov	r2, r4
 8002582:	3208      	adds	r2, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002584:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p4++ = t4[0];
 8002588:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
 800258a:	9a02      	ldr	r2, [sp, #8]
    *p2++ = t2[0];
 800258c:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002590:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002594:	ee35 5ac7 	vsub.f32	s10, s11, s14
    tw2 += twMod2;
 8002598:	3208      	adds	r2, #8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800259a:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800259e:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80025a2:	ee37 7a25 	vadd.f32	s14, s14, s11
    tw2 += twMod2;
 80025a6:	9207      	str	r2, [sp, #28]
    tw3 += twMod3;
 80025a8:	9a02      	ldr	r2, [sp, #8]
{
 80025aa:	9100      	str	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80025ac:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80025b0:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80025b4:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80025b8:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80025bc:	ee37 7a64 	vsub.f32	s14, s14, s9
    tw3 += twMod3;
 80025c0:	3210      	adds	r2, #16
    *p2++ = t2[1];
 80025c2:	ed86 5a01 	vstr	s10, [r6, #4]
    *p3++ = t3[0];
 80025c6:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
 80025ca:	edc5 6a01 	vstr	s13, [r5, #4]
    *p4++ = t4[0];
 80025ce:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 80025d2:	ed84 7a01 	vstr	s14, [r4, #4]
    tw3 += twMod3;
 80025d6:	9208      	str	r2, [sp, #32]
    tw4 += twMod4;
 80025d8:	9a02      	ldr	r2, [sp, #8]
 80025da:	3218      	adds	r2, #24
 80025dc:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
 80025de:	085a      	lsrs	r2, r3, #1
 80025e0:	3a02      	subs	r2, #2
 80025e2:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80025e6:	9a07      	ldr	r2, [sp, #28]
 80025e8:	9204      	str	r2, [sp, #16]
 80025ea:	9a08      	ldr	r2, [sp, #32]
 80025ec:	9203      	str	r2, [sp, #12]
 80025ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	9a00      	ldr	r2, [sp, #0]
 80025f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80025f8:	f1a4 0a04 	sub.w	sl, r4, #4
 80025fc:	f102 0e10 	add.w	lr, r2, #16
{
 8002600:	4683      	mov	fp, r0
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8002602:	f1a6 0904 	sub.w	r9, r6, #4
    pEnd2 = p3 - 1;
 8002606:	1f2f      	subs	r7, r5, #4
    pEnd4 = pEnd3 + L;
 8002608:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800260c:	f106 0110 	add.w	r1, r6, #16
 8002610:	f105 0c10 	add.w	ip, r5, #16
 8002614:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 8002618:	9804      	ldr	r0, [sp, #16]
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800261a:	ed1c 7a02 	vldr	s14, [ip, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
 800261e:	ed5c 3a01 	vldr	s7, [ip, #-4]
      p1ap3_0 = p1[0] + p3[0];
 8002622:	ed5e 4a02 	vldr	s9, [lr, #-8]
      p1ap3_1 = p1[1] + p3[1];
 8002626:	ed1e 6a01 	vldr	s12, [lr, #-4]
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800262a:	ed51 5a02 	vldr	s11, [r1, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800262e:	ed51 7a01 	vldr	s15, [r1, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002632:	ed12 4a02 	vldr	s8, [r2, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002636:	ed12 2a01 	vldr	s4, [r2, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800263a:	3008      	adds	r0, #8
 800263c:	9004      	str	r0, [sp, #16]
 800263e:	9803      	ldr	r0, [sp, #12]
 8002640:	3010      	adds	r0, #16
 8002642:	9003      	str	r0, [sp, #12]
 8002644:	9801      	ldr	r0, [sp, #4]
      p1sp3_0 = p1[0] - p3[0];
 8002646:	ee74 2ac7 	vsub.f32	s5, s9, s14
      p1sp3_1 = p1[1] - p3[1];
 800264a:	ee36 5a63 	vsub.f32	s10, s12, s7
      p1ap3_0 = p1[0] + p3[0];
 800264e:	ee74 4a87 	vadd.f32	s9, s9, s14
      p1ap3_1 = p1[1] + p3[1];
 8002652:	ee36 6a23 	vadd.f32	s12, s12, s7
    for (l = (L - 2) >> 1; l > 0; l-- )
 8002656:	3018      	adds	r0, #24
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002658:	ee35 3a65 	vsub.f32	s6, s10, s11
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800265c:	ee77 6aa2 	vadd.f32	s13, s15, s5
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002660:	ee34 7ae5 	vsub.f32	s14, s9, s11
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002664:	ee76 3a67 	vsub.f32	s7, s12, s15
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002668:	ee35 5a85 	vadd.f32	s10, s11, s10
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800266c:	ee72 7ae7 	vsub.f32	s15, s5, s15
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002670:	ee75 5aa4 	vadd.f32	s11, s11, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
 8002674:	9001      	str	r0, [sp, #4]
 8002676:	9805      	ldr	r0, [sp, #20]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002678:	ee76 6ac2 	vsub.f32	s13, s13, s4
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800267c:	ee33 3a04 	vadd.f32	s6, s6, s8
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002680:	ee37 7a44 	vsub.f32	s14, s14, s8
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002684:	ee73 3ac2 	vsub.f32	s7, s7, s4
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002688:	ee77 7a82 	vadd.f32	s15, s15, s4
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800268c:	ee35 5a44 	vsub.f32	s10, s10, s8
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002690:	ee75 5a84 	vadd.f32	s11, s11, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8002694:	f1a9 0908 	sub.w	r9, r9, #8
 8002698:	3f08      	subs	r7, #8
 800269a:	f1aa 0a08 	sub.w	sl, sl, #8
 800269e:	3b08      	subs	r3, #8
 80026a0:	f10e 0e08 	add.w	lr, lr, #8
 80026a4:	3108      	adds	r1, #8
 80026a6:	f10c 0c08 	add.w	ip, ip, #8
 80026aa:	3208      	adds	r2, #8
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d174      	bne.n	800279a <arm_cfft_radix8by4_f32+0x2a2>
 80026b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026b2:	9b06      	ldr	r3, [sp, #24]
 80026b4:	2718      	movs	r7, #24
 80026b6:	fb07 0708 	mla	r7, r7, r8, r0
 80026ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80026bc:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
 80026c0:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
 80026c4:	9b07      	ldr	r3, [sp, #28]
 80026c6:	980c      	ldr	r0, [sp, #48]	; 0x30
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80026c8:	edc2 5a00 	vstr	s11, [r2]
 80026cc:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
 80026d0:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
 80026d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80026d6:	9b08      	ldr	r3, [sp, #32]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80026d8:	eddc 5a01 	vldr	s11, [ip, #4]
 80026dc:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 80026e0:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 80026e4:	ee36 6a25 	vadd.f32	s12, s12, s11
 80026e8:	edd8 5a01 	vldr	s11, [r8, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80026ec:	9800      	ldr	r0, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80026ee:	ee36 6a25 	vadd.f32	s12, s12, s11
 80026f2:	ed82 6a01 	vstr	s12, [r2, #4]
    twI = tw2[1];
 80026f6:	edd1 4a01 	vldr	s9, [r1, #4]
    twR = tw2[0];
 80026fa:	edd1 5a00 	vldr	s11, [r1]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80026fe:	9a02      	ldr	r2, [sp, #8]
 8002700:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8002704:	9101      	str	r1, [sp, #4]
    m1 = t2[1] * twI;
 8002706:	ee24 6a83 	vmul.f32	s12, s9, s6
    *p2++ = m0 + m1;
 800270a:	eea5 6aa6 	vfma.f32	s12, s11, s13
    *p2++ = m2 - m3;
 800270e:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *p2++ = m0 + m1;
 8002712:	ed8c 6a00 	vstr	s12, [ip]
    *p2++ = m2 - m3;
 8002716:	eee5 6a83 	vfma.f32	s13, s11, s6
 800271a:	edcc 6a01 	vstr	s13, [ip, #4]
    twI = tw3[1];
 800271e:	edd3 5a01 	vldr	s11, [r3, #4]
    twR = tw3[0];
 8002722:	ed93 6a00 	vldr	s12, [r3]
    m1 = t3[1] * twI;
 8002726:	ee65 6aa3 	vmul.f32	s13, s11, s7
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800272a:	2304      	movs	r3, #4
    *p3++ = m0 + m1;
 800272c:	eee6 6a07 	vfma.f32	s13, s12, s14
    *p3++ = m2 - m3;
 8002730:	ee27 7a65 	vnmul.f32	s14, s14, s11
    *p3++ = m0 + m1;
 8002734:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
 8002738:	eea6 7a23 	vfma.f32	s14, s12, s7
 800273c:	ed8e 7a01 	vstr	s14, [lr, #4]
    twI = tw4[1];
 8002740:	ed97 6a01 	vldr	s12, [r7, #4]
    twR = tw4[0];
 8002744:	edd7 6a00 	vldr	s13, [r7]
    m1 = t4[1] * twI;
 8002748:	ee26 7a05 	vmul.f32	s14, s12, s10
    *p4++ = m0 + m1;
 800274c:	eea6 7aa7 	vfma.f32	s14, s13, s15
    *p4++ = m2 - m3;
 8002750:	ee67 7ac6 	vnmul.f32	s15, s15, s12
    *p4++ = m0 + m1;
 8002754:	ed88 7a00 	vstr	s14, [r8]
    *p4++ = m2 - m3;
 8002758:	eee6 7a85 	vfma.f32	s15, s13, s10
 800275c:	edc8 7a01 	vstr	s15, [r8, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8002760:	f000 f976 	bl	8002a50 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8002764:	9901      	ldr	r1, [sp, #4]
 8002766:	f8db 2004 	ldr.w	r2, [fp, #4]
 800276a:	9100      	str	r1, [sp, #0]
 800276c:	4630      	mov	r0, r6
 800276e:	2304      	movs	r3, #4
 8002770:	f000 f96e 	bl	8002a50 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8002774:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002778:	9900      	ldr	r1, [sp, #0]
 800277a:	4628      	mov	r0, r5
 800277c:	2304      	movs	r3, #4
 800277e:	f000 f967 	bl	8002a50 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8002782:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002786:	9900      	ldr	r1, [sp, #0]
 8002788:	2304      	movs	r3, #4
 800278a:	4620      	mov	r0, r4
}
 800278c:	b00f      	add	sp, #60	; 0x3c
 800278e:	ecbd 8b04 	vpop	{d8-d9}
 8002792:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8002796:	f000 b95b 	b.w	8002a50 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800279a:	ed4e 5a04 	vstr	s11, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800279e:	ed51 5a03 	vldr	s11, [r1, #-12]
      twR = *tw2++;
 80027a2:	9804      	ldr	r0, [sp, #16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80027a4:	ee36 6a25 	vadd.f32	s12, s12, s11
 80027a8:	ed52 5a03 	vldr	s11, [r2, #-12]
 80027ac:	ee36 6a25 	vadd.f32	s12, s12, s11
 80027b0:	ed0e 6a03 	vstr	s12, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80027b4:	ed9a 6a01 	vldr	s12, [sl, #4]
 80027b8:	edd9 2a01 	vldr	s5, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80027bc:	edd9 4a02 	vldr	s9, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80027c0:	ed93 0a02 	vldr	s0, [r3, #8]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80027c4:	ed93 4a01 	vldr	s8, [r3, #4]
 80027c8:	ed97 8a01 	vldr	s16, [r7, #4]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80027cc:	ee72 5a86 	vadd.f32	s11, s5, s12
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80027d0:	ee72 2ac6 	vsub.f32	s5, s5, s12
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80027d4:	ed9a 6a02 	vldr	s12, [sl, #8]
 80027d8:	ee74 8a86 	vadd.f32	s17, s9, s12
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80027dc:	ee74 4ac6 	vsub.f32	s9, s9, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80027e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e4:	ee36 9a40 	vsub.f32	s18, s12, s0
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 80027e8:	ee78 1ac6 	vsub.f32	s3, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80027ec:	ee36 6a28 	vadd.f32	s12, s12, s17
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80027f0:	ee35 2ac8 	vsub.f32	s4, s11, s16
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80027f4:	ee36 6a00 	vadd.f32	s12, s12, s0
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80027f8:	ee34 1ac8 	vsub.f32	s2, s9, s16
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80027fc:	ed89 6a02 	vstr	s12, [r9, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002800:	ed97 6a01 	vldr	s12, [r7, #4]
 8002804:	ee75 5a86 	vadd.f32	s11, s11, s12
 8002808:	ed93 6a01 	vldr	s12, [r3, #4]
 800280c:	ee75 5a86 	vadd.f32	s11, s11, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002810:	ee31 1a04 	vadd.f32	s2, s2, s8
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002814:	edc9 5a01 	vstr	s11, [r9, #4]
      twI = *tw2++;
 8002818:	ed50 5a01 	vldr	s11, [r0, #-4]
      twR = *tw2++;
 800281c:	ed10 6a02 	vldr	s12, [r0, #-8]
      twR = tw3[0];
 8002820:	9803      	ldr	r0, [sp, #12]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002822:	ee32 2a44 	vsub.f32	s4, s4, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002826:	ee34 4a48 	vsub.f32	s8, s8, s16
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800282a:	ee79 0a22 	vadd.f32	s1, s18, s5
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800282e:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
 8002832:	ee25 4a83 	vmul.f32	s8, s11, s6
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8002836:	ee71 1ac0 	vsub.f32	s3, s3, s0
      *p2++ = m0 + m1;
 800283a:	eea6 4a26 	vfma.f32	s8, s12, s13
      *p2++ = m2 - m3;
 800283e:	ee66 6ae5 	vnmul.f32	s13, s13, s11
      *p2++ = m0 + m1;
 8002842:	ed01 4a04 	vstr	s8, [r1, #-16]
      *p2++ = m2 - m3;
 8002846:	eee6 6a03 	vfma.f32	s13, s12, s6
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800284a:	ee79 2a62 	vsub.f32	s5, s18, s5
      *p2++ = m2 - m3;
 800284e:	ed41 6a03 	vstr	s13, [r1, #-12]
      m3 = t2[3] * twR;
 8002852:	ee61 6a06 	vmul.f32	s13, s2, s12
      *pEnd2-- = m0 - m1;
 8002856:	ee26 6a60 	vnmul.f32	s12, s12, s1
      *pEnd2-- = m2 + m3;
 800285a:	eee0 6aa5 	vfma.f32	s13, s1, s11
      *pEnd2-- = m0 - m1;
 800285e:	eea1 6a25 	vfma.f32	s12, s2, s11
      *pEnd2-- = m2 + m3;
 8002862:	edc7 6a01 	vstr	s13, [r7, #4]
      *pEnd2-- = m0 - m1;
 8002866:	ed87 6a02 	vstr	s12, [r7, #8]
      twI = tw3[1];
 800286a:	ed50 6a03 	vldr	s13, [r0, #-12]
      twR = tw3[0];
 800286e:	ed10 6a04 	vldr	s12, [r0, #-16]
      twR = tw4[0];
 8002872:	9801      	ldr	r0, [sp, #4]
      m1 = t3[1] * twI;
 8002874:	ee66 5aa3 	vmul.f32	s11, s13, s7
      *p3++ = m0 + m1;
 8002878:	eee6 5a07 	vfma.f32	s11, s12, s14
      *p3++ = m2 - m3;
 800287c:	ee27 7a66 	vnmul.f32	s14, s14, s13
      *p3++ = m0 + m1;
 8002880:	ed4c 5a04 	vstr	s11, [ip, #-16]
      *p3++ = m2 - m3;
 8002884:	eea6 7a23 	vfma.f32	s14, s12, s7
 8002888:	ed0c 7a03 	vstr	s14, [ip, #-12]
      m3 =  t3[3] * twI;
 800288c:	ee21 7aa6 	vmul.f32	s14, s3, s13
      *pEnd3-- = m0 - m1;
 8002890:	ee66 6ac2 	vnmul.f32	s13, s13, s4
      *pEnd3-- = m3 - m2;
 8002894:	eea2 7a46 	vfms.f32	s14, s4, s12
      *pEnd3-- = m0 - m1;
 8002898:	eee1 6ac6 	vfms.f32	s13, s3, s12
      *pEnd3-- = m3 - m2;
 800289c:	ed8a 7a01 	vstr	s14, [sl, #4]
      *pEnd3-- = m0 - m1;
 80028a0:	edca 6a02 	vstr	s13, [sl, #8]
      twR = tw4[0];
 80028a4:	ed10 7a06 	vldr	s14, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
 80028a8:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
    for (l = (L - 2) >> 1; l > 0; l-- )
 80028ac:	9805      	ldr	r0, [sp, #20]
      m1 = t4[1] * twI;
 80028ae:	ee26 6a85 	vmul.f32	s12, s13, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 80028b2:	3801      	subs	r0, #1
      *p4++ = m0 + m1;
 80028b4:	eea7 6a27 	vfma.f32	s12, s14, s15
    for (l = (L - 2) >> 1; l > 0; l-- )
 80028b8:	9005      	str	r0, [sp, #20]
      *p4++ = m2 - m3;
 80028ba:	ee67 7ae6 	vnmul.f32	s15, s15, s13
      *p4++ = m0 + m1;
 80028be:	ed02 6a04 	vstr	s12, [r2, #-16]
      *p4++ = m2 - m3;
 80028c2:	eee7 7a05 	vfma.f32	s15, s14, s10
 80028c6:	ed42 7a03 	vstr	s15, [r2, #-12]
      m3 = t4[3] * twR;
 80028ca:	ee64 7a87 	vmul.f32	s15, s9, s14
      *pEnd4-- = m0 - m1;
 80028ce:	ee27 7a62 	vnmul.f32	s14, s14, s5
      *pEnd4-- = m2 + m3;
 80028d2:	eee2 7aa6 	vfma.f32	s15, s5, s13
      *pEnd4-- = m0 - m1;
 80028d6:	eea4 7aa6 	vfma.f32	s14, s9, s13
      *pEnd4-- = m2 + m3;
 80028da:	edc3 7a01 	vstr	s15, [r3, #4]
      *pEnd4-- = m0 - m1;
 80028de:	ed83 7a02 	vstr	s14, [r3, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80028e2:	e699      	b.n	8002618 <arm_cfft_radix8by4_f32+0x120>

080028e4 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80028e4:	2a01      	cmp	r2, #1
{
 80028e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
 80028ea:	8805      	ldrh	r5, [r0, #0]
{
 80028ec:	4606      	mov	r6, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	4617      	mov	r7, r2
 80028f2:	4698      	mov	r8, r3
  if (ifftFlag == 1U)
 80028f4:	d03e      	beq.n	8002974 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 80028f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80028fa:	d049      	beq.n	8002990 <arm_cfft_f32+0xac>
 80028fc:	d826      	bhi.n	800294c <arm_cfft_f32+0x68>
 80028fe:	2d40      	cmp	r5, #64	; 0x40
 8002900:	d031      	beq.n	8002966 <arm_cfft_f32+0x82>
 8002902:	d81c      	bhi.n	800293e <arm_cfft_f32+0x5a>
 8002904:	2d10      	cmp	r5, #16
 8002906:	d01c      	beq.n	8002942 <arm_cfft_f32+0x5e>
 8002908:	2d20      	cmp	r5, #32
 800290a:	d041      	beq.n	8002990 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 800290c:	f1b8 0f00 	cmp.w	r8, #0
 8002910:	d004      	beq.n	800291c <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8002912:	68b2      	ldr	r2, [r6, #8]
 8002914:	89b1      	ldrh	r1, [r6, #12]
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff fd0f 	bl	800233a <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800291c:	2f01      	cmp	r7, #1
 800291e:	d10c      	bne.n	800293a <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
 8002920:	ee07 5a90 	vmov	s15, r5
 8002924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800292c:	ee86 7aa7 	vdiv.f32	s14, s13, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
 8002930:	2300      	movs	r3, #0
 8002932:	42ab      	cmp	r3, r5
 8002934:	f104 0408 	add.w	r4, r4, #8
 8002938:	d32f      	bcc.n	800299a <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 800293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 800293e:	2d80      	cmp	r5, #128	; 0x80
 8002940:	d1e4      	bne.n	800290c <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002942:	4621      	mov	r1, r4
 8002944:	4630      	mov	r0, r6
 8002946:	f7ff fd19 	bl	800237c <arm_cfft_radix8by2_f32>
    break;
 800294a:	e7df      	b.n	800290c <arm_cfft_f32+0x28>
  switch (L)
 800294c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002950:	d01e      	beq.n	8002990 <arm_cfft_f32+0xac>
 8002952:	d805      	bhi.n	8002960 <arm_cfft_f32+0x7c>
 8002954:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002958:	d005      	beq.n	8002966 <arm_cfft_f32+0x82>
 800295a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800295e:	e7ef      	b.n	8002940 <arm_cfft_f32+0x5c>
 8002960:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8002964:	d1d2      	bne.n	800290c <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8002966:	6872      	ldr	r2, [r6, #4]
 8002968:	2301      	movs	r3, #1
 800296a:	4629      	mov	r1, r5
 800296c:	4620      	mov	r0, r4
 800296e:	f000 f86f 	bl	8002a50 <arm_radix8_butterfly_f32>
    break;
 8002972:	e7cb      	b.n	800290c <arm_cfft_f32+0x28>
    pSrc = p1 + 1;
 8002974:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
 8002976:	2300      	movs	r3, #0
 8002978:	42ab      	cmp	r3, r5
 800297a:	f102 0208 	add.w	r2, r2, #8
 800297e:	d2ba      	bcs.n	80028f6 <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
 8002980:	ed52 7a02 	vldr	s15, [r2, #-8]
 8002984:	eef1 7a67 	vneg.f32	s15, s15
 8002988:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 800298c:	3301      	adds	r3, #1
 800298e:	e7f3      	b.n	8002978 <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002990:	4621      	mov	r1, r4
 8002992:	4630      	mov	r0, r6
 8002994:	f7ff fdb0 	bl	80024f8 <arm_cfft_radix8by4_f32>
    break;
 8002998:	e7b8      	b.n	800290c <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
 800299a:	ed54 7a02 	vldr	s15, [r4, #-8]
 800299e:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
 80029a2:	3301      	adds	r3, #1
      *pSrc++ *=   invL ;
 80029a4:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
 80029a8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80029ac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80029b0:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
 80029b4:	e7bd      	b.n	8002932 <arm_cfft_f32+0x4e>
	...

080029b8 <arm_cfft_init_f32>:

        /*  Initialise the FFT length */
        S->fftLen = fftLen;

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80029b8:	2300      	movs	r3, #0


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80029ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        S->fftLen = fftLen;
 80029be:	8001      	strh	r1, [r0, #0]
        S->pTwiddle = NULL;
 80029c0:	6043      	str	r3, [r0, #4]
        switch (S->fftLen) {
 80029c2:	d02a      	beq.n	8002a1a <arm_cfft_init_f32+0x62>
 80029c4:	d80d      	bhi.n	80029e2 <arm_cfft_init_f32+0x2a>
 80029c6:	2940      	cmp	r1, #64	; 0x40
 80029c8:	d029      	beq.n	8002a1e <arm_cfft_init_f32+0x66>
 80029ca:	d806      	bhi.n	80029da <arm_cfft_init_f32+0x22>
 80029cc:	2910      	cmp	r1, #16
 80029ce:	d02a      	beq.n	8002a26 <arm_cfft_init_f32+0x6e>
 80029d0:	2920      	cmp	r1, #32
 80029d2:	d026      	beq.n	8002a22 <arm_cfft_init_f32+0x6a>
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	e019      	b.n	8002a0e <arm_cfft_init_f32+0x56>
 80029da:	2980      	cmp	r1, #128	; 0x80
 80029dc:	d1fa      	bne.n	80029d4 <arm_cfft_init_f32+0x1c>
            break;
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <arm_cfft_init_f32+0x74>)
 80029e0:	e00f      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
 80029e2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80029e6:	d014      	beq.n	8002a12 <arm_cfft_init_f32+0x5a>
 80029e8:	d807      	bhi.n	80029fa <arm_cfft_init_f32+0x42>
 80029ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80029ee:	d012      	beq.n	8002a16 <arm_cfft_init_f32+0x5e>
 80029f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80029f4:	d1ee      	bne.n	80029d4 <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,1024);
 80029f6:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <arm_cfft_init_f32+0x78>)
 80029f8:	e003      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
 80029fa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80029fe:	d1e9      	bne.n	80029d4 <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,4096);
 8002a00:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <arm_cfft_init_f32+0x7c>)
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 8002a02:	8991      	ldrh	r1, [r2, #12]
 8002a04:	8181      	strh	r1, [r0, #12]
 8002a06:	6891      	ldr	r1, [r2, #8]
 8002a08:	6852      	ldr	r2, [r2, #4]
 8002a0a:	6081      	str	r1, [r0, #8]
 8002a0c:	6042      	str	r2, [r0, #4]
            break;
        }


        return (status);
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	4770      	bx	lr
            FFTINIT(f32,2048);
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <arm_cfft_init_f32+0x80>)
 8002a14:	e7f5      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,512);
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <arm_cfft_init_f32+0x84>)
 8002a18:	e7f3      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,256);
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <arm_cfft_init_f32+0x88>)
 8002a1c:	e7f1      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,64);
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <arm_cfft_init_f32+0x8c>)
 8002a20:	e7ef      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,32);
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <arm_cfft_init_f32+0x90>)
 8002a24:	e7ed      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,16);
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <arm_cfft_init_f32+0x94>)
 8002a28:	e7eb      	b.n	8002a02 <arm_cfft_init_f32+0x4a>
 8002a2a:	bf00      	nop
 8002a2c:	0802f96c 	.word	0x0802f96c
 8002a30:	0802f95c 	.word	0x0802f95c
 8002a34:	0802f9bc 	.word	0x0802f9bc
 8002a38:	0802f98c 	.word	0x0802f98c
 8002a3c:	0802f9cc 	.word	0x0802f9cc
 8002a40:	0802f99c 	.word	0x0802f99c
 8002a44:	0802f9dc 	.word	0x0802f9dc
 8002a48:	0802f9ac 	.word	0x0802f9ac
 8002a4c:	0802f97c 	.word	0x0802f97c

08002a50 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	ed2d 8b10 	vpush	{d8-d15}
 8002a58:	b08f      	sub	sp, #60	; 0x3c
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8002a5a:	eddf 7ab2 	vldr	s15, [pc, #712]	; 8002d24 <arm_radix8_butterfly_f32+0x2d4>
{
 8002a5e:	9103      	str	r1, [sp, #12]
 8002a60:	920d      	str	r2, [sp, #52]	; 0x34
 8002a62:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
 8002a64:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
 8002a66:	9b02      	ldr	r3, [sp, #8]
 8002a68:	08da      	lsrs	r2, r3, #3
      i1 = 0;
 8002a6a:	0151      	lsls	r1, r2, #5
 8002a6c:	9108      	str	r1, [sp, #32]
 8002a6e:	2418      	movs	r4, #24
 8002a70:	00d1      	lsls	r1, r2, #3
 8002a72:	4354      	muls	r4, r2
 8002a74:	9107      	str	r1, [sp, #28]
 8002a76:	f06f 0117 	mvn.w	r1, #23
 8002a7a:	4351      	muls	r1, r2
 8002a7c:	eb00 1c42 	add.w	ip, r0, r2, lsl #5
 8002a80:	940c      	str	r4, [sp, #48]	; 0x30
 8002a82:	2428      	movs	r4, #40	; 0x28
 8002a84:	eb0c 0701 	add.w	r7, ip, r1
 8002a88:	4354      	muls	r4, r2
 8002a8a:	9406      	str	r4, [sp, #24]
 8002a8c:	eb07 1642 	add.w	r6, r7, r2, lsl #5
 8002a90:	0114      	lsls	r4, r2, #4
 8002a92:	1875      	adds	r5, r6, r1
 8002a94:	9405      	str	r4, [sp, #20]
 8002a96:	2430      	movs	r4, #48	; 0x30
 8002a98:	fb04 fb02 	mul.w	fp, r4, r2
 8002a9c:	eb05 1442 	add.w	r4, r5, r2, lsl #5
 8002aa0:	4421      	add	r1, r4
 8002aa2:	9101      	str	r1, [sp, #4]
 8002aa4:	2138      	movs	r1, #56	; 0x38
 8002aa6:	fb01 fa02 	mul.w	sl, r1, r2
 8002aaa:	9901      	ldr	r1, [sp, #4]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	eb01 1842 	add.w	r8, r1, r2, lsl #5
 8002ab2:	f100 0e04 	add.w	lr, r0, #4
 8002ab6:	f04f 0900 	mov.w	r9, #0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002aba:	eddc 6a00 	vldr	s13, [ip]
 8002abe:	ed1e 6a01 	vldr	s12, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002ac2:	edd7 5a00 	vldr	s11, [r7]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002ac6:	9901      	ldr	r1, [sp, #4]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002ac8:	ee36 7a26 	vadd.f32	s14, s12, s13
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002acc:	ee36 6a66 	vsub.f32	s12, s12, s13
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002ad0:	edd6 6a00 	vldr	s13, [r6]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002ad4:	ed91 3a00 	vldr	s6, [r1]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002ad8:	ee35 5aa6 	vadd.f32	s10, s11, s13
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002adc:	ee35 4ae6 	vsub.f32	s8, s11, s13
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002ae0:	edd5 5a00 	vldr	s11, [r5]
 8002ae4:	edd4 6a00 	vldr	s13, [r4]
 8002ae8:	ee75 3aa6 	vadd.f32	s7, s11, s13
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002aec:	ee75 6ae6 	vsub.f32	s13, s11, s13
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002af0:	edd8 5a00 	vldr	s11, [r8]
 8002af4:	ee73 4a25 	vadd.f32	s9, s6, s11
         t1 = r1 - r3;
 8002af8:	ee77 1a63 	vsub.f32	s3, s14, s7
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002afc:	ee33 3a65 	vsub.f32	s6, s6, s11
         r1 = r1 + r3;
 8002b00:	ee37 7a23 	vadd.f32	s14, s14, s7
         r2 = r2 + r4;
 8002b04:	ee75 5a24 	vadd.f32	s11, s10, s9
         r3 = r2 - r4;
 8002b08:	ee35 2a64 	vsub.f32	s4, s10, s9
         pSrc[2 * i1] = r1 + r2;
 8002b0c:	ee37 5a25 	vadd.f32	s10, s14, s11
         pSrc[2 * i5] = r1 - r2;
 8002b10:	ee37 7a65 	vsub.f32	s14, s14, s11
         pSrc[2 * i1] = r1 + r2;
 8002b14:	ed0e 5a01 	vstr	s10, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
 8002b18:	ed8c 7a00 	vstr	s14, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002b1c:	ed9e 5a00 	vldr	s10, [lr]
 8002b20:	ed9c 7a01 	vldr	s14, [ip, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002b24:	edd6 4a01 	vldr	s9, [r6, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002b28:	edd5 3a01 	vldr	s7, [r5, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002b2c:	ed98 1a01 	vldr	s2, [r8, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002b30:	ee75 5a07 	vadd.f32	s11, s10, s14
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002b34:	ee35 5a47 	vsub.f32	s10, s10, s14
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002b38:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b3c:	ee77 2a24 	vadd.f32	s5, s14, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002b40:	ee37 7a64 	vsub.f32	s14, s14, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002b44:	edd4 4a01 	vldr	s9, [r4, #4]
 8002b48:	ee73 0aa4 	vadd.f32	s1, s7, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002b4c:	ee73 4ae4 	vsub.f32	s9, s7, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002b50:	edd1 3a01 	vldr	s7, [r1, #4]
 8002b54:	ee33 0a81 	vadd.f32	s0, s7, s2
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002b58:	ee73 3ac1 	vsub.f32	s7, s7, s2
         t2 = r1 - s3;
 8002b5c:	ee35 1ae0 	vsub.f32	s2, s11, s1
         r1 = r1 + s3;
 8002b60:	ee75 5aa0 	vadd.f32	s11, s11, s1
         s3 = r2 - r4;
 8002b64:	ee72 0ac0 	vsub.f32	s1, s5, s0
         r2 = r2 + r4;
 8002b68:	ee72 2a80 	vadd.f32	s5, s5, s0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002b6c:	ee35 0aa2 	vadd.f32	s0, s11, s5
         pSrc[2 * i5 + 1] = r1 - r2;
 8002b70:	ee75 5ae2 	vsub.f32	s11, s11, s5
         pSrc[2 * i1 + 1] = r1 + r2;
 8002b74:	ed8e 0a00 	vstr	s0, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002b78:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
 8002b7c:	ee71 5aa0 	vadd.f32	s11, s3, s1
         pSrc[2 * i7]     = t1 - s3;
 8002b80:	ee71 1ae0 	vsub.f32	s3, s3, s1
         pSrc[2 * i3]     = t1 + s3;
 8002b84:	edc5 5a00 	vstr	s11, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002b88:	ee71 5a42 	vsub.f32	s11, s2, s4
         pSrc[2 * i7 + 1] = t2 + r3;
 8002b8c:	ee32 2a01 	vadd.f32	s4, s4, s2
         pSrc[2 * i7]     = t1 - s3;
 8002b90:	edc4 1a00 	vstr	s3, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002b94:	edc5 5a01 	vstr	s11, [r5, #4]
         r6 = (r6 + r8) * C81;
 8002b98:	ee74 5a03 	vadd.f32	s11, s8, s6
         pSrc[2 * i7 + 1] = t2 + r3;
 8002b9c:	ed84 2a01 	vstr	s4, [r4, #4]
         r2 = (s6 - s8) * C81;
 8002ba0:	ee77 2a63 	vsub.f32	s5, s14, s7
         r1 = (r6 - r8) * C81;
 8002ba4:	ee34 2a43 	vsub.f32	s4, s8, s6
         s6 = (s6 + s8) * C81;
 8002ba8:	ee37 7a23 	vadd.f32	s14, s14, s7
         r5 = r5 + r1;
         r8 = r7 - r6;
 8002bac:	eeb0 4a66 	vmov.f32	s8, s13
 8002bb0:	eea5 4ae7 	vfms.f32	s8, s11, s15
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
      } while (i1 < fftLen);
 8002bb4:	449c      	add	ip, r3
 8002bb6:	441d      	add	r5, r3
         r7 = r7 + r6;
 8002bb8:	eee5 6aa7 	vfma.f32	s13, s11, s15
      } while (i1 < fftLen);
 8002bbc:	441c      	add	r4, r3
 8002bbe:	449e      	add	lr, r3
         t2 = s5 - r2;
 8002bc0:	eeb0 3a45 	vmov.f32	s6, s10
         s5 = s5 + r2;
 8002bc4:	eef0 5a45 	vmov.f32	s11, s10
         s7 = s7 + s6;
 8002bc8:	eeb0 5a64 	vmov.f32	s10, s9
 8002bcc:	eea7 5a27 	vfma.f32	s10, s14, s15
         t1 = r5 - r1;
 8002bd0:	eef0 3a46 	vmov.f32	s7, s12
         r5 = r5 + r1;
 8002bd4:	eea2 6a27 	vfma.f32	s12, s4, s15
         t2 = s5 - r2;
 8002bd8:	eea2 3ae7 	vfms.f32	s6, s5, s15
         s5 = s5 + r2;
 8002bdc:	eee2 5aa7 	vfma.f32	s11, s5, s15
         s8 = s7 - s6;
 8002be0:	eef0 2a64 	vmov.f32	s5, s9
 8002be4:	eee7 2a67 	vfms.f32	s5, s14, s15
         t1 = r5 - r1;
 8002be8:	eee2 3a67 	vfms.f32	s7, s4, s15
         pSrc[2 * i2]     = r5 + s7;
 8002bec:	ee36 7a05 	vadd.f32	s14, s12, s10
         pSrc[2 * i8]     = r5 - s7;
 8002bf0:	ee36 6a45 	vsub.f32	s12, s12, s10
         pSrc[2 * i2]     = r5 + s7;
 8002bf4:	ed87 7a00 	vstr	s14, [r7]
         pSrc[2 * i6]     = t1 + s8;
 8002bf8:	ee33 7aa2 	vadd.f32	s14, s7, s5
         pSrc[2 * i8]     = r5 - s7;
 8002bfc:	ed88 6a00 	vstr	s12, [r8]
         pSrc[2 * i4]     = t1 - s8;
 8002c00:	ee73 3ae2 	vsub.f32	s7, s7, s5
         pSrc[2 * i6]     = t1 + s8;
 8002c04:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002c08:	ee35 7ae6 	vsub.f32	s14, s11, s13
         pSrc[2 * i4]     = t1 - s8;
 8002c0c:	edc1 3a00 	vstr	s7, [r1]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002c10:	ee76 6aa5 	vadd.f32	s13, s13, s11
         pSrc[2 * i2 + 1] = s5 - r7;
 8002c14:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002c18:	ee33 7a44 	vsub.f32	s14, s6, s8
         pSrc[2 * i4 + 1] = t2 + r8;
 8002c1c:	ee34 4a03 	vadd.f32	s8, s8, s6
         pSrc[2 * i8 + 1] = s5 + r7;
 8002c20:	edc8 6a01 	vstr	s13, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002c24:	ed86 7a01 	vstr	s14, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002c28:	ed81 4a01 	vstr	s8, [r1, #4]
         i1 += n1;
 8002c2c:	9902      	ldr	r1, [sp, #8]
 8002c2e:	4489      	add	r9, r1
      } while (i1 < fftLen);
 8002c30:	9901      	ldr	r1, [sp, #4]
 8002c32:	4419      	add	r1, r3
 8002c34:	9101      	str	r1, [sp, #4]
 8002c36:	9903      	ldr	r1, [sp, #12]
 8002c38:	4549      	cmp	r1, r9
 8002c3a:	441f      	add	r7, r3
 8002c3c:	441e      	add	r6, r3
 8002c3e:	4498      	add	r8, r3
 8002c40:	f63f af3b 	bhi.w	8002aba <arm_radix8_butterfly_f32+0x6a>

      if (n2 < 8)
 8002c44:	2a07      	cmp	r2, #7
 8002c46:	f240 8174 	bls.w	8002f32 <arm_radix8_butterfly_f32+0x4e2>
 8002c4a:	9908      	ldr	r1, [sp, #32]
 8002c4c:	4401      	add	r1, r0
 8002c4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c50:	9907      	ldr	r1, [sp, #28]
 8002c52:	4401      	add	r1, r0
 8002c54:	910a      	str	r1, [sp, #40]	; 0x28
 8002c56:	9906      	ldr	r1, [sp, #24]
 8002c58:	4401      	add	r1, r0
 8002c5a:	9109      	str	r1, [sp, #36]	; 0x24
 8002c5c:	9905      	ldr	r1, [sp, #20]
 8002c5e:	4401      	add	r1, r0
 8002c60:	9108      	str	r1, [sp, #32]
 8002c62:	eb0b 0100 	add.w	r1, fp, r0
 8002c66:	9107      	str	r1, [sp, #28]
 8002c68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c6a:	4401      	add	r1, r0
 8002c6c:	9106      	str	r1, [sp, #24]
 8002c6e:	eb0a 0100 	add.w	r1, sl, r0
 8002c72:	9105      	str	r1, [sp, #20]
         break;

      ia1 = 0;
      j = 1;
 8002c74:	2401      	movs	r4, #1
      ia1 = 0;
 8002c76:	2100      	movs	r1, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002c78:	9d04      	ldr	r5, [sp, #16]
 8002c7a:	4429      	add	r1, r5
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;

         co2 = pCoef[2 * ia1];
 8002c7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002c7e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 8002c82:	ed95 2a00 	vldr	s4, [r5]
         co3 = pCoef[2 * ia2];
 8002c86:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 8002c8a:	ed95 0a00 	vldr	s0, [r5]
         co4 = pCoef[2 * ia3];
 8002c8e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 8002c92:	ed95 5a00 	vldr	s10, [r5]
         co5 = pCoef[2 * ia4];
 8002c96:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 8002c9a:	edd5 8a00 	vldr	s17, [r5]
         co6 = pCoef[2 * ia5];
 8002c9e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 8002ca2:	ed95 4a00 	vldr	s8, [r5]
         co7 = pCoef[2 * ia6];
 8002ca6:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 8002caa:	ed95 1a00 	vldr	s2, [r5]
         co8 = pCoef[2 * ia7];
 8002cae:	f06f 062f 	mvn.w	r6, #47	; 0x2f
 8002cb2:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 8002cb6:	fb06 5601 	mla	r6, r6, r1, r5
 8002cba:	ed95 3a00 	vldr	s6, [r5]
         si3 = pCoef[2 * ia2 + 1];
         si4 = pCoef[2 * ia3 + 1];
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];
 8002cbe:	edd5 2a01 	vldr	s5, [r5, #4]
 8002cc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
         si2 = pCoef[2 * ia1 + 1];
 8002cc4:	edd6 1a01 	vldr	s3, [r6, #4]
         si3 = pCoef[2 * ia2 + 1];
 8002cc8:	eb05 09c4 	add.w	r9, r5, r4, lsl #3
 8002ccc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002cce:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 8002cd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002cd4:	eb05 0ec4 	add.w	lr, r5, r4, lsl #3
 8002cd8:	9d08      	ldr	r5, [sp, #32]
 8002cda:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 8002cde:	ed96 8a01 	vldr	s16, [r6, #4]
         si4 = pCoef[2 * ia3 + 1];
 8002ce2:	eb05 0cc4 	add.w	ip, r5, r4, lsl #3
 8002ce6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 8002cea:	9d07      	ldr	r5, [sp, #28]
 8002cec:	edd6 4a01 	vldr	s9, [r6, #4]
         si5 = pCoef[2 * ia4 + 1];
 8002cf0:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 8002cf4:	ed96 9a01 	vldr	s18, [r6, #4]
         si6 = pCoef[2 * ia5 + 1];
 8002cf8:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
 8002cfc:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 8002d00:	9d06      	ldr	r5, [sp, #24]
 8002d02:	edd6 3a01 	vldr	s7, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
 8002d06:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 8002d0a:	edd6 0a01 	vldr	s1, [r6, #4]

         i1 = j;
 8002d0e:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
 8002d12:	9d05      	ldr	r5, [sp, #20]
 8002d14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002d18:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
 8002d1c:	9501      	str	r5, [sp, #4]
 8002d1e:	46a3      	mov	fp, r4
 8002d20:	e002      	b.n	8002d28 <arm_radix8_butterfly_f32+0x2d8>
 8002d22:	bf00      	nop
 8002d24:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002d28:	ed99 7a00 	vldr	s14, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002d2c:	ed9e 6a00 	vldr	s12, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002d30:	edda 9a00 	vldr	s19, [sl]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002d34:	ed98 aa00 	vldr	s20, [r8]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002d38:	9d01      	ldr	r5, [sp, #4]
 8002d3a:	edd6 ba00 	vldr	s23, [r6]
 8002d3e:	ed95 ba00 	vldr	s22, [r5]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002d42:	eddc aa00 	vldr	s21, [ip]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002d46:	ee79 6a87 	vadd.f32	s13, s19, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002d4a:	ee79 9ac7 	vsub.f32	s19, s19, s14
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002d4e:	ee3a 7a06 	vadd.f32	s14, s20, s12
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002d52:	ee3a aa46 	vsub.f32	s20, s20, s12
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002d56:	ed97 6a00 	vldr	s12, [r7]
 8002d5a:	ee7a 5a86 	vadd.f32	s11, s21, s12
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002d5e:	ee7a aac6 	vsub.f32	s21, s21, s12
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002d62:	ee3b 6a8b 	vadd.f32	s12, s23, s22
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002d66:	ee7b bacb 	vsub.f32	s23, s23, s22
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
 8002d6a:	ee77 da46 	vsub.f32	s27, s14, s12
            t1 = r1 - r3;
 8002d6e:	ee36 bae5 	vsub.f32	s22, s13, s11
            r2 = r2 + r4;
 8002d72:	ee37 7a06 	vadd.f32	s14, s14, s12
            r1 = r1 + r3;
 8002d76:	ee76 6aa5 	vadd.f32	s13, s13, s11
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002d7a:	edda 5a01 	vldr	s11, [sl, #4]
            pSrc[2 * i1] = r1 + r2;
 8002d7e:	ee36 6a87 	vadd.f32	s12, s13, s14
            r2 = r1 - r2;
 8002d82:	ee76 6ac7 	vsub.f32	s13, s13, s14
            pSrc[2 * i1] = r1 + r2;
 8002d86:	ed8a 6a00 	vstr	s12, [sl]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002d8a:	ed99 7a01 	vldr	s14, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002d8e:	ed98 6a01 	vldr	s12, [r8, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002d92:	ed96 da01 	vldr	s26, [r6, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002d96:	ee75 ea87 	vadd.f32	s29, s11, s14
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002d9a:	ee35 cac7 	vsub.f32	s24, s11, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002d9e:	ed9e 7a01 	vldr	s14, [lr, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002da2:	ee76 ca47 	vsub.f32	s25, s12, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002da6:	ee76 fa07 	vadd.f32	s31, s12, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002daa:	ed9c 6a01 	vldr	s12, [ip, #4]
 8002dae:	ed97 7a01 	vldr	s14, [r7, #4]
 8002db2:	ee36 ea07 	vadd.f32	s28, s12, s14
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002db6:	ee36 7a47 	vsub.f32	s14, s12, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002dba:	ed95 6a01 	vldr	s12, [r5, #4]
 8002dbe:	ee7d 5a06 	vadd.f32	s11, s26, s12
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
            t2 = s1 - s3;
 8002dc2:	ee3e face 	vsub.f32	s30, s29, s28
            s1 = s1 + s3;
 8002dc6:	ee3e ea8e 	vadd.f32	s28, s29, s28
            s3 = s2 - s4;
 8002dca:	ee7f eae5 	vsub.f32	s29, s31, s11
            s2 = s2 + s4;
 8002dce:	ee7f 5aa5 	vadd.f32	s11, s31, s11
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002dd2:	ee3d da46 	vsub.f32	s26, s26, s12
            r1 = t1 + s3;
 8002dd6:	ee3b 6a2e 	vadd.f32	s12, s22, s29
            t1 = t1 - s3;
 8002dda:	ee3b ba6e 	vsub.f32	s22, s22, s29
            pSrc[2 * i1 + 1] = s1 + s2;
 8002dde:	ee7e ea25 	vadd.f32	s29, s28, s11
            s2 = s1 - s2;
 8002de2:	ee3e ea65 	vsub.f32	s28, s28, s11
            pSrc[2 * i1 + 1] = s1 + s2;
 8002de6:	edca ea01 	vstr	s29, [sl, #4]
            s1 = t2 - r3;
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 8002dea:	ee69 5a0e 	vmul.f32	s11, s18, s28
            s1 = t2 - r3;
 8002dee:	ee7f ea6d 	vsub.f32	s29, s30, s27
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 8002df2:	eee8 5aa6 	vfma.f32	s11, s17, s13
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
         } while (i1 < fftLen);
 8002df6:	449a      	add	sl, r3
            t2 = t2 + r3;
 8002df8:	ee7d da8f 	vadd.f32	s27, s27, s30
            pSrc[2 * i5]     = p1 + p2;
 8002dfc:	edc9 5a00 	vstr	s11, [r9]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002e00:	ee66 5ac9 	vnmul.f32	s11, s13, s18
            p2 = si3 * s1;
 8002e04:	ee68 6a2e 	vmul.f32	s13, s16, s29
            pSrc[2 * i5 + 1] = p3 - p4;
 8002e08:	eee8 5a8e 	vfma.f32	s11, s17, s28
            pSrc[2 * i3]     = p1 + p2;
 8002e0c:	eee0 6a06 	vfma.f32	s13, s0, s12
            pSrc[2 * i5 + 1] = p3 - p4;
 8002e10:	edc9 5a01 	vstr	s11, [r9, #4]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002e14:	ee26 6a48 	vnmul.f32	s12, s12, s16
            pSrc[2 * i3]     = p1 + p2;
 8002e18:	edcc 6a00 	vstr	s13, [ip]
            p2 = si7 * t2;
 8002e1c:	ee60 6aad 	vmul.f32	s13, s1, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 8002e20:	eea0 6a2e 	vfma.f32	s12, s0, s29
         } while (i1 < fftLen);
 8002e24:	4499      	add	r9, r3
            pSrc[2 * i7]     = p1 + p2;
 8002e26:	eee1 6a0b 	vfma.f32	s13, s2, s22
            pSrc[2 * i3 + 1] = p3 - p4;
 8002e2a:	ed8c 6a01 	vstr	s12, [ip, #4]
            pSrc[2 * i7]     = p1 + p2;
 8002e2e:	edc7 6a00 	vstr	s13, [r7]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002e32:	ee6b 6a60 	vnmul.f32	s13, s22, s1
            r1 = (r6 - r8) * C81;
 8002e36:	ee7a 5a6b 	vsub.f32	s11, s20, s23
            pSrc[2 * i7 + 1] = p3 - p4;
 8002e3a:	eee1 6a2d 	vfma.f32	s13, s2, s27
         } while (i1 < fftLen);
 8002e3e:	449c      	add	ip, r3
            r6 = (r6 + r8) * C81;
 8002e40:	ee3a aa2b 	vadd.f32	s20, s20, s23
            pSrc[2 * i7 + 1] = p3 - p4;
 8002e44:	edc7 6a01 	vstr	s13, [r7, #4]
            s6 = (s6 + s8) * C81;
 8002e48:	ee3c 6a8d 	vadd.f32	s12, s25, s26
            s1 = (s6 - s8) * C81;
 8002e4c:	ee7c 6acd 	vsub.f32	s13, s25, s26
            t1 = r5 - r1;
 8002e50:	eef0 ca69 	vmov.f32	s25, s19
 8002e54:	eee5 cae7 	vfms.f32	s25, s11, s15
         } while (i1 < fftLen);
 8002e58:	441f      	add	r7, r3
            r5 = r5 + r1;
 8002e5a:	eee5 9aa7 	vfma.f32	s19, s11, s15
            s8 = s7 - s6;
 8002e5e:	eef0 ba47 	vmov.f32	s23, s14
            s5 = s5 + s1;
 8002e62:	eef0 5a4c 	vmov.f32	s11, s24
            s8 = s7 - s6;
 8002e66:	eee6 ba67 	vfms.f32	s23, s12, s15
            s5 = s5 + s1;
 8002e6a:	eee6 5aa7 	vfma.f32	s11, s13, s15
            s7 = s7 + s6;
 8002e6e:	eea6 7a27 	vfma.f32	s14, s12, s15
            r8 = r7 - r6;
 8002e72:	eeb0 ba6a 	vmov.f32	s22, s21
            r7 = r7 + r6;
 8002e76:	eeea aa27 	vfma.f32	s21, s20, s15
            r8 = r7 - r6;
 8002e7a:	eeaa ba67 	vfms.f32	s22, s20, s15
            t2 = s5 - s1;
 8002e7e:	eeb0 aa4c 	vmov.f32	s20, s24
 8002e82:	eea6 aae7 	vfms.f32	s20, s13, s15
            r1 = r5 + s7;
 8002e86:	ee39 6a87 	vadd.f32	s12, s19, s14
            r6 = t1 + s8;
 8002e8a:	ee7c 6aab 	vadd.f32	s13, s25, s23
            r5 = r5 - s7;
 8002e8e:	ee39 7ac7 	vsub.f32	s14, s19, s14
            t1 = t1 - s8;
 8002e92:	ee7c 9aeb 	vsub.f32	s19, s25, s23
            s1 = s5 - r7;
 8002e96:	ee75 baea 	vsub.f32	s23, s11, s21
            s5 = s5 + r7;
 8002e9a:	ee7a 5aa5 	vadd.f32	s11, s21, s11
            s6 = t2 - r8;
 8002e9e:	ee7a aa4b 	vsub.f32	s21, s20, s22
            t2 = t2 + r8;
 8002ea2:	ee3b aa0a 	vadd.f32	s20, s22, s20
            p2 = si2 * s1;
 8002ea6:	ee21 baab 	vmul.f32	s22, s3, s23
            pSrc[2 * i2]     = p1 + p2;
 8002eaa:	eea2 ba06 	vfma.f32	s22, s4, s12
            pSrc[2 * i2 + 1] = p3 - p4;
 8002eae:	ee26 6a61 	vnmul.f32	s12, s12, s3
            pSrc[2 * i2]     = p1 + p2;
 8002eb2:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i2 + 1] = p3 - p4;
 8002eb6:	eea2 6a2b 	vfma.f32	s12, s4, s23
 8002eba:	ed88 6a01 	vstr	s12, [r8, #4]
            p2 = si8 * s5;
 8002ebe:	ee22 6aa5 	vmul.f32	s12, s5, s11
         } while (i1 < fftLen);
 8002ec2:	4498      	add	r8, r3
            pSrc[2 * i8]     = p1 + p2;
 8002ec4:	eea3 6a07 	vfma.f32	s12, s6, s14
 8002ec8:	ed85 6a00 	vstr	s12, [r5]
            pSrc[2 * i8 + 1] = p3 - p4;
 8002ecc:	ee27 6a62 	vnmul.f32	s12, s14, s5
            p2 = si6 * s6;
 8002ed0:	ee23 7aaa 	vmul.f32	s14, s7, s21
            pSrc[2 * i8 + 1] = p3 - p4;
 8002ed4:	eea3 6a25 	vfma.f32	s12, s6, s11
            pSrc[2 * i6]     = p1 + p2;
 8002ed8:	eea4 7a26 	vfma.f32	s14, s8, s13
            pSrc[2 * i8 + 1] = p3 - p4;
 8002edc:	ed85 6a01 	vstr	s12, [r5, #4]
            pSrc[2 * i6 + 1] = p3 - p4;
 8002ee0:	ee66 6ae3 	vnmul.f32	s13, s13, s7
            pSrc[2 * i6]     = p1 + p2;
 8002ee4:	ed8e 7a00 	vstr	s14, [lr]
            p2 = si4 * t2;
 8002ee8:	ee24 7a8a 	vmul.f32	s14, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 8002eec:	eee4 6a2a 	vfma.f32	s13, s8, s21
            pSrc[2 * i4]     = p1 + p2;
 8002ef0:	eea5 7a29 	vfma.f32	s14, s10, s19
            pSrc[2 * i6 + 1] = p3 - p4;
 8002ef4:	edce 6a01 	vstr	s13, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
 8002ef8:	ed86 7a00 	vstr	s14, [r6]
            pSrc[2 * i4 + 1] = p3 - p4;
 8002efc:	ee29 7ae4 	vnmul.f32	s14, s19, s9
         } while (i1 < fftLen);
 8002f00:	449e      	add	lr, r3
            pSrc[2 * i4 + 1] = p3 - p4;
 8002f02:	eea5 7a0a 	vfma.f32	s14, s10, s20
 8002f06:	ed86 7a01 	vstr	s14, [r6, #4]
            i1 += n1;
 8002f0a:	9d02      	ldr	r5, [sp, #8]
 8002f0c:	44ab      	add	fp, r5
         } while (i1 < fftLen);
 8002f0e:	9d01      	ldr	r5, [sp, #4]
 8002f10:	441d      	add	r5, r3
 8002f12:	9501      	str	r5, [sp, #4]
 8002f14:	9d03      	ldr	r5, [sp, #12]
 8002f16:	455d      	cmp	r5, fp
 8002f18:	441e      	add	r6, r3
 8002f1a:	f63f af05 	bhi.w	8002d28 <arm_radix8_butterfly_f32+0x2d8>

         j++;
 8002f1e:	3401      	adds	r4, #1
      } while (j < n2);
 8002f20:	42a2      	cmp	r2, r4
 8002f22:	f47f aea9 	bne.w	8002c78 <arm_radix8_butterfly_f32+0x228>

      twidCoefModifier <<= 3;
 8002f26:	9b04      	ldr	r3, [sp, #16]
 8002f28:	9202      	str	r2, [sp, #8]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
 8002f30:	e599      	b.n	8002a66 <arm_radix8_butterfly_f32+0x16>
}
 8002f32:	b00f      	add	sp, #60	; 0x3c
 8002f34:	ecbd 8b10 	vpop	{d8-d15}
 8002f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f3c <stage_rfft_f32>:

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8002f3c:	edd1 7a01 	vldr	s15, [r1, #4]
   xBR = pB[0];
 8002f40:	edd1 5a00 	vldr	s11, [r1]
   k = (S->Sint).fftLen - 1;
 8002f44:	8803      	ldrh	r3, [r0, #0]
   t1b = xBI + xAI  ;
 8002f46:	ee77 7aa7 	vadd.f32	s15, s15, s15

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8002f4a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002f4e:	eeb0 7a67 	vmov.f32	s14, s15
 8002f52:	eea5 7a86 	vfma.f32	s14, s11, s12
{
 8002f56:	b510      	push	{r4, lr}
   *pOut++ = 0.5f * ( t1a - t1b );
 8002f58:	eed5 7a86 	vfnms.f32	s15, s11, s12
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8002f5c:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( t1a + t1b );
 8002f5e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002f62:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( t1a - t1b );
 8002f66:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 8002f6a:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
 8002f6c:	f104 0010 	add.w	r0, r4, #16
 8002f70:	f101 0410 	add.w	r4, r1, #16
 8002f74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002f78:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
 8002f7c:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
 8002f80:	3908      	subs	r1, #8
 8002f82:	3210      	adds	r2, #16
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8002f84:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR = pB[0];
 8002f88:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
 8002f8c:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI = pA[1];
 8002f90:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
 8002f94:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 8002f98:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
 8002f9c:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
 8002fa0:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002fa4:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002fa8:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002fac:	eea5 7a85 	vfma.f32	s14, s11, s10


      pA += 2;
      pB -= 2;
      k--;
 8002fb0:	3b01      	subs	r3, #1
   } while (k > 0);
 8002fb2:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002fb4:	eee4 7a85 	vfma.f32	s15, s9, s10
   } while (k > 0);
 8002fb8:	f100 0008 	add.w	r0, r0, #8
 8002fbc:	f102 0208 	add.w	r2, r2, #8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002fc0:	eea4 7a86 	vfma.f32	s14, s9, s12
   } while (k > 0);
 8002fc4:	f104 0408 	add.w	r4, r4, #8
 8002fc8:	f1a1 0108 	sub.w	r1, r1, #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002fcc:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002fd0:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002fd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002fd8:	ed02 7a04 	vstr	s14, [r2, #-16]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002fdc:	ed42 7a03 	vstr	s15, [r2, #-12]
   } while (k > 0);
 8002fe0:	dcd0      	bgt.n	8002f84 <stage_rfft_f32+0x48>
}
 8002fe2:	bd10      	pop	{r4, pc}

08002fe4 <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
 8002fe4:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
 8002fe8:	ed91 6a01 	vldr	s12, [r1, #4]
   k = (S->Sint).fftLen - 1;
 8002fec:	8803      	ldrh	r3, [r0, #0]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
 8002fee:	ee37 7a86 	vadd.f32	s14, s15, s12
   *pOut++ = 0.5f * ( xAR - xAI );
 8002ff2:	ee77 7ac6 	vsub.f32	s15, s15, s12
   *pOut++ = 0.5f * ( xAR + xAI );
 8002ff6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
{
 8002ffa:	b510      	push	{r4, lr}
   *pOut++ = 0.5f * ( xAR + xAI );
 8002ffc:	ee27 7a26 	vmul.f32	s14, s14, s13
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003000:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( xAR + xAI );
 8003002:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
 8003006:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 800300a:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR - xAI );
 800300c:	edc2 7a01 	vstr	s15, [r2, #4]
   pCoeff += 2 ;
 8003010:	f104 0008 	add.w	r0, r4, #8
 8003014:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
 8003016:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
 800301a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
 800301e:	2b00      	cmp	r3, #0
 8003020:	f102 0208 	add.w	r2, r2, #8
 8003024:	f100 0008 	add.w	r0, r0, #8
 8003028:	f104 0408 	add.w	r4, r4, #8
 800302c:	f1a1 0108 	sub.w	r1, r1, #8
 8003030:	dc00      	bgt.n	8003034 <merge_rfft_f32+0x50>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 8003032:	bd10      	pop	{r4, pc}
      xBI =   pB[1]    ;
 8003034:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR =   pB[0]    ;
 8003038:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
 800303c:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI =  pA[1];
 8003040:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
 8003044:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 8003048:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
 800304c:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
 8003050:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003054:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003058:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800305c:	eea5 7ac5 	vfms.f32	s14, s11, s10
      k--;
 8003060:	3b01      	subs	r3, #1
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003062:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003066:	eea4 7ac6 	vfms.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800306a:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800306e:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003072:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003076:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800307a:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
 800307e:	e7ce      	b.n	800301e <merge_rfft_f32+0x3a>

08003080 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8003080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003084:	4605      	mov	r5, r0
 8003086:	460f      	mov	r7, r1
 8003088:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
 800308a:	461c      	mov	r4, r3
 800308c:	b14b      	cbz	r3, 80030a2 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800308e:	f7ff ffa9 	bl	8002fe4 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8003092:	4622      	mov	r2, r4
 8003094:	4631      	mov	r1, r6
 8003096:	4628      	mov	r0, r5
 8003098:	2301      	movs	r3, #1
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800309a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800309e:	f7ff bc21 	b.w	80028e4 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80030a2:	4622      	mov	r2, r4
 80030a4:	2301      	movs	r3, #1
 80030a6:	f7ff fc1d 	bl	80028e4 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80030aa:	4632      	mov	r2, r6
 80030ac:	4639      	mov	r1, r7
 80030ae:	4628      	mov	r0, r5
}
 80030b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
 80030b4:	f7ff bf42 	b.w	8002f3c <stage_rfft_f32>

080030b8 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80030b8:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80030ba:	4604      	mov	r4, r0
 80030bc:	b140      	cbz	r0, 80030d0 <arm_rfft_32_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),16);
 80030be:	2110      	movs	r1, #16
 80030c0:	f7ff fc7a 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 80030c4:	b918      	cbnz	r0, 80030ce <arm_rfft_32_fast_init_f32+0x16>
  {
    return(status);
  }

  S->fftLenRFFT = 32U;
 80030c6:	2320      	movs	r3, #32
 80030c8:	8223      	strh	r3, [r4, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80030ca:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <arm_rfft_32_fast_init_f32+0x20>)
 80030cc:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 80030ce:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	e7fb      	b.n	80030ce <arm_rfft_32_fast_init_f32+0x16>
 80030d6:	bf00      	nop
 80030d8:	0802afdc 	.word	0x0802afdc

080030dc <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80030dc:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80030de:	4604      	mov	r4, r0
 80030e0:	b140      	cbz	r0, 80030f4 <arm_rfft_64_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),32);
 80030e2:	2120      	movs	r1, #32
 80030e4:	f7ff fc68 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 80030e8:	b918      	cbnz	r0, 80030f2 <arm_rfft_64_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 64U;
 80030ea:	2340      	movs	r3, #64	; 0x40
 80030ec:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80030ee:	4b03      	ldr	r3, [pc, #12]	; (80030fc <arm_rfft_64_fast_init_f32+0x20>)
 80030f0:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 80030f2:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	e7fb      	b.n	80030f2 <arm_rfft_64_fast_init_f32+0x16>
 80030fa:	bf00      	nop
 80030fc:	0802f85c 	.word	0x0802f85c

08003100 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8003100:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003102:	4604      	mov	r4, r0
 8003104:	b140      	cbz	r0, 8003118 <arm_rfft_128_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),64);
 8003106:	2140      	movs	r1, #64	; 0x40
 8003108:	f7ff fc56 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 800310c:	b918      	cbnz	r0, 8003116 <arm_rfft_128_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 128;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <arm_rfft_128_fast_init_f32+0x20>)
 8003114:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 8003116:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	e7fb      	b.n	8003116 <arm_rfft_128_fast_init_f32+0x16>
 800311e:	bf00      	nop
 8003120:	080289dc 	.word	0x080289dc

08003124 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8003124:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003126:	4604      	mov	r4, r0
 8003128:	b148      	cbz	r0, 800313e <arm_rfft_256_fast_init_f32+0x1a>

  status=arm_cfft_init_f32(&(S->Sint),128);
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	f7ff fc44 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 8003130:	b920      	cbnz	r0, 800313c <arm_rfft_256_fast_init_f32+0x18>
  {
    return(status);
  }
  S->fftLenRFFT = 256U;
 8003132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003136:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003138:	4b02      	ldr	r3, [pc, #8]	; (8003144 <arm_rfft_256_fast_init_f32+0x20>)
 800313a:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 800313c:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800313e:	f04f 30ff 	mov.w	r0, #4294967295
 8003142:	e7fb      	b.n	800313c <arm_rfft_256_fast_init_f32+0x18>
 8003144:	0802abdc 	.word	0x0802abdc

08003148 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8003148:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800314a:	4604      	mov	r4, r0
 800314c:	b150      	cbz	r0, 8003164 <arm_rfft_512_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),256);
 800314e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003152:	f7ff fc31 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 8003156:	b920      	cbnz	r0, 8003162 <arm_rfft_512_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 512U;
 8003158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315c:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800315e:	4b03      	ldr	r3, [pc, #12]	; (800316c <arm_rfft_512_fast_init_f32+0x24>)
 8003160:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 8003162:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	e7fb      	b.n	8003162 <arm_rfft_512_fast_init_f32+0x1a>
 800316a:	bf00      	nop
 800316c:	0802f05c 	.word	0x0802f05c

08003170 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8003170:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003172:	4604      	mov	r4, r0
 8003174:	b150      	cbz	r0, 800318c <arm_rfft_1024_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),512);
 8003176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800317a:	f7ff fc1d 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 800317e:	b920      	cbnz	r0, 800318a <arm_rfft_1024_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 1024U;
 8003180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003184:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8003186:	4b03      	ldr	r3, [pc, #12]	; (8003194 <arm_rfft_1024_fast_init_f32+0x24>)
 8003188:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 800318a:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	e7fb      	b.n	800318a <arm_rfft_1024_fast_init_f32+0x1a>
 8003192:	bf00      	nop
 8003194:	080279dc 	.word	0x080279dc

08003198 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8003198:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800319a:	4604      	mov	r4, r0
 800319c:	b150      	cbz	r0, 80031b4 <arm_rfft_2048_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 800319e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031a2:	f7ff fc09 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 80031a6:	b920      	cbnz	r0, 80031b2 <arm_rfft_2048_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 2048U;
 80031a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ac:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80031ae:	4b03      	ldr	r3, [pc, #12]	; (80031bc <arm_rfft_2048_fast_init_f32+0x24>)
 80031b0:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 80031b2:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	e7fb      	b.n	80031b2 <arm_rfft_2048_fast_init_f32+0x1a>
 80031ba:	bf00      	nop
 80031bc:	08028bdc 	.word	0x08028bdc

080031c0 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 80031c0:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80031c2:	4604      	mov	r4, r0
 80031c4:	b150      	cbz	r0, 80031dc <arm_rfft_4096_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 80031c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031ca:	f7ff fbf5 	bl	80029b8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
 80031ce:	b920      	cbnz	r0, 80031da <arm_rfft_4096_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 4096U;
 80031d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d4:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80031d6:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <arm_rfft_4096_fast_init_f32+0x24>)
 80031d8:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
 80031da:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	e7fb      	b.n	80031da <arm_rfft_4096_fast_init_f32+0x1a>
 80031e2:	bf00      	nop
 80031e4:	0802b05c 	.word	0x0802b05c

080031e8 <arm_rfft_fast_init_f32>:
  uint16_t fftLen)
{
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;

  switch (fftLen)
 80031e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80031ec:	d01a      	beq.n	8003224 <arm_rfft_fast_init_f32+0x3c>
 80031ee:	d80e      	bhi.n	800320e <arm_rfft_fast_init_f32+0x26>
 80031f0:	2980      	cmp	r1, #128	; 0x80
 80031f2:	d019      	beq.n	8003228 <arm_rfft_fast_init_f32+0x40>
 80031f4:	d806      	bhi.n	8003204 <arm_rfft_fast_init_f32+0x1c>
 80031f6:	2920      	cmp	r1, #32
 80031f8:	d018      	beq.n	800322c <arm_rfft_fast_init_f32+0x44>
 80031fa:	2940      	cmp	r1, #64	; 0x40
 80031fc:	d018      	beq.n	8003230 <arm_rfft_fast_init_f32+0x48>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
  return fptr( S );

}
 80031fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003202:	4770      	bx	lr
  switch (fftLen)
 8003204:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003208:	d1f9      	bne.n	80031fe <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_256_fast_init_f32;
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <arm_rfft_fast_init_f32+0x54>)
 800320c:	e009      	b.n	8003222 <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
 800320e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003212:	d00f      	beq.n	8003234 <arm_rfft_fast_init_f32+0x4c>
 8003214:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003218:	d00e      	beq.n	8003238 <arm_rfft_fast_init_f32+0x50>
 800321a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800321e:	d1ee      	bne.n	80031fe <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_1024_fast_init_f32;
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <arm_rfft_fast_init_f32+0x58>)
  return fptr( S );
 8003222:	4718      	bx	r3
    fptr = arm_rfft_512_fast_init_f32;
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <arm_rfft_fast_init_f32+0x5c>)
 8003226:	e7fc      	b.n	8003222 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_128_fast_init_f32;
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <arm_rfft_fast_init_f32+0x60>)
 800322a:	e7fa      	b.n	8003222 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_32_fast_init_f32;
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <arm_rfft_fast_init_f32+0x64>)
 800322e:	e7f8      	b.n	8003222 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_64_fast_init_f32;
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <arm_rfft_fast_init_f32+0x68>)
 8003232:	e7f6      	b.n	8003222 <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <arm_rfft_fast_init_f32+0x6c>)
 8003236:	e7f4      	b.n	8003222 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_4096_fast_init_f32;
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <arm_rfft_fast_init_f32+0x70>)
 800323a:	e7f2      	b.n	8003222 <arm_rfft_fast_init_f32+0x3a>
 800323c:	08003125 	.word	0x08003125
 8003240:	08003171 	.word	0x08003171
 8003244:	08003149 	.word	0x08003149
 8003248:	08003101 	.word	0x08003101
 800324c:	080030b9 	.word	0x080030b9
 8003250:	080030dd 	.word	0x080030dd
 8003254:	08003199 	.word	0x08003199
 8003258:	080031c1 	.word	0x080031c1

0800325c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800325e:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_InitTick+0x3c>)
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_InitTick+0x40>)
{
 8003262:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003264:	7818      	ldrb	r0, [r3, #0]
 8003266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326a:	fbb3 f3f0 	udiv	r3, r3, r0
 800326e:	6810      	ldr	r0, [r2, #0]
 8003270:	fbb0 f0f3 	udiv	r0, r0, r3
 8003274:	f000 f8a2 	bl	80033bc <HAL_SYSTICK_Config>
 8003278:	4604      	mov	r4, r0
 800327a:	b958      	cbnz	r0, 8003294 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327c:	2d0f      	cmp	r5, #15
 800327e:	d809      	bhi.n	8003294 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003280:	4602      	mov	r2, r0
 8003282:	4629      	mov	r1, r5
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f000 f858 	bl	800333c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_InitTick+0x44>)
 800328e:	4620      	mov	r0, r4
 8003290:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003292:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003294:	2001      	movs	r0, #1
 8003296:	e7fc      	b.n	8003292 <HAL_InitTick+0x36>
 8003298:	20000408 	.word	0x20000408
 800329c:	20000420 	.word	0x20000420
 80032a0:	20000424 	.word	0x20000424

080032a4 <HAL_Init>:
{
 80032a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_Init+0x30>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f000 f829 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7ff ffc8 	bl	800325c <HAL_InitTick>
  HAL_MspInit();
 80032cc:	f7fe fc78 	bl	8001bc0 <HAL_MspInit>
}
 80032d0:	2000      	movs	r0, #0
 80032d2:	bd08      	pop	{r3, pc}
 80032d4:	40023c00 	.word	0x40023c00

080032d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80032d8:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <HAL_IncTick+0x10>)
 80032da:	4b04      	ldr	r3, [pc, #16]	; (80032ec <HAL_IncTick+0x14>)
 80032dc:	6811      	ldr	r1, [r2, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	440b      	add	r3, r1
 80032e2:	6013      	str	r3, [r2, #0]
}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20013b14 	.word	0x20013b14
 80032ec:	20000420 	.word	0x20000420

080032f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80032f0:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_GetTick+0x8>)
 80032f2:	6818      	ldr	r0, [r3, #0]
}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20013b14 	.word	0x20013b14

080032fc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80032fc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003300:	6913      	ldr	r3, [r2, #16]
 8003302:	f023 0302 	bic.w	r3, r3, #2
 8003306:	6113      	str	r3, [r2, #16]
}
 8003308:	4770      	bx	lr

0800330a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800330a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800330e:	6913      	ldr	r3, [r2, #16]
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	6113      	str	r3, [r2, #16]
}
 8003316:	4770      	bx	lr

08003318 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800331a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003320:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003322:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003328:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800332c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003334:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333e:	b530      	push	{r4, r5, lr}
 8003340:	68dc      	ldr	r4, [r3, #12]
 8003342:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003346:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800334c:	2d04      	cmp	r5, #4
 800334e:	bf28      	it	cs
 8003350:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003352:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003358:	bf8c      	ite	hi
 800335a:	3c03      	subhi	r4, #3
 800335c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335e:	fa03 f505 	lsl.w	r5, r3, r5
 8003362:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003366:	40a3      	lsls	r3, r4
 8003368:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800336e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	bfac      	ite	ge
 8003376:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	4a08      	ldrlt	r2, [pc, #32]	; (800339c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	bfb8      	it	lt
 8003382:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	b2db      	uxtb	r3, r3
 8003388:	bfaa      	itet	ge
 800338a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003390:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003394:	bd30      	pop	{r4, r5, pc}
 8003396:	bf00      	nop
 8003398:	e000ed00 	.word	0xe000ed00
 800339c:	e000ed14 	.word	0xe000ed14

080033a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80033a0:	2800      	cmp	r0, #0
 80033a2:	db08      	blt.n	80033b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a4:	0942      	lsrs	r2, r0, #5
 80033a6:	2301      	movs	r3, #1
 80033a8:	f000 001f 	and.w	r0, r0, #31
 80033ac:	fa03 f000 	lsl.w	r0, r3, r0
 80033b0:	4b01      	ldr	r3, [pc, #4]	; (80033b8 <HAL_NVIC_EnableIRQ+0x18>)
 80033b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100

080033bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	3801      	subs	r0, #1
 80033be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80033c2:	d20b      	bcs.n	80033dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	21f0      	movs	r1, #240	; 0xf0
 80033ce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80033dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033e4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033e6:	4604      	mov	r4, r0
 80033e8:	b150      	cbz	r0, 8003400 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ea:	7943      	ldrb	r3, [r0, #5]
 80033ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033f0:	b913      	cbnz	r3, 80033f8 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033f2:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033f4:	f7fe fc00 	bl	8001bf8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033f8:	2301      	movs	r3, #1
 80033fa:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80033fc:	2000      	movs	r0, #0
}
 80033fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003400:	2001      	movs	r0, #1
 8003402:	e7fc      	b.n	80033fe <HAL_CRC_Init+0x1a>

08003404 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003404:	6803      	ldr	r3, [r0, #0]
{
 8003406:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003408:	4c08      	ldr	r4, [pc, #32]	; (800342c <DMA_CalcBaseAndBitshift+0x28>)
{
 800340a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800340c:	b2d9      	uxtb	r1, r3
 800340e:	3910      	subs	r1, #16
 8003410:	2018      	movs	r0, #24
 8003412:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003416:	5c20      	ldrb	r0, [r4, r0]
 8003418:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800341a:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 800341e:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8003422:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003424:	bf88      	it	hi
 8003426:	3004      	addhi	r0, #4
 8003428:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800342a:	bd10      	pop	{r4, pc}
 800342c:	0802f9ec 	.word	0x0802f9ec

08003430 <HAL_DMA_Init>:
{
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ff5c 	bl	80032f0 <HAL_GetTick>
 8003438:	4605      	mov	r5, r0
  if(hdma == NULL)
 800343a:	2c00      	cmp	r4, #0
 800343c:	d073      	beq.n	8003526 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003444:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003446:	2300      	movs	r3, #0
 8003448:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003454:	6821      	ldr	r1, [r4, #0]
 8003456:	680b      	ldr	r3, [r1, #0]
 8003458:	07d8      	lsls	r0, r3, #31
 800345a:	d42f      	bmi.n	80034bc <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 800345c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800345e:	4d33      	ldr	r5, [pc, #204]	; (800352c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003460:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003462:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003464:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003468:	4313      	orrs	r3, r2
 800346a:	68e2      	ldr	r2, [r4, #12]
 800346c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346e:	6922      	ldr	r2, [r4, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	6962      	ldr	r2, [r4, #20]
 8003474:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003476:	69e2      	ldr	r2, [r4, #28]
 8003478:	4303      	orrs	r3, r0
 800347a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800347c:	6a22      	ldr	r2, [r4, #32]
 800347e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003480:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003482:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003484:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003488:	bf02      	ittt	eq
 800348a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800348e:	4335      	orreq	r5, r6
 8003490:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8003492:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003494:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003496:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003498:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800349c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a0:	d133      	bne.n	800350a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80034a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034a4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80034a6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034a8:	b37d      	cbz	r5, 800350a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034aa:	b990      	cbnz	r0, 80034d2 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80034ac:	2a01      	cmp	r2, #1
 80034ae:	d021      	beq.n	80034f4 <HAL_DMA_Init+0xc4>
 80034b0:	f032 0202 	bics.w	r2, r2, #2
 80034b4:	d129      	bne.n	800350a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b6:	01ea      	lsls	r2, r5, #7
 80034b8:	d527      	bpl.n	800350a <HAL_DMA_Init+0xda>
 80034ba:	e01e      	b.n	80034fa <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034bc:	f7ff ff18 	bl	80032f0 <HAL_GetTick>
 80034c0:	1b40      	subs	r0, r0, r5
 80034c2:	2805      	cmp	r0, #5
 80034c4:	d9c6      	bls.n	8003454 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c6:	2320      	movs	r3, #32
 80034c8:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ca:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80034cc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034d2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80034d6:	d114      	bne.n	8003502 <HAL_DMA_Init+0xd2>
    switch (tmp)
 80034d8:	2a03      	cmp	r2, #3
 80034da:	d816      	bhi.n	800350a <HAL_DMA_Init+0xda>
 80034dc:	a001      	add	r0, pc, #4	; (adr r0, 80034e4 <HAL_DMA_Init+0xb4>)
 80034de:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	080034fb 	.word	0x080034fb
 80034e8:	080034b7 	.word	0x080034b7
 80034ec:	080034fb 	.word	0x080034fb
 80034f0:	080034f5 	.word	0x080034f5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034f4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80034f8:	d107      	bne.n	800350a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034fa:	2340      	movs	r3, #64	; 0x40
 80034fc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80034fe:	2001      	movs	r0, #1
 8003500:	e7e4      	b.n	80034cc <HAL_DMA_Init+0x9c>
    switch (tmp)
 8003502:	2a02      	cmp	r2, #2
 8003504:	d9f9      	bls.n	80034fa <HAL_DMA_Init+0xca>
 8003506:	2a03      	cmp	r2, #3
 8003508:	d0d5      	beq.n	80034b6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800350a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff ff79 	bl	8003404 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003512:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003514:	233f      	movs	r3, #63	; 0x3f
 8003516:	4093      	lsls	r3, r2
 8003518:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800351c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003520:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003524:	e7d4      	b.n	80034d0 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8003526:	2001      	movs	r0, #1
 8003528:	e7d2      	b.n	80034d0 <HAL_DMA_Init+0xa0>
 800352a:	bf00      	nop
 800352c:	f010803f 	.word	0xf010803f

08003530 <HAL_DMA_DeInit>:
{
 8003530:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003532:	4605      	mov	r5, r0
 8003534:	b320      	cbz	r0, 8003580 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003536:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800353a:	2b02      	cmp	r3, #2
 800353c:	b2dc      	uxtb	r4, r3
 800353e:	d01d      	beq.n	800357c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8003540:	6803      	ldr	r3, [r0, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8003548:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800354a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 800354c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800354e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003550:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8003552:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003554:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003556:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8003558:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800355a:	f7ff ff53 	bl	8003404 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003560:	233f      	movs	r3, #63	; 0x3f
 8003562:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8003564:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8003568:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 800356c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003570:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003572:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8003574:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003578:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 800357c:	4620      	mov	r0, r4
 800357e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003580:	2401      	movs	r4, #1
 8003582:	e7fb      	b.n	800357c <HAL_DMA_DeInit+0x4c>

08003584 <HAL_DMA_Start_IT>:
{
 8003584:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003586:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800358a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800358c:	2c01      	cmp	r4, #1
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_Start_IT+0x70>
 8003590:	2401      	movs	r4, #1
 8003592:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003596:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800359a:	2c01      	cmp	r4, #1
 800359c:	f04f 0500 	mov.w	r5, #0
 80035a0:	f04f 0402 	mov.w	r4, #2
 80035a4:	d124      	bne.n	80035f0 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035aa:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ae:	6825      	ldr	r5, [r4, #0]
 80035b0:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80035b4:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80035b6:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035b8:	6883      	ldr	r3, [r0, #8]
 80035ba:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80035bc:	bf0e      	itee	eq
 80035be:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80035c0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80035c2:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80035c6:	bf08      	it	eq
 80035c8:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ca:	233f      	movs	r3, #63	; 0x3f
 80035cc:	4093      	lsls	r3, r2
 80035ce:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	f043 0316 	orr.w	r3, r3, #22
 80035d6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80035d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035da:	b11b      	cbz	r3, 80035e4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2000      	movs	r0, #0
}
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80035f0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80035f4:	2002      	movs	r0, #2
 80035f6:	e7fa      	b.n	80035ee <HAL_DMA_Start_IT+0x6a>

080035f8 <HAL_DMA_Abort>:
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80035fe:	f7ff fe77 	bl	80032f0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003602:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003606:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8003608:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800360a:	d006      	beq.n	800361a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003610:	2300      	movs	r3, #0
 8003612:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003616:	2001      	movs	r0, #1
}
 8003618:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f022 0216 	bic.w	r2, r2, #22
 8003622:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800362a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800362c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800362e:	b90a      	cbnz	r2, 8003634 <HAL_DMA_Abort+0x3c>
 8003630:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003632:	b11a      	cbz	r2, 800363c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	f022 0208 	bic.w	r2, r2, #8
 800363a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f013 0301 	ands.w	r3, r3, #1
 800364c:	d10a      	bne.n	8003664 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800364e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003650:	223f      	movs	r2, #63	; 0x3f
 8003652:	408a      	lsls	r2, r1
 8003654:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003656:	2201      	movs	r2, #1
 8003658:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800365c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003660:	4618      	mov	r0, r3
 8003662:	e7d9      	b.n	8003618 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003664:	f7ff fe44 	bl	80032f0 <HAL_GetTick>
 8003668:	1b40      	subs	r0, r0, r5
 800366a:	2805      	cmp	r0, #5
 800366c:	d9ea      	bls.n	8003644 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800366e:	2320      	movs	r3, #32
 8003670:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003672:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8003674:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003676:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800367a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800367e:	e7cb      	b.n	8003618 <HAL_DMA_Abort+0x20>

08003680 <HAL_DMA_IRQHandler>:
{
 8003680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003686:	4b5c      	ldr	r3, [pc, #368]	; (80037f8 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003688:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800368a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800368e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003690:	2208      	movs	r2, #8
 8003692:	409a      	lsls	r2, r3
 8003694:	4232      	tst	r2, r6
{
 8003696:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003698:	d00c      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369a:	6801      	ldr	r1, [r0, #0]
 800369c:	6808      	ldr	r0, [r1, #0]
 800369e:	0740      	lsls	r0, r0, #29
 80036a0:	d508      	bpl.n	80036b4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036a2:	6808      	ldr	r0, [r1, #0]
 80036a4:	f020 0004 	bic.w	r0, r0, #4
 80036a8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036aa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	4232      	tst	r2, r6
 80036ba:	d008      	beq.n	80036ce <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036bc:	6821      	ldr	r1, [r4, #0]
 80036be:	6949      	ldr	r1, [r1, #20]
 80036c0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036c2:	bf41      	itttt	mi
 80036c4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036c6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80036c8:	f042 0202 	orrmi.w	r2, r2, #2
 80036cc:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	4232      	tst	r2, r6
 80036d4:	d008      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036d6:	6821      	ldr	r1, [r4, #0]
 80036d8:	6809      	ldr	r1, [r1, #0]
 80036da:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036dc:	bf41      	itttt	mi
 80036de:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80036e2:	f042 0204 	orrmi.w	r2, r2, #4
 80036e6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	2210      	movs	r2, #16
 80036ea:	409a      	lsls	r2, r3
 80036ec:	4232      	tst	r2, r6
 80036ee:	d010      	beq.n	8003712 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	0709      	lsls	r1, r1, #28
 80036f6:	d50c      	bpl.n	8003712 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036f8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	0350      	lsls	r0, r2, #13
 80036fe:	d537      	bpl.n	8003770 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0319      	lsls	r1, r3, #12
 8003704:	d401      	bmi.n	800370a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8003706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003708:	e000      	b.n	800370c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800370a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800370c:	b10b      	cbz	r3, 8003712 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800370e:	4620      	mov	r0, r4
 8003710:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003712:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003714:	2220      	movs	r2, #32
 8003716:	408a      	lsls	r2, r1
 8003718:	4232      	tst	r2, r6
 800371a:	d03a      	beq.n	8003792 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	06c6      	lsls	r6, r0, #27
 8003722:	d536      	bpl.n	8003792 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003724:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003726:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800372a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800372c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800372e:	d127      	bne.n	8003780 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003730:	f022 0216 	bic.w	r2, r2, #22
 8003734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800373c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800373e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003740:	b90a      	cbnz	r2, 8003746 <HAL_DMA_IRQHandler+0xc6>
 8003742:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003744:	b11a      	cbz	r2, 800374e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	f022 0208 	bic.w	r2, r2, #8
 800374c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374e:	233f      	movs	r3, #63	; 0x3f
 8003750:	408b      	lsls	r3, r1
 8003752:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003754:	2301      	movs	r3, #1
 8003756:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800375a:	2300      	movs	r3, #0
 800375c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8003760:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8003762:	2b00      	cmp	r3, #0
 8003764:	d045      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003766:	4620      	mov	r0, r4
}
 8003768:	b003      	add	sp, #12
 800376a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800376e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003774:	bf5e      	ittt	pl
 8003776:	681a      	ldrpl	r2, [r3, #0]
 8003778:	f022 0208 	bicpl.w	r2, r2, #8
 800377c:	601a      	strpl	r2, [r3, #0]
 800377e:	e7c2      	b.n	8003706 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003780:	0350      	lsls	r0, r2, #13
 8003782:	d527      	bpl.n	80037d4 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	0319      	lsls	r1, r3, #12
 8003788:	d431      	bmi.n	80037ee <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800378a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800378c:	b10b      	cbz	r3, 8003792 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800378e:	4620      	mov	r0, r4
 8003790:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003792:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003794:	b36b      	cbz	r3, 80037f2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003796:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003798:	07da      	lsls	r2, r3, #31
 800379a:	d519      	bpl.n	80037d0 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 800379c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800379e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80037a2:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80037a6:	2305      	movs	r3, #5
 80037a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80037ac:	6813      	ldr	r3, [r2, #0]
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80037b4:	9b01      	ldr	r3, [sp, #4]
 80037b6:	3301      	adds	r3, #1
 80037b8:	42bb      	cmp	r3, r7
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	d802      	bhi.n	80037c4 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	07db      	lsls	r3, r3, #31
 80037c2:	d4f7      	bmi.n	80037b4 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80037ca:	2300      	movs	r3, #0
 80037cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80037d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80037d2:	e7c6      	b.n	8003762 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80037da:	d108      	bne.n	80037ee <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	f021 0110 	bic.w	r1, r1, #16
 80037e2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80037ea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80037ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037f0:	e7cc      	b.n	800378c <HAL_DMA_IRQHandler+0x10c>
}
 80037f2:	b003      	add	sp, #12
 80037f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000408 	.word	0x20000408

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003800:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80039ac <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003804:	4a67      	ldr	r2, [pc, #412]	; (80039a4 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003808:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800380a:	2401      	movs	r4, #1
 800380c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8003812:	43ac      	bics	r4, r5
 8003814:	f040 80b1 	bne.w	800397a <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003818:	684d      	ldr	r5, [r1, #4]
 800381a:	f005 0403 	and.w	r4, r5, #3
 800381e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003822:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003824:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003826:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800382c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003830:	d834      	bhi.n	800389c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8003832:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003834:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003838:	68cf      	ldr	r7, [r1, #12]
 800383a:	fa07 f708 	lsl.w	r7, r7, r8
 800383e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003842:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003844:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003846:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800384e:	409f      	lsls	r7, r3
 8003850:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003854:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003856:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003858:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385c:	688f      	ldr	r7, [r1, #8]
 800385e:	fa07 f708 	lsl.w	r7, r7, r8
 8003862:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003866:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003868:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386a:	d119      	bne.n	80038a0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800386c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003870:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003874:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003878:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800387c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003880:	f04f 0e0f 	mov.w	lr, #15
 8003884:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003888:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800388c:	690f      	ldr	r7, [r1, #16]
 800388e:	fa07 f70b 	lsl.w	r7, r7, fp
 8003892:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003896:	f8ca 7020 	str.w	r7, [sl, #32]
 800389a:	e001      	b.n	80038a0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389c:	2c03      	cmp	r4, #3
 800389e:	d1da      	bne.n	8003856 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80038a0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038aa:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80038ae:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038b0:	d063      	beq.n	800397a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	f04f 0a00 	mov.w	sl, #0
 80038b6:	f8cd a004 	str.w	sl, [sp, #4]
 80038ba:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038be:	4c3a      	ldr	r4, [pc, #232]	; (80039a8 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80038c4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80038c8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80038cc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80038d0:	9601      	str	r6, [sp, #4]
 80038d2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80038d4:	f023 0603 	bic.w	r6, r3, #3
 80038d8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80038dc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80038e4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80038ec:	270f      	movs	r7, #15
 80038ee:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038f2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038f8:	d046      	beq.n	8003988 <HAL_GPIO_Init+0x18c>
 80038fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80038fe:	42a0      	cmp	r0, r4
 8003900:	d044      	beq.n	800398c <HAL_GPIO_Init+0x190>
 8003902:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003906:	42a0      	cmp	r0, r4
 8003908:	d042      	beq.n	8003990 <HAL_GPIO_Init+0x194>
 800390a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800390e:	42a0      	cmp	r0, r4
 8003910:	d040      	beq.n	8003994 <HAL_GPIO_Init+0x198>
 8003912:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003916:	42a0      	cmp	r0, r4
 8003918:	d03e      	beq.n	8003998 <HAL_GPIO_Init+0x19c>
 800391a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800391e:	42a0      	cmp	r0, r4
 8003920:	d03c      	beq.n	800399c <HAL_GPIO_Init+0x1a0>
 8003922:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003926:	42a0      	cmp	r0, r4
 8003928:	d03a      	beq.n	80039a0 <HAL_GPIO_Init+0x1a4>
 800392a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800392e:	42a0      	cmp	r0, r4
 8003930:	bf0c      	ite	eq
 8003932:	2407      	moveq	r4, #7
 8003934:	2408      	movne	r4, #8
 8003936:	fa04 f40e 	lsl.w	r4, r4, lr
 800393a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800393c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800393e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003940:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003944:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003946:	bf54      	ite	pl
 8003948:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800394a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800394e:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8003950:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003952:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8003954:	bf54      	ite	pl
 8003956:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003958:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800395c:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800395e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003960:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8003962:	bf54      	ite	pl
 8003964:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003966:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800396a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800396c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800396e:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8003970:	bf54      	ite	pl
 8003972:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003974:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8003978:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397a:	3301      	adds	r3, #1
 800397c:	2b10      	cmp	r3, #16
 800397e:	f47f af43 	bne.w	8003808 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003982:	b003      	add	sp, #12
 8003984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003988:	4654      	mov	r4, sl
 800398a:	e7d4      	b.n	8003936 <HAL_GPIO_Init+0x13a>
 800398c:	2401      	movs	r4, #1
 800398e:	e7d2      	b.n	8003936 <HAL_GPIO_Init+0x13a>
 8003990:	2402      	movs	r4, #2
 8003992:	e7d0      	b.n	8003936 <HAL_GPIO_Init+0x13a>
 8003994:	2403      	movs	r4, #3
 8003996:	e7ce      	b.n	8003936 <HAL_GPIO_Init+0x13a>
 8003998:	2404      	movs	r4, #4
 800399a:	e7cc      	b.n	8003936 <HAL_GPIO_Init+0x13a>
 800399c:	2405      	movs	r4, #5
 800399e:	e7ca      	b.n	8003936 <HAL_GPIO_Init+0x13a>
 80039a0:	2406      	movs	r4, #6
 80039a2:	e7c8      	b.n	8003936 <HAL_GPIO_Init+0x13a>
 80039a4:	40013c00 	.word	0x40013c00
 80039a8:	40020000 	.word	0x40020000
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039b4:	4c44      	ldr	r4, [pc, #272]	; (8003ac8 <HAL_GPIO_DeInit+0x118>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039b6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8003ad0 <HAL_GPIO_DeInit+0x120>
 80039ba:	f8df a118 	ldr.w	sl, [pc, #280]	; 8003ad4 <HAL_GPIO_DeInit+0x124>
 80039be:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003ad8 <HAL_GPIO_DeInit+0x128>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 80039c4:	2301      	movs	r3, #1
 80039c6:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80039ca:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80039ce:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80039d2:	d166      	bne.n	8003aa2 <HAL_GPIO_DeInit+0xf2>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039d4:	f022 0503 	bic.w	r5, r2, #3
 80039d8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80039dc:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_GPIO_DeInit+0x11c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039e6:	f002 0c03 	and.w	ip, r2, #3
 80039ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80039ee:	260f      	movs	r6, #15
 80039f0:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039f4:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039f6:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039fa:	d057      	beq.n	8003aac <HAL_GPIO_DeInit+0xfc>
 80039fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a00:	4298      	cmp	r0, r3
 8003a02:	d055      	beq.n	8003ab0 <HAL_GPIO_DeInit+0x100>
 8003a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a08:	4298      	cmp	r0, r3
 8003a0a:	d053      	beq.n	8003ab4 <HAL_GPIO_DeInit+0x104>
 8003a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a10:	4298      	cmp	r0, r3
 8003a12:	d051      	beq.n	8003ab8 <HAL_GPIO_DeInit+0x108>
 8003a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	d04f      	beq.n	8003abc <HAL_GPIO_DeInit+0x10c>
 8003a1c:	4548      	cmp	r0, r9
 8003a1e:	d04f      	beq.n	8003ac0 <HAL_GPIO_DeInit+0x110>
 8003a20:	4550      	cmp	r0, sl
 8003a22:	d04f      	beq.n	8003ac4 <HAL_GPIO_DeInit+0x114>
 8003a24:	4558      	cmp	r0, fp
 8003a26:	bf0c      	ite	eq
 8003a28:	2307      	moveq	r3, #7
 8003a2a:	2308      	movne	r3, #8
 8003a2c:	fa03 f30c 	lsl.w	r3, r3, ip
 8003a30:	4543      	cmp	r3, r8
 8003a32:	d113      	bne.n	8003a5c <HAL_GPIO_DeInit+0xac>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	ea23 0307 	bic.w	r3, r3, r7
 8003a3a:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	ea23 0307 	bic.w	r3, r3, r7
 8003a42:	6063      	str	r3, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a44:	68a3      	ldr	r3, [r4, #8]
 8003a46:	ea23 0307 	bic.w	r3, r3, r7
 8003a4a:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a4c:	68e3      	ldr	r3, [r4, #12]
 8003a4e:	ea23 0307 	bic.w	r3, r3, r7
 8003a52:	60e3      	str	r3, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a54:	68ab      	ldr	r3, [r5, #8]
 8003a56:	ea23 0306 	bic.w	r3, r3, r6
 8003a5a:	60ab      	str	r3, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a5c:	6805      	ldr	r5, [r0, #0]
 8003a5e:	2603      	movs	r6, #3
 8003a60:	0053      	lsls	r3, r2, #1
 8003a62:	fa06 f303 	lsl.w	r3, r6, r3
 8003a66:	ea25 0503 	bic.w	r5, r5, r3
 8003a6a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a6c:	fa22 f506 	lsr.w	r5, r2, r6
 8003a70:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003a74:	f002 0c07 	and.w	ip, r2, #7
 8003a78:	6a2e      	ldr	r6, [r5, #32]
 8003a7a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003a7e:	270f      	movs	r7, #15
 8003a80:	fa07 f70c 	lsl.w	r7, r7, ip
 8003a84:	ea26 0707 	bic.w	r7, r6, r7
 8003a88:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8a:	68c5      	ldr	r5, [r0, #12]
 8003a8c:	ea25 0503 	bic.w	r5, r5, r3
 8003a90:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a92:	6845      	ldr	r5, [r0, #4]
 8003a94:	ea25 050e 	bic.w	r5, r5, lr
 8003a98:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a9a:	6885      	ldr	r5, [r0, #8]
 8003a9c:	ea25 0303 	bic.w	r3, r5, r3
 8003aa0:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa2:	3201      	adds	r2, #1
 8003aa4:	2a10      	cmp	r2, #16
 8003aa6:	d18d      	bne.n	80039c4 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8003aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003aac:	2300      	movs	r3, #0
 8003aae:	e7bd      	b.n	8003a2c <HAL_GPIO_DeInit+0x7c>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e7bb      	b.n	8003a2c <HAL_GPIO_DeInit+0x7c>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e7b9      	b.n	8003a2c <HAL_GPIO_DeInit+0x7c>
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e7b7      	b.n	8003a2c <HAL_GPIO_DeInit+0x7c>
 8003abc:	2304      	movs	r3, #4
 8003abe:	e7b5      	b.n	8003a2c <HAL_GPIO_DeInit+0x7c>
 8003ac0:	2305      	movs	r3, #5
 8003ac2:	e7b3      	b.n	8003a2c <HAL_GPIO_DeInit+0x7c>
 8003ac4:	2306      	movs	r3, #6
 8003ac6:	e7b1      	b.n	8003a2c <HAL_GPIO_DeInit+0x7c>
 8003ac8:	40013c00 	.word	0x40013c00
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40021400 	.word	0x40021400
 8003ad4:	40021800 	.word	0x40021800
 8003ad8:	40021c00 	.word	0x40021c00

08003adc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003adc:	b10a      	cbz	r2, 8003ae2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ade:	6181      	str	r1, [r0, #24]
  }
}
 8003ae0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ae2:	0409      	lsls	r1, r1, #16
 8003ae4:	e7fb      	b.n	8003ade <HAL_GPIO_WritePin+0x2>

08003ae6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ae6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ae8:	ea01 0203 	and.w	r2, r1, r3
 8003aec:	ea21 0103 	bic.w	r1, r1, r3
 8003af0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003af4:	6181      	str	r1, [r0, #24]
}
 8003af6:	4770      	bx	lr

08003af8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003afe:	6951      	ldr	r1, [r2, #20]
 8003b00:	4201      	tst	r1, r0
{
 8003b02:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b04:	d002      	beq.n	8003b0c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b06:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b08:	f7ff fff6 	bl	8003af8 <HAL_GPIO_EXTI_Callback>
}
 8003b0c:	bd08      	pop	{r3, pc}
 8003b0e:	bf00      	nop
 8003b10:	40013c00 	.word	0x40013c00

08003b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b16:	4604      	mov	r4, r0
 8003b18:	b908      	cbnz	r0, 8003b1e <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b26:	b91b      	cbnz	r3, 8003b30 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003b28:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003b2c:	f7fe f87c 	bl	8001c28 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	2324      	movs	r3, #36	; 0x24
 8003b32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b50:	f000 ff14 	bl	800497c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b54:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <HAL_I2C_Init+0x140>)
 8003b56:	6865      	ldr	r5, [r4, #4]
 8003b58:	429d      	cmp	r5, r3
 8003b5a:	bf94      	ite	ls
 8003b5c:	4b3e      	ldrls	r3, [pc, #248]	; (8003c58 <HAL_I2C_Init+0x144>)
 8003b5e:	4b3f      	ldrhi	r3, [pc, #252]	; (8003c5c <HAL_I2C_Init+0x148>)
 8003b60:	4298      	cmp	r0, r3
 8003b62:	bf8c      	ite	hi
 8003b64:	2300      	movhi	r3, #0
 8003b66:	2301      	movls	r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1d6      	bne.n	8003b1a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b6c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b6e:	4e39      	ldr	r6, [pc, #228]	; (8003c54 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b70:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003b72:	493b      	ldr	r1, [pc, #236]	; (8003c60 <HAL_I2C_Init+0x14c>)
 8003b74:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b7c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b7e:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b80:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b82:	bf88      	it	hi
 8003b84:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8003b88:	6a13      	ldr	r3, [r2, #32]
 8003b8a:	bf88      	it	hi
 8003b8c:	4371      	mulhi	r1, r6
 8003b8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b92:	bf84      	itt	hi
 8003b94:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003b98:	fbb1 f1f6 	udivhi	r1, r1, r6
 8003b9c:	3101      	adds	r1, #1
 8003b9e:	4319      	orrs	r1, r3
 8003ba0:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ba2:	69d1      	ldr	r1, [r2, #28]
 8003ba4:	1e43      	subs	r3, r0, #1
 8003ba6:	482b      	ldr	r0, [pc, #172]	; (8003c54 <HAL_I2C_Init+0x140>)
 8003ba8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003bac:	4285      	cmp	r5, r0
 8003bae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003bb2:	d832      	bhi.n	8003c1a <HAL_I2C_Init+0x106>
 8003bb4:	006d      	lsls	r5, r5, #1
 8003bb6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003bba:	fbb3 f3f5 	udiv	r3, r3, r5
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4203      	tst	r3, r0
 8003bc2:	d042      	beq.n	8003c4a <HAL_I2C_Init+0x136>
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bcc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003bd0:	6811      	ldr	r1, [r2, #0]
 8003bd2:	4303      	orrs	r3, r0
 8003bd4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bdc:	6891      	ldr	r1, [r2, #8]
 8003bde:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003be2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003be6:	4303      	orrs	r3, r0
 8003be8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bf0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003bf4:	68d1      	ldr	r1, [r2, #12]
 8003bf6:	4303      	orrs	r3, r0
 8003bf8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003c18:	e780      	b.n	8003b1c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c1a:	68a0      	ldr	r0, [r4, #8]
 8003c1c:	b950      	cbnz	r0, 8003c34 <HAL_I2C_Init+0x120>
 8003c1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c22:	fbb3 f3f5 	udiv	r3, r3, r5
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	b17b      	cbz	r3, 8003c4e <HAL_I2C_Init+0x13a>
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c32:	e7c9      	b.n	8003bc8 <HAL_I2C_Init+0xb4>
 8003c34:	2019      	movs	r0, #25
 8003c36:	4345      	muls	r5, r0
 8003c38:	fbb3 f3f5 	udiv	r3, r3, r5
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	b123      	cbz	r3, 8003c4e <HAL_I2C_Init+0x13a>
 8003c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c48:	e7be      	b.n	8003bc8 <HAL_I2C_Init+0xb4>
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	e7bc      	b.n	8003bc8 <HAL_I2C_Init+0xb4>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e7ba      	b.n	8003bc8 <HAL_I2C_Init+0xb4>
 8003c52:	bf00      	nop
 8003c54:	000186a0 	.word	0x000186a0
 8003c58:	001e847f 	.word	0x001e847f
 8003c5c:	003d08ff 	.word	0x003d08ff
 8003c60:	000f4240 	.word	0x000f4240

08003c64 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c68:	4604      	mov	r4, r0
 8003c6a:	460f      	mov	r7, r1
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c70:	f7ff fb3e 	bl	80032f0 <HAL_GetTick>
 8003c74:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	6893      	ldr	r3, [r2, #8]
 8003c7a:	ea37 0303 	bics.w	r3, r7, r3
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	42b3      	cmp	r3, r6
 8003c86:	d101      	bne.n	8003c8c <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e00e      	b.n	8003caa <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8003c8c:	1c6b      	adds	r3, r5, #1
 8003c8e:	d0f3      	beq.n	8003c78 <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003c90:	f7ff fb2e 	bl	80032f0 <HAL_GetTick>
 8003c94:	eba0 0008 	sub.w	r0, r0, r8
 8003c98:	42a8      	cmp	r0, r5
 8003c9a:	d3ec      	bcc.n	8003c76 <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003ca8:	2003      	movs	r0, #3
}
 8003caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003cb0 <HAL_I2S_Init>:
{
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s == NULL)
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	f000 8086 	beq.w	8003dc6 <HAL_I2S_Init+0x116>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003cbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cc2:	b92b      	cbnz	r3, 8003cd0 <HAL_I2S_Init+0x20>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_I2S_Init+0x120>)
    hi2s->Lock = HAL_UNLOCKED;
 8003cc6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cca:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8003ccc:	f7fd ffe2 	bl	8001c94 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cd0:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cd8:	69d3      	ldr	r3, [r2, #28]
 8003cda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cde:	f023 030f 	bic.w	r3, r3, #15
 8003ce2:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ce4:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8003ce6:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d06e      	beq.n	8003dca <HAL_I2S_Init+0x11a>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cec:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 8003cee:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cf0:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2510      	moveq	r5, #16
 8003cf6:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003cf8:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cfa:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8003cfc:	bf98      	it	ls
 8003cfe:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d00:	f000 ff0c 	bl	8004b1c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	6962      	ldr	r2, [r4, #20]
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d153      	bne.n	8003db6 <HAL_I2S_Init+0x106>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d0e:	68e1      	ldr	r1, [r4, #12]
 8003d10:	230a      	movs	r3, #10
 8003d12:	2900      	cmp	r1, #0
 8003d14:	d04d      	beq.n	8003db2 <HAL_I2S_Init+0x102>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d16:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d18:	fbb0 f0f5 	udiv	r0, r0, r5
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d1c:	4343      	muls	r3, r0
 8003d1e:	fbb3 f3f2 	udiv	r3, r3, r2
    tmp = tmp / 10U;
 8003d22:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d24:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8003d26:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d2a:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d2e:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d30:	1e99      	subs	r1, r3, #2
 8003d32:	29fd      	cmp	r1, #253	; 0xfd
 8003d34:	d843      	bhi.n	8003dbe <HAL_I2S_Init+0x10e>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d36:	0212      	lsls	r2, r2, #8
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	6922      	ldr	r2, [r4, #16]
 8003d3c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d3e:	4f25      	ldr	r7, [pc, #148]	; (8003dd4 <HAL_I2S_Init+0x124>)
 8003d40:	68e5      	ldr	r5, [r4, #12]
 8003d42:	69a0      	ldr	r0, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d44:	4313      	orrs	r3, r2
 8003d46:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d48:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8003d4c:	69ca      	ldr	r2, [r1, #28]
 8003d4e:	ea46 0c03 	orr.w	ip, r6, r3
 8003d52:	403a      	ands	r2, r7
 8003d54:	ea42 020c 	orr.w	r2, r2, ip
 8003d58:	432a      	orrs	r2, r5
 8003d5a:	4302      	orrs	r2, r0
 8003d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d60:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d62:	6a22      	ldr	r2, [r4, #32]
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	d11e      	bne.n	8003da6 <HAL_I2S_Init+0xf6>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d68:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <HAL_I2S_Init+0x128>)
 8003d6a:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d6c:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003de0 <HAL_I2S_Init+0x130>
 8003d70:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <HAL_I2S_Init+0x12c>)
 8003d72:	4561      	cmp	r1, ip
 8003d74:	bf18      	it	ne
 8003d76:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8003d7a:	f436 7600 	bics.w	r6, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d7e:	69d1      	ldr	r1, [r2, #28]
 8003d80:	ea01 0107 	and.w	r1, r1, r7
 8003d84:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d86:	f04f 0102 	mov.w	r1, #2
 8003d8a:	6211      	str	r1, [r2, #32]
      tmp = I2S_MODE_SLAVE_TX;
 8003d8c:	bf0c      	ite	eq
 8003d8e:	f44f 7680 	moveq.w	r6, #256	; 0x100
 8003d92:	2600      	movne	r6, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d94:	432b      	orrs	r3, r5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d96:	69d1      	ldr	r1, [r2, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d98:	4333      	orrs	r3, r6
 8003d9a:	4303      	orrs	r3, r0
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003da4:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003da6:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8003da8:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003daa:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003db2:	00ed      	lsls	r5, r5, #3
 8003db4:	e7b0      	b.n	8003d18 <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003db6:	fbb0 f3f5 	udiv	r3, r0, r5
 8003dba:	200a      	movs	r0, #10
 8003dbc:	e7ae      	b.n	8003d1c <HAL_I2S_Init+0x6c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003dbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dc0:	f043 0310 	orr.w	r3, r3, #16
 8003dc4:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	e7f2      	b.n	8003db0 <HAL_I2S_Init+0x100>
    i2sodd = 0U;
 8003dca:	2200      	movs	r2, #0
 8003dcc:	e7b4      	b.n	8003d38 <HAL_I2S_Init+0x88>
 8003dce:	bf00      	nop
 8003dd0:	080040dd 	.word	0x080040dd
 8003dd4:	fffff040 	.word	0xfffff040
 8003dd8:	08004209 	.word	0x08004209
 8003ddc:	40003400 	.word	0x40003400
 8003de0:	40003800 	.word	0x40003800

08003de4 <HAL_I2S_Receive_DMA>:
{
 8003de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de6:	4613      	mov	r3, r2
 8003de8:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003dea:	2900      	cmp	r1, #0
 8003dec:	d062      	beq.n	8003eb4 <HAL_I2S_Receive_DMA+0xd0>
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d060      	beq.n	8003eb4 <HAL_I2S_Receive_DMA+0xd0>
  __HAL_LOCK(hi2s);
 8003df2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003df6:	2a01      	cmp	r2, #1
 8003df8:	d00b      	beq.n	8003e12 <HAL_I2S_Receive_DMA+0x2e>
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e00:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003e04:	2a01      	cmp	r2, #1
 8003e06:	b2d5      	uxtb	r5, r2
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 8003e0e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8003e12:	2502      	movs	r5, #2
 8003e14:	e036      	b.n	8003e84 <HAL_I2S_Receive_DMA+0xa0>
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e16:	6826      	ldr	r6, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8003e18:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003e1a:	2004      	movs	r0, #4
 8003e1c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e20:	6462      	str	r2, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e22:	69f2      	ldr	r2, [r6, #28]
 8003e24:	f002 0207 	and.w	r2, r2, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003e28:	2a03      	cmp	r2, #3
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2S_Receive_DMA+0x4c>
 8003e2c:	2a05      	cmp	r2, #5
 8003e2e:	d101      	bne.n	8003e34 <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003e34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 8003e36:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003e38:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <HAL_I2S_Receive_DMA+0xd4>)
 8003e3c:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003e3e:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <HAL_I2S_Receive_DMA+0xd8>)
 8003e40:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <HAL_I2S_Receive_DMA+0xdc>)
 8003e44:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003e46:	69f3      	ldr	r3, [r6, #28]
 8003e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e50:	d106      	bne.n	8003e60 <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e52:	2300      	movs	r3, #0
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	68f3      	ldr	r3, [r6, #12]
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	68b3      	ldr	r3, [r6, #8]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8003e60:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003e62:	460a      	mov	r2, r1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f106 010c 	add.w	r1, r6, #12
 8003e6a:	f7ff fb8b 	bl	8003584 <HAL_DMA_Start_IT>
 8003e6e:	b160      	cbz	r0, 8003e8a <HAL_I2S_Receive_DMA+0xa6>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003e84:	4628      	mov	r0, r5
 8003e86:	b002      	add	sp, #8
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8003e90:	bf5e      	ittt	pl
 8003e92:	69da      	ldrpl	r2, [r3, #28]
 8003e94:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8003e98:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e9e:	bf58      	it	pl
 8003ea0:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003ea2:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ea6:	bf5c      	itt	pl
 8003ea8:	f042 0201 	orrpl.w	r2, r2, #1
 8003eac:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003eae:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8003eb2:	e7e7      	b.n	8003e84 <HAL_I2S_Receive_DMA+0xa0>
    return  HAL_ERROR;
 8003eb4:	2501      	movs	r5, #1
 8003eb6:	e7e5      	b.n	8003e84 <HAL_I2S_Receive_DMA+0xa0>
 8003eb8:	080040b1 	.word	0x080040b1
 8003ebc:	080040bb 	.word	0x080040bb
 8003ec0:	080041d7 	.word	0x080041d7

08003ec4 <HAL_I2S_DMAStop>:
{
 8003ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ec8:	6843      	ldr	r3, [r0, #4]
 8003eca:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 8003ece:	b085      	sub	sp, #20
 8003ed0:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ed2:	d16c      	bne.n	8003fae <HAL_I2S_DMAStop+0xea>
    if (hi2s->hdmatx != NULL)
 8003ed4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d15f      	bne.n	8003f9a <HAL_I2S_DMAStop+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eda:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003edc:	2364      	movs	r3, #100	; 0x64
 8003ede:	2201      	movs	r2, #1
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7ff febe 	bl	8003c64 <I2S_WaitFlagStateUntilTimeout>
 8003ee8:	b130      	cbz	r0, 8003ef8 <HAL_I2S_DMAStop+0x34>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003eea:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003eec:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003ef8:	2364      	movs	r3, #100	; 0x64
 8003efa:	2200      	movs	r2, #0
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7ff feb0 	bl	8003c64 <I2S_WaitFlagStateUntilTimeout>
 8003f04:	b130      	cbz	r0, 8003f14 <HAL_I2S_DMAStop+0x50>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003f06:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003f08:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003f10:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1c:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	9200      	str	r2, [sp, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	9200      	str	r2, [sp, #0]
 8003f26:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	f022 0202 	bic.w	r2, r2, #2
 8003f2e:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003f30:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003f34:	2b05      	cmp	r3, #5
 8003f36:	d129      	bne.n	8003f8c <HAL_I2S_DMAStop+0xc8>
      if (hi2s->hdmarx != NULL)
 8003f38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003f3a:	b138      	cbz	r0, 8003f4c <HAL_I2S_DMAStop+0x88>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003f3c:	f7ff fb5c 	bl	80035f8 <HAL_DMA_Abort>
 8003f40:	b120      	cbz	r0, 8003f4c <HAL_I2S_DMAStop+0x88>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f44:	f043 0308 	orr.w	r3, r3, #8
 8003f48:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003f4a:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 8003f4c:	6821      	ldr	r1, [r4, #0]
 8003f4e:	4a56      	ldr	r2, [pc, #344]	; (80040a8 <HAL_I2S_DMAStop+0x1e4>)
 8003f50:	4b56      	ldr	r3, [pc, #344]	; (80040ac <HAL_I2S_DMAStop+0x1e8>)
 8003f52:	4291      	cmp	r1, r2
 8003f54:	bf18      	it	ne
 8003f56:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f60:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003f62:	2200      	movs	r2, #0
 8003f64:	9201      	str	r2, [sp, #4]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	9201      	str	r2, [sp, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	9201      	str	r2, [sp, #4]
 8003f6e:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003f78:	6862      	ldr	r2, [r4, #4]
 8003f7a:	2a00      	cmp	r2, #0
 8003f7c:	d16c      	bne.n	8004058 <HAL_I2S_DMAStop+0x194>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003f80:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f86:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003f88:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->State = HAL_I2S_STATE_READY;
 8003f8c:	2301      	movs	r3, #1
}
 8003f8e:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8003f90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003f94:	b005      	add	sp, #20
 8003f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003f9a:	f7ff fb2d 	bl	80035f8 <HAL_DMA_Abort>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d09b      	beq.n	8003eda <HAL_I2S_DMAStop+0x16>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003fa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fa4:	f043 0308 	orr.w	r3, r3, #8
 8003fa8:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003faa:	2501      	movs	r5, #1
 8003fac:	e796      	b.n	8003edc <HAL_I2S_DMAStop+0x18>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb2:	d177      	bne.n	80040a4 <HAL_I2S_DMAStop+0x1e0>
    if (hi2s->hdmarx != NULL)
 8003fb4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d150      	bne.n	800405c <HAL_I2S_DMAStop+0x198>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fba:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003fbc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d135      	bne.n	8004030 <HAL_I2S_DMAStop+0x16c>
      if (hi2s->hdmatx != NULL)
 8003fc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003fc6:	b138      	cbz	r0, 8003fd8 <HAL_I2S_DMAStop+0x114>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003fc8:	f7ff fb16 	bl	80035f8 <HAL_DMA_Abort>
 8003fcc:	b120      	cbz	r0, 8003fd8 <HAL_I2S_DMAStop+0x114>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003fd6:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8003fd8:	f7ff f98a 	bl	80032f0 <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003fdc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80040a8 <HAL_I2S_DMAStop+0x1e4>
 8003fe0:	4f32      	ldr	r7, [pc, #200]	; (80040ac <HAL_I2S_DMAStop+0x1e8>)
      tickstart = HAL_GetTick();
 8003fe2:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8003fe4:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003fe8:	6822      	ldr	r2, [r4, #0]
 8003fea:	4542      	cmp	r2, r8
 8003fec:	bf0c      	ite	eq
 8003fee:	463b      	moveq	r3, r7
 8003ff0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	079b      	lsls	r3, r3, #30
 8003ff8:	d53a      	bpl.n	8004070 <HAL_I2S_DMAStop+0x1ac>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003ffa:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80040a8 <HAL_I2S_DMAStop+0x1e4>
 8003ffe:	4f2b      	ldr	r7, [pc, #172]	; (80040ac <HAL_I2S_DMAStop+0x1e8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8004000:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	4542      	cmp	r2, r8
 8004008:	bf0c      	ite	eq
 800400a:	463b      	moveq	r3, r7
 800400c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8004016:	d138      	bne.n	800408a <HAL_I2S_DMAStop+0x1c6>
      __HAL_I2SEXT_DISABLE(hi2s);
 8004018:	69d9      	ldr	r1, [r3, #28]
 800401a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800401e:	61d9      	str	r1, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004020:	9202      	str	r2, [sp, #8]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	9202      	str	r2, [sp, #8]
 8004026:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	f022 0202 	bic.w	r2, r2, #2
 800402e:	605a      	str	r2, [r3, #4]
    __HAL_I2S_DISABLE(hi2s);
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800403a:	2200      	movs	r2, #0
 800403c:	9203      	str	r2, [sp, #12]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	9203      	str	r2, [sp, #12]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	9203      	str	r2, [sp, #12]
 8004046:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004050:	6862      	ldr	r2, [r4, #4]
 8004052:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004056:	d092      	beq.n	8003f7e <HAL_I2S_DMAStop+0xba>
      READ_REG((hi2s->Instance)->DR);
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	e797      	b.n	8003f8c <HAL_I2S_DMAStop+0xc8>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800405c:	f7ff facc 	bl	80035f8 <HAL_DMA_Abort>
 8004060:	2800      	cmp	r0, #0
 8004062:	d0aa      	beq.n	8003fba <HAL_I2S_DMAStop+0xf6>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004064:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004066:	f043 0308 	orr.w	r3, r3, #8
 800406a:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 800406c:	2501      	movs	r5, #1
 800406e:	e7a5      	b.n	8003fbc <HAL_I2S_DMAStop+0xf8>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004070:	f7ff f93e 	bl	80032f0 <HAL_GetTick>
 8004074:	1b80      	subs	r0, r0, r6
 8004076:	2864      	cmp	r0, #100	; 0x64
 8004078:	d9b6      	bls.n	8003fe8 <HAL_I2S_DMAStop+0x124>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800407a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8004082:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8004084:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004088:	e7ae      	b.n	8003fe8 <HAL_I2S_DMAStop+0x124>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800408a:	f7ff f931 	bl	80032f0 <HAL_GetTick>
 800408e:	1b80      	subs	r0, r0, r6
 8004090:	2864      	cmp	r0, #100	; 0x64
 8004092:	d9b7      	bls.n	8004004 <HAL_I2S_DMAStop+0x140>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004094:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 800409c:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 800409e:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80040a2:	e7af      	b.n	8004004 <HAL_I2S_DMAStop+0x140>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040a4:	2500      	movs	r5, #0
 80040a6:	e771      	b.n	8003f8c <HAL_I2S_DMAStop+0xc8>
 80040a8:	40003800 	.word	0x40003800
 80040ac:	40003400 	.word	0x40003400

080040b0 <I2S_DMARxHalfCplt>:
{
 80040b0:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80040b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80040b4:	f7fe f90e 	bl	80022d4 <HAL_I2S_RxHalfCpltCallback>
}
 80040b8:	bd08      	pop	{r3, pc}

080040ba <I2S_DMARxCplt>:
{
 80040ba:	b508      	push	{r3, lr}
 80040bc:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040be:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	b942      	cbnz	r2, 80040d6 <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80040c4:	6801      	ldr	r1, [r0, #0]
 80040c6:	684b      	ldr	r3, [r1, #4]
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80040ce:	2301      	movs	r3, #1
    hi2s->RxXferCount = 0U;
 80040d0:	8642      	strh	r2, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80040d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 80040d6:	f7fe f8f9 	bl	80022cc <HAL_I2S_RxCpltCallback>
}
 80040da:	bd08      	pop	{r3, pc}

080040dc <I2S_IRQHandler>:
{
 80040dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040de:	6803      	ldr	r3, [r0, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040e4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80040e8:	2a04      	cmp	r2, #4
{
 80040ea:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040ec:	d136      	bne.n	800415c <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040ee:	9a01      	ldr	r2, [sp, #4]
 80040f0:	07d1      	lsls	r1, r2, #31
 80040f2:	d517      	bpl.n	8004124 <I2S_IRQHandler+0x48>
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	0652      	lsls	r2, r2, #25
 80040f8:	d514      	bpl.n	8004124 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8004102:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004104:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8004106:	3a01      	subs	r2, #1
 8004108:	b292      	uxth	r2, r2
 800410a:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800410c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800410e:	b292      	uxth	r2, r2
 8004110:	b942      	cbnz	r2, 8004124 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004118:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800411a:	2301      	movs	r3, #1
 800411c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8004120:	f7fe f8d4 	bl	80022cc <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004124:	9b01      	ldr	r3, [sp, #4]
 8004126:	0659      	lsls	r1, r3, #25
 8004128:	d518      	bpl.n	800415c <I2S_IRQHandler+0x80>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	0692      	lsls	r2, r2, #26
 8004130:	d514      	bpl.n	800415c <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004138:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800413a:	2200      	movs	r2, #0
 800413c:	9202      	str	r2, [sp, #8]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	9202      	str	r2, [sp, #8]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8004148:	2301      	movs	r3, #1
 800414a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800414e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004156:	4620      	mov	r0, r4
 8004158:	f7fe f8c0 	bl	80022dc <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800415c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004160:	2b03      	cmp	r3, #3
 8004162:	d136      	bne.n	80041d2 <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	079b      	lsls	r3, r3, #30
 8004168:	d519      	bpl.n	800419e <I2S_IRQHandler+0xc2>
 800416a:	6822      	ldr	r2, [r4, #0]
 800416c:	6853      	ldr	r3, [r2, #4]
 800416e:	0618      	lsls	r0, r3, #24
 8004170:	d515      	bpl.n	800419e <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004174:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004178:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 800417a:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800417c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8004184:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	b94b      	cbnz	r3, 800419e <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800418a:	6853      	ldr	r3, [r2, #4]
 800418c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004190:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8004192:	2301      	movs	r3, #1
 8004194:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8004198:	4620      	mov	r0, r4
 800419a:	f7fd ff59 	bl	8002050 <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	0719      	lsls	r1, r3, #28
 80041a2:	d516      	bpl.n	80041d2 <I2S_IRQHandler+0xf6>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	0692      	lsls	r2, r2, #26
 80041aa:	d512      	bpl.n	80041d2 <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041b2:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041b4:	2200      	movs	r2, #0
 80041b6:	9203      	str	r2, [sp, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	9303      	str	r3, [sp, #12]
 80041bc:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80041be:	2301      	movs	r3, #1
 80041c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7fe f885 	bl	80022dc <HAL_I2S_ErrorCallback>
}
 80041d2:	b004      	add	sp, #16
 80041d4:	bd10      	pop	{r4, pc}

080041d6 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80041d8:	6802      	ldr	r2, [r0, #0]
{
 80041da:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80041dc:	6853      	ldr	r3, [r2, #4]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80041e8:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80041f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041f2:	f043 0308 	orr.w	r3, r3, #8
 80041f6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80041f8:	f7fe f870 	bl	80022dc <HAL_I2S_ErrorCallback>
}
 80041fc:	bd08      	pop	{r3, pc}

080041fe <HAL_I2S_GetState>:
  return hi2s->State;
 80041fe:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004202:	4770      	bx	lr

08004204 <HAL_I2SEx_TxRxCpltCallback>:
 8004204:	4770      	bx	lr
	...

08004208 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004208:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800420a:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800420c:	498e      	ldr	r1, [pc, #568]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800420e:	6893      	ldr	r3, [r2, #8]
{
 8004210:	b086      	sub	sp, #24
 8004212:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004214:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004216:	4b8d      	ldr	r3, [pc, #564]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004218:	428a      	cmp	r2, r1
 800421a:	bf18      	it	ne
 800421c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8004220:	6899      	ldr	r1, [r3, #8]
 8004222:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004224:	6851      	ldr	r1, [r2, #4]
 8004226:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800422c:	6841      	ldr	r1, [r0, #4]
 800422e:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8004232:	f040 8093 	bne.w	800435c <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004236:	9b00      	ldr	r3, [sp, #0]
 8004238:	0799      	lsls	r1, r3, #30
 800423a:	d51a      	bpl.n	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	d517      	bpl.n	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004242:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004244:	1c99      	adds	r1, r3, #2
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	6241      	str	r1, [r0, #36]	; 0x24
 800424a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800424c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800424e:	3b01      	subs	r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004254:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	b95b      	cbnz	r3, 8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800425a:	6853      	ldr	r3, [r2, #4]
 800425c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004260:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8004262:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8004264:	b29b      	uxth	r3, r3
 8004266:	b923      	cbnz	r3, 8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004268:	2301      	movs	r3, #1
 800426a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800426e:	f7ff ffc9 	bl	8004204 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004272:	9b01      	ldr	r3, [sp, #4]
 8004274:	07d8      	lsls	r0, r3, #31
 8004276:	d522      	bpl.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	0659      	lsls	r1, r3, #25
 800427c:	d51f      	bpl.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800427e:	6821      	ldr	r1, [r4, #0]
 8004280:	4a71      	ldr	r2, [pc, #452]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8004282:	4b72      	ldr	r3, [pc, #456]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004284:	4291      	cmp	r1, r2
 8004286:	bf18      	it	ne
 8004288:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800428c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800428e:	68d9      	ldr	r1, [r3, #12]
 8004290:	1c90      	adds	r0, r2, #2
 8004292:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004294:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8004296:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8004298:	3a01      	subs	r2, #1
 800429a:	b292      	uxth	r2, r2
 800429c:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800429e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80042a0:	b292      	uxth	r2, r2
 80042a2:	b962      	cbnz	r2, 80042be <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	b92b      	cbnz	r3, 80042be <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042b8:	4620      	mov	r0, r4
 80042ba:	f7ff ffa3 	bl	8004204 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042be:	9b01      	ldr	r3, [sp, #4]
 80042c0:	065a      	lsls	r2, r3, #25
 80042c2:	d522      	bpl.n	800430a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	069b      	lsls	r3, r3, #26
 80042c8:	d51f      	bpl.n	800430a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	495e      	ldr	r1, [pc, #376]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80042ce:	4a5f      	ldr	r2, [pc, #380]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80042d0:	428b      	cmp	r3, r1
 80042d2:	bf18      	it	ne
 80042d4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80042d8:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042da:	6851      	ldr	r1, [r2, #4]
 80042dc:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80042e0:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042e8:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042ea:	2200      	movs	r2, #0
 80042ec:	9204      	str	r2, [sp, #16]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	9204      	str	r2, [sp, #16]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	9304      	str	r3, [sp, #16]
 80042f6:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004306:	f7fd ffe9 	bl	80022dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800430a:	9b00      	ldr	r3, [sp, #0]
 800430c:	0718      	lsls	r0, r3, #28
 800430e:	f140 8098 	bpl.w	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8004312:	9b02      	ldr	r3, [sp, #8]
 8004314:	0699      	lsls	r1, r3, #26
 8004316:	f140 8094 	bpl.w	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800431a:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800431c:	494a      	ldr	r1, [pc, #296]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004324:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004326:	4a49      	ldr	r2, [pc, #292]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004328:	428b      	cmp	r3, r1
 800432a:	bf18      	it	ne
 800432c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8004330:	6851      	ldr	r1, [r2, #4]
 8004332:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8004336:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004338:	2200      	movs	r2, #0
 800433a:	9205      	str	r2, [sp, #20]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	9305      	str	r3, [sp, #20]
 8004340:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8004342:	2301      	movs	r3, #1
 8004344:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004348:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800434a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800434c:	f043 0304 	orr.w	r3, r3, #4
 8004350:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004352:	b006      	add	sp, #24
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8004358:	f7fd bfc0 	b.w	80022dc <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800435c:	9a01      	ldr	r2, [sp, #4]
 800435e:	0792      	lsls	r2, r2, #30
 8004360:	d51a      	bpl.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8004362:	9a03      	ldr	r2, [sp, #12]
 8004364:	0611      	lsls	r1, r2, #24
 8004366:	d517      	bpl.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004368:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800436a:	1c91      	adds	r1, r2, #2
 800436c:	8812      	ldrh	r2, [r2, #0]
 800436e:	6241      	str	r1, [r0, #36]	; 0x24
 8004370:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004372:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004374:	3a01      	subs	r2, #1
 8004376:	b292      	uxth	r2, r2
 8004378:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800437a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800437c:	b292      	uxth	r2, r2
 800437e:	b95a      	cbnz	r2, 8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004386:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8004388:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800438a:	b29b      	uxth	r3, r3
 800438c:	b923      	cbnz	r3, 8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 800438e:	2301      	movs	r3, #1
 8004390:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004394:	f7ff ff36 	bl	8004204 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004398:	9b00      	ldr	r3, [sp, #0]
 800439a:	07da      	lsls	r2, r3, #31
 800439c:	d51c      	bpl.n	80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 800439e:	9b02      	ldr	r3, [sp, #8]
 80043a0:	065b      	lsls	r3, r3, #25
 80043a2:	d519      	bpl.n	80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80043a6:	6822      	ldr	r2, [r4, #0]
 80043a8:	1c98      	adds	r0, r3, #2
 80043aa:	68d1      	ldr	r1, [r2, #12]
 80043ac:	62e0      	str	r0, [r4, #44]	; 0x2c
 80043ae:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80043b0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80043b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	b963      	cbnz	r3, 80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043be:	6853      	ldr	r3, [r2, #4]
 80043c0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80043c4:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80043c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	b92b      	cbnz	r3, 80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7ff ff16 	bl	8004204 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043d8:	9b00      	ldr	r3, [sp, #0]
 80043da:	0658      	lsls	r0, r3, #25
 80043dc:	d51b      	bpl.n	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 80043de:	9b02      	ldr	r3, [sp, #8]
 80043e0:	0699      	lsls	r1, r3, #26
 80043e2:	d518      	bpl.n	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e4:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e6:	4918      	ldr	r1, [pc, #96]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e8:	6853      	ldr	r3, [r2, #4]
 80043ea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80043ee:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80043f2:	428a      	cmp	r2, r1
 80043f4:	bf18      	it	ne
 80043f6:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80043fa:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004402:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8004404:	2301      	movs	r3, #1
 8004406:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800440a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004412:	f7fd ff63 	bl	80022dc <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004416:	9b01      	ldr	r3, [sp, #4]
 8004418:	071a      	lsls	r2, r3, #28
 800441a:	d512      	bpl.n	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	d50f      	bpl.n	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	4908      	ldr	r1, [pc, #32]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004428:	428a      	cmp	r2, r1
 800442a:	bf18      	it	ne
 800442c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8004436:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004438:	6853      	ldr	r3, [r2, #4]
 800443a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800443e:	6053      	str	r3, [r2, #4]
 8004440:	e77f      	b.n	8004342 <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8004442:	b006      	add	sp, #24
 8004444:	bd10      	pop	{r4, pc}
 8004446:	bf00      	nop
 8004448:	40003800 	.word	0x40003800
 800444c:	40003400 	.word	0x40003400

08004450 <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004450:	4a0b      	ldr	r2, [pc, #44]	; (8004480 <HAL_PWR_EnterSTOPMode+0x30>)
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	f023 0303 	bic.w	r3, r3, #3
 8004458:	4318      	orrs	r0, r3
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <HAL_PWR_EnterSTOPMode+0x34>)
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800445c:	6010      	str	r0, [r2, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800445e:	691a      	ldr	r2, [r3, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004460:	2901      	cmp	r1, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004462:	f042 0204 	orr.w	r2, r2, #4
 8004466:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004468:	d105      	bne.n	8004476 <HAL_PWR_EnterSTOPMode+0x26>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800446a:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	f022 0204 	bic.w	r2, r2, #4
 8004472:	611a      	str	r2, [r3, #16]
}
 8004474:	4770      	bx	lr
    __SEV();
 8004476:	bf40      	sev
    __WFE();
 8004478:	bf20      	wfe
    __WFE();
 800447a:	bf20      	wfe
 800447c:	e7f6      	b.n	800446c <HAL_PWR_EnterSTOPMode+0x1c>
 800447e:	bf00      	nop
 8004480:	40007000 	.word	0x40007000
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800448c:	4604      	mov	r4, r0
 800448e:	b340      	cbz	r0, 80044e2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004490:	6803      	ldr	r3, [r0, #0]
 8004492:	07dd      	lsls	r5, r3, #31
 8004494:	d410      	bmi.n	80044b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	0798      	lsls	r0, r3, #30
 800449a:	d45e      	bmi.n	800455a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	071a      	lsls	r2, r3, #28
 80044a0:	f100 80a0 	bmi.w	80045e4 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	075b      	lsls	r3, r3, #29
 80044a8:	f100 80c0 	bmi.w	800462c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ac:	69a0      	ldr	r0, [r4, #24]
 80044ae:	2800      	cmp	r0, #0
 80044b0:	f040 8128 	bne.w	8004704 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2000      	movs	r0, #0
 80044b6:	e02b      	b.n	8004510 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044b8:	4b8f      	ldr	r3, [pc, #572]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	f002 020c 	and.w	r2, r2, #12
 80044c0:	2a04      	cmp	r2, #4
 80044c2:	d007      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ca:	2a08      	cmp	r2, #8
 80044cc:	d10b      	bne.n	80044e6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	0251      	lsls	r1, r2, #9
 80044d2:	d508      	bpl.n	80044e6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	039a      	lsls	r2, r3, #14
 80044da:	d5dc      	bpl.n	8004496 <HAL_RCC_OscConfig+0xe>
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1d9      	bne.n	8004496 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80044e2:	2001      	movs	r0, #1
 80044e4:	e014      	b.n	8004510 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80044ec:	d113      	bne.n	8004516 <HAL_RCC_OscConfig+0x8e>
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044f6:	f7fe fefb 	bl	80032f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4e7f      	ldr	r6, [pc, #508]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80044fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	6833      	ldr	r3, [r6, #0]
 8004500:	039b      	lsls	r3, r3, #14
 8004502:	d4c8      	bmi.n	8004496 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe fef4 	bl	80032f0 <HAL_GetTick>
 8004508:	1b40      	subs	r0, r0, r5
 800450a:	2864      	cmp	r0, #100	; 0x64
 800450c:	d9f7      	bls.n	80044fe <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800450e:	2003      	movs	r0, #3
}
 8004510:	b002      	add	sp, #8
 8004512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004516:	4d78      	ldr	r5, [pc, #480]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004518:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	d107      	bne.n	8004530 <HAL_RCC_OscConfig+0xa8>
 8004520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004524:	602b      	str	r3, [r5, #0]
 8004526:	682b      	ldr	r3, [r5, #0]
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800452e:	e7e2      	b.n	80044f6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800453e:	2a00      	cmp	r2, #0
 8004540:	d1d9      	bne.n	80044f6 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8004542:	f7fe fed5 	bl	80032f0 <HAL_GetTick>
 8004546:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	039f      	lsls	r7, r3, #14
 800454c:	d5a3      	bpl.n	8004496 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800454e:	f7fe fecf 	bl	80032f0 <HAL_GetTick>
 8004552:	1b80      	subs	r0, r0, r6
 8004554:	2864      	cmp	r0, #100	; 0x64
 8004556:	d9f7      	bls.n	8004548 <HAL_RCC_OscConfig+0xc0>
 8004558:	e7d9      	b.n	800450e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800455a:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	f012 0f0c 	tst.w	r2, #12
 8004562:	d007      	beq.n	8004574 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800456a:	2a08      	cmp	r2, #8
 800456c:	d111      	bne.n	8004592 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	025e      	lsls	r6, r3, #9
 8004572:	d40e      	bmi.n	8004592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004574:	4a60      	ldr	r2, [pc, #384]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	079d      	lsls	r5, r3, #30
 800457a:	d502      	bpl.n	8004582 <HAL_RCC_OscConfig+0xfa>
 800457c:	68e3      	ldr	r3, [r4, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d1af      	bne.n	80044e2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	6921      	ldr	r1, [r4, #16]
 8004586:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800458a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800458e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004590:	e784      	b.n	800449c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004592:	68e2      	ldr	r2, [r4, #12]
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <HAL_RCC_OscConfig+0x274>)
 8004596:	b1b2      	cbz	r2, 80045c6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800459c:	f7fe fea8 	bl	80032f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	4d55      	ldr	r5, [pc, #340]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80045a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	0798      	lsls	r0, r3, #30
 80045a8:	d507      	bpl.n	80045ba <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045aa:	682b      	ldr	r3, [r5, #0]
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	e770      	b.n	800449c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ba:	f7fe fe99 	bl	80032f0 <HAL_GetTick>
 80045be:	1b80      	subs	r0, r0, r6
 80045c0:	2802      	cmp	r0, #2
 80045c2:	d9ef      	bls.n	80045a4 <HAL_RCC_OscConfig+0x11c>
 80045c4:	e7a3      	b.n	800450e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80045c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045c8:	f7fe fe92 	bl	80032f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045cc:	4e4a      	ldr	r6, [pc, #296]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80045ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	0799      	lsls	r1, r3, #30
 80045d4:	f57f af62 	bpl.w	800449c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d8:	f7fe fe8a 	bl	80032f0 <HAL_GetTick>
 80045dc:	1b40      	subs	r0, r0, r5
 80045de:	2802      	cmp	r0, #2
 80045e0:	d9f6      	bls.n	80045d0 <HAL_RCC_OscConfig+0x148>
 80045e2:	e794      	b.n	800450e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e4:	6962      	ldr	r2, [r4, #20]
 80045e6:	4b45      	ldr	r3, [pc, #276]	; (80046fc <HAL_RCC_OscConfig+0x274>)
 80045e8:	b182      	cbz	r2, 800460c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80045ea:	2201      	movs	r2, #1
 80045ec:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80045f0:	f7fe fe7e 	bl	80032f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f4:	4e40      	ldr	r6, [pc, #256]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80045f6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80045fa:	079f      	lsls	r7, r3, #30
 80045fc:	f53f af52 	bmi.w	80044a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004600:	f7fe fe76 	bl	80032f0 <HAL_GetTick>
 8004604:	1b40      	subs	r0, r0, r5
 8004606:	2802      	cmp	r0, #2
 8004608:	d9f6      	bls.n	80045f8 <HAL_RCC_OscConfig+0x170>
 800460a:	e780      	b.n	800450e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800460c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004610:	f7fe fe6e 	bl	80032f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	4e38      	ldr	r6, [pc, #224]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8004616:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800461a:	0798      	lsls	r0, r3, #30
 800461c:	f57f af42 	bpl.w	80044a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004620:	f7fe fe66 	bl	80032f0 <HAL_GetTick>
 8004624:	1b40      	subs	r0, r0, r5
 8004626:	2802      	cmp	r0, #2
 8004628:	d9f6      	bls.n	8004618 <HAL_RCC_OscConfig+0x190>
 800462a:	e770      	b.n	800450e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800462e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004630:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8004634:	d128      	bne.n	8004688 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800464a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	4d2c      	ldr	r5, [pc, #176]	; (8004700 <HAL_RCC_OscConfig+0x278>)
 800464e:	682b      	ldr	r3, [r5, #0]
 8004650:	05d9      	lsls	r1, r3, #23
 8004652:	d51b      	bpl.n	800468c <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004654:	68a3      	ldr	r3, [r4, #8]
 8004656:	4d28      	ldr	r5, [pc, #160]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004658:	2b01      	cmp	r3, #1
 800465a:	d127      	bne.n	80046ac <HAL_RCC_OscConfig+0x224>
 800465c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004664:	f7fe fe44 	bl	80032f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	4e23      	ldr	r6, [pc, #140]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800466a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004670:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004672:	079b      	lsls	r3, r3, #30
 8004674:	d539      	bpl.n	80046ea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8004676:	2f00      	cmp	r7, #0
 8004678:	f43f af18 	beq.w	80044ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800467e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004684:	6413      	str	r3, [r2, #64]	; 0x40
 8004686:	e711      	b.n	80044ac <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004688:	2700      	movs	r7, #0
 800468a:	e7df      	b.n	800464c <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004692:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004694:	f7fe fe2c 	bl	80032f0 <HAL_GetTick>
 8004698:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	05da      	lsls	r2, r3, #23
 800469e:	d4d9      	bmi.n	8004654 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a0:	f7fe fe26 	bl	80032f0 <HAL_GetTick>
 80046a4:	1b80      	subs	r0, r0, r6
 80046a6:	2802      	cmp	r0, #2
 80046a8:	d9f7      	bls.n	800469a <HAL_RCC_OscConfig+0x212>
 80046aa:	e730      	b.n	800450e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d104      	bne.n	80046ba <HAL_RCC_OscConfig+0x232>
 80046b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046b2:	f043 0304 	orr.w	r3, r3, #4
 80046b6:	672b      	str	r3, [r5, #112]	; 0x70
 80046b8:	e7d0      	b.n	800465c <HAL_RCC_OscConfig+0x1d4>
 80046ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80046bc:	f022 0201 	bic.w	r2, r2, #1
 80046c0:	672a      	str	r2, [r5, #112]	; 0x70
 80046c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80046c4:	f022 0204 	bic.w	r2, r2, #4
 80046c8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ca      	bne.n	8004664 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80046ce:	f7fe fe0f 	bl	80032f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80046d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046da:	0798      	lsls	r0, r3, #30
 80046dc:	d5cb      	bpl.n	8004676 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fe fe07 	bl	80032f0 <HAL_GetTick>
 80046e2:	1b80      	subs	r0, r0, r6
 80046e4:	4540      	cmp	r0, r8
 80046e6:	d9f7      	bls.n	80046d8 <HAL_RCC_OscConfig+0x250>
 80046e8:	e711      	b.n	800450e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe fe01 	bl	80032f0 <HAL_GetTick>
 80046ee:	1b40      	subs	r0, r0, r5
 80046f0:	4540      	cmp	r0, r8
 80046f2:	d9bd      	bls.n	8004670 <HAL_RCC_OscConfig+0x1e8>
 80046f4:	e70b      	b.n	800450e <HAL_RCC_OscConfig+0x86>
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	42470000 	.word	0x42470000
 8004700:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004704:	4d36      	ldr	r5, [pc, #216]	; (80047e0 <HAL_RCC_OscConfig+0x358>)
 8004706:	68ab      	ldr	r3, [r5, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d03d      	beq.n	800478c <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_RCC_OscConfig+0x35c>)
 8004712:	2200      	movs	r2, #0
 8004714:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004716:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004718:	d12b      	bne.n	8004772 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800471a:	f7fe fde9 	bl	80032f0 <HAL_GetTick>
 800471e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	0199      	lsls	r1, r3, #6
 8004724:	d41f      	bmi.n	8004766 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004726:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800472a:	4313      	orrs	r3, r2
 800472c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800472e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004734:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004738:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800473a:	0852      	lsrs	r2, r2, #1
 800473c:	3a01      	subs	r2, #1
 800473e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004742:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4d26      	ldr	r5, [pc, #152]	; (80047e0 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8004748:	2201      	movs	r2, #1
 800474a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800474c:	f7fe fdd0 	bl	80032f0 <HAL_GetTick>
 8004750:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004752:	682b      	ldr	r3, [r5, #0]
 8004754:	019a      	lsls	r2, r3, #6
 8004756:	f53f aead 	bmi.w	80044b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475a:	f7fe fdc9 	bl	80032f0 <HAL_GetTick>
 800475e:	1b00      	subs	r0, r0, r4
 8004760:	2802      	cmp	r0, #2
 8004762:	d9f6      	bls.n	8004752 <HAL_RCC_OscConfig+0x2ca>
 8004764:	e6d3      	b.n	800450e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004766:	f7fe fdc3 	bl	80032f0 <HAL_GetTick>
 800476a:	1b80      	subs	r0, r0, r6
 800476c:	2802      	cmp	r0, #2
 800476e:	d9d7      	bls.n	8004720 <HAL_RCC_OscConfig+0x298>
 8004770:	e6cd      	b.n	800450e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8004772:	f7fe fdbd 	bl	80032f0 <HAL_GetTick>
 8004776:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	019b      	lsls	r3, r3, #6
 800477c:	f57f ae9a 	bpl.w	80044b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe fdb6 	bl	80032f0 <HAL_GetTick>
 8004784:	1b00      	subs	r0, r0, r4
 8004786:	2802      	cmp	r0, #2
 8004788:	d9f6      	bls.n	8004778 <HAL_RCC_OscConfig+0x2f0>
 800478a:	e6c0      	b.n	800450e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478c:	2801      	cmp	r0, #1
 800478e:	f43f aebf 	beq.w	8004510 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8004792:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004794:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479a:	4291      	cmp	r1, r2
 800479c:	f47f aea1 	bne.w	80044e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	428a      	cmp	r2, r1
 80047a8:	f47f ae9b 	bne.w	80044e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ae:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80047b2:	401a      	ands	r2, r3
 80047b4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80047b8:	f47f ae93 	bne.w	80044e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80047c4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80047ca:	f47f ae8a 	bne.w	80044e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80047d8:	f43f ae6c 	beq.w	80044b4 <HAL_RCC_OscConfig+0x2c>
 80047dc:	e681      	b.n	80044e2 <HAL_RCC_OscConfig+0x5a>
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	42470000 	.word	0x42470000

080047e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e8:	4913      	ldr	r1, [pc, #76]	; (8004838 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80047ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	688b      	ldr	r3, [r1, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d01c      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x48>
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004800:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004804:	bf14      	ite	ne
 8004806:	480d      	ldrne	r0, [pc, #52]	; (800483c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004808:	480d      	ldreq	r0, [pc, #52]	; (8004840 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800480e:	bf18      	it	ne
 8004810:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004812:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004816:	fba1 0100 	umull	r0, r1, r1, r0
 800481a:	f7fc fa45 	bl	8000ca8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_GetSysClockFreq+0x50>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004826:	3301      	adds	r3, #1
 8004828:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800482a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800482e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <HAL_RCC_GetSysClockFreq+0x54>)
 8004832:	e7fc      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004834:	4802      	ldr	r0, [pc, #8]	; (8004840 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004836:	e7fa      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x46>
 8004838:	40023800 	.word	0x40023800
 800483c:	007a1200 	.word	0x007a1200
 8004840:	00f42400 	.word	0x00f42400

08004844 <HAL_RCC_ClockConfig>:
{
 8004844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004848:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800484a:	4604      	mov	r4, r0
 800484c:	b910      	cbnz	r0, 8004854 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800484e:	2001      	movs	r0, #1
}
 8004850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <HAL_RCC_ClockConfig+0x124>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	f002 0207 	and.w	r2, r2, #7
 800485c:	428a      	cmp	r2, r1
 800485e:	d328      	bcc.n	80048b2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	0797      	lsls	r7, r2, #30
 8004864:	d42d      	bmi.n	80048c2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004866:	07d0      	lsls	r0, r2, #31
 8004868:	d441      	bmi.n	80048ee <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_ClockConfig+0x124>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	f002 0207 	and.w	r2, r2, #7
 8004872:	42aa      	cmp	r2, r5
 8004874:	d866      	bhi.n	8004944 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	0751      	lsls	r1, r2, #29
 800487a:	d46c      	bmi.n	8004956 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487c:	0713      	lsls	r3, r2, #28
 800487e:	d507      	bpl.n	8004890 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004880:	4a3a      	ldr	r2, [pc, #232]	; (800496c <HAL_RCC_ClockConfig+0x128>)
 8004882:	6921      	ldr	r1, [r4, #16]
 8004884:	6893      	ldr	r3, [r2, #8]
 8004886:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800488a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800488e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004890:	f7ff ffaa 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8004894:	4b35      	ldr	r3, [pc, #212]	; (800496c <HAL_RCC_ClockConfig+0x128>)
 8004896:	4a36      	ldr	r2, [pc, #216]	; (8004970 <HAL_RCC_ClockConfig+0x12c>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	40d8      	lsrs	r0, r3
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <HAL_RCC_ClockConfig+0x130>)
 80048a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80048a6:	4b34      	ldr	r3, [pc, #208]	; (8004978 <HAL_RCC_ClockConfig+0x134>)
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f7fe fcd7 	bl	800325c <HAL_InitTick>
  return HAL_OK;
 80048ae:	2000      	movs	r0, #0
 80048b0:	e7ce      	b.n	8004850 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	b2ca      	uxtb	r2, r1
 80048b4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	428b      	cmp	r3, r1
 80048be:	d1c6      	bne.n	800484e <HAL_RCC_ClockConfig+0xa>
 80048c0:	e7ce      	b.n	8004860 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c2:	4b2a      	ldr	r3, [pc, #168]	; (800496c <HAL_RCC_ClockConfig+0x128>)
 80048c4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	bf1e      	ittt	ne
 80048ca:	6899      	ldrne	r1, [r3, #8]
 80048cc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80048d0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d4:	bf42      	ittt	mi
 80048d6:	6899      	ldrmi	r1, [r3, #8]
 80048d8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80048dc:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048de:	4923      	ldr	r1, [pc, #140]	; (800496c <HAL_RCC_ClockConfig+0x128>)
 80048e0:	68a0      	ldr	r0, [r4, #8]
 80048e2:	688b      	ldr	r3, [r1, #8]
 80048e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e8:	4303      	orrs	r3, r0
 80048ea:	608b      	str	r3, [r1, #8]
 80048ec:	e7bb      	b.n	8004866 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	4b1e      	ldr	r3, [pc, #120]	; (800496c <HAL_RCC_ClockConfig+0x128>)
 80048f2:	2a01      	cmp	r2, #1
 80048f4:	d11c      	bne.n	8004930 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	d0a7      	beq.n	800484e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fe:	4e1b      	ldr	r6, [pc, #108]	; (800496c <HAL_RCC_ClockConfig+0x128>)
 8004900:	68b3      	ldr	r3, [r6, #8]
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	4313      	orrs	r3, r2
 8004908:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800490a:	f7fe fcf1 	bl	80032f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004912:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004914:	68b3      	ldr	r3, [r6, #8]
 8004916:	6862      	ldr	r2, [r4, #4]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004920:	d0a3      	beq.n	800486a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004922:	f7fe fce5 	bl	80032f0 <HAL_GetTick>
 8004926:	1bc0      	subs	r0, r0, r7
 8004928:	4540      	cmp	r0, r8
 800492a:	d9f3      	bls.n	8004914 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800492c:	2003      	movs	r0, #3
 800492e:	e78f      	b.n	8004850 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004930:	1e91      	subs	r1, r2, #2
 8004932:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004934:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004936:	d802      	bhi.n	800493e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004938:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800493c:	e7de      	b.n	80048fc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	f013 0f02 	tst.w	r3, #2
 8004942:	e7db      	b.n	80048fc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004944:	b2ea      	uxtb	r2, r5
 8004946:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	42ab      	cmp	r3, r5
 8004950:	f47f af7d 	bne.w	800484e <HAL_RCC_ClockConfig+0xa>
 8004954:	e78f      	b.n	8004876 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004956:	4905      	ldr	r1, [pc, #20]	; (800496c <HAL_RCC_ClockConfig+0x128>)
 8004958:	68e0      	ldr	r0, [r4, #12]
 800495a:	688b      	ldr	r3, [r1, #8]
 800495c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004960:	4303      	orrs	r3, r0
 8004962:	608b      	str	r3, [r1, #8]
 8004964:	e78a      	b.n	800487c <HAL_RCC_ClockConfig+0x38>
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	08012564 	.word	0x08012564
 8004974:	20000408 	.word	0x20000408
 8004978:	20000424 	.word	0x20000424

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <HAL_RCC_GetPCLK1Freq+0x14>)
 800497e:	4a05      	ldr	r2, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004986:	5cd3      	ldrb	r3, [r2, r3]
 8004988:	4a03      	ldr	r2, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800498a:	6810      	ldr	r0, [r2, #0]
}
 800498c:	40d8      	lsrs	r0, r3
 800498e:	4770      	bx	lr
 8004990:	40023800 	.word	0x40023800
 8004994:	08012574 	.word	0x08012574
 8004998:	20000408 	.word	0x20000408

0800499c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800499e:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	4a03      	ldr	r2, [pc, #12]	; (80049b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80049aa:	6810      	ldr	r0, [r2, #0]
}
 80049ac:	40d8      	lsrs	r0, r3
 80049ae:	4770      	bx	lr
 80049b0:	40023800 	.word	0x40023800
 80049b4:	08012574 	.word	0x08012574
 80049b8:	20000408 	.word	0x20000408

080049bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049bc:	6803      	ldr	r3, [r0, #0]
 80049be:	f013 0f05 	tst.w	r3, #5
{
 80049c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049c6:	d105      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	f013 0302 	ands.w	r3, r3, #2
 80049ce:	d12a      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049d0:	2000      	movs	r0, #0
 80049d2:	e026      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 80049d4:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d6:	4e43      	ldr	r6, [pc, #268]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 80049d8:	2200      	movs	r2, #0
 80049da:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80049dc:	f7fe fc88 	bl	80032f0 <HAL_GetTick>
 80049e0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e2:	6833      	ldr	r3, [r6, #0]
 80049e4:	011f      	lsls	r7, r3, #4
 80049e6:	d416      	bmi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80049f2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80049f6:	4b3a      	ldr	r3, [pc, #232]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f8:	4e3a      	ldr	r6, [pc, #232]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 80049fa:	2201      	movs	r2, #1
 80049fc:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80049fe:	f7fe fc77 	bl	80032f0 <HAL_GetTick>
 8004a02:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a04:	6833      	ldr	r3, [r6, #0]
 8004a06:	0118      	lsls	r0, r3, #4
 8004a08:	d4de      	bmi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a0a:	f7fe fc71 	bl	80032f0 <HAL_GetTick>
 8004a0e:	1b40      	subs	r0, r0, r5
 8004a10:	2802      	cmp	r0, #2
 8004a12:	d9f7      	bls.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004a14:	e004      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a16:	f7fe fc6b 	bl	80032f0 <HAL_GetTick>
 8004a1a:	1b40      	subs	r0, r0, r5
 8004a1c:	2802      	cmp	r0, #2
 8004a1e:	d9e0      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8004a20:	2003      	movs	r0, #3
}
 8004a22:	b003      	add	sp, #12
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8004a2c:	4d2e      	ldr	r5, [pc, #184]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	9301      	str	r3, [sp, #4]
 8004a3e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a46:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004a48:	f7fe fc52 	bl	80032f0 <HAL_GetTick>
 8004a4c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a4e:	682b      	ldr	r3, [r5, #0]
 8004a50:	05d9      	lsls	r1, r3, #23
 8004a52:	d51a      	bpl.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xce>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a54:	4d23      	ldr	r5, [pc, #140]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004a56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a58:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004a5c:	d11b      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xda>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004a64:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004a68:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004a6a:	d135      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004a6c:	6891      	ldr	r1, [r2, #8]
 8004a6e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004a72:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004a76:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004a7a:	4301      	orrs	r1, r0
 8004a7c:	6091      	str	r1, [r2, #8]
 8004a7e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	e7a2      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a8a:	f7fe fc31 	bl	80032f0 <HAL_GetTick>
 8004a8e:	1b80      	subs	r0, r0, r6
 8004a90:	2802      	cmp	r0, #2
 8004a92:	d9dc      	bls.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004a94:	e7c4      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a96:	68e2      	ldr	r2, [r4, #12]
 8004a98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d0de      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa2:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8004ab4:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004ab8:	07da      	lsls	r2, r3, #31
 8004aba:	d5d0      	bpl.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8004abc:	f7fe fc18 	bl	80032f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004ac4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004ac8:	079b      	lsls	r3, r3, #30
 8004aca:	d4c8      	bmi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004acc:	f7fe fc10 	bl	80032f0 <HAL_GetTick>
 8004ad0:	1b80      	subs	r0, r0, r6
 8004ad2:	42b8      	cmp	r0, r7
 8004ad4:	d9f7      	bls.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004ad6:	e7a3      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad8:	6891      	ldr	r1, [r2, #8]
 8004ada:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004ade:	e7cd      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40007000 	.word	0x40007000

08004aec <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004aec:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8004aee:	2303      	movs	r3, #3
 8004af0:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004af2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004af6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004afa:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004afc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004b00:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8004b04:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004b06:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004b08:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004b0a:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8004b16:	4770      	bx	lr
 8004b18:	40023800 	.word	0x40023800

08004b1c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8004b1c:	2801      	cmp	r0, #1
 8004b1e:	d11a      	bne.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8004b22:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8004b24:	0211      	lsls	r1, r2, #8
 8004b26:	d416      	bmi.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b28:	685a      	ldr	r2, [r3, #4]
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b2a:	685b      	ldr	r3, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b2c:	0252      	lsls	r2, r2, #9
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b2e:	4a0b      	ldr	r2, [pc, #44]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b30:	bf4c      	ite	mi
 8004b32:	480b      	ldrmi	r0, [pc, #44]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b34:	480b      	ldrpl	r0, [pc, #44]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b3e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b42:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b46:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004b4a:	4358      	muls	r0, r3
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b4c:	f3c2 7302 	ubfx	r3, r2, #28, #3
 8004b50:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8004b54:	4770      	bx	lr
 8004b56:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	007a1200 	.word	0x007a1200
 8004b64:	00f42400 	.word	0x00f42400

08004b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b68:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d055      	beq.n	8004c1c <HAL_SPI_Init+0xb4>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d14e      	bne.n	8004c14 <HAL_SPI_Init+0xac>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b76:	6842      	ldr	r2, [r0, #4]
 8004b78:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004b7c:	d000      	beq.n	8004b80 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b7e:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004b88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b8c:	b923      	cbnz	r3, 8004b98 <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b8e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7fd f8fe 	bl	8001d94 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b98:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b9a:	68a0      	ldr	r0, [r4, #8]
 8004b9c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004ba4:	680b      	ldr	r3, [r1, #0]
 8004ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004baa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004bb2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004bb6:	4303      	orrs	r3, r0
 8004bb8:	68e0      	ldr	r0, [r4, #12]
 8004bba:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8004bbe:	4303      	orrs	r3, r0
 8004bc0:	6920      	ldr	r0, [r4, #16]
 8004bc2:	f000 0002 	and.w	r0, r0, #2
 8004bc6:	4303      	orrs	r3, r0
 8004bc8:	6960      	ldr	r0, [r4, #20]
 8004bca:	f000 0001 	and.w	r0, r0, #1
 8004bce:	4303      	orrs	r3, r0
 8004bd0:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8004bd4:	4303      	orrs	r3, r0
 8004bd6:	69e0      	ldr	r0, [r4, #28]
 8004bd8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004bdc:	4303      	orrs	r3, r0
 8004bde:	6a20      	ldr	r0, [r4, #32]
 8004be0:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004be4:	4303      	orrs	r3, r0
 8004be6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004be8:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004bec:	4303      	orrs	r3, r0
 8004bee:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf2:	0c12      	lsrs	r2, r2, #16
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	f002 0204 	and.w	r2, r2, #4
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c00:	69cb      	ldr	r3, [r1, #28]
 8004c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c06:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c08:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004c0a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c0c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8004c12:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c14:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c1a:	e7b1      	b.n	8004b80 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	e7f8      	b.n	8004c12 <HAL_SPI_Init+0xaa>

08004c20 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c20:	6802      	ldr	r2, [r0, #0]
 8004c22:	68c1      	ldr	r1, [r0, #12]
 8004c24:	6913      	ldr	r3, [r2, #16]
 8004c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c2a:	430b      	orrs	r3, r1
{
 8004c2c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c2e:	6113      	str	r3, [r2, #16]
{
 8004c30:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c32:	6883      	ldr	r3, [r0, #8]
 8004c34:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004c36:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c38:	4303      	orrs	r3, r0
 8004c3a:	6968      	ldr	r0, [r5, #20]
 8004c3c:	4303      	orrs	r3, r0
 8004c3e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004c40:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004c44:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c48:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c4e:	6953      	ldr	r3, [r2, #20]
 8004c50:	69a9      	ldr	r1, [r5, #24]
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <UART_SetConfig+0xb8>)
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d003      	beq.n	8004c68 <UART_SetConfig+0x48>
 8004c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d123      	bne.n	8004cb0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7ff fe98 	bl	800499c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6c:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c6e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c74:	e9d5 4600 	ldrd	r4, r6, [r5]
 8004c78:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c7c:	d11b      	bne.n	8004cb6 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c7e:	19b2      	adds	r2, r6, r6
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	415b      	adcs	r3, r3
 8004c86:	f7fc f80f 	bl	8000ca8 <__aeabi_uldivmod>
 8004c8a:	2164      	movs	r1, #100	; 0x64
 8004c8c:	fbb0 f5f1 	udiv	r5, r0, r1
 8004c90:	fb01 0315 	mls	r3, r1, r5, r0
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	3332      	adds	r3, #50	; 0x32
 8004c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c9c:	f003 0207 	and.w	r2, r3, #7
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8004ca6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004caa:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cac:	60a3      	str	r3, [r4, #8]
  }
}
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cb0:	f7ff fe64 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8004cb4:	e7da      	b.n	8004c6c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb6:	00b2      	lsls	r2, r6, #2
 8004cb8:	0fb3      	lsrs	r3, r6, #30
 8004cba:	f7fb fff5 	bl	8000ca8 <__aeabi_uldivmod>
 8004cbe:	2264      	movs	r2, #100	; 0x64
 8004cc0:	fbb0 f1f2 	udiv	r1, r0, r2
 8004cc4:	fb02 0311 	mls	r3, r2, r1, r0
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	3332      	adds	r3, #50	; 0x32
 8004ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004cd4:	e7ea      	b.n	8004cac <UART_SetConfig+0x8c>
 8004cd6:	bf00      	nop
 8004cd8:	40011000 	.word	0x40011000

08004cdc <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	4604      	mov	r4, r0
 8004ce0:	460e      	mov	r6, r1
 8004ce2:	4617      	mov	r7, r2
 8004ce4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	ea36 0303 	bics.w	r3, r6, r3
 8004cee:	d101      	bne.n	8004cf4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e028      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	1c6b      	adds	r3, r5, #1
 8004cf6:	d0f7      	beq.n	8004ce8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cf8:	b125      	cbz	r5, 8004d04 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8004cfa:	f7fe faf9 	bl	80032f0 <HAL_GetTick>
 8004cfe:	1bc0      	subs	r0, r0, r7
 8004d00:	4285      	cmp	r5, r0
 8004d02:	d2f0      	bcs.n	8004ce6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d04:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	f102 030c 	add.w	r3, r2, #12
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	320c      	adds	r2, #12
 8004d14:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8004d18:	6821      	ldr	r1, [r4, #0]
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d1f2      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	f101 0314 	add.w	r3, r1, #20
 8004d22:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	f101 0014 	add.w	r0, r1, #20
 8004d2e:	e840 3200 	strex	r2, r3, [r0]
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	d1f3      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8004d36:	2320      	movs	r3, #32
 8004d38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004d3c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004d40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004d44:	2003      	movs	r0, #3
}
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d48 <HAL_UART_Init>:
{
 8004d48:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	b340      	cbz	r0, 8004da0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d56:	b91b      	cbnz	r3, 8004d60 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004d58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004d5c:	f7fd f850 	bl	8001e00 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004d60:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d62:	2324      	movs	r3, #36	; 0x24
 8004d64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004d68:	68d3      	ldr	r3, [r2, #12]
 8004d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d6e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ff55 	bl	8004c20 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d86:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d8e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004d92:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004d9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004da0:	2001      	movs	r0, #1
 8004da2:	e7fc      	b.n	8004d9e <HAL_UART_Init+0x56>

08004da4 <HAL_UART_DeInit>:
{
 8004da4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004da6:	4604      	mov	r4, r0
 8004da8:	b198      	cbz	r0, 8004dd2 <HAL_UART_DeInit+0x2e>
  __HAL_UART_DISABLE(huart);
 8004daa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	2324      	movs	r3, #36	; 0x24
 8004dae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004db2:	68d3      	ldr	r3, [r2, #12]
 8004db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db8:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8004dba:	f7fd f857 	bl	8001e6c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8004dc2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8004dc6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004dca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	6320      	str	r0, [r4, #48]	; 0x30
}
 8004dd0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	e7fc      	b.n	8004dd0 <HAL_UART_DeInit+0x2c>

08004dd6 <HAL_UART_Transmit>:
{
 8004dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd8:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004dda:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8004dde:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8004de0:	2a20      	cmp	r2, #32
{
 8004de2:	4604      	mov	r4, r0
 8004de4:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004de6:	d149      	bne.n	8004e7c <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d045      	beq.n	8004e78 <HAL_UART_Transmit+0xa2>
 8004dec:	2f00      	cmp	r7, #0
 8004dee:	d043      	beq.n	8004e78 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8004df0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004df4:	2a01      	cmp	r2, #1
 8004df6:	d041      	beq.n	8004e7c <HAL_UART_Transmit+0xa6>
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e00:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e04:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004e08:	f7fe fa72 	bl	80032f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0c:	68a1      	ldr	r1, [r4, #8]
 8004e0e:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8004e10:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e12:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004e16:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8004e18:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1a:	d103      	bne.n	8004e24 <HAL_UART_Transmit+0x4e>
 8004e1c:	6921      	ldr	r1, [r4, #16]
 8004e1e:	b909      	cbnz	r1, 8004e24 <HAL_UART_Transmit+0x4e>
 8004e20:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004e22:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8004e24:	2100      	movs	r1, #0
 8004e26:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004e2a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004e2c:	b289      	uxth	r1, r1
 8004e2e:	b941      	cbnz	r1, 8004e42 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e30:	2140      	movs	r1, #64	; 0x40
 8004e32:	4620      	mov	r0, r4
 8004e34:	f7ff ff52 	bl	8004cdc <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004e38:	b960      	cbnz	r0, 8004e54 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004e40:	e009      	b.n	8004e56 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e42:	2180      	movs	r1, #128	; 0x80
 8004e44:	4620      	mov	r0, r4
 8004e46:	e9cd 2300 	strd	r2, r3, [sp]
 8004e4a:	f7ff ff47 	bl	8004cdc <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e52:	b110      	cbz	r0, 8004e5a <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8004e54:	2003      	movs	r0, #3
}
 8004e56:	b003      	add	sp, #12
 8004e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e5a:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8004e5c:	b94e      	cbnz	r6, 8004e72 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e5e:	f835 1b02 	ldrh.w	r1, [r5], #2
 8004e62:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e66:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8004e68:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004e6a:	3901      	subs	r1, #1
 8004e6c:	b289      	uxth	r1, r1
 8004e6e:	84e1      	strh	r1, [r4, #38]	; 0x26
 8004e70:	e7db      	b.n	8004e2a <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e72:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004e76:	e7f6      	b.n	8004e66 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8004e78:	2001      	movs	r0, #1
 8004e7a:	e7ec      	b.n	8004e56 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8004e7c:	2002      	movs	r0, #2
 8004e7e:	e7ea      	b.n	8004e56 <HAL_UART_Transmit+0x80>

08004e80 <DCT_Init>:
 *
 * @param      *S    points to an instance of the floating-point DCT structure.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t DCT_Init(DCT_InstanceTypeDef *S)
{
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	ed2d 8b02 	vpush	{d8}
  float64_t normalizer;

  uint32_t shift;

  /* RemoveDCTZero only implemented for DCT Type-III non-normalized with COS tables */
  if (S->RemoveDCTZero != 0)
 8004e88:	e9d0 4b03 	ldrd	r4, fp, [r0, #12]
{
 8004e8c:	b085      	sub	sp, #20
  uint32_t n_filters = S->NumFilters;
 8004e8e:	6803      	ldr	r3, [r0, #0]
 8004e90:	9301      	str	r3, [sp, #4]
  uint32_t n_inputs = S->NumInputs;
 8004e92:	f8d0 a004 	ldr.w	sl, [r0, #4]
  {
    if (S->Type != DCT_TYPE_III)
 8004e96:	7a03      	ldrb	r3, [r0, #8]
  if (S->RemoveDCTZero != 0)
 8004e98:	b364      	cbz	r4, 8004ef4 <DCT_Init+0x74>
    if (S->Type != DCT_TYPE_III)
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	f040 81c4 	bne.w	8005228 <DCT_Init+0x3a8>
    {
      status = -1;
      return status;
    }
    shift = 1;
 8004ea0:	2401      	movs	r4, #1
 8004ea2:	9b01      	ldr	r3, [sp, #4]
 8004ea4:	4423      	add	r3, r4
 8004ea6:	4699      	mov	r9, r3

    case DCT_TYPE_III:
      for (uint32_t i = 0; i < n_filters; i++)
      {
        sample = M_PI * (i + shift + 0.5) / n_inputs;
        for (uint32_t j = 0; j < n_inputs; j++)
 8004ea8:	f04f 0800 	mov.w	r8, #0
      for (uint32_t i = 0; i < n_filters; i++)
 8004eac:	45a1      	cmp	r9, r4
 8004eae:	d06d      	beq.n	8004f8c <DCT_Init+0x10c>
        sample = M_PI * (i + shift + 0.5) / n_inputs;
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7fb fb37 	bl	8000524 <__aeabi_ui2d>
 8004eb6:	4be0      	ldr	r3, [pc, #896]	; (8005238 <DCT_Init+0x3b8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f7fb f9f7 	bl	80002ac <__adddf3>
 8004ebe:	a3dc      	add	r3, pc, #880	; (adr r3, 8005230 <DCT_Init+0x3b0>)
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f7fb fba8 	bl	8000618 <__aeabi_dmul>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	4650      	mov	r0, sl
 8004ecc:	460f      	mov	r7, r1
 8004ece:	f7fb fb29 	bl	8000524 <__aeabi_ui2d>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb fcc7 	bl	800086c <__aeabi_ddiv>
 8004ede:	ec41 0b18 	vmov	d8, r0, r1
        for (uint32_t j = 0; j < n_inputs; j++)
 8004ee2:	eb0b 0688 	add.w	r6, fp, r8, lsl #2
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	4555      	cmp	r5, sl
 8004eea:	f040 8120 	bne.w	800512e <DCT_Init+0x2ae>
      for (uint32_t i = 0; i < n_filters; i++)
 8004eee:	3401      	adds	r4, #1
 8004ef0:	44d0      	add	r8, sl
 8004ef2:	e7db      	b.n	8004eac <DCT_Init+0x2c>
  switch (S->Type)
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	f200 8196 	bhi.w	8005228 <DCT_Init+0x3a8>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <DCT_Init+0x84>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f99 	.word	0x08004f99
 8004f08:	08004fa7 	.word	0x08004fa7
 8004f0c:	0800508d 	.word	0x0800508d
 8004f10:	08004ea3 	.word	0x08004ea3
 8004f14:	0800515f 	.word	0x0800515f
          sample = M_PI * (j + 0.5) / n_inputs;
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7fb fb03 	bl	8000524 <__aeabi_ui2d>
 8004f1e:	4bc6      	ldr	r3, [pc, #792]	; (8005238 <DCT_Init+0x3b8>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	f7fb f9c3 	bl	80002ac <__adddf3>
 8004f26:	a3c2      	add	r3, pc, #776	; (adr r3, 8005230 <DCT_Init+0x3b0>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f7fb fb74 	bl	8000618 <__aeabi_dmul>
 8004f30:	4606      	mov	r6, r0
 8004f32:	4650      	mov	r0, sl
 8004f34:	460f      	mov	r7, r1
 8004f36:	f7fb faf5 	bl	8000524 <__aeabi_ui2d>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4639      	mov	r1, r7
 8004f42:	f7fb fc93 	bl	800086c <__aeabi_ddiv>
 8004f46:	4606      	mov	r6, r0
          M[i * n_inputs + j] = 2.0 * cos(sample * i);
 8004f48:	4640      	mov	r0, r8
          sample = M_PI * (j + 0.5) / n_inputs;
 8004f4a:	460f      	mov	r7, r1
          M[i * n_inputs + j] = 2.0 * cos(sample * i);
 8004f4c:	f7fb faea 	bl	8000524 <__aeabi_ui2d>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb fb5e 	bl	8000618 <__aeabi_dmul>
 8004f5c:	ec41 0b10 	vmov	d0, r0, r1
 8004f60:	f00b f8ca 	bl	80100f8 <cos>
 8004f64:	ec53 2b10 	vmov	r2, r3, d0
 8004f68:	ee10 0a10 	vmov	r0, s0
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f7fb f99d 	bl	80002ac <__adddf3>
 8004f72:	f7fb fe49 	bl	8000c08 <__aeabi_d2f>
 8004f76:	f849 0b04 	str.w	r0, [r9], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 8004f7a:	3401      	adds	r4, #1
 8004f7c:	4554      	cmp	r4, sl
 8004f7e:	d1cb      	bne.n	8004f18 <DCT_Init+0x98>
      for (uint32_t i = 0; i < n_filters; i++)
 8004f80:	f108 0801 	add.w	r8, r8, #1
 8004f84:	4455      	add	r5, sl
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	4598      	cmp	r8, r3
 8004f8a:	d108      	bne.n	8004f9e <DCT_Init+0x11e>
      status = 0;
 8004f8c:	2000      	movs	r0, #0
      status = -1;
      break;
  }

  return status;
}
 8004f8e:	b005      	add	sp, #20
 8004f90:	ecbd 8b02 	vpop	{d8}
 8004f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (S->Type)
 8004f98:	2500      	movs	r5, #0
 8004f9a:	46a8      	mov	r8, r5
 8004f9c:	e7f3      	b.n	8004f86 <DCT_Init+0x106>
 8004f9e:	eb0b 0985 	add.w	r9, fp, r5, lsl #2
        for (uint32_t j = 0; j < n_inputs; j++)
 8004fa2:	2400      	movs	r4, #0
 8004fa4:	e7ea      	b.n	8004f7c <DCT_Init+0xfc>
      normalizer = 2.0 * sqrt(1.0 / (4 * n_inputs));
 8004fa6:	ea4f 048a 	mov.w	r4, sl, lsl #2
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7fb faba 	bl	8000524 <__aeabi_ui2d>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	49a1      	ldr	r1, [pc, #644]	; (800523c <DCT_Init+0x3bc>)
 8004fb8:	f7fb fc58 	bl	800086c <__aeabi_ddiv>
 8004fbc:	ec41 0b10 	vmov	d0, r0, r1
 8004fc0:	f00b f91a 	bl	80101f8 <sqrt>
 8004fc4:	ec53 2b10 	vmov	r2, r3, d0
 8004fc8:	ee10 0a10 	vmov	r0, s0
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f7fb f96d 	bl	80002ac <__adddf3>
 8004fd2:	445c      	add	r4, fp
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
      for (uint32_t i = 0; i < n_inputs; i++)
 8004fd8:	465d      	mov	r5, fp
 8004fda:	42a5      	cmp	r5, r4
 8004fdc:	d119      	bne.n	8005012 <DCT_Init+0x192>
      normalizer = 2.0 / sqrt(2 * n_inputs);
 8004fde:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8004fe2:	f7fb fa9f 	bl	8000524 <__aeabi_ui2d>
 8004fe6:	ec41 0b10 	vmov	d0, r0, r1
 8004fea:	f00b f905 	bl	80101f8 <sqrt>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	ec53 2b10 	vmov	r2, r3, d0
 8004ff4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ff8:	f7fb fc38 	bl	800086c <__aeabi_ddiv>
 8004ffc:	ec41 0b18 	vmov	d8, r0, r1
  uint32_t n_inputs = S->NumInputs;
 8005000:	4656      	mov	r6, sl
      for (uint32_t i = 1; i < n_filters; i++)
 8005002:	2501      	movs	r5, #1
 8005004:	9b01      	ldr	r3, [sp, #4]
 8005006:	429d      	cmp	r5, r3
 8005008:	d2c0      	bcs.n	8004f8c <DCT_Init+0x10c>
 800500a:	eb0b 0786 	add.w	r7, fp, r6, lsl #2
        for (uint32_t j = 0; j < n_inputs; j++)
 800500e:	2400      	movs	r4, #0
 8005010:	e037      	b.n	8005082 <DCT_Init+0x202>
        M[i] = normalizer;
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb fdf7 	bl	8000c08 <__aeabi_d2f>
 800501a:	f845 0b04 	str.w	r0, [r5], #4
      for (uint32_t i = 0; i < n_inputs; i++)
 800501e:	e7dc      	b.n	8004fda <DCT_Init+0x15a>
          sample = M_PI * (j + 0.5) / n_inputs;
 8005020:	4620      	mov	r0, r4
 8005022:	f7fb fa7f 	bl	8000524 <__aeabi_ui2d>
 8005026:	4b84      	ldr	r3, [pc, #528]	; (8005238 <DCT_Init+0x3b8>)
 8005028:	2200      	movs	r2, #0
 800502a:	f7fb f93f 	bl	80002ac <__adddf3>
 800502e:	a380      	add	r3, pc, #512	; (adr r3, 8005230 <DCT_Init+0x3b0>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb faf0 	bl	8000618 <__aeabi_dmul>
 8005038:	4680      	mov	r8, r0
 800503a:	4650      	mov	r0, sl
 800503c:	4689      	mov	r9, r1
 800503e:	f7fb fa71 	bl	8000524 <__aeabi_ui2d>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4640      	mov	r0, r8
 8005048:	4649      	mov	r1, r9
 800504a:	f7fb fc0f 	bl	800086c <__aeabi_ddiv>
 800504e:	4680      	mov	r8, r0
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 8005050:	4628      	mov	r0, r5
          sample = M_PI * (j + 0.5) / n_inputs;
 8005052:	4689      	mov	r9, r1
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 8005054:	f7fb fa66 	bl	8000524 <__aeabi_ui2d>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb fada 	bl	8000618 <__aeabi_dmul>
 8005064:	ec41 0b10 	vmov	d0, r0, r1
 8005068:	f00b f846 	bl	80100f8 <cos>
 800506c:	ec53 2b18 	vmov	r2, r3, d8
 8005070:	ec51 0b10 	vmov	r0, r1, d0
 8005074:	f7fb fad0 	bl	8000618 <__aeabi_dmul>
 8005078:	f7fb fdc6 	bl	8000c08 <__aeabi_d2f>
 800507c:	f847 0b04 	str.w	r0, [r7], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 8005080:	3401      	adds	r4, #1
 8005082:	4554      	cmp	r4, sl
 8005084:	d1cc      	bne.n	8005020 <DCT_Init+0x1a0>
      for (uint32_t i = 1; i < n_filters; i++)
 8005086:	3501      	adds	r5, #1
 8005088:	4456      	add	r6, sl
 800508a:	e7bb      	b.n	8005004 <DCT_Init+0x184>
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800508c:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8005090:	f7fb fa48 	bl	8000524 <__aeabi_ui2d>
 8005094:	ec41 0b10 	vmov	d0, r0, r1
 8005098:	f00b f8ae 	bl	80101f8 <sqrt>
 800509c:	2000      	movs	r0, #0
 800509e:	ec53 2b10 	vmov	r2, r3, d0
 80050a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80050a6:	f7fb fbe1 	bl	800086c <__aeabi_ddiv>
      for (uint32_t i = 0; i < n_filters; i++)
 80050aa:	2500      	movs	r5, #0
      normalizer = 2.0 / sqrt(2 * n_inputs);
 80050ac:	ec41 0b18 	vmov	d8, r0, r1
      for (uint32_t i = 0; i < n_filters; i++)
 80050b0:	462e      	mov	r6, r5
 80050b2:	9b01      	ldr	r3, [sp, #4]
 80050b4:	429e      	cmp	r6, r3
 80050b6:	f43f af69 	beq.w	8004f8c <DCT_Init+0x10c>
 80050ba:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
        for (uint32_t j = 0; j < n_inputs; j++)
 80050be:	2400      	movs	r4, #0
 80050c0:	e030      	b.n	8005124 <DCT_Init+0x2a4>
          sample = M_PI * (j + 0.5) / n_inputs;
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7fb fa2e 	bl	8000524 <__aeabi_ui2d>
 80050c8:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <DCT_Init+0x3b8>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	f7fb f8ee 	bl	80002ac <__adddf3>
 80050d0:	a357      	add	r3, pc, #348	; (adr r3, 8005230 <DCT_Init+0x3b0>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f7fb fa9f 	bl	8000618 <__aeabi_dmul>
 80050da:	4680      	mov	r8, r0
 80050dc:	4650      	mov	r0, sl
 80050de:	4689      	mov	r9, r1
 80050e0:	f7fb fa20 	bl	8000524 <__aeabi_ui2d>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4640      	mov	r0, r8
 80050ea:	4649      	mov	r1, r9
 80050ec:	f7fb fbbe 	bl	800086c <__aeabi_ddiv>
 80050f0:	4680      	mov	r8, r0
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 80050f2:	4630      	mov	r0, r6
          sample = M_PI * (j + 0.5) / n_inputs;
 80050f4:	4689      	mov	r9, r1
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 80050f6:	f7fb fa15 	bl	8000524 <__aeabi_ui2d>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4640      	mov	r0, r8
 8005100:	4649      	mov	r1, r9
 8005102:	f7fb fa89 	bl	8000618 <__aeabi_dmul>
 8005106:	ec41 0b10 	vmov	d0, r0, r1
 800510a:	f00a fff5 	bl	80100f8 <cos>
 800510e:	ec53 2b18 	vmov	r2, r3, d8
 8005112:	ec51 0b10 	vmov	r0, r1, d0
 8005116:	f7fb fa7f 	bl	8000618 <__aeabi_dmul>
 800511a:	f7fb fd75 	bl	8000c08 <__aeabi_d2f>
 800511e:	f847 0b04 	str.w	r0, [r7], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 8005122:	3401      	adds	r4, #1
 8005124:	4554      	cmp	r4, sl
 8005126:	d1cc      	bne.n	80050c2 <DCT_Init+0x242>
      for (uint32_t i = 0; i < n_filters; i++)
 8005128:	3601      	adds	r6, #1
 800512a:	4455      	add	r5, sl
 800512c:	e7c1      	b.n	80050b2 <DCT_Init+0x232>
          M[i * n_inputs + j] = 2.0 * cos(sample * j);
 800512e:	4628      	mov	r0, r5
 8005130:	f7fb f9f8 	bl	8000524 <__aeabi_ui2d>
 8005134:	ec53 2b18 	vmov	r2, r3, d8
 8005138:	f7fb fa6e 	bl	8000618 <__aeabi_dmul>
 800513c:	ec41 0b10 	vmov	d0, r0, r1
 8005140:	f00a ffda 	bl	80100f8 <cos>
 8005144:	ec53 2b10 	vmov	r2, r3, d0
 8005148:	ee10 0a10 	vmov	r0, s0
 800514c:	4619      	mov	r1, r3
 800514e:	f7fb f8ad 	bl	80002ac <__adddf3>
 8005152:	f7fb fd59 	bl	8000c08 <__aeabi_d2f>
        for (uint32_t j = 0; j < n_inputs; j++)
 8005156:	3501      	adds	r5, #1
          M[i * n_inputs + j] = 2.0 * cos(sample * j);
 8005158:	f846 0b04 	str.w	r0, [r6], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 800515c:	e6c4      	b.n	8004ee8 <DCT_Init+0x68>
      normalizer = 1.0 / sqrt(n_inputs);
 800515e:	4650      	mov	r0, sl
 8005160:	f7fb f9e0 	bl	8000524 <__aeabi_ui2d>
 8005164:	ec41 0b10 	vmov	d0, r0, r1
 8005168:	ec41 0b18 	vmov	d8, r0, r1
 800516c:	f00b f844 	bl	80101f8 <sqrt>
 8005170:	4932      	ldr	r1, [pc, #200]	; (800523c <DCT_Init+0x3bc>)
 8005172:	ec53 2b10 	vmov	r2, r3, d0
 8005176:	2000      	movs	r0, #0
 8005178:	f7fb fb78 	bl	800086c <__aeabi_ddiv>
 800517c:	eb0b 088a 	add.w	r8, fp, sl, lsl #2
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
      for (uint32_t i = 0; i < n_inputs; i++)
 8005184:	465d      	mov	r5, fp
 8005186:	4545      	cmp	r5, r8
 8005188:	d118      	bne.n	80051bc <DCT_Init+0x33c>
      normalizer = sqrt(2.0 / n_inputs);
 800518a:	ec53 2b18 	vmov	r2, r3, d8
 800518e:	2000      	movs	r0, #0
 8005190:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005194:	f7fb fb6a 	bl	800086c <__aeabi_ddiv>
 8005198:	ec41 0b10 	vmov	d0, r0, r1
 800519c:	f00b f82c 	bl	80101f8 <sqrt>
 80051a0:	ed8d 0b02 	vstr	d0, [sp, #8]
      for (uint32_t i = 0; i < n_filters; i++)
 80051a4:	f04f 0800 	mov.w	r8, #0
 80051a8:	f10b 0b04 	add.w	fp, fp, #4
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	429c      	cmp	r4, r3
 80051b0:	f43f aeec 	beq.w	8004f8c <DCT_Init+0x10c>
 80051b4:	eb0b 0988 	add.w	r9, fp, r8, lsl #2
        for (uint32_t j = 1; j < n_inputs; j++)
 80051b8:	2501      	movs	r5, #1
 80051ba:	e030      	b.n	800521e <DCT_Init+0x39e>
        M[i] = normalizer;
 80051bc:	4630      	mov	r0, r6
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb fd22 	bl	8000c08 <__aeabi_d2f>
 80051c4:	f845 0b04 	str.w	r0, [r5], #4
      for (uint32_t i = 0; i < n_inputs; i++)
 80051c8:	e7dd      	b.n	8005186 <DCT_Init+0x306>
          sample = M_PI * (i + 0.5) / n_inputs;
 80051ca:	4620      	mov	r0, r4
 80051cc:	f7fb f9aa 	bl	8000524 <__aeabi_ui2d>
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <DCT_Init+0x3b8>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	f7fb f86a 	bl	80002ac <__adddf3>
 80051d8:	a315      	add	r3, pc, #84	; (adr r3, 8005230 <DCT_Init+0x3b0>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fa1b 	bl	8000618 <__aeabi_dmul>
 80051e2:	ec53 2b18 	vmov	r2, r3, d8
 80051e6:	f7fb fb41 	bl	800086c <__aeabi_ddiv>
 80051ea:	4606      	mov	r6, r0
          M[i * n_inputs + j] = cos(sample * j) * normalizer;
 80051ec:	4628      	mov	r0, r5
          sample = M_PI * (i + 0.5) / n_inputs;
 80051ee:	460f      	mov	r7, r1
          M[i * n_inputs + j] = cos(sample * j) * normalizer;
 80051f0:	f7fb f998 	bl	8000524 <__aeabi_ui2d>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4630      	mov	r0, r6
 80051fa:	4639      	mov	r1, r7
 80051fc:	f7fb fa0c 	bl	8000618 <__aeabi_dmul>
 8005200:	ec41 0b10 	vmov	d0, r0, r1
 8005204:	f00a ff78 	bl	80100f8 <cos>
 8005208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800520c:	ec51 0b10 	vmov	r0, r1, d0
 8005210:	f7fb fa02 	bl	8000618 <__aeabi_dmul>
 8005214:	f7fb fcf8 	bl	8000c08 <__aeabi_d2f>
 8005218:	f849 0b04 	str.w	r0, [r9], #4
        for (uint32_t j = 1; j < n_inputs; j++)
 800521c:	3501      	adds	r5, #1
 800521e:	4555      	cmp	r5, sl
 8005220:	d3d3      	bcc.n	80051ca <DCT_Init+0x34a>
      for (uint32_t i = 0; i < n_filters; i++)
 8005222:	3401      	adds	r4, #1
 8005224:	44d0      	add	r8, sl
 8005226:	e7c1      	b.n	80051ac <DCT_Init+0x32c>
  switch (S->Type)
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e6af      	b.n	8004f8e <DCT_Init+0x10e>
 800522e:	bf00      	nop
 8005230:	54442d18 	.word	0x54442d18
 8005234:	400921fb 	.word	0x400921fb
 8005238:	3fe00000 	.word	0x3fe00000
 800523c:	3ff00000 	.word	0x3ff00000

08005240 <DCT>:
 * @param      *pIn  points to state buffer.
 * @param      *pOut points to the output buffer.
 * @return none.
 */
void DCT(DCT_InstanceTypeDef *S, float32_t *pIn, float32_t *pOut)
{
 8005240:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum;
  uint32_t n_inputs = S->NumInputs;
  uint32_t n_filters = S->NumFilters;

#ifndef USE_NAIVE_DCT
  float32_t *cosFact = S->pDCTCoefs;
 8005242:	6903      	ldr	r3, [r0, #16]
  uint32_t n_filters = S->NumFilters;
 8005244:	e9d0 4500 	ldrd	r4, r5, [r0]
#else
  float32_t normalizer;
#endif /* USE_NAIVE_DCT */

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 8005248:	7a00      	ldrb	r0, [r0, #8]
 800524a:	3801      	subs	r0, #1
 800524c:	2804      	cmp	r0, #4
 800524e:	d852      	bhi.n	80052f6 <DCT+0xb6>
 8005250:	e8df f000 	tbb	[pc, r0]
 8005254:	03192b48 	.word	0x03192b48
 8005258:	89          	.byte	0x89
 8005259:	00          	.byte	0x00
 800525a:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800525e:	3304      	adds	r3, #4
 8005260:	eb02 0484 	add.w	r4, r2, r4, lsl #2
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] + 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 8005264:	42a2      	cmp	r2, r4
 8005266:	d046      	beq.n	80052f6 <DCT+0xb6>
      {
        sum = 0.0f;
 8005268:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80053a8 <DCT+0x168>
 800526c:	1d0e      	adds	r6, r1, #4
        row = k * n_inputs;
        for (uint32_t n = 1; n < n_inputs; n++)
 800526e:	461f      	mov	r7, r3
 8005270:	2001      	movs	r0, #1
 8005272:	42a8      	cmp	r0, r5
 8005274:	d36f      	bcc.n	8005356 <DCT+0x116>
        {
          // sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
          sum += pIn[n] * cosFact[row + n];
        }
        pOut[k] = pIn[0] + sum;
 8005276:	edd1 7a00 	vldr	s15, [r1]
 800527a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800527e:	4463      	add	r3, ip
 8005280:	ece2 7a01 	vstmia	r2!, {s15}
      for (uint32_t k = 0; k < n_filters; k++)
 8005284:	e7ee      	b.n	8005264 <DCT+0x24>
 8005286:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800528a:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
  switch (S->Type)
 800528e:	2000      	movs	r0, #0
        pOut[k] = 0.0f;
 8005290:	f04f 0e00 	mov.w	lr, #0
      for (uint32_t k = 0; k < n_filters; k++)
 8005294:	42a2      	cmp	r2, r4
 8005296:	d02e      	beq.n	80052f6 <DCT+0xb6>
        pOut[k] = 0.0f;
 8005298:	f842 eb04 	str.w	lr, [r2], #4
        for (uint32_t n = 0; n < n_inputs; n++)
 800529c:	eb03 0780 	add.w	r7, r3, r0, lsl #2
 80052a0:	460e      	mov	r6, r1
 80052a2:	4566      	cmp	r6, ip
 80052a4:	d14c      	bne.n	8005340 <DCT+0x100>
      for (uint32_t k = 0; k < n_filters; k++)
 80052a6:	4428      	add	r0, r5
 80052a8:	e7f4      	b.n	8005294 <DCT+0x54>
      sum = 0.0f;
 80052aa:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80053a8 <DCT+0x168>
 80052ae:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
  switch (S->Type)
 80052b2:	4608      	mov	r0, r1
 80052b4:	eef0 6a67 	vmov.f32	s13, s15
      for (uint32_t n = 0; n < n_inputs; n++)
 80052b8:	4560      	cmp	r0, ip
 80052ba:	d131      	bne.n	8005320 <DCT+0xe0>
      pOut[0] = cosFact[0] * sum;
 80052bc:	ed93 7a00 	vldr	s14, [r3]
 80052c0:	ee67 7a27 	vmul.f32	s15, s14, s15
  uint32_t n_inputs = S->NumInputs;
 80052c4:	462e      	mov	r6, r5
      pOut[0] = cosFact[0] * sum;
 80052c6:	ece2 7a01 	vstmia	r2!, {s15}
      for (uint32_t k = 1; k < n_filters; k++)
 80052ca:	2001      	movs	r0, #1
 80052cc:	42a0      	cmp	r0, r4
 80052ce:	d212      	bcs.n	80052f6 <DCT+0xb6>
        pOut[k] = 0.0f;
 80052d0:	ece2 6a01 	vstmia	r2!, {s13}
        for (uint32_t n = 0; n < n_inputs; n++)
 80052d4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80052d8:	460f      	mov	r7, r1
 80052da:	4567      	cmp	r7, ip
 80052dc:	d125      	bne.n	800532a <DCT+0xea>
      for (uint32_t k = 1; k < n_filters; k++)
 80052de:	3001      	adds	r0, #1
 80052e0:	442e      	add	r6, r5
 80052e2:	e7f3      	b.n	80052cc <DCT+0x8c>
 80052e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80052e8:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
  switch (S->Type)
 80052ec:	2000      	movs	r0, #0
        pOut[k] = 0.0f;
 80052ee:	f04f 0e00 	mov.w	lr, #0
      for (uint32_t k = 0; k < n_filters; k++)
 80052f2:	42a2      	cmp	r2, r4
 80052f4:	d100      	bne.n	80052f8 <DCT+0xb8>
      break;

    default:
      break;
  }
}
 80052f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pOut[k] = 0.0f;
 80052f8:	f842 eb04 	str.w	lr, [r2], #4
        for (uint32_t n = 0; n < n_inputs; n++)
 80052fc:	eb03 0780 	add.w	r7, r3, r0, lsl #2
 8005300:	460e      	mov	r6, r1
 8005302:	45b4      	cmp	ip, r6
 8005304:	d101      	bne.n	800530a <DCT+0xca>
      for (uint32_t k = 0; k < n_filters; k++)
 8005306:	4428      	add	r0, r5
 8005308:	e7f3      	b.n	80052f2 <DCT+0xb2>
          pOut[k] += pIn[n] * cosFact[row + n];
 800530a:	ecf6 6a01 	vldmia	r6!, {s13}
 800530e:	ecb7 7a01 	vldmia	r7!, {s14}
 8005312:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005316:	eee6 7a87 	vfma.f32	s15, s13, s14
 800531a:	ed42 7a01 	vstr	s15, [r2, #-4]
        for (uint32_t n = 0; n < n_inputs; n++)
 800531e:	e7f0      	b.n	8005302 <DCT+0xc2>
        sum += pIn[n];
 8005320:	ecb0 7a01 	vldmia	r0!, {s14}
 8005324:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (uint32_t n = 0; n < n_inputs; n++)
 8005328:	e7c6      	b.n	80052b8 <DCT+0x78>
          pOut[k] += pIn[n] * cosFact[row + n];
 800532a:	ecb7 6a01 	vldmia	r7!, {s12}
 800532e:	ecbe 7a01 	vldmia	lr!, {s14}
 8005332:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005336:	eee6 7a07 	vfma.f32	s15, s12, s14
 800533a:	ed42 7a01 	vstr	s15, [r2, #-4]
        for (uint32_t n = 0; n < n_inputs; n++)
 800533e:	e7cc      	b.n	80052da <DCT+0x9a>
          pOut[k] += pIn[n] * cosFact[row + n];
 8005340:	ecf6 6a01 	vldmia	r6!, {s13}
 8005344:	ecb7 7a01 	vldmia	r7!, {s14}
 8005348:	ed52 7a01 	vldr	s15, [r2, #-4]
 800534c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005350:	ed42 7a01 	vstr	s15, [r2, #-4]
        for (uint32_t n = 0; n < n_inputs; n++)
 8005354:	e7a5      	b.n	80052a2 <DCT+0x62>
          sum += pIn[n] * cosFact[row + n];
 8005356:	ecf6 6a01 	vldmia	r6!, {s13}
 800535a:	ecf7 7a01 	vldmia	r7!, {s15}
        for (uint32_t n = 1; n < n_inputs; n++)
 800535e:	3001      	adds	r0, #1
          sum += pIn[n] * cosFact[row + n];
 8005360:	eea6 7aa7 	vfma.f32	s14, s13, s15
        for (uint32_t n = 1; n < n_inputs; n++)
 8005364:	e785      	b.n	8005272 <DCT+0x32>
      sum = pIn[0] * cosFact[0];
 8005366:	edd1 7a00 	vldr	s15, [r1]
 800536a:	ecb3 7a01 	vldmia	r3!, {s14}
 800536e:	ee67 7a87 	vmul.f32	s15, s15, s14
      for (uint32_t k = 0; k < n_filters; k++)
 8005372:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8005376:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800537a:	42a2      	cmp	r2, r4
 800537c:	d0bb      	beq.n	80052f6 <DCT+0xb6>
        pOut[k] = sum;
 800537e:	ece2 7a01 	vstmia	r2!, {s15}
        for (uint32_t n = 1; n < n_inputs; n++)
 8005382:	1d0e      	adds	r6, r1, #4
 8005384:	461f      	mov	r7, r3
 8005386:	2001      	movs	r0, #1
 8005388:	42a8      	cmp	r0, r5
 800538a:	d301      	bcc.n	8005390 <DCT+0x150>
      for (uint32_t k = 0; k < n_filters; k++)
 800538c:	4463      	add	r3, ip
 800538e:	e7f4      	b.n	800537a <DCT+0x13a>
          pOut[k] += pIn[n] * cosFact[row + n];
 8005390:	ecb6 6a01 	vldmia	r6!, {s12}
 8005394:	ecf7 6a01 	vldmia	r7!, {s13}
 8005398:	ed12 7a01 	vldr	s14, [r2, #-4]
 800539c:	eea6 7a26 	vfma.f32	s14, s12, s13
        for (uint32_t n = 1; n < n_inputs; n++)
 80053a0:	3001      	adds	r0, #1
          pOut[k] += pIn[n] * cosFact[row + n];
 80053a2:	ed02 7a01 	vstr	s14, [r2, #-4]
        for (uint32_t n = 1; n < n_inputs; n++)
 80053a6:	e7ef      	b.n	8005388 <DCT+0x148>
 80053a8:	00000000 	.word	0x00000000

080053ac <buf_to_float_normed>:
 */
void buf_to_float_normed(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
  for (uint32_t i = 0; i < len; i++)
  {
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 80053ac:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80053d4 <buf_to_float_normed+0x28>
 80053b0:	3802      	subs	r0, #2
 80053b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (uint32_t i = 0; i < len; i++)
 80053b6:	4291      	cmp	r1, r2
 80053b8:	d100      	bne.n	80053bc <buf_to_float_normed+0x10>
  }
}
 80053ba:	4770      	bx	lr
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 80053bc:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053cc:	ece1 7a01 	vstmia	r1!, {s15}
  for (uint32_t i = 0; i < len; i++)
 80053d0:	e7f1      	b.n	80053b6 <buf_to_float_normed+0xa>
 80053d2:	bf00      	nop
 80053d4:	38000000 	.word	0x38000000

080053d8 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 80053d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t frame_len = S->FrameLen;
  uint32_t n_fft = S->FFTLen;
 80053dc:	e9d0 9604 	ldrd	r9, r6, [r0, #16]
{
 80053e0:	460f      	mov	r7, r1
  float32_t *scratch_buffer = S->pScratch;
 80053e2:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 80053e6:	ed2d 8b02 	vpush	{d8}
 80053ea:	4605      	mov	r5, r0
 80053ec:	4614      	mov	r4, r2
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 80053ee:	464b      	mov	r3, r9
 80053f0:	460a      	mov	r2, r1
 80053f2:	6881      	ldr	r1, [r0, #8]
 80053f4:	4638      	mov	r0, r7
 80053f6:	f7fc ff85 	bl	8002304 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 80053fa:	eba6 0209 	sub.w	r2, r6, r9
 80053fe:	2100      	movs	r1, #0
 8005400:	eb07 0089 	add.w	r0, r7, r9, lsl #2
 8005404:	f006 fa3c 	bl	800b880 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8005408:	2300      	movs	r3, #0
 800540a:	4639      	mov	r1, r7
 800540c:	6828      	ldr	r0, [r5, #0]
 800540e:	4642      	mov	r2, r8
 8005410:	f7fd fe36 	bl	8003080 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8005414:	ed98 7a00 	vldr	s14, [r8]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8005418:	edd8 7a01 	vldr	s15, [r8, #4]
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 800541c:	ee27 7a07 	vmul.f32	s14, s14, s14
  pOutCol[0] = first_energy;
 8005420:	4627      	mov	r7, r4
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8005422:	0876      	lsrs	r6, r6, #1
  pOutCol[0] = first_energy;
 8005424:	eca7 7a01 	vstmia	r7!, {s14}
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8005428:	ee27 8aa7 	vmul.f32	s16, s15, s15
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800542c:	1e72      	subs	r2, r6, #1
 800542e:	4639      	mov	r1, r7
 8005430:	f108 0008 	add.w	r0, r8, #8
 8005434:	f7fc ff72 	bl	800231c <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8005438:	00b1      	lsls	r1, r6, #2
 800543a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800543e:	ed86 8a00 	vstr	s16, [r6]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8005442:	792b      	ldrb	r3, [r5, #4]
 8005444:	b973      	cbnz	r3, 8005464 <SpectrogramColumn+0x8c>
 8005446:	440f      	add	r7, r1
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8005448:	2500      	movs	r5, #0
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 800544a:	ecb4 0a01 	vldmia	r4!, {s0}
 800544e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	db09      	blt.n	800546c <SpectrogramColumn+0x94>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8005458:	f00a ffe4 	bl	8010424 <sqrtf>
 800545c:	ed04 0a01 	vstr	s0, [r4, #-4]
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8005460:	42bc      	cmp	r4, r7
 8005462:	d1f2      	bne.n	800544a <SpectrogramColumn+0x72>
    }
  }
}
 8005464:	ecbd 8b02 	vpop	{d8}
 8005468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800546c:	f844 5c04 	str.w	r5, [r4, #-4]
      return (ARM_MATH_ARGUMENT_ERROR);
 8005470:	e7f6      	b.n	8005460 <SpectrogramColumn+0x88>

08005472 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8005472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8005474:	6803      	ldr	r3, [r0, #0]
{
 8005476:	ed2d 8b02 	vpush	{d8}
 800547a:	4607      	mov	r7, r0
  float32_t top_dB = S->TopdB;
 800547c:	ed90 8a03 	vldr	s16, [r0, #12]
  float32_t ref = S->Ref;
 8005480:	edd0 8a02 	vldr	s17, [r0, #8]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8005484:	6818      	ldr	r0, [r3, #0]
{
 8005486:	4614      	mov	r4, r2
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8005488:	6985      	ldr	r5, [r0, #24]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	6916      	ldr	r6, [r2, #16]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 800548e:	462a      	mov	r2, r5
 8005490:	f7ff ffa2 	bl	80053d8 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4629      	mov	r1, r5
 8005498:	6858      	ldr	r0, [r3, #4]
 800549a:	4622      	mov	r2, r4
 800549c:	f000 f994 	bl	80057c8 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 80054a0:	4625      	mov	r5, r4
 80054a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80054a6:	4623      	mov	r3, r4
 80054a8:	42b3      	cmp	r3, r6
 80054aa:	d10f      	bne.n	80054cc <LogMelSpectrogramColumn+0x5a>
 80054ac:	4623      	mov	r3, r4
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
    if (pOutCol[i] <= 0.0f) {
      pOutCol[i] = FLT_MIN;
 80054ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  for (uint32_t i = 0; i < n_mels; i++) {
 80054b2:	42b3      	cmp	r3, r6
 80054b4:	d111      	bne.n	80054da <LogMelSpectrogramColumn+0x68>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 80054b6:	793b      	ldrb	r3, [r7, #4]
 80054b8:	b343      	cbz	r3, 800550c <LogMelSpectrogramColumn+0x9a>
    }
  }
  else
  {
    /* Convert power spectrogram to log scale */
    for (uint32_t i = 0; i < n_mels; i++) {
 80054ba:	42b5      	cmp	r5, r6
 80054bc:	d023      	beq.n	8005506 <LogMelSpectrogramColumn+0x94>
      pOutCol[i] = logf(pOutCol[i]);
 80054be:	ed95 0a00 	vldr	s0, [r5]
 80054c2:	f00a fefb 	bl	80102bc <logf>
 80054c6:	eca5 0a01 	vstmia	r5!, {s0}
    for (uint32_t i = 0; i < n_mels; i++) {
 80054ca:	e7f6      	b.n	80054ba <LogMelSpectrogramColumn+0x48>
    pOutCol[i] /= ref;
 80054cc:	ed93 7a00 	vldr	s14, [r3]
 80054d0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80054d4:	ece3 7a01 	vstmia	r3!, {s15}
  for (uint32_t i = 0; i < n_mels; i++) {
 80054d8:	e7e6      	b.n	80054a8 <LogMelSpectrogramColumn+0x36>
    if (pOutCol[i] <= 0.0f) {
 80054da:	edd3 7a00 	vldr	s15, [r3]
 80054de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      pOutCol[i] = FLT_MIN;
 80054e6:	bf98      	it	ls
 80054e8:	601a      	strls	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 80054ea:	3304      	adds	r3, #4
 80054ec:	e7e1      	b.n	80054b2 <LogMelSpectrogramColumn+0x40>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 80054ee:	ed94 0a00 	vldr	s0, [r4]
 80054f2:	f00a ff11 	bl	8010318 <log10f>
 80054f6:	ee20 0a28 	vmul.f32	s0, s0, s17
 80054fa:	eca4 0a01 	vstmia	r4!, {s0}
    for (uint32_t i = 0; i < n_mels; i++) {
 80054fe:	42b4      	cmp	r4, r6
 8005500:	d1f5      	bne.n	80054ee <LogMelSpectrogramColumn+0x7c>
    for (uint32_t i = 0; i < n_mels; i++) {
 8005502:	42b5      	cmp	r5, r6
 8005504:	d105      	bne.n	8005512 <LogMelSpectrogramColumn+0xa0>
    }
  }

}
 8005506:	ecbd 8b02 	vpop	{d8}
 800550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 800550c:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 8005510:	e7f5      	b.n	80054fe <LogMelSpectrogramColumn+0x8c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8005512:	ed95 7a00 	vldr	s14, [r5]
 8005516:	eef1 7a48 	vneg.f32	s15, s16
 800551a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800551e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005522:	bf58      	it	pl
 8005524:	eef0 7a47 	vmovpl.f32	s15, s14
 8005528:	ece5 7a01 	vstmia	r5!, {s15}
    for (uint32_t i = 0; i < n_mels; i++) {
 800552c:	e7e9      	b.n	8005502 <LogMelSpectrogramColumn+0x90>

0800552e <MfccColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output MFCC spectrogram column.
 * @return     None
 */
void MfccColumn(MfccTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800552e:	b570      	push	{r4, r5, r6, lr}
  float32_t *tmp_buffer = S->pScratch;
 8005530:	68c6      	ldr	r6, [r0, #12]
{
 8005532:	4604      	mov	r4, r0
 8005534:	4615      	mov	r5, r2

  LogMelSpectrogramColumn(S->LogMelConf, pInSignal, tmp_buffer);
 8005536:	6800      	ldr	r0, [r0, #0]
 8005538:	4632      	mov	r2, r6
 800553a:	f7ff ff9a 	bl	8005472 <LogMelSpectrogramColumn>

  /* DCT for computing MFCCs from spectrogram slice. */
  DCT(S->pDCT, tmp_buffer, pOutCol);
 800553e:	6860      	ldr	r0, [r4, #4]
 8005540:	462a      	mov	r2, r5
 8005542:	4631      	mov	r1, r6
}
 8005544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DCT(S->pDCT, tmp_buffer, pOutCol);
 8005548:	f7ff be7a 	b.w	8005240 <DCT>

0800554c <InverseMelScale>:
  }
}

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 800554c:	b508      	push	{r3, lr}
 800554e:	eeb0 7a40 	vmov.f32	s14, s0
  if (type != MEL_HTK) {
 8005552:	b1e0      	cbz	r0, 800558e <InverseMelScale+0x42>
    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region

    if (mel_freq >= min_log_mel)
 8005554:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80055a8 <InverseMelScale+0x5c>
 8005558:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800555c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005560:	da08      	bge.n	8005574 <InverseMelScale+0x28>
    float freq = f_min + f_sp * mel_freq;
 8005562:	eddf 6a12 	vldr	s13, [pc, #72]	; 80055ac <InverseMelScale+0x60>
 8005566:	eddf 7a12 	vldr	s15, [pc, #72]	; 80055b0 <InverseMelScale+0x64>
 800556a:	eee7 7a26 	vfma.f32	s15, s14, s13
 800556e:	eeb0 0a67 	vmov.f32	s0, s15
    return freq;
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
  }
}
 8005572:	bd08      	pop	{r3, pc}
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 8005574:	ee37 7a40 	vsub.f32	s14, s14, s0
 8005578:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80055b4 <InverseMelScale+0x68>
 800557c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005580:	f00a fe66 	bl	8010250 <expf>
 8005584:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80055b8 <InverseMelScale+0x6c>
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 8005588:	ee20 0a27 	vmul.f32	s0, s0, s15
 800558c:	e7f1      	b.n	8005572 <InverseMelScale+0x26>
 800558e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80055bc <InverseMelScale+0x70>
 8005592:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8005596:	f00a fe5b 	bl	8010250 <expf>
 800559a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800559e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80055a2:	eddf 7a07 	vldr	s15, [pc, #28]	; 80055c0 <InverseMelScale+0x74>
 80055a6:	e7ef      	b.n	8005588 <InverseMelScale+0x3c>
 80055a8:	41700001 	.word	0x41700001
 80055ac:	42855555 	.word	0x42855555
 80055b0:	00000000 	.word	0x00000000
 80055b4:	3d8ccdbb 	.word	0x3d8ccdbb
 80055b8:	447a0000 	.word	0x447a0000
 80055bc:	448ce000 	.word	0x448ce000
 80055c0:	442f0000 	.word	0x442f0000

080055c4 <MelScale>:
{
 80055c4:	b508      	push	{r3, lr}
 80055c6:	eef0 7a40 	vmov.f32	s15, s0
  if (type != MEL_HTK) {
 80055ca:	b1c0      	cbz	r0, 80055fe <MelScale+0x3a>
    if (freq >= min_log_hz)
 80055cc:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800561c <MelScale+0x58>
 80055d0:	eef4 7ac0 	vcmpe.f32	s15, s0
 80055d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d8:	da04      	bge.n	80055e4 <MelScale+0x20>
    float mels = (freq - f_min) / f_sp;
 80055da:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005620 <MelScale+0x5c>
 80055de:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 80055e2:	bd08      	pop	{r3, pc}
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 80055e4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80055e8:	f00a fe68 	bl	80102bc <logf>
 80055ec:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005624 <MelScale+0x60>
 80055f0:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80055f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005628 <MelScale+0x64>
 80055f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80055fc:	e7f1      	b.n	80055e2 <MelScale+0x1e>
    return 1127.0f * logf(1.0f + freq / 700.0f);
 80055fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800562c <MelScale+0x68>
 8005602:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8005606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800560a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800560e:	f00a fe55 	bl	80102bc <logf>
 8005612:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005630 <MelScale+0x6c>
 8005616:	ee20 0a27 	vmul.f32	s0, s0, s15
 800561a:	e7e2      	b.n	80055e2 <MelScale+0x1e>
 800561c:	447a0000 	.word	0x447a0000
 8005620:	42855555 	.word	0x42855555
 8005624:	3d8ccdbb 	.word	0x3d8ccdbb
 8005628:	41700001 	.word	0x41700001
 800562c:	442f0000 	.word	0x442f0000
 8005630:	448ce000 	.word	0x448ce000

08005634 <MelFilterbank_Init>:
{
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	ed2d 8b0a 	vpush	{d8-d12}
 800563c:	b085      	sub	sp, #20
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 800563e:	f890 7024 	ldrb.w	r7, [r0, #36]	; 0x24
  uint32_t normalize = MelFilterStruct->Normalize;
 8005642:	6a83      	ldr	r3, [r0, #40]	; 0x28
  uint32_t sr = MelFilterStruct->SampRate;
 8005644:	6985      	ldr	r5, [r0, #24]
  float32_t f_max =  MelFilterStruct->FMax;
 8005646:	edd0 8a08 	vldr	s17, [r0, #32]
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 800564a:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
  uint32_t normalize = MelFilterStruct->Normalize;
 800564e:	9300      	str	r3, [sp, #0]
{
 8005650:	4604      	mov	r4, r0
  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8005652:	6803      	ldr	r3, [r0, #0]
  mel_min = MelScale(f_min, formula);
 8005654:	ed94 0a07 	vldr	s0, [r4, #28]
  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8005658:	9301      	str	r3, [sp, #4]
  uint32_t n_fft = MelFilterStruct->FFTLen;
 800565a:	e9d0 8a04 	ldrd	r8, sl, [r0, #16]
  float32_t *weights = MelFilterStruct->pCoefficients;
 800565e:	e9d0 b601 	ldrd	fp, r6, [r0, #4]
  mel_min = MelScale(f_min, formula);
 8005662:	4638      	mov	r0, r7
 8005664:	f7ff ffae 	bl	80055c4 <MelScale>
  mel_max = MelScale(f_max, formula);
 8005668:	4638      	mov	r0, r7
  mel_min = MelScale(f_min, formula);
 800566a:	eeb0 8a40 	vmov.f32	s16, s0
  mel_max = MelScale(f_max, formula);
 800566e:	eeb0 0a68 	vmov.f32	s0, s17
 8005672:	f7ff ffa7 	bl	80055c4 <MelScale>
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8005676:	f108 0301 	add.w	r3, r8, #1
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005682:	eef8 7a67 	vcvt.f32.u32	s15, s15
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8005686:	ea4f 035a 	mov.w	r3, sl, lsr #1
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 800568a:	eec0 9a27 	vdiv.f32	s19, s0, s15
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 800568e:	ee0a 3a10 	vmov	s20, r3
 8005692:	ee07 5a90 	vmov	s15, r5
 8005696:	eeb8 7aca 	vcvt.f32.s32	s14, s20
 800569a:	eefb 7aef 	vcvt.f32.u32	s15, s15, #1
  *n_coefficients = 0;
 800569e:	2500      	movs	r5, #0
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 80056a0:	ee87 ba87 	vdiv.f32	s22, s15, s14
  *n_coefficients = 0;
 80056a4:	60e5      	str	r5, [r4, #12]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 80056a6:	eef0 ba00 	vmov.f32	s23, #0	; 0x40000000  2.0
  for (uint32_t i = 0; i < n_mels; i++)
 80056aa:	45a8      	cmp	r8, r5
 80056ac:	d104      	bne.n	80056b8 <MelFilterbank_Init+0x84>
}
 80056ae:	b005      	add	sp, #20
 80056b0:	ecbd 8b0a 	vpop	{d8-d12}
 80056b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (mel_2_f != 0) {
 80056b8:	1c6b      	adds	r3, r5, #1
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 80056ba:	ee07 5a90 	vmov	s15, r5
 80056be:	ee0a 3a90 	vmov	s21, r3
 80056c2:	1cab      	adds	r3, r5, #2
 80056c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c8:	ee0c 3a90 	vmov	s25, r3
 80056cc:	eef0 8a48 	vmov.f32	s17, s16
 80056d0:	eee9 8aa7 	vfma.f32	s17, s19, s15
 80056d4:	eeb8 ca6a 	vcvt.f32.u32	s24, s21
 80056d8:	eef8 ca6c 	vcvt.f32.u32	s25, s25
    if (mel_2_f != 0) {
 80056dc:	f1b9 0f00 	cmp.w	r9, #0
 80056e0:	d028      	beq.n	8005734 <MelFilterbank_Init+0x100>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 80056e2:	4638      	mov	r0, r7
 80056e4:	eeb0 0a68 	vmov.f32	s0, s17
 80056e8:	f7ff ff30 	bl	800554c <InverseMelScale>
 80056ec:	eef0 8a40 	vmov.f32	s17, s0
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 80056f0:	eeb0 0a48 	vmov.f32	s0, s16
 80056f4:	eeac 0a29 	vfma.f32	s0, s24, s19
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7ff ff27 	bl	800554c <InverseMelScale>
 80056fe:	eeb0 9a40 	vmov.f32	s18, s0
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8005702:	eeb0 0a48 	vmov.f32	s0, s16
 8005706:	eeac 0aa9 	vfma.f32	s0, s25, s19
 800570a:	4638      	mov	r0, r7
 800570c:	f7ff ff1e 	bl	800554c <InverseMelScale>
 8005710:	eeb0 ca40 	vmov.f32	s24, s0
    fdiff_lower = mel_f_center - mel_f_lower;
 8005714:	ee79 ca68 	vsub.f32	s25, s18, s17
    stop_index = -1;
 8005718:	f04f 33ff 	mov.w	r3, #4294967295
    fdiff_upper = mel_f_upper - mel_f_center;
 800571c:	ee3c 9a49 	vsub.f32	s18, s24, s18
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8005720:	f04f 0a00 	mov.w	sl, #0
    start_index = -1;
 8005724:	4619      	mov	r1, r3
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8005726:	ee1a 2a10 	vmov	r2, s20
 800572a:	4552      	cmp	r2, sl
 800572c:	d10b      	bne.n	8005746 <MelFilterbank_Init+0x112>
 800572e:	ee1a 5a90 	vmov	r5, s21
 8005732:	e7ba      	b.n	80056aa <MelFilterbank_Init+0x76>
      mel_f_center = mel_step * (i + 1) + mel_min;
 8005734:	eeb0 9a48 	vmov.f32	s18, s16
 8005738:	eeac 9a29 	vfma.f32	s18, s24, s19
      mel_f_upper = mel_step * (i + 2) + mel_min;
 800573c:	eeb0 ca48 	vmov.f32	s24, s16
 8005740:	eeac caa9 	vfma.f32	s24, s25, s19
 8005744:	e7e6      	b.n	8005714 <MelFilterbank_Init+0xe0>
        fftfreq = j * fftfreqs_step;
 8005746:	ee07 aa90 	vmov	s15, sl
 800574a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800574e:	ee27 0a8b 	vmul.f32	s0, s15, s22
      if (mel_2_f != 0) {
 8005752:	f1b9 0f00 	cmp.w	r9, #0
 8005756:	d106      	bne.n	8005766 <MelFilterbank_Init+0x132>
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8005758:	4638      	mov	r0, r7
 800575a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800575e:	f7ff ff31 	bl	80055c4 <MelScale>
 8005762:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
      ramp_lower = mel_f_lower - fftfreq;
 8005766:	ee78 6ac0 	vsub.f32	s13, s17, s0
      ramp_upper = mel_f_upper - fftfreq;
 800576a:	ee7c 7a40 	vsub.f32	s15, s24, s0
      lower = -ramp_lower / fdiff_lower;
 800576e:	eef1 6a66 	vneg.f32	s13, s13
 8005772:	ee86 7aac 	vdiv.f32	s14, s13, s25
      upper =  ramp_upper / fdiff_upper;
 8005776:	eec7 6a89 	vdiv.f32	s13, s15, s18
      else min = upper;
 800577a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800577e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005782:	bf58      	it	pl
 8005784:	eeb0 7a66 	vmovpl.f32	s14, s13
      if (min > 0)
 8005788:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	dd11      	ble.n	80057b6 <MelFilterbank_Init+0x182>
        if (normalize != 0)
 8005792:	9b00      	ldr	r3, [sp, #0]
 8005794:	b12b      	cbz	r3, 80057a2 <MelFilterbank_Init+0x16e>
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8005796:	ee7c 6a68 	vsub.f32	s13, s24, s17
 800579a:	eecb 7aa6 	vdiv.f32	s15, s23, s13
          weight *= enorm;
 800579e:	ee27 7a27 	vmul.f32	s14, s14, s15
        *n_coefficients = *n_coefficients + 1;
 80057a2:	68e3      	ldr	r3, [r4, #12]
        *weights++ = weight;
 80057a4:	eca6 7a01 	vstmia	r6!, {s14}
        *n_coefficients = *n_coefficients + 1;
 80057a8:	3301      	adds	r3, #1
 80057aa:	60e3      	str	r3, [r4, #12]
          start_index = j;
 80057ac:	f1b1 3fff 	cmp.w	r1, #4294967295
 80057b0:	bf08      	it	eq
 80057b2:	4651      	moveq	r1, sl
        stop_index = j;
 80057b4:	4653      	mov	r3, sl
      fft_bin_numbers_start[i] = start_index;
 80057b6:	9a01      	ldr	r2, [sp, #4]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 80057b8:	f10a 0a01 	add.w	sl, sl, #1
      fft_bin_numbers_start[i] = start_index;
 80057bc:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
      fft_bin_numbers_stop[i] = stop_index;
 80057c0:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 80057c4:	e7af      	b.n	8005726 <MelFilterbank_Init+0xf2>
	...

080057c8 <MelFilterbank>:
{
 80057c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ca:	6804      	ldr	r4, [r0, #0]
 80057cc:	6845      	ldr	r5, [r0, #4]
  float32_t *pCoefs = M->pCoefficients;
 80057ce:	6887      	ldr	r7, [r0, #8]
  for (uint32_t i = 0; i < n_mels; i++)
 80057d0:	6900      	ldr	r0, [r0, #16]
 80057d2:	3c04      	subs	r4, #4
 80057d4:	3d04      	subs	r5, #4
 80057d6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80057da:	4282      	cmp	r2, r0
 80057dc:	d100      	bne.n	80057e0 <MelFilterbank+0x18>
}
 80057de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stop_idx = pStop_idxs[i];
 80057e0:	f854 3f04 	ldr.w	r3, [r4, #4]!
 80057e4:	f855 6f04 	ldr.w	r6, [r5, #4]!
    sum = 0.0f;
 80057e8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005810 <MelFilterbank+0x48>
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80057f2:	b2b6      	uxth	r6, r6
 80057f4:	42b3      	cmp	r3, r6
 80057f6:	d902      	bls.n	80057fe <MelFilterbank+0x36>
    pMelCol[i] = sum;
 80057f8:	ece2 7a01 	vstmia	r2!, {s15}
  for (uint32_t i = 0; i < n_mels; i++)
 80057fc:	e7ed      	b.n	80057da <MelFilterbank+0x12>
      sum += pSpectrCol[j] * (*pCoefs++);
 80057fe:	ecfc 6a01 	vldmia	ip!, {s13}
 8005802:	ecb7 7a01 	vldmia	r7!, {s14}
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005806:	3301      	adds	r3, #1
      sum += pSpectrCol[j] * (*pCoefs++);
 8005808:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800580c:	e7f2      	b.n	80057f4 <MelFilterbank+0x2c>
 800580e:	bf00      	nop
	...

08005818 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	b088      	sub	sp, #32
 800581e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005822:	ed8d 1b04 	vstr	d1, [sp, #16]
 8005826:	ed8d 2b06 	vstr	d2, [sp, #24]
 800582a:	4682      	mov	sl, r0
 800582c:	460c      	mov	r4, r1

  for (uint32_t i = 0; i < len; i++)
 800582e:	2500      	movs	r5, #0
 8005830:	42a5      	cmp	r5, r4
 8005832:	d102      	bne.n	800583a <cosine_sum_window_create+0x22>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
  }
}
 8005834:	b008      	add	sp, #32
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800583a:	4628      	mov	r0, r5
 800583c:	f7fa fe72 	bl	8000524 <__aeabi_ui2d>
 8005840:	4680      	mov	r8, r0
 8005842:	4620      	mov	r0, r4
 8005844:	4689      	mov	r9, r1
 8005846:	f7fa fe6d 	bl	8000524 <__aeabi_ui2d>
 800584a:	a323      	add	r3, pc, #140	; (adr r3, 80058d8 <cosine_sum_window_create+0xc0>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	4606      	mov	r6, r0
 8005852:	460f      	mov	r7, r1
 8005854:	4640      	mov	r0, r8
 8005856:	4649      	mov	r1, r9
 8005858:	f7fa fede 	bl	8000618 <__aeabi_dmul>
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	f7fb f804 	bl	800086c <__aeabi_ddiv>
 8005864:	ec41 0b10 	vmov	d0, r0, r1
 8005868:	f00a fc46 	bl	80100f8 <cos>
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800586c:	a31c      	add	r3, pc, #112	; (adr r3, 80058e0 <cosine_sum_window_create+0xc8>)
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	4640      	mov	r0, r8
 8005874:	4649      	mov	r1, r9
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8005876:	ed8d 0b00 	vstr	d0, [sp]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800587a:	f7fa fecd 	bl	8000618 <__aeabi_dmul>
 800587e:	4632      	mov	r2, r6
 8005880:	463b      	mov	r3, r7
 8005882:	f7fa fff3 	bl	800086c <__aeabi_ddiv>
 8005886:	ec41 0b10 	vmov	d0, r0, r1
 800588a:	f00a fc35 	bl	80100f8 <cos>
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800588e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005892:	e9dd 0100 	ldrd	r0, r1, [sp]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8005896:	ec59 8b10 	vmov	r8, r9, d0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800589a:	f7fa febd 	bl	8000618 <__aeabi_dmul>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058a6:	f7fa fcff 	bl	80002a8 <__aeabi_dsub>
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80058aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80058ae:	4606      	mov	r6, r0
 80058b0:	460f      	mov	r7, r1
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80058b2:	4640      	mov	r0, r8
 80058b4:	4649      	mov	r1, r9
 80058b6:	f7fa feaf 	bl	8000618 <__aeabi_dmul>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4630      	mov	r0, r6
 80058c0:	4639      	mov	r1, r7
 80058c2:	f7fa fcf3 	bl	80002ac <__adddf3>
 80058c6:	f7fb f99f 	bl	8000c08 <__aeabi_d2f>
  for (uint32_t i = 0; i < len; i++)
 80058ca:	3501      	adds	r5, #1
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80058cc:	f84a 0b04 	str.w	r0, [sl], #4
  for (uint32_t i = 0; i < len; i++)
 80058d0:	e7ae      	b.n	8005830 <cosine_sum_window_create+0x18>
 80058d2:	bf00      	nop
 80058d4:	f3af 8000 	nop.w
 80058d8:	54442d18 	.word	0x54442d18
 80058dc:	401921fb 	.word	0x401921fb
 80058e0:	54442d18 	.word	0x54442d18
 80058e4:	402921fb 	.word	0x402921fb

080058e8 <Window_Init>:
  switch (type)
 80058e8:	2a01      	cmp	r2, #1
{
 80058ea:	b510      	push	{r4, lr}
  switch (type)
 80058ec:	d00e      	beq.n	800590c <Window_Init+0x24>
 80058ee:	2a02      	cmp	r2, #2
 80058f0:	d013      	beq.n	800591a <Window_Init+0x32>
 80058f2:	b9ca      	cbnz	r2, 8005928 <Window_Init+0x40>
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 80058f4:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8005930 <Window_Init+0x48>
 80058f8:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8005938 <Window_Init+0x50>
 80058fc:	eeb0 0a41 	vmov.f32	s0, s2
 8005900:	eef0 0a61 	vmov.f32	s1, s3
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8005904:	f7ff ff88 	bl	8005818 <cosine_sum_window_create>
  int32_t status = 0;
 8005908:	2000      	movs	r0, #0
}
 800590a:	bd10      	pop	{r4, pc}
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800590c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8005938 <Window_Init+0x50>
 8005910:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8005940 <Window_Init+0x58>
 8005914:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8005948 <Window_Init+0x60>
 8005918:	e7f4      	b.n	8005904 <Window_Init+0x1c>
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800591a:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8005950 <Window_Init+0x68>
 800591e:	ed9f 1b04 	vldr	d1, [pc, #16]	; 8005930 <Window_Init+0x48>
 8005922:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8005958 <Window_Init+0x70>
 8005926:	e7ed      	b.n	8005904 <Window_Init+0x1c>
  switch (type)
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 800592c:	e7ed      	b.n	800590a <Window_Init+0x22>
 800592e:	bf00      	nop
 8005930:	00000000 	.word	0x00000000
 8005934:	3fe00000 	.word	0x3fe00000
	...
 8005940:	d70a3d71 	.word	0xd70a3d71
 8005944:	3fdd70a3 	.word	0x3fdd70a3
 8005948:	147ae148 	.word	0x147ae148
 800594c:	3fe147ae 	.word	0x3fe147ae
 8005950:	47ae147b 	.word	0x47ae147b
 8005954:	3fb47ae1 	.word	0x3fb47ae1
 8005958:	ae147ae1 	.word	0xae147ae1
 800595c:	3fdae147 	.word	0x3fdae147

08005960 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8005960:	b510      	push	{r4, lr}

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <MX_PDM2PCM_Init+0x34>)
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8005964:	4c0c      	ldr	r4, [pc, #48]	; (8005998 <MX_PDM2PCM_Init+0x38>)
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8005966:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800596a:	e9c4 2300 	strd	r2, r3, [r4]
  PDM1_filter_handler.in_ptr_channels = 1;
  PDM1_filter_handler.out_ptr_channels = 1;
  PDM_Filter_Init(&PDM1_filter_handler);
 800596e:	4620      	mov	r0, r4
  PDM1_filter_handler.in_ptr_channels = 1;
 8005970:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005974:	60a3      	str	r3, [r4, #8]
  PDM_Filter_Init(&PDM1_filter_handler);
 8005976:	f001 fe4b 	bl	8007610 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800597a:	4908      	ldr	r1, [pc, #32]	; (800599c <MX_PDM2PCM_Init+0x3c>)
 800597c:	2302      	movs	r3, #2
 800597e:	800b      	strh	r3, [r1, #0]
  PDM1_filter_config.output_samples_number = 16;
 8005980:	2310      	movs	r3, #16
 8005982:	804b      	strh	r3, [r1, #2]
  PDM1_filter_config.mic_gain = 24;
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8005984:	4620      	mov	r0, r4
  PDM1_filter_config.mic_gain = 24;
 8005986:	2318      	movs	r3, #24

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PDM1_filter_config.mic_gain = 24;
 800598c:	808b      	strh	r3, [r1, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800598e:	f001 bec9 	b.w	8007724 <PDM_Filter_setConfig>
 8005992:	bf00      	nop
 8005994:	7d70a3d6 	.word	0x7d70a3d6
 8005998:	20013b20 	.word	0x20013b20
 800599c:	20013b18 	.word	0x20013b18

080059a0 <ai_speech_commands_model_create>:
}

AI_API_ENTRY
ai_error ai_speech_commands_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80059a0:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80059a2:	2304      	movs	r3, #4
 80059a4:	2200      	movs	r2, #0
 80059a6:	e9cd 3200 	strd	r3, r2, [sp]
 80059aa:	4a03      	ldr	r2, [pc, #12]	; (80059b8 <ai_speech_commands_model_create+0x18>)
 80059ac:	2301      	movs	r3, #1
 80059ae:	f002 f871 	bl	8007a94 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80059b2:	b003      	add	sp, #12
 80059b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80059b8:	20000cf0 	.word	0x20000cf0

080059bc <ai_speech_commands_model_init>:
}

AI_API_ENTRY
ai_bool ai_speech_commands_model_init(
  ai_handle network, const ai_network_params* params)
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059be:	b085      	sub	sp, #20
 80059c0:	4605      	mov	r5, r0
 80059c2:	9101      	str	r1, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80059c4:	f002 f93c 	bl	8007c40 <ai_platform_network_init>
  if (!net_ctx) return false;
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f000 80a1 	beq.w	8005b10 <ai_speech_commands_model_init+0x154>
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80059ce:	9a01      	ldr	r2, [sp, #4]
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80059d0:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80059d2:	2101      	movs	r1, #1
 80059d4:	a803      	add	r0, sp, #12
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80059d6:	9303      	str	r3, [sp, #12]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80059d8:	f001 fff4 	bl	80079c4 <ai_platform_get_weights_map>
 80059dc:	9a01      	ldr	r2, [sp, #4]
 80059de:	4604      	mov	r4, r0
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d05f      	beq.n	8005aa4 <ai_speech_commands_model_init+0xe8>
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80059e4:	494b      	ldr	r1, [pc, #300]	; (8005b14 <ai_speech_commands_model_init+0x158>)
 80059e6:	680b      	ldr	r3, [r1, #0]
 80059e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ec:	600b      	str	r3, [r1, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 80059ee:	9b03      	ldr	r3, [sp, #12]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80059f0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80059f4:	4948      	ldr	r1, [pc, #288]	; (8005b18 <ai_speech_commands_model_init+0x15c>)
 80059f6:	6808      	ldr	r0, [r1, #0]
 80059f8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80059fc:	6008      	str	r0, [r1, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 288);
 80059fe:	f503 7090 	add.w	r0, r3, #288	; 0x120
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 288);
 8005a02:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a06:	4945      	ldr	r1, [pc, #276]	; (8005b1c <ai_speech_commands_model_init+0x160>)
 8005a08:	6808      	ldr	r0, [r1, #0]
 8005a0a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a0e:	6008      	str	r0, [r1, #0]
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 320);
 8005a10:	f503 70a0 	add.w	r0, r3, #320	; 0x140
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 320);
 8005a14:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a18:	4941      	ldr	r1, [pc, #260]	; (8005b20 <ai_speech_commands_model_init+0x164>)
 8005a1a:	6808      	ldr	r0, [r1, #0]
 8005a1c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a20:	6008      	str	r0, [r1, #0]
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 2624);
 8005a22:	f503 6024 	add.w	r0, r3, #2624	; 0xa40
    conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 2624);
 8005a26:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a2a:	493e      	ldr	r1, [pc, #248]	; (8005b24 <ai_speech_commands_model_init+0x168>)
 8005a2c:	6808      	ldr	r0, [r1, #0]
 8005a2e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a32:	6008      	str	r0, [r1, #0]
    dense_4_weights_array.data = AI_PTR(weights_map[0] + 2656);
 8005a34:	f503 6026 	add.w	r0, r3, #2656	; 0xa60
    dense_4_weights_array.data_start = AI_PTR(weights_map[0] + 2656);
 8005a38:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a3c:	493a      	ldr	r1, [pc, #232]	; (8005b28 <ai_speech_commands_model_init+0x16c>)
 8005a3e:	6808      	ldr	r0, [r1, #0]
 8005a40:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a44:	6008      	str	r0, [r1, #0]
    dense_4_bias_array.data = AI_PTR(weights_map[0] + 150112);
 8005a46:	f503 3012 	add.w	r0, r3, #149504	; 0x24800
 8005a4a:	f500 7618 	add.w	r6, r0, #608	; 0x260
    dense_4_bias_array.data_start = AI_PTR(weights_map[0] + 150112);
 8005a4e:	e9c1 6602 	strd	r6, r6, [r1, #8]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a52:	4936      	ldr	r1, [pc, #216]	; (8005b2c <ai_speech_commands_model_init+0x170>)
 8005a54:	680e      	ldr	r6, [r1, #0]
    dense_5_weights_array.data = AI_PTR(weights_map[0] + 150368);
 8005a56:	f500 7058 	add.w	r0, r0, #864	; 0x360
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a5a:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
 8005a5e:	600e      	str	r6, [r1, #0]
    dense_5_weights_array.data_start = AI_PTR(weights_map[0] + 150368);
 8005a60:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a64:	4932      	ldr	r1, [pc, #200]	; (8005b30 <ai_speech_commands_model_init+0x174>)
 8005a66:	6808      	ldr	r0, [r1, #0]
 8005a68:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a6c:	6008      	str	r0, [r1, #0]
    dense_5_bias_array.data = AI_PTR(weights_map[0] + 166752);
 8005a6e:	f503 3022 	add.w	r0, r3, #165888	; 0x28800
 8005a72:	f500 7058 	add.w	r0, r0, #864	; 0x360
    dense_5_bias_array.data_start = AI_PTR(weights_map[0] + 166752);
 8005a76:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a7a:	492e      	ldr	r1, [pc, #184]	; (8005b34 <ai_speech_commands_model_init+0x178>)
 8005a7c:	6808      	ldr	r0, [r1, #0]
 8005a7e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a82:	6008      	str	r0, [r1, #0]
    dense_6_weights_array.data = AI_PTR(weights_map[0] + 167008);
 8005a84:	f503 3023 	add.w	r0, r3, #166912	; 0x28c00
 8005a88:	3060      	adds	r0, #96	; 0x60
    dense_6_weights_array.data_start = AI_PTR(weights_map[0] + 167008);
 8005a8a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a8e:	492a      	ldr	r1, [pc, #168]	; (8005b38 <ai_speech_commands_model_init+0x17c>)
    dense_6_bias_array.data = AI_PTR(weights_map[0] + 176736);
 8005a90:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a94:	6808      	ldr	r0, [r1, #0]
    dense_6_bias_array.data = AI_PTR(weights_map[0] + 176736);
 8005a96:	f503 7318 	add.w	r3, r3, #608	; 0x260
    dense_6_bias_array.data_start = AI_PTR(weights_map[0] + 176736);
 8005a9a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a9e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005aa2:	6008      	str	r0, [r1, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005aa4:	2600      	movs	r6, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	a803      	add	r0, sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005aaa:	9603      	str	r6, [sp, #12]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005aac:	f001 ffbe 	bl	8007a2c <ai_platform_get_activations_map>
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	b338      	cbz	r0, 8005b04 <ai_speech_commands_model_init+0x148>
    serving_default_conv2d_10_input0_output_array.data = AI_PTR(NULL);
 8005ab4:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <ai_speech_commands_model_init+0x180>)
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 416);
 8005ab6:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <ai_speech_commands_model_init+0x184>)
    serving_default_conv2d_10_input0_output_array.data_start = AI_PTR(NULL);
 8005ab8:	e9c3 6602 	strd	r6, r6, [r3, #8]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 416);
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 416);
 8005ac2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 8005ac6:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <ai_speech_commands_model_init+0x188>)
    conv2d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8005ac8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 2304);
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <ai_speech_commands_model_init+0x18c>)
 8005ace:	f503 6110 	add.w	r1, r3, #2304	; 0x900
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 2304);
 8005ad2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_4_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8005ad6:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <ai_speech_commands_model_init+0x190>)
    dense_5_output_array.data = AI_PTR(activations_map[0] + 256);
 8005ad8:	491d      	ldr	r1, [pc, #116]	; (8005b50 <ai_speech_commands_model_init+0x194>)
    nl_4_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8005ada:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_5_output_array.data = AI_PTR(activations_map[0] + 256);
 8005ade:	f503 7280 	add.w	r2, r3, #256	; 0x100
    dense_5_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8005ae2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_5_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8005ae6:	491b      	ldr	r1, [pc, #108]	; (8005b54 <ai_speech_commands_model_init+0x198>)
    nl_5_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8005ae8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_6_output_array.data = AI_PTR(activations_map[0] + 256);
 8005aec:	491a      	ldr	r1, [pc, #104]	; (8005b58 <ai_speech_commands_model_init+0x19c>)
    dense_6_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8005aee:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_7_output_array.data = AI_PTR(NULL);
 8005af2:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <ai_speech_commands_model_init+0x1a0>)
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 12064);
 8005af4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
    nl_7_output_array.data_start = AI_PTR(NULL);
 8005af8:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 12064);
 8005afc:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <ai_speech_commands_model_init+0x1a4>)
 8005afe:	3320      	adds	r3, #32
    conv2d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 12064);
 8005b00:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= speech_commands_model_configure_weights(net_ctx, params);
  ok &= speech_commands_model_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8005b04:	4628      	mov	r0, r5
 8005b06:	f002 f9ad 	bl	8007e64 <ai_platform_network_post_init>
 8005b0a:	4038      	ands	r0, r7
 8005b0c:	4020      	ands	r0, r4
 8005b0e:	b2c0      	uxtb	r0, r0

  return ok;
}
 8005b10:	b005      	add	sp, #20
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b14:	200009d8 	.word	0x200009d8
 8005b18:	20000940 	.word	0x20000940
 8005b1c:	20000b00 	.word	0x20000b00
 8005b20:	20000a04 	.word	0x20000a04
 8005b24:	20000ba0 	.word	0x20000ba0
 8005b28:	20000b2c 	.word	0x20000b2c
 8005b2c:	20000c40 	.word	0x20000c40
 8005b30:	20000bcc 	.word	0x20000bcc
 8005b34:	20000ce0 	.word	0x20000ce0
 8005b38:	20000c6c 	.word	0x20000c6c
 8005b3c:	20000e38 	.word	0x20000e38
 8005b40:	200009ac 	.word	0x200009ac
 8005b44:	20000aa8 	.word	0x20000aa8
 8005b48:	20000b74 	.word	0x20000b74
 8005b4c:	20000d74 	.word	0x20000d74
 8005b50:	20000c14 	.word	0x20000c14
 8005b54:	20000dc0 	.word	0x20000dc0
 8005b58:	20000cb4 	.word	0x20000cb4
 8005b5c:	20000e0c 	.word	0x20000e0c
 8005b60:	20000ad4 	.word	0x20000ad4

08005b64 <ai_speech_commands_model_run>:

AI_API_ENTRY
ai_i32 ai_speech_commands_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005b64:	f002 ba12 	b.w	8007f8c <ai_platform_network_process>

08005b68 <ai_speech_commands_model_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_speech_commands_model_weights_map);

}
 8005b68:	4800      	ldr	r0, [pc, #0]	; (8005b6c <ai_speech_commands_model_data_weights_get+0x4>)
 8005b6a:	4770      	bx	lr
 8005b6c:	0805ad38 	.word	0x0805ad38

08005b70 <D16_GENERIC>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	b089      	sub	sp, #36	; 0x24
 8005b76:	68d4      	ldr	r4, [r2, #12]
 8005b78:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005b7a:	6993      	ldr	r3, [r2, #24]
 8005b7c:	9407      	str	r4, [sp, #28]
 8005b7e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005b80:	9306      	str	r3, [sp, #24]
 8005b82:	9402      	str	r4, [sp, #8]
 8005b84:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005b88:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8005b8c:	69d3      	ldr	r3, [r2, #28]
 8005b8e:	6896      	ldr	r6, [r2, #8]
 8005b90:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005b92:	9103      	str	r1, [sp, #12]
 8005b94:	2d00      	cmp	r5, #0
 8005b96:	d066      	beq.n	8005c66 <D16_GENERIC+0xf6>
 8005b98:	f004 0510 	and.w	r5, r4, #16
 8005b9c:	f004 0420 	and.w	r4, r4, #32
 8005ba0:	9504      	str	r5, [sp, #16]
 8005ba2:	4938      	ldr	r1, [pc, #224]	; (8005c84 <D16_GENERIC+0x114>)
 8005ba4:	9405      	str	r4, [sp, #20]
 8005ba6:	f04f 0e00 	mov.w	lr, #0
 8005baa:	4635      	mov	r5, r6
 8005bac:	e04f      	b.n	8005c4e <D16_GENERIC+0xde>
 8005bae:	5d87      	ldrb	r7, [r0, r6]
 8005bb0:	7804      	ldrb	r4, [r0, #0]
 8005bb2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8005bb6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8005bba:	b2e6      	uxtb	r6, r4
 8005bbc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005bc0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005bc4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8005bc8:	4433      	add	r3, r6
 8005bca:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8005bce:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8005bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8005bda:	0aa3      	lsrs	r3, r4, #10
 8005bdc:	4c2a      	ldr	r4, [pc, #168]	; (8005c88 <D16_GENERIC+0x118>)
 8005bde:	fb26 5404 	smlad	r4, r6, r4, r5
 8005be2:	4d2a      	ldr	r5, [pc, #168]	; (8005c8c <D16_GENERIC+0x11c>)
 8005be4:	fb26 f505 	smuad	r5, r6, r5
 8005be8:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8005bec:	eb04 080a 	add.w	r8, r4, sl
 8005bf0:	eba8 080b 	sub.w	r8, r8, fp
 8005bf4:	4646      	mov	r6, r8
 8005bf6:	17f7      	asrs	r7, r6, #31
 8005bf8:	e9cd 6700 	strd	r6, r7, [sp]
 8005bfc:	9e04      	ldr	r6, [sp, #16]
 8005bfe:	f10e 0c01 	add.w	ip, lr, #1
 8005c02:	b16e      	cbz	r6, 8005c20 <D16_GENERIC+0xb0>
 8005c04:	6a16      	ldr	r6, [r2, #32]
 8005c06:	9f01      	ldr	r7, [sp, #4]
 8005c08:	fba8 8906 	umull	r8, r9, r8, r6
 8005c0c:	fb06 9907 	mla	r9, r6, r7, r9
 8005c10:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005c14:	f149 0900 	adc.w	r9, r9, #0
 8005c18:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005c1c:	46a3      	mov	fp, r4
 8005c1e:	4654      	mov	r4, sl
 8005c20:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8005c22:	9f02      	ldr	r7, [sp, #8]
 8005c24:	0424      	lsls	r4, r4, #16
 8005c26:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005c2a:	f04f 0900 	mov.w	r9, #0
 8005c2e:	fb0e fe06 	mul.w	lr, lr, r6
 8005c32:	fbc7 8904 	smlal	r8, r9, r7, r4
 8005c36:	9e03      	ldr	r6, [sp, #12]
 8005c38:	464f      	mov	r7, r9
 8005c3a:	10bc      	asrs	r4, r7, #2
 8005c3c:	f304 040f 	ssat	r4, #16, r4
 8005c40:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8005c44:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005c46:	fa1f fe8c 	uxth.w	lr, ip
 8005c4a:	4574      	cmp	r4, lr
 8005c4c:	d90a      	bls.n	8005c64 <D16_GENERIC+0xf4>
 8005c4e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8005c50:	2c01      	cmp	r4, #1
 8005c52:	b2e6      	uxtb	r6, r4
 8005c54:	d1ab      	bne.n	8005bae <D16_GENERIC+0x3e>
 8005c56:	9e05      	ldr	r6, [sp, #20]
 8005c58:	f850 4b02 	ldr.w	r4, [r0], #2
 8005c5c:	2e00      	cmp	r6, #0
 8005c5e:	d0ac      	beq.n	8005bba <D16_GENERIC+0x4a>
 8005c60:	ba64      	rev16	r4, r4
 8005c62:	e7aa      	b.n	8005bba <D16_GENERIC+0x4a>
 8005c64:	462e      	mov	r6, r5
 8005c66:	9907      	ldr	r1, [sp, #28]
 8005c68:	61d3      	str	r3, [r2, #28]
 8005c6a:	9b06      	ldr	r3, [sp, #24]
 8005c6c:	6096      	str	r6, [r2, #8]
 8005c6e:	2000      	movs	r0, #0
 8005c70:	60d1      	str	r1, [r2, #12]
 8005c72:	f8c2 a010 	str.w	sl, [r2, #16]
 8005c76:	f8c2 b014 	str.w	fp, [r2, #20]
 8005c7a:	6193      	str	r3, [r2, #24]
 8005c7c:	b009      	add	sp, #36	; 0x24
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	bf00      	nop
 8005c84:	20000000 	.word	0x20000000
 8005c88:	00030001 	.word	0x00030001
 8005c8c:	00010003 	.word	0x00010003

08005c90 <D24_GENERIC>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8005c96:	6993      	ldr	r3, [r2, #24]
 8005c98:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8005c9a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005c9e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8005ca2:	6894      	ldr	r4, [r2, #8]
 8005ca4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005ca8:	b089      	sub	sp, #36	; 0x24
 8005caa:	9307      	str	r3, [sp, #28]
 8005cac:	9503      	str	r5, [sp, #12]
 8005cae:	69d3      	ldr	r3, [r2, #28]
 8005cb0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8005cb2:	9104      	str	r1, [sp, #16]
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	f000 8096 	beq.w	8005de6 <D24_GENERIC+0x156>
 8005cba:	f005 0610 	and.w	r6, r5, #16
 8005cbe:	f005 0520 	and.w	r5, r5, #32
 8005cc2:	4954      	ldr	r1, [pc, #336]	; (8005e14 <D24_GENERIC+0x184>)
 8005cc4:	9605      	str	r6, [sp, #20]
 8005cc6:	9506      	str	r5, [sp, #24]
 8005cc8:	f04f 0e00 	mov.w	lr, #0
 8005ccc:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cd0:	e06a      	b.n	8005da8 <D24_GENERIC+0x118>
 8005cd2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8005cd6:	f810 8007 	ldrb.w	r8, [r0, r7]
 8005cda:	f890 c000 	ldrb.w	ip, [r0]
 8005cde:	042d      	lsls	r5, r5, #16
 8005ce0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8005ce4:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8005ce8:	44ac      	add	ip, r5
 8005cea:	4438      	add	r0, r7
 8005cec:	fa5f f68c 	uxtb.w	r6, ip
 8005cf0:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8005cf4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005cf8:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8005cfc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d00:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8005d04:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005d08:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8005d0c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8005d10:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005d14:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8005d18:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005d1c:	4d3e      	ldr	r5, [pc, #248]	; (8005e18 <D24_GENERIC+0x188>)
 8005d1e:	fb26 b705 	smlad	r7, r6, r5, fp
 8005d22:	4d3e      	ldr	r5, [pc, #248]	; (8005e1c <D24_GENERIC+0x18c>)
 8005d24:	fb26 4b05 	smlad	fp, r6, r5, r4
 8005d28:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8005d2c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8005d30:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8005d34:	2401      	movs	r4, #1
 8005d36:	fb26 f604 	smuad	r6, r6, r4
 8005d3a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8005d3e:	9f02      	ldr	r7, [sp, #8]
 8005d40:	eb0e 0c04 	add.w	ip, lr, r4
 8005d44:	eb08 0406 	add.w	r4, r8, r6
 8005d48:	eb05 060a 	add.w	r6, r5, sl
 8005d4c:	1bf6      	subs	r6, r6, r7
 8005d4e:	4637      	mov	r7, r6
 8005d50:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8005d54:	e9cd 7800 	strd	r7, r8, [sp]
 8005d58:	9f05      	ldr	r7, [sp, #20]
 8005d5a:	b177      	cbz	r7, 8005d7a <D24_GENERIC+0xea>
 8005d5c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8005d60:	9502      	str	r5, [sp, #8]
 8005d62:	fba6 9a08 	umull	r9, sl, r6, r8
 8005d66:	9e01      	ldr	r6, [sp, #4]
 8005d68:	fb08 aa06 	mla	sl, r8, r6, sl
 8005d6c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8005d70:	f14a 0700 	adc.w	r7, sl, #0
 8005d74:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8005d78:	4655      	mov	r5, sl
 8005d7a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8005d7c:	9f03      	ldr	r7, [sp, #12]
 8005d7e:	03ad      	lsls	r5, r5, #14
 8005d80:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005d84:	f04f 0900 	mov.w	r9, #0
 8005d88:	fb0e fe06 	mul.w	lr, lr, r6
 8005d8c:	fbc7 8905 	smlal	r8, r9, r7, r5
 8005d90:	9e04      	ldr	r6, [sp, #16]
 8005d92:	464f      	mov	r7, r9
 8005d94:	10bd      	asrs	r5, r7, #2
 8005d96:	f305 050f 	ssat	r5, #16, r5
 8005d9a:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8005d9e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005da0:	fa1f fe8c 	uxth.w	lr, ip
 8005da4:	4575      	cmp	r5, lr
 8005da6:	d91c      	bls.n	8005de2 <D24_GENERIC+0x152>
 8005da8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8005daa:	b2ef      	uxtb	r7, r5
 8005dac:	2d01      	cmp	r5, #1
 8005dae:	b23e      	sxth	r6, r7
 8005db0:	d18f      	bne.n	8005cd2 <D24_GENERIC+0x42>
 8005db2:	9d06      	ldr	r5, [sp, #24]
 8005db4:	b15d      	cbz	r5, 8005dce <D24_GENERIC+0x13e>
 8005db6:	f01e 0f01 	tst.w	lr, #1
 8005dba:	d122      	bne.n	8005e02 <D24_GENERIC+0x172>
 8005dbc:	7805      	ldrb	r5, [r0, #0]
 8005dbe:	78c7      	ldrb	r7, [r0, #3]
 8005dc0:	7846      	ldrb	r6, [r0, #1]
 8005dc2:	022d      	lsls	r5, r5, #8
 8005dc4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005dc8:	44b4      	add	ip, r6
 8005dca:	3002      	adds	r0, #2
 8005dcc:	e78e      	b.n	8005cec <D24_GENERIC+0x5c>
 8005dce:	7846      	ldrb	r6, [r0, #1]
 8005dd0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8005dd4:	f810 5b03 	ldrb.w	r5, [r0], #3
 8005dd8:	0236      	lsls	r6, r6, #8
 8005dda:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8005dde:	44ac      	add	ip, r5
 8005de0:	e784      	b.n	8005cec <D24_GENERIC+0x5c>
 8005de2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005de6:	61d3      	str	r3, [r2, #28]
 8005de8:	9b07      	ldr	r3, [sp, #28]
 8005dea:	6094      	str	r4, [r2, #8]
 8005dec:	2000      	movs	r0, #0
 8005dee:	f8c2 b00c 	str.w	fp, [r2, #12]
 8005df2:	f8c2 a010 	str.w	sl, [r2, #16]
 8005df6:	f8c2 9014 	str.w	r9, [r2, #20]
 8005dfa:	6193      	str	r3, [r2, #24]
 8005dfc:	b009      	add	sp, #36	; 0x24
 8005dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e02:	78c5      	ldrb	r5, [r0, #3]
 8005e04:	7887      	ldrb	r7, [r0, #2]
 8005e06:	f810 6b04 	ldrb.w	r6, [r0], #4
 8005e0a:	022d      	lsls	r5, r5, #8
 8005e0c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8005e10:	44b4      	add	ip, r6
 8005e12:	e76b      	b.n	8005cec <D24_GENERIC+0x5c>
 8005e14:	20000000 	.word	0x20000000
 8005e18:	00030001 	.word	0x00030001
 8005e1c:	00060007 	.word	0x00060007

08005e20 <D32_GENERIC>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005e26:	6993      	ldr	r3, [r2, #24]
 8005e28:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005e2a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005e2e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8005e32:	69d6      	ldr	r6, [r2, #28]
 8005e34:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005e38:	b089      	sub	sp, #36	; 0x24
 8005e3a:	9307      	str	r3, [sp, #28]
 8005e3c:	9403      	str	r4, [sp, #12]
 8005e3e:	6893      	ldr	r3, [r2, #8]
 8005e40:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005e42:	9104      	str	r1, [sp, #16]
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	f000 809f 	beq.w	8005f88 <D32_GENERIC+0x168>
 8005e4a:	f004 0510 	and.w	r5, r4, #16
 8005e4e:	f004 0420 	and.w	r4, r4, #32
 8005e52:	9505      	str	r5, [sp, #20]
 8005e54:	4953      	ldr	r1, [pc, #332]	; (8005fa4 <D32_GENERIC+0x184>)
 8005e56:	9406      	str	r4, [sp, #24]
 8005e58:	f04f 0c00 	mov.w	ip, #0
 8005e5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e60:	461d      	mov	r5, r3
 8005e62:	4617      	mov	r7, r2
 8005e64:	e077      	b.n	8005f56 <D32_GENERIC+0x136>
 8005e66:	f818 3003 	ldrb.w	r3, [r8, r3]
 8005e6a:	f810 800e 	ldrb.w	r8, [r0, lr]
 8005e6e:	f810 e002 	ldrb.w	lr, [r0, r2]
 8005e72:	7800      	ldrb	r0, [r0, #0]
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005e7a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8005e7e:	4403      	add	r3, r0
 8005e80:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8005e84:	b2dc      	uxtb	r4, r3
 8005e86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e8a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8005e8e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8005e92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e96:	0e1b      	lsrs	r3, r3, #24
 8005e98:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8005e9c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8005ea0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ea4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005ea8:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8005eac:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8005eb0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8005eb4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005eb8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005ebc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005ec0:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8005ec4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ec8:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <D32_GENERIC+0x188>)
 8005eca:	fb22 b403 	smlad	r4, r2, r3, fp
 8005ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ed2:	fb2e 4803 	smlad	r8, lr, r3, r4
 8005ed6:	4b35      	ldr	r3, [pc, #212]	; (8005fac <D32_GENERIC+0x18c>)
 8005ed8:	fb22 5503 	smlad	r5, r2, r3, r5
 8005edc:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <D32_GENERIC+0x190>)
 8005ede:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	fb22 f203 	smuad	r2, r2, r3
 8005ee8:	4b32      	ldr	r3, [pc, #200]	; (8005fb4 <D32_GENERIC+0x194>)
 8005eea:	fb2e 2503 	smlad	r5, lr, r3, r2
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8005ef4:	eb04 080a 	add.w	r8, r4, sl
 8005ef8:	eba8 0803 	sub.w	r8, r8, r3
 8005efc:	4642      	mov	r2, r8
 8005efe:	17d3      	asrs	r3, r2, #31
 8005f00:	e9cd 2300 	strd	r2, r3, [sp]
 8005f04:	9b05      	ldr	r3, [sp, #20]
 8005f06:	f10c 0e01 	add.w	lr, ip, #1
 8005f0a:	b16b      	cbz	r3, 8005f28 <D32_GENERIC+0x108>
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	9402      	str	r4, [sp, #8]
 8005f12:	fba8 8902 	umull	r8, r9, r8, r2
 8005f16:	fb02 9903 	mla	r9, r2, r3, r9
 8005f1a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005f1e:	f149 0900 	adc.w	r9, r9, #0
 8005f22:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005f26:	4654      	mov	r4, sl
 8005f28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f2a:	9a04      	ldr	r2, [sp, #16]
 8005f2c:	fb0c fc03 	mul.w	ip, ip, r3
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	0364      	lsls	r4, r4, #13
 8005f34:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005f38:	f04f 0900 	mov.w	r9, #0
 8005f3c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005f40:	464b      	mov	r3, r9
 8005f42:	109b      	asrs	r3, r3, #2
 8005f44:	f303 030f 	ssat	r3, #16, r3
 8005f48:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8005f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f4e:	fa1f fc8e 	uxth.w	ip, lr
 8005f52:	4563      	cmp	r3, ip
 8005f54:	d914      	bls.n	8005f80 <D32_GENERIC+0x160>
 8005f56:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005f58:	b2e2      	uxtb	r2, r4
 8005f5a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8005f5e:	eb00 080e 	add.w	r8, r0, lr
 8005f62:	4253      	negs	r3, r2
 8005f64:	2c01      	cmp	r4, #1
 8005f66:	eb08 0403 	add.w	r4, r8, r3
 8005f6a:	f47f af7c 	bne.w	8005e66 <D32_GENERIC+0x46>
 8005f6e:	1d02      	adds	r2, r0, #4
 8005f70:	6803      	ldr	r3, [r0, #0]
 8005f72:	9806      	ldr	r0, [sp, #24]
 8005f74:	b110      	cbz	r0, 8005f7c <D32_GENERIC+0x15c>
 8005f76:	ba5b      	rev16	r3, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	e783      	b.n	8005e84 <D32_GENERIC+0x64>
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	e781      	b.n	8005e84 <D32_GENERIC+0x64>
 8005f80:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005f84:	462b      	mov	r3, r5
 8005f86:	463a      	mov	r2, r7
 8005f88:	6093      	str	r3, [r2, #8]
 8005f8a:	9b07      	ldr	r3, [sp, #28]
 8005f8c:	f8c2 b00c 	str.w	fp, [r2, #12]
 8005f90:	2000      	movs	r0, #0
 8005f92:	61d6      	str	r6, [r2, #28]
 8005f94:	f8c2 a010 	str.w	sl, [r2, #16]
 8005f98:	f8c2 9014 	str.w	r9, [r2, #20]
 8005f9c:	6193      	str	r3, [r2, #24]
 8005f9e:	b009      	add	sp, #36	; 0x24
 8005fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa4:	20000000 	.word	0x20000000
 8005fa8:	00060003 	.word	0x00060003
 8005fac:	000a000c 	.word	0x000a000c
 8005fb0:	000c000a 	.word	0x000c000a
 8005fb4:	00030006 	.word	0x00030006

08005fb8 <D48_GENERIC>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	b089      	sub	sp, #36	; 0x24
 8005fbe:	6953      	ldr	r3, [r2, #20]
 8005fc0:	68d4      	ldr	r4, [r2, #12]
 8005fc2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005fc4:	9302      	str	r3, [sp, #8]
 8005fc6:	9400      	str	r4, [sp, #0]
 8005fc8:	6993      	ldr	r3, [r2, #24]
 8005fca:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005fcc:	9307      	str	r3, [sp, #28]
 8005fce:	9403      	str	r4, [sp, #12]
 8005fd0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005fd4:	69d6      	ldr	r6, [r2, #28]
 8005fd6:	6893      	ldr	r3, [r2, #8]
 8005fd8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005fda:	9104      	str	r1, [sp, #16]
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	f000 80c5 	beq.w	800616c <D48_GENERIC+0x1b4>
 8005fe2:	f004 0510 	and.w	r5, r4, #16
 8005fe6:	f004 0420 	and.w	r4, r4, #32
 8005fea:	4967      	ldr	r1, [pc, #412]	; (8006188 <D48_GENERIC+0x1d0>)
 8005fec:	9505      	str	r5, [sp, #20]
 8005fee:	9406      	str	r4, [sp, #24]
 8005ff0:	f04f 0c00 	mov.w	ip, #0
 8005ff4:	4657      	mov	r7, sl
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	e09c      	b.n	8006134 <D48_GENERIC+0x17c>
 8005ffa:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8005ffe:	f810 b009 	ldrb.w	fp, [r0, r9]
 8006002:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8006006:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800600a:	7800      	ldrb	r0, [r0, #0]
 800600c:	0424      	lsls	r4, r4, #16
 800600e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8006012:	f818 4005 	ldrb.w	r4, [r8, r5]
 8006016:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800601a:	44a8      	add	r8, r5
 800601c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8006020:	eb0b 0500 	add.w	r5, fp, r0
 8006024:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8006028:	fa5f f885 	uxtb.w	r8, r5
 800602c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8006030:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8006034:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8006038:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800603c:	0e2d      	lsrs	r5, r5, #24
 800603e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8006042:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8006046:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800604a:	b2e6      	uxtb	r6, r4
 800604c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8006050:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006054:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8006058:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800605c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8006060:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8006064:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8006068:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800606c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006070:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006074:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8006078:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800607c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006080:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006084:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8006088:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800608c:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8006090:	4c3e      	ldr	r4, [pc, #248]	; (800618c <D48_GENERIC+0x1d4>)
 8006092:	9d00      	ldr	r5, [sp, #0]
 8006094:	fb2a 5404 	smlad	r4, sl, r4, r5
 8006098:	4d3d      	ldr	r5, [pc, #244]	; (8006190 <D48_GENERIC+0x1d8>)
 800609a:	fb28 4405 	smlad	r4, r8, r5, r4
 800609e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060a2:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80060a6:	4c3b      	ldr	r4, [pc, #236]	; (8006194 <D48_GENERIC+0x1dc>)
 80060a8:	9b01      	ldr	r3, [sp, #4]
 80060aa:	fb2a 3304 	smlad	r3, sl, r4, r3
 80060ae:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80060b2:	fb28 3304 	smlad	r3, r8, r4, r3
 80060b6:	4c38      	ldr	r4, [pc, #224]	; (8006198 <D48_GENERIC+0x1e0>)
 80060b8:	fb2e 3304 	smlad	r3, lr, r4, r3
 80060bc:	2501      	movs	r5, #1
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	fb2a fa05 	smuad	sl, sl, r5
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <D48_GENERIC+0x1e4>)
 80060c6:	fb28 a803 	smlad	r8, r8, r3, sl
 80060ca:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <D48_GENERIC+0x1e8>)
 80060cc:	fb2e 8303 	smlad	r3, lr, r3, r8
 80060d0:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	eb04 0807 	add.w	r8, r4, r7
 80060dc:	eba8 0803 	sub.w	r8, r8, r3
 80060e0:	9b05      	ldr	r3, [sp, #20]
 80060e2:	4465      	add	r5, ip
 80060e4:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80060e8:	b163      	cbz	r3, 8006104 <D48_GENERIC+0x14c>
 80060ea:	6a17      	ldr	r7, [r2, #32]
 80060ec:	9402      	str	r4, [sp, #8]
 80060ee:	fba8 8907 	umull	r8, r9, r8, r7
 80060f2:	fb07 990b 	mla	r9, r7, fp, r9
 80060f6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80060fa:	f149 0900 	adc.w	r9, r9, #0
 80060fe:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8006102:	463c      	mov	r4, r7
 8006104:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8006108:	9b03      	ldr	r3, [sp, #12]
 800610a:	02e4      	lsls	r4, r4, #11
 800610c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006110:	f04f 0900 	mov.w	r9, #0
 8006114:	fb0c fc0e 	mul.w	ip, ip, lr
 8006118:	fbc3 8904 	smlal	r8, r9, r3, r4
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8006122:	f304 040f 	ssat	r4, #16, r4
 8006126:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800612a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800612c:	fa1f fc85 	uxth.w	ip, r5
 8006130:	4564      	cmp	r4, ip
 8006132:	d919      	bls.n	8006168 <D48_GENERIC+0x1b0>
 8006134:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8006136:	fa5f fe84 	uxtb.w	lr, r4
 800613a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800613e:	f1ce 0500 	rsb	r5, lr, #0
 8006142:	eb00 0b09 	add.w	fp, r0, r9
 8006146:	eb0b 0a05 	add.w	sl, fp, r5
 800614a:	2c01      	cmp	r4, #1
 800614c:	eb0a 0809 	add.w	r8, sl, r9
 8006150:	f47f af53 	bne.w	8005ffa <D48_GENERIC+0x42>
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	6805      	ldr	r5, [r0, #0]
 8006158:	6844      	ldr	r4, [r0, #4]
 800615a:	3006      	adds	r0, #6
 800615c:	2b00      	cmp	r3, #0
 800615e:	f43f af63 	beq.w	8006028 <D48_GENERIC+0x70>
 8006162:	ba6d      	rev16	r5, r5
 8006164:	ba64      	rev16	r4, r4
 8006166:	e75f      	b.n	8006028 <D48_GENERIC+0x70>
 8006168:	9b01      	ldr	r3, [sp, #4]
 800616a:	46ba      	mov	sl, r7
 800616c:	6093      	str	r3, [r2, #8]
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	60d3      	str	r3, [r2, #12]
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	6153      	str	r3, [r2, #20]
 8006176:	9b07      	ldr	r3, [sp, #28]
 8006178:	61d6      	str	r6, [r2, #28]
 800617a:	2000      	movs	r0, #0
 800617c:	f8c2 a010 	str.w	sl, [r2, #16]
 8006180:	6193      	str	r3, [r2, #24]
 8006182:	b009      	add	sp, #36	; 0x24
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	20000000 	.word	0x20000000
 800618c:	000f000a 	.word	0x000f000a
 8006190:	00060003 	.word	0x00060003
 8006194:	00150019 	.word	0x00150019
 8006198:	00190015 	.word	0x00190015
 800619c:	00030006 	.word	0x00030006
 80061a0:	000a000f 	.word	0x000a000f

080061a4 <D64_GENERIC>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	b089      	sub	sp, #36	; 0x24
 80061aa:	6913      	ldr	r3, [r2, #16]
 80061ac:	6895      	ldr	r5, [r2, #8]
 80061ae:	9303      	str	r3, [sp, #12]
 80061b0:	9501      	str	r5, [sp, #4]
 80061b2:	6953      	ldr	r3, [r2, #20]
 80061b4:	68d5      	ldr	r5, [r2, #12]
 80061b6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	9500      	str	r5, [sp, #0]
 80061bc:	6993      	ldr	r3, [r2, #24]
 80061be:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80061c0:	9307      	str	r3, [sp, #28]
 80061c2:	9505      	str	r5, [sp, #20]
 80061c4:	69d3      	ldr	r3, [r2, #28]
 80061c6:	9106      	str	r1, [sp, #24]
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	f000 80d9 	beq.w	8006380 <D64_GENERIC+0x1dc>
 80061ce:	6a11      	ldr	r1, [r2, #32]
 80061d0:	9102      	str	r1, [sp, #8]
 80061d2:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80063c0 <D64_GENERIC+0x21c>
 80061d6:	f04f 0c00 	mov.w	ip, #0
 80061da:	4681      	mov	r9, r0
 80061dc:	e0c1      	b.n	8006362 <D64_GENERIC+0x1be>
 80061de:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80061e2:	4274      	negs	r4, r6
 80061e4:	eb09 0708 	add.w	r7, r9, r8
 80061e8:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80061ec:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80061f0:	5d38      	ldrb	r0, [r7, r4]
 80061f2:	5d29      	ldrb	r1, [r5, r4]
 80061f4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80061f8:	f819 a008 	ldrb.w	sl, [r9, r8]
 80061fc:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8006200:	f899 7000 	ldrb.w	r7, [r9]
 8006204:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8006208:	4425      	add	r5, r4
 800620a:	0409      	lsls	r1, r1, #16
 800620c:	0400      	lsls	r0, r0, #16
 800620e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8006212:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8006216:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800621a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800621e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8006222:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8006226:	4459      	add	r1, fp
 8006228:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800622c:	4438      	add	r0, r7
 800622e:	b2c5      	uxtb	r5, r0
 8006230:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8006234:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8006238:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800623c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8006240:	0e00      	lsrs	r0, r0, #24
 8006242:	eb03 0806 	add.w	r8, r3, r6
 8006246:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800624a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800624e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006252:	b2c8      	uxtb	r0, r1
 8006254:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8006258:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800625c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8006260:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8006264:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006268:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800626c:	0e09      	lsrs	r1, r1, #24
 800626e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8006272:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8006276:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800627a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800627e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8006282:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8006286:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800628a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800628e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006292:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006296:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800629a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800629e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80062a2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80062a6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80062aa:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80062ae:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80062b2:	0a8b      	lsrs	r3, r1, #10
 80062b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80062b8:	4939      	ldr	r1, [pc, #228]	; (80063a0 <D64_GENERIC+0x1fc>)
 80062ba:	9c00      	ldr	r4, [sp, #0]
 80062bc:	fb28 4101 	smlad	r1, r8, r1, r4
 80062c0:	4c38      	ldr	r4, [pc, #224]	; (80063a4 <D64_GENERIC+0x200>)
 80062c2:	fb27 1104 	smlad	r1, r7, r4, r1
 80062c6:	4c38      	ldr	r4, [pc, #224]	; (80063a8 <D64_GENERIC+0x204>)
 80062c8:	fb20 1104 	smlad	r1, r0, r4, r1
 80062cc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80062d0:	fb2a 1106 	smlad	r1, sl, r6, r1
 80062d4:	4c35      	ldr	r4, [pc, #212]	; (80063ac <D64_GENERIC+0x208>)
 80062d6:	9d01      	ldr	r5, [sp, #4]
 80062d8:	fb28 5404 	smlad	r4, r8, r4, r5
 80062dc:	4d33      	ldr	r5, [pc, #204]	; (80063ac <D64_GENERIC+0x208>)
 80062de:	fb2a 4415 	smladx	r4, sl, r5, r4
 80062e2:	4d33      	ldr	r5, [pc, #204]	; (80063b0 <D64_GENERIC+0x20c>)
 80062e4:	fb27 4405 	smlad	r4, r7, r5, r4
 80062e8:	fb20 4415 	smladx	r4, r0, r5, r4
 80062ec:	2501      	movs	r5, #1
 80062ee:	9400      	str	r4, [sp, #0]
 80062f0:	fb28 f805 	smuad	r8, r8, r5
 80062f4:	4c2f      	ldr	r4, [pc, #188]	; (80063b4 <D64_GENERIC+0x210>)
 80062f6:	fb27 8704 	smlad	r7, r7, r4, r8
 80062fa:	4c2f      	ldr	r4, [pc, #188]	; (80063b8 <D64_GENERIC+0x214>)
 80062fc:	fb20 7004 	smlad	r0, r0, r4, r7
 8006300:	4c2e      	ldr	r4, [pc, #184]	; (80063bc <D64_GENERIC+0x218>)
 8006302:	fb2a 0004 	smlad	r0, sl, r4, r0
 8006306:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800630a:	9902      	ldr	r1, [sp, #8]
 800630c:	9001      	str	r0, [sp, #4]
 800630e:	b189      	cbz	r1, 8006334 <D64_GENERIC+0x190>
 8006310:	9803      	ldr	r0, [sp, #12]
 8006312:	9c04      	ldr	r4, [sp, #16]
 8006314:	9604      	str	r6, [sp, #16]
 8006316:	4430      	add	r0, r6
 8006318:	1b00      	subs	r0, r0, r4
 800631a:	17c5      	asrs	r5, r0, #31
 800631c:	460f      	mov	r7, r1
 800631e:	fba0 0101 	umull	r0, r1, r0, r1
 8006322:	fb07 1105 	mla	r1, r7, r5, r1
 8006326:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800632a:	f141 0100 	adc.w	r1, r1, #0
 800632e:	0049      	lsls	r1, r1, #1
 8006330:	9103      	str	r1, [sp, #12]
 8006332:	460e      	mov	r6, r1
 8006334:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8006336:	9905      	ldr	r1, [sp, #20]
 8006338:	9806      	ldr	r0, [sp, #24]
 800633a:	02b6      	lsls	r6, r6, #10
 800633c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8006340:	f04f 0800 	mov.w	r8, #0
 8006344:	fb0c f404 	mul.w	r4, ip, r4
 8006348:	fbc1 7806 	smlal	r7, r8, r1, r6
 800634c:	4641      	mov	r1, r8
 800634e:	1089      	asrs	r1, r1, #2
 8006350:	f301 010f 	ssat	r1, #16, r1
 8006354:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8006358:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800635a:	f10c 0c01 	add.w	ip, ip, #1
 800635e:	4561      	cmp	r1, ip
 8006360:	dd0e      	ble.n	8006380 <D64_GENERIC+0x1dc>
 8006362:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8006364:	2e01      	cmp	r6, #1
 8006366:	f47f af3a 	bne.w	80061de <D64_GENERIC+0x3a>
 800636a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800636c:	06b4      	lsls	r4, r6, #26
 800636e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8006372:	f109 0908 	add.w	r9, r9, #8
 8006376:	f57f af5a 	bpl.w	800622e <D64_GENERIC+0x8a>
 800637a:	ba40      	rev16	r0, r0
 800637c:	ba49      	rev16	r1, r1
 800637e:	e756      	b.n	800622e <D64_GENERIC+0x8a>
 8006380:	61d3      	str	r3, [r2, #28]
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	9901      	ldr	r1, [sp, #4]
 8006386:	6113      	str	r3, [r2, #16]
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	6091      	str	r1, [r2, #8]
 800638c:	6153      	str	r3, [r2, #20]
 800638e:	9900      	ldr	r1, [sp, #0]
 8006390:	9b07      	ldr	r3, [sp, #28]
 8006392:	60d1      	str	r1, [r2, #12]
 8006394:	2000      	movs	r0, #0
 8006396:	6193      	str	r3, [r2, #24]
 8006398:	b009      	add	sp, #36	; 0x24
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	bf00      	nop
 80063a0:	001c0015 	.word	0x001c0015
 80063a4:	000f000a 	.word	0x000f000a
 80063a8:	00060003 	.word	0x00060003
 80063ac:	0024002a 	.word	0x0024002a
 80063b0:	002e0030 	.word	0x002e0030
 80063b4:	00030006 	.word	0x00030006
 80063b8:	000a000f 	.word	0x000a000f
 80063bc:	0015001c 	.word	0x0015001c
 80063c0:	20000000 	.word	0x20000000

080063c4 <D80_GENERIC>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	b08b      	sub	sp, #44	; 0x2c
 80063ca:	6914      	ldr	r4, [r2, #16]
 80063cc:	9404      	str	r4, [sp, #16]
 80063ce:	6954      	ldr	r4, [r2, #20]
 80063d0:	9405      	str	r4, [sp, #20]
 80063d2:	6994      	ldr	r4, [r2, #24]
 80063d4:	9409      	str	r4, [sp, #36]	; 0x24
 80063d6:	6894      	ldr	r4, [r2, #8]
 80063d8:	9402      	str	r4, [sp, #8]
 80063da:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80063dc:	68d4      	ldr	r4, [r2, #12]
 80063de:	9401      	str	r4, [sp, #4]
 80063e0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80063e2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80063e6:	9406      	str	r4, [sp, #24]
 80063e8:	9107      	str	r1, [sp, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 810f 	beq.w	800660e <D80_GENERIC+0x24a>
 80063f0:	6a13      	ldr	r3, [r2, #32]
 80063f2:	9308      	str	r3, [sp, #32]
 80063f4:	2300      	movs	r3, #0
 80063f6:	9200      	str	r2, [sp, #0]
 80063f8:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8006660 <D80_GENERIC+0x29c>
 80063fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8006400:	461a      	mov	r2, r3
 8006402:	e0ed      	b.n	80065e0 <D80_GENERIC+0x21c>
 8006404:	fa5f fc8c 	uxtb.w	ip, ip
 8006408:	fa0f f48c 	sxth.w	r4, ip
 800640c:	0066      	lsls	r6, r4, #1
 800640e:	eb06 0804 	add.w	r8, r6, r4
 8006412:	f1cc 0500 	rsb	r5, ip, #0
 8006416:	eb00 0108 	add.w	r1, r0, r8
 800641a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800641e:	194b      	adds	r3, r1, r5
 8006420:	5d49      	ldrb	r1, [r1, r5]
 8006422:	f810 a008 	ldrb.w	sl, [r0, r8]
 8006426:	f813 b004 	ldrb.w	fp, [r3, r4]
 800642a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800642e:	f890 8000 	ldrb.w	r8, [r0]
 8006432:	eb03 0e04 	add.w	lr, r3, r4
 8006436:	eb0e 0705 	add.w	r7, lr, r5
 800643a:	0409      	lsls	r1, r1, #16
 800643c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8006440:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8006444:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8006448:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800644c:	eb0a 0004 	add.w	r0, sl, r4
 8006450:	041b      	lsls	r3, r3, #16
 8006452:	f81a a004 	ldrb.w	sl, [sl, r4]
 8006456:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800645a:	5d44      	ldrb	r4, [r0, r5]
 800645c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8006460:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8006464:	4428      	add	r0, r5
 8006466:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800646a:	4441      	add	r1, r8
 800646c:	4430      	add	r0, r6
 800646e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8006472:	441f      	add	r7, r3
 8006474:	b2cd      	uxtb	r5, r1
 8006476:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800647a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800647e:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8006488:	0e09      	lsrs	r1, r1, #24
 800648a:	4433      	add	r3, r6
 800648c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8006490:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8006494:	b2fd      	uxtb	r5, r7
 8006496:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800649a:	469b      	mov	fp, r3
 800649c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80064a0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80064a4:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80064a8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80064ac:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80064b0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80064b4:	0e3b      	lsrs	r3, r7, #24
 80064b6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80064ba:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80064be:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80064c2:	fa5f fe84 	uxtb.w	lr, r4
 80064c6:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80064ca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80064ce:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80064d2:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80064d6:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80064da:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80064de:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80064e2:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80064e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80064ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80064f2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80064f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80064fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80064fe:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8006502:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8006506:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800650a:	0aa3      	lsrs	r3, r4, #10
 800650c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006510:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006514:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006518:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800651c:	9303      	str	r3, [sp, #12]
 800651e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8006522:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8006526:	4b42      	ldr	r3, [pc, #264]	; (8006630 <D80_GENERIC+0x26c>)
 8006528:	9901      	ldr	r1, [sp, #4]
 800652a:	fb2b 1303 	smlad	r3, fp, r3, r1
 800652e:	4941      	ldr	r1, [pc, #260]	; (8006634 <D80_GENERIC+0x270>)
 8006530:	fb28 3301 	smlad	r3, r8, r1, r3
 8006534:	4940      	ldr	r1, [pc, #256]	; (8006638 <D80_GENERIC+0x274>)
 8006536:	fb2c 3301 	smlad	r3, ip, r1, r3
 800653a:	4940      	ldr	r1, [pc, #256]	; (800663c <D80_GENERIC+0x278>)
 800653c:	fb27 3301 	smlad	r3, r7, r1, r3
 8006540:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006544:	fb2e 3301 	smlad	r3, lr, r1, r3
 8006548:	493d      	ldr	r1, [pc, #244]	; (8006640 <D80_GENERIC+0x27c>)
 800654a:	9c02      	ldr	r4, [sp, #8]
 800654c:	fb2b 4401 	smlad	r4, fp, r1, r4
 8006550:	493c      	ldr	r1, [pc, #240]	; (8006644 <D80_GENERIC+0x280>)
 8006552:	fb28 4401 	smlad	r4, r8, r1, r4
 8006556:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800655a:	fb2c 4101 	smlad	r1, ip, r1, r4
 800655e:	4c3a      	ldr	r4, [pc, #232]	; (8006648 <D80_GENERIC+0x284>)
 8006560:	fb27 1104 	smlad	r1, r7, r4, r1
 8006564:	4c39      	ldr	r4, [pc, #228]	; (800664c <D80_GENERIC+0x288>)
 8006566:	fb2e 1104 	smlad	r1, lr, r4, r1
 800656a:	9101      	str	r1, [sp, #4]
 800656c:	2101      	movs	r1, #1
 800656e:	fb2b fb01 	smuad	fp, fp, r1
 8006572:	4937      	ldr	r1, [pc, #220]	; (8006650 <D80_GENERIC+0x28c>)
 8006574:	fb28 b801 	smlad	r8, r8, r1, fp
 8006578:	4d36      	ldr	r5, [pc, #216]	; (8006654 <D80_GENERIC+0x290>)
 800657a:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800657e:	4d36      	ldr	r5, [pc, #216]	; (8006658 <D80_GENERIC+0x294>)
 8006580:	fb27 c705 	smlad	r7, r7, r5, ip
 8006584:	4d35      	ldr	r5, [pc, #212]	; (800665c <D80_GENERIC+0x298>)
 8006586:	fb2e 7105 	smlad	r1, lr, r5, r7
 800658a:	9102      	str	r1, [sp, #8]
 800658c:	9908      	ldr	r1, [sp, #32]
 800658e:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8006592:	b181      	cbz	r1, 80065b6 <D80_GENERIC+0x1f2>
 8006594:	9c04      	ldr	r4, [sp, #16]
 8006596:	9d05      	ldr	r5, [sp, #20]
 8006598:	9305      	str	r3, [sp, #20]
 800659a:	441c      	add	r4, r3
 800659c:	1b64      	subs	r4, r4, r5
 800659e:	17e7      	asrs	r7, r4, #31
 80065a0:	fba4 4501 	umull	r4, r5, r4, r1
 80065a4:	fb01 5507 	mla	r5, r1, r7, r5
 80065a8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80065ac:	f145 0500 	adc.w	r5, r5, #0
 80065b0:	0069      	lsls	r1, r5, #1
 80065b2:	9104      	str	r1, [sp, #16]
 80065b4:	460b      	mov	r3, r1
 80065b6:	9e00      	ldr	r6, [sp, #0]
 80065b8:	9f06      	ldr	r7, [sp, #24]
 80065ba:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80065bc:	025b      	lsls	r3, r3, #9
 80065be:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80065c2:	2500      	movs	r5, #0
 80065c4:	fb02 f101 	mul.w	r1, r2, r1
 80065c8:	fbc7 4503 	smlal	r4, r5, r7, r3
 80065cc:	9c07      	ldr	r4, [sp, #28]
 80065ce:	10ab      	asrs	r3, r5, #2
 80065d0:	f303 030f 	ssat	r3, #16, r3
 80065d4:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80065d8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80065da:	3201      	adds	r2, #1
 80065dc:	4293      	cmp	r3, r2
 80065de:	dd13      	ble.n	8006608 <D80_GENERIC+0x244>
 80065e0:	9b00      	ldr	r3, [sp, #0]
 80065e2:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80065e6:	f1bc 0f01 	cmp.w	ip, #1
 80065ea:	f47f af0b 	bne.w	8006404 <D80_GENERIC+0x40>
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	6884      	ldr	r4, [r0, #8]
 80065f2:	069b      	lsls	r3, r3, #26
 80065f4:	e890 0082 	ldmia.w	r0, {r1, r7}
 80065f8:	f100 000a 	add.w	r0, r0, #10
 80065fc:	f57f af3a 	bpl.w	8006474 <D80_GENERIC+0xb0>
 8006600:	ba49      	rev16	r1, r1
 8006602:	ba7f      	rev16	r7, r7
 8006604:	ba64      	rev16	r4, r4
 8006606:	e735      	b.n	8006474 <D80_GENERIC+0xb0>
 8006608:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800660c:	4632      	mov	r2, r6
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	6093      	str	r3, [r2, #8]
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	60d3      	str	r3, [r2, #12]
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	6113      	str	r3, [r2, #16]
 800661a:	9b05      	ldr	r3, [sp, #20]
 800661c:	6153      	str	r3, [r2, #20]
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	f8c2 b01c 	str.w	fp, [r2, #28]
 8006624:	2000      	movs	r0, #0
 8006626:	6193      	str	r3, [r2, #24]
 8006628:	b00b      	add	sp, #44	; 0x2c
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	bf00      	nop
 8006630:	002d0024 	.word	0x002d0024
 8006634:	001c0015 	.word	0x001c0015
 8006638:	000f000a 	.word	0x000f000a
 800663c:	00060003 	.word	0x00060003
 8006640:	0037003f 	.word	0x0037003f
 8006644:	00450049 	.word	0x00450049
 8006648:	00490045 	.word	0x00490045
 800664c:	003f0037 	.word	0x003f0037
 8006650:	00030006 	.word	0x00030006
 8006654:	000a000f 	.word	0x000a000f
 8006658:	0015001c 	.word	0x0015001c
 800665c:	0024002d 	.word	0x0024002d
 8006660:	20000000 	.word	0x20000000

08006664 <D128_GENERIC>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	b093      	sub	sp, #76	; 0x4c
 800666a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800666c:	9005      	str	r0, [sp, #20]
 800666e:	4610      	mov	r0, r2
 8006670:	9201      	str	r2, [sp, #4]
 8006672:	6912      	ldr	r2, [r2, #16]
 8006674:	920c      	str	r2, [sp, #48]	; 0x30
 8006676:	4602      	mov	r2, r0
 8006678:	6940      	ldr	r0, [r0, #20]
 800667a:	900d      	str	r0, [sp, #52]	; 0x34
 800667c:	4610      	mov	r0, r2
 800667e:	4614      	mov	r4, r2
 8006680:	6992      	ldr	r2, [r2, #24]
 8006682:	9211      	str	r2, [sp, #68]	; 0x44
 8006684:	69c2      	ldr	r2, [r0, #28]
 8006686:	9202      	str	r2, [sp, #8]
 8006688:	68e2      	ldr	r2, [r4, #12]
 800668a:	6880      	ldr	r0, [r0, #8]
 800668c:	9203      	str	r2, [sp, #12]
 800668e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006690:	9004      	str	r0, [sp, #16]
 8006692:	920e      	str	r2, [sp, #56]	; 0x38
 8006694:	910f      	str	r1, [sp, #60]	; 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 819b 	beq.w	80069d2 <D128_GENERIC+0x36e>
 800669c:	6a23      	ldr	r3, [r4, #32]
 800669e:	9310      	str	r3, [sp, #64]	; 0x40
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8006a4c <D128_GENERIC+0x3e8>
 80066a6:	9306      	str	r3, [sp, #24]
 80066a8:	e17a      	b.n	80069a0 <D128_GENERIC+0x33c>
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	9d05      	ldr	r5, [sp, #20]
 80066ae:	b214      	sxth	r4, r2
 80066b0:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80066b4:	4250      	negs	r0, r2
 80066b6:	eb05 010a 	add.w	r1, r5, sl
 80066ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066be:	eb01 0800 	add.w	r8, r1, r0
 80066c2:	eb0b 0c04 	add.w	ip, fp, r4
 80066c6:	eb08 070c 	add.w	r7, r8, ip
 80066ca:	183b      	adds	r3, r7, r0
 80066cc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80066d0:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80066d4:	eb0e 0604 	add.w	r6, lr, r4
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	1833      	adds	r3, r6, r0
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	462b      	mov	r3, r5
 80066e0:	f815 a00a 	ldrb.w	sl, [r5, sl]
 80066e4:	f8cd a020 	str.w	sl, [sp, #32]
 80066e8:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80066ec:	f813 c002 	ldrb.w	ip, [r3, r2]
 80066f0:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80066f4:	5c3a      	ldrb	r2, [r7, r0]
 80066f6:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80066fa:	781f      	ldrb	r7, [r3, #0]
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	9d05      	ldr	r5, [sp, #20]
 8006700:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8006704:	5c09      	ldrb	r1, [r1, r0]
 8006706:	9709      	str	r7, [sp, #36]	; 0x24
 8006708:	9307      	str	r3, [sp, #28]
 800670a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800670e:	5c33      	ldrb	r3, [r6, r0]
 8006710:	0412      	lsls	r2, r2, #16
 8006712:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8006716:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800671a:	9d08      	ldr	r5, [sp, #32]
 800671c:	eb06 0a04 	add.w	sl, r6, r4
 8006720:	0409      	lsls	r1, r1, #16
 8006722:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8006726:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800672a:	5d36      	ldrb	r6, [r6, r4]
 800672c:	9c05      	ldr	r4, [sp, #20]
 800672e:	042d      	lsls	r5, r5, #16
 8006730:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8006734:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8006738:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800673c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8006740:	eb0a 0c00 	add.w	ip, sl, r0
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800674a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800674e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8006752:	9d07      	ldr	r5, [sp, #28]
 8006754:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8006758:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800675c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800675e:	4458      	add	r0, fp
 8006760:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8006764:	9005      	str	r0, [sp, #20]
 8006766:	4439      	add	r1, r7
 8006768:	442a      	add	r2, r5
 800676a:	44b2      	add	sl, r6
 800676c:	1918      	adds	r0, r3, r4
 800676e:	b2cb      	uxtb	r3, r1
 8006770:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8006774:	9e02      	ldr	r6, [sp, #8]
 8006776:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800677a:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800677e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8006782:	441e      	add	r6, r3
 8006784:	0e09      	lsrs	r1, r1, #24
 8006786:	4633      	mov	r3, r6
 8006788:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800678c:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8006790:	b2d4      	uxtb	r4, r2
 8006792:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006796:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800679a:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800679e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80067a2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80067a6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80067aa:	0e12      	lsrs	r2, r2, #24
 80067ac:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80067b0:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80067b4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80067b8:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80067bc:	9702      	str	r7, [sp, #8]
 80067be:	b2c2      	uxtb	r2, r0
 80067c0:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80067c4:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80067c8:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80067cc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80067d0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80067d4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80067d8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80067dc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80067e0:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80067e4:	0e00      	lsrs	r0, r0, #24
 80067e6:	fa5f f68a 	uxtb.w	r6, sl
 80067ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ee:	9309      	str	r3, [sp, #36]	; 0x24
 80067f0:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80067f4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80067f8:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80067fc:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006800:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006804:	950a      	str	r5, [sp, #40]	; 0x28
 8006806:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800680a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800680e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8006812:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006816:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800681a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800681e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006820:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8006824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006826:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800682a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800682e:	9307      	str	r3, [sp, #28]
 8006830:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006834:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006838:	9b02      	ldr	r3, [sp, #8]
 800683a:	f8cd c008 	str.w	ip, [sp, #8]
 800683e:	4694      	mov	ip, r2
 8006840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006842:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8006846:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800684a:	9a02      	ldr	r2, [sp, #8]
 800684c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006850:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8006854:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800685a:	f8cd a020 	str.w	sl, [sp, #32]
 800685e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006862:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006866:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800686a:	9b07      	ldr	r3, [sp, #28]
 800686c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006870:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8006874:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8006878:	9a08      	ldr	r2, [sp, #32]
 800687a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800687e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006882:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006886:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800688a:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800688e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006892:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006896:	0a96      	lsrs	r6, r2, #10
 8006898:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800689c:	9602      	str	r6, [sp, #8]
 800689e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80068a2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80068a6:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80068aa:	4e53      	ldr	r6, [pc, #332]	; (80069f8 <D128_GENERIC+0x394>)
 80068ac:	9f03      	ldr	r7, [sp, #12]
 80068ae:	fb2c 7606 	smlad	r6, ip, r6, r7
 80068b2:	4f52      	ldr	r7, [pc, #328]	; (80069fc <D128_GENERIC+0x398>)
 80068b4:	fb2a 6607 	smlad	r6, sl, r7, r6
 80068b8:	4f51      	ldr	r7, [pc, #324]	; (8006a00 <D128_GENERIC+0x39c>)
 80068ba:	fb21 6607 	smlad	r6, r1, r7, r6
 80068be:	4f51      	ldr	r7, [pc, #324]	; (8006a04 <D128_GENERIC+0x3a0>)
 80068c0:	fb24 6607 	smlad	r6, r4, r7, r6
 80068c4:	4f50      	ldr	r7, [pc, #320]	; (8006a08 <D128_GENERIC+0x3a4>)
 80068c6:	fb28 6607 	smlad	r6, r8, r7, r6
 80068ca:	4f50      	ldr	r7, [pc, #320]	; (8006a0c <D128_GENERIC+0x3a8>)
 80068cc:	fb20 6607 	smlad	r6, r0, r7, r6
 80068d0:	4f4f      	ldr	r7, [pc, #316]	; (8006a10 <D128_GENERIC+0x3ac>)
 80068d2:	fb23 6607 	smlad	r6, r3, r7, r6
 80068d6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80068da:	fb25 6607 	smlad	r6, r5, r7, r6
 80068de:	4f4d      	ldr	r7, [pc, #308]	; (8006a14 <D128_GENERIC+0x3b0>)
 80068e0:	9a04      	ldr	r2, [sp, #16]
 80068e2:	fb2c 2e07 	smlad	lr, ip, r7, r2
 80068e6:	4a4c      	ldr	r2, [pc, #304]	; (8006a18 <D128_GENERIC+0x3b4>)
 80068e8:	fb2a ee02 	smlad	lr, sl, r2, lr
 80068ec:	4f4b      	ldr	r7, [pc, #300]	; (8006a1c <D128_GENERIC+0x3b8>)
 80068ee:	fb21 ee07 	smlad	lr, r1, r7, lr
 80068f2:	4f4b      	ldr	r7, [pc, #300]	; (8006a20 <D128_GENERIC+0x3bc>)
 80068f4:	fb24 ee07 	smlad	lr, r4, r7, lr
 80068f8:	4f4a      	ldr	r7, [pc, #296]	; (8006a24 <D128_GENERIC+0x3c0>)
 80068fa:	fb28 ee07 	smlad	lr, r8, r7, lr
 80068fe:	4f4a      	ldr	r7, [pc, #296]	; (8006a28 <D128_GENERIC+0x3c4>)
 8006900:	fb20 ee07 	smlad	lr, r0, r7, lr
 8006904:	4f49      	ldr	r7, [pc, #292]	; (8006a2c <D128_GENERIC+0x3c8>)
 8006906:	fb23 e707 	smlad	r7, r3, r7, lr
 800690a:	f8df e144 	ldr.w	lr, [pc, #324]	; 8006a50 <D128_GENERIC+0x3ec>
 800690e:	fb25 720e 	smlad	r2, r5, lr, r7
 8006912:	f04f 0b01 	mov.w	fp, #1
 8006916:	9203      	str	r2, [sp, #12]
 8006918:	fb2c fb0b 	smuad	fp, ip, fp
 800691c:	4f44      	ldr	r7, [pc, #272]	; (8006a30 <D128_GENERIC+0x3cc>)
 800691e:	fb2a ba07 	smlad	sl, sl, r7, fp
 8006922:	4f44      	ldr	r7, [pc, #272]	; (8006a34 <D128_GENERIC+0x3d0>)
 8006924:	fb21 aa07 	smlad	sl, r1, r7, sl
 8006928:	4f43      	ldr	r7, [pc, #268]	; (8006a38 <D128_GENERIC+0x3d4>)
 800692a:	fb24 aa07 	smlad	sl, r4, r7, sl
 800692e:	4f43      	ldr	r7, [pc, #268]	; (8006a3c <D128_GENERIC+0x3d8>)
 8006930:	fb28 a707 	smlad	r7, r8, r7, sl
 8006934:	4a42      	ldr	r2, [pc, #264]	; (8006a40 <D128_GENERIC+0x3dc>)
 8006936:	fb20 7702 	smlad	r7, r0, r2, r7
 800693a:	4a42      	ldr	r2, [pc, #264]	; (8006a44 <D128_GENERIC+0x3e0>)
 800693c:	fb23 7702 	smlad	r7, r3, r2, r7
 8006940:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <D128_GENERIC+0x3e4>)
 8006942:	fb25 7303 	smlad	r3, r5, r3, r7
 8006946:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800694e:	b185      	cbz	r5, 8006972 <D128_GENERIC+0x30e>
 8006950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006952:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006954:	960d      	str	r6, [sp, #52]	; 0x34
 8006956:	4432      	add	r2, r6
 8006958:	1a52      	subs	r2, r2, r1
 800695a:	17d1      	asrs	r1, r2, #31
 800695c:	fba2 2305 	umull	r2, r3, r2, r5
 8006960:	fb05 3301 	mla	r3, r5, r1, r3
 8006964:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006968:	f143 0300 	adc.w	r3, r3, #0
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	930c      	str	r3, [sp, #48]	; 0x30
 8006970:	461e      	mov	r6, r3
 8006972:	9801      	ldr	r0, [sp, #4]
 8006974:	9c06      	ldr	r4, [sp, #24]
 8006976:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8006978:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800697a:	01f6      	lsls	r6, r6, #7
 800697c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006980:	2300      	movs	r3, #0
 8006982:	fbc5 2306 	smlal	r2, r3, r5, r6
 8006986:	fb04 f101 	mul.w	r1, r4, r1
 800698a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800698c:	109b      	asrs	r3, r3, #2
 800698e:	f303 030f 	ssat	r3, #16, r3
 8006992:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8006996:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8006998:	1c62      	adds	r2, r4, #1
 800699a:	4293      	cmp	r3, r2
 800699c:	9206      	str	r2, [sp, #24]
 800699e:	dd18      	ble.n	80069d2 <D128_GENERIC+0x36e>
 80069a0:	9b01      	ldr	r3, [sp, #4]
 80069a2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80069a4:	2a01      	cmp	r2, #1
 80069a6:	f47f ae80 	bne.w	80066aa <D128_GENERIC+0x46>
 80069aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ac:	9d05      	ldr	r5, [sp, #20]
 80069ae:	069b      	lsls	r3, r3, #26
 80069b0:	6829      	ldr	r1, [r5, #0]
 80069b2:	686a      	ldr	r2, [r5, #4]
 80069b4:	68a8      	ldr	r0, [r5, #8]
 80069b6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80069ba:	f105 0410 	add.w	r4, r5, #16
 80069be:	d506      	bpl.n	80069ce <D128_GENERIC+0x36a>
 80069c0:	ba49      	rev16	r1, r1
 80069c2:	ba52      	rev16	r2, r2
 80069c4:	ba40      	rev16	r0, r0
 80069c6:	fa9a fa9a 	rev16.w	sl, sl
 80069ca:	9405      	str	r4, [sp, #20]
 80069cc:	e6cf      	b.n	800676e <D128_GENERIC+0x10a>
 80069ce:	9405      	str	r4, [sp, #20]
 80069d0:	e6cd      	b.n	800676e <D128_GENERIC+0x10a>
 80069d2:	9a01      	ldr	r2, [sp, #4]
 80069d4:	9904      	ldr	r1, [sp, #16]
 80069d6:	6091      	str	r1, [r2, #8]
 80069d8:	9903      	ldr	r1, [sp, #12]
 80069da:	60d1      	str	r1, [r2, #12]
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	61d3      	str	r3, [r2, #28]
 80069e0:	4611      	mov	r1, r2
 80069e2:	4613      	mov	r3, r2
 80069e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e6:	610a      	str	r2, [r1, #16]
 80069e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069ea:	6159      	str	r1, [r3, #20]
 80069ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069ee:	6199      	str	r1, [r3, #24]
 80069f0:	2000      	movs	r0, #0
 80069f2:	b013      	add	sp, #76	; 0x4c
 80069f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f8:	00780069 	.word	0x00780069
 80069fc:	005b004e 	.word	0x005b004e
 8006a00:	00420037 	.word	0x00420037
 8006a04:	002d0024 	.word	0x002d0024
 8006a08:	001c0015 	.word	0x001c0015
 8006a0c:	000f000a 	.word	0x000f000a
 8006a10:	00060003 	.word	0x00060003
 8006a14:	00880096 	.word	0x00880096
 8006a18:	00a200ac 	.word	0x00a200ac
 8006a1c:	00b400ba 	.word	0x00b400ba
 8006a20:	00be00c0 	.word	0x00be00c0
 8006a24:	00c000be 	.word	0x00c000be
 8006a28:	00ba00b4 	.word	0x00ba00b4
 8006a2c:	00ac00a2 	.word	0x00ac00a2
 8006a30:	00030006 	.word	0x00030006
 8006a34:	000a000f 	.word	0x000a000f
 8006a38:	0015001c 	.word	0x0015001c
 8006a3c:	0024002d 	.word	0x0024002d
 8006a40:	00370042 	.word	0x00370042
 8006a44:	004e005b 	.word	0x004e005b
 8006a48:	00690078 	.word	0x00690078
 8006a4c:	20000000 	.word	0x20000000
 8006a50:	00960088 	.word	0x00960088

08006a54 <D16_1CH_HTONS_VOL_HP>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	4691      	mov	r9, r2
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006a5e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8006a62:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4680      	mov	r8, r0
 8006a6a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8006a6e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8006a72:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a76:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8006a7a:	9401      	str	r4, [sp, #4]
 8006a7c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8006a80:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	d04e      	beq.n	8006b26 <D16_1CH_HTONS_VOL_HP+0xd2>
 8006a88:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8006b34 <D16_1CH_HTONS_VOL_HP+0xe0>
 8006a8c:	1e8c      	subs	r4, r1, #2
 8006a8e:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8006a92:	f858 2b02 	ldr.w	r2, [r8], #2
 8006a96:	ba52      	rev16	r2, r2
 8006a98:	b2d6      	uxtb	r6, r2
 8006a9a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006a9e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8006aa2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8006aac:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8006ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006ab8:	0a93      	lsrs	r3, r2, #10
 8006aba:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <D16_1CH_HTONS_VOL_HP+0xd8>)
 8006abc:	fb21 5202 	smlad	r2, r1, r2, r5
 8006ac0:	4d1b      	ldr	r5, [pc, #108]	; (8006b30 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8006ac2:	fb21 f505 	smuad	r5, r1, r5
 8006ac6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006aca:	4410      	add	r0, r2
 8006acc:	1bc0      	subs	r0, r0, r7
 8006ace:	17c7      	asrs	r7, r0, #31
 8006ad0:	fba0 010e 	umull	r0, r1, r0, lr
 8006ad4:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006ad8:	fb0e 1107 	mla	r1, lr, r7, r1
 8006adc:	f141 0100 	adc.w	r1, r1, #0
 8006ae0:	0448      	lsls	r0, r1, #17
 8006ae2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006ae6:	2700      	movs	r7, #0
 8006ae8:	fbc0 670a 	smlal	r6, r7, r0, sl
 8006aec:	45d8      	cmp	r8, fp
 8006aee:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8006af2:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8006af6:	4617      	mov	r7, r2
 8006af8:	f301 010f 	ssat	r1, #16, r1
 8006afc:	f824 1f02 	strh.w	r1, [r4, #2]!
 8006b00:	d1c7      	bne.n	8006a92 <D16_1CH_HTONS_VOL_HP+0x3e>
 8006b02:	9901      	ldr	r1, [sp, #4]
 8006b04:	f8c9 301c 	str.w	r3, [r9, #28]
 8006b08:	9b00      	ldr	r3, [sp, #0]
 8006b0a:	f8c9 0010 	str.w	r0, [r9, #16]
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f8c9 5008 	str.w	r5, [r9, #8]
 8006b14:	f8c9 100c 	str.w	r1, [r9, #12]
 8006b18:	f8c9 2014 	str.w	r2, [r9, #20]
 8006b1c:	f8c9 3018 	str.w	r3, [r9, #24]
 8006b20:	b003      	add	sp, #12
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	463a      	mov	r2, r7
 8006b28:	4621      	mov	r1, r4
 8006b2a:	e7eb      	b.n	8006b04 <D16_1CH_HTONS_VOL_HP+0xb0>
 8006b2c:	00030001 	.word	0x00030001
 8006b30:	00010003 	.word	0x00010003
 8006b34:	20000000 	.word	0x20000000

08006b38 <D24_1CH_HTONS_VOL_HP>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	b089      	sub	sp, #36	; 0x24
 8006b3e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006b40:	6996      	ldr	r6, [r2, #24]
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8006b46:	9207      	str	r2, [sp, #28]
 8006b48:	6915      	ldr	r5, [r2, #16]
 8006b4a:	6954      	ldr	r4, [r2, #20]
 8006b4c:	9606      	str	r6, [sp, #24]
 8006b4e:	6893      	ldr	r3, [r2, #8]
 8006b50:	69d6      	ldr	r6, [r2, #28]
 8006b52:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8006b56:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8006b5a:	9a04      	ldr	r2, [sp, #16]
 8006b5c:	9705      	str	r7, [sp, #20]
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	d07e      	beq.n	8006c60 <D24_1CH_HTONS_VOL_HP+0x128>
 8006b62:	f1a1 0b02 	sub.w	fp, r1, #2
 8006b66:	2700      	movs	r7, #0
 8006b68:	46a8      	mov	r8, r5
 8006b6a:	f8cd b004 	str.w	fp, [sp, #4]
 8006b6e:	4655      	mov	r5, sl
 8006b70:	46e3      	mov	fp, ip
 8006b72:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8006c6c <D24_1CH_HTONS_VOL_HP+0x134>
 8006b76:	46ba      	mov	sl, r7
 8006b78:	469c      	mov	ip, r3
 8006b7a:	e055      	b.n	8006c28 <D24_1CH_HTONS_VOL_HP+0xf0>
 8006b7c:	7802      	ldrb	r2, [r0, #0]
 8006b7e:	78c3      	ldrb	r3, [r0, #3]
 8006b80:	7841      	ldrb	r1, [r0, #1]
 8006b82:	0212      	lsls	r2, r2, #8
 8006b84:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8006b88:	440b      	add	r3, r1
 8006b8a:	3002      	adds	r0, #2
 8006b8c:	b2d9      	uxtb	r1, r3
 8006b8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006b92:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8006b96:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8006ba0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006ba4:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8006ba8:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8006bac:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006bb0:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8006bb4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8006bb8:	4a2a      	ldr	r2, [pc, #168]	; (8006c64 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8006bba:	fb23 b102 	smlad	r1, r3, r2, fp
 8006bbe:	4a2a      	ldr	r2, [pc, #168]	; (8006c68 <D24_1CH_HTONS_VOL_HP+0x130>)
 8006bc0:	fb23 cb02 	smlad	fp, r3, r2, ip
 8006bc4:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8006bc8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8006bcc:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	fb23 f702 	smuad	r7, r3, r2
 8006bd6:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8006bda:	eb01 0208 	add.w	r2, r1, r8
 8006bde:	1b12      	subs	r2, r2, r4
 8006be0:	17d4      	asrs	r4, r2, #31
 8006be2:	fba2 2305 	umull	r2, r3, r2, r5
 8006be6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006bea:	fb05 3304 	mla	r3, r5, r4, r3
 8006bee:	f143 0300 	adc.w	r3, r3, #0
 8006bf2:	9c05      	ldr	r4, [sp, #20]
 8006bf4:	03da      	lsls	r2, r3, #15
 8006bf6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006bfa:	f04f 0900 	mov.w	r9, #0
 8006bfe:	fbc4 8902 	smlal	r8, r9, r4, r2
 8006c02:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006c06:	9a01      	ldr	r2, [sp, #4]
 8006c08:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	109b      	asrs	r3, r3, #2
 8006c10:	f303 030f 	ssat	r3, #16, r3
 8006c14:	f822 3f02 	strh.w	r3, [r2, #2]!
 8006c18:	9b04      	ldr	r3, [sp, #16]
 8006c1a:	9201      	str	r2, [sp, #4]
 8006c1c:	f10a 0a01 	add.w	sl, sl, #1
 8006c20:	459a      	cmp	sl, r3
 8006c22:	44bc      	add	ip, r7
 8006c24:	460c      	mov	r4, r1
 8006c26:	d00b      	beq.n	8006c40 <D24_1CH_HTONS_VOL_HP+0x108>
 8006c28:	f01a 0f01 	tst.w	sl, #1
 8006c2c:	d0a6      	beq.n	8006b7c <D24_1CH_HTONS_VOL_HP+0x44>
 8006c2e:	78c2      	ldrb	r2, [r0, #3]
 8006c30:	7883      	ldrb	r3, [r0, #2]
 8006c32:	f810 1b04 	ldrb.w	r1, [r0], #4
 8006c36:	0212      	lsls	r2, r2, #8
 8006c38:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8006c3c:	440b      	add	r3, r1
 8006c3e:	e7a5      	b.n	8006b8c <D24_1CH_HTONS_VOL_HP+0x54>
 8006c40:	4663      	mov	r3, ip
 8006c42:	4645      	mov	r5, r8
 8006c44:	46dc      	mov	ip, fp
 8006c46:	9807      	ldr	r0, [sp, #28]
 8006c48:	6141      	str	r1, [r0, #20]
 8006c4a:	9906      	ldr	r1, [sp, #24]
 8006c4c:	6083      	str	r3, [r0, #8]
 8006c4e:	f8c0 c00c 	str.w	ip, [r0, #12]
 8006c52:	61c6      	str	r6, [r0, #28]
 8006c54:	6105      	str	r5, [r0, #16]
 8006c56:	6181      	str	r1, [r0, #24]
 8006c58:	2000      	movs	r0, #0
 8006c5a:	b009      	add	sp, #36	; 0x24
 8006c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c60:	4621      	mov	r1, r4
 8006c62:	e7f0      	b.n	8006c46 <D24_1CH_HTONS_VOL_HP+0x10e>
 8006c64:	00030001 	.word	0x00030001
 8006c68:	00060007 	.word	0x00060007
 8006c6c:	20000000 	.word	0x20000000

08006c70 <D32_1CH_HTONS_VOL_HP>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	4692      	mov	sl, r2
 8006c76:	b087      	sub	sp, #28
 8006c78:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006c7a:	f8da 3018 	ldr.w	r3, [sl, #24]
 8006c7e:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	f8da 4010 	ldr.w	r4, [sl, #16]
 8006c88:	f8da 8014 	ldr.w	r8, [sl, #20]
 8006c8c:	f8da 601c 	ldr.w	r6, [sl, #28]
 8006c90:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006c94:	f8da e00c 	ldr.w	lr, [sl, #12]
 8006c98:	9501      	str	r5, [sp, #4]
 8006c9a:	f8da c020 	ldr.w	ip, [sl, #32]
 8006c9e:	2a00      	cmp	r2, #0
 8006ca0:	d07b      	beq.n	8006d9a <D32_1CH_HTONS_VOL_HP+0x12a>
 8006ca2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006ca6:	4f3e      	ldr	r7, [pc, #248]	; (8006da0 <D32_1CH_HTONS_VOL_HP+0x130>)
 8006ca8:	f8cd c00c 	str.w	ip, [sp, #12]
 8006cac:	9202      	str	r2, [sp, #8]
 8006cae:	460d      	mov	r5, r1
 8006cb0:	46a1      	mov	r9, r4
 8006cb2:	4684      	mov	ip, r0
 8006cb4:	f8cd a014 	str.w	sl, [sp, #20]
 8006cb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006cbc:	ba49      	rev16	r1, r1
 8006cbe:	b2c8      	uxtb	r0, r1
 8006cc0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8006cc4:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8006cc8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8006ccc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006cd0:	0e09      	lsrs	r1, r1, #24
 8006cd2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8006cd6:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8006cda:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8006cde:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8006ce2:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8006ce6:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8006cea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006cee:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8006cf2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006cf6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006cfa:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8006cfe:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8006d02:	4a28      	ldr	r2, [pc, #160]	; (8006da4 <D32_1CH_HTONS_VOL_HP+0x134>)
 8006d04:	fb20 e202 	smlad	r2, r0, r2, lr
 8006d08:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006d0c:	fb2a 2101 	smlad	r1, sl, r1, r2
 8006d10:	4a25      	ldr	r2, [pc, #148]	; (8006da8 <D32_1CH_HTONS_VOL_HP+0x138>)
 8006d12:	fb20 3302 	smlad	r3, r0, r2, r3
 8006d16:	4a25      	ldr	r2, [pc, #148]	; (8006dac <D32_1CH_HTONS_VOL_HP+0x13c>)
 8006d18:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	fb20 f003 	smuad	r0, r0, r3
 8006d22:	4b23      	ldr	r3, [pc, #140]	; (8006db0 <D32_1CH_HTONS_VOL_HP+0x140>)
 8006d24:	fb2a 0303 	smlad	r3, sl, r3, r0
 8006d28:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8006d2c:	9c03      	ldr	r4, [sp, #12]
 8006d2e:	eb02 0009 	add.w	r0, r2, r9
 8006d32:	eba0 0008 	sub.w	r0, r0, r8
 8006d36:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8006d3a:	fba0 0104 	umull	r0, r1, r0, r4
 8006d3e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006d42:	fb04 110b 	mla	r1, r4, fp, r1
 8006d46:	f141 0100 	adc.w	r1, r1, #0
 8006d4a:	9c01      	ldr	r4, [sp, #4]
 8006d4c:	0388      	lsls	r0, r1, #14
 8006d4e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006d52:	f04f 0900 	mov.w	r9, #0
 8006d56:	fbc0 8904 	smlal	r8, r9, r0, r4
 8006d5a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8006d5e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8006d62:	f300 000f 	ssat	r0, #16, r0
 8006d66:	9902      	ldr	r1, [sp, #8]
 8006d68:	f825 0b02 	strh.w	r0, [r5], #2
 8006d6c:	428d      	cmp	r5, r1
 8006d6e:	4690      	mov	r8, r2
 8006d70:	d1a2      	bne.n	8006cb8 <D32_1CH_HTONS_VOL_HP+0x48>
 8006d72:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006d76:	464c      	mov	r4, r9
 8006d78:	f8ca 3008 	str.w	r3, [sl, #8]
 8006d7c:	9b04      	ldr	r3, [sp, #16]
 8006d7e:	f8ca e00c 	str.w	lr, [sl, #12]
 8006d82:	2000      	movs	r0, #0
 8006d84:	f8ca 601c 	str.w	r6, [sl, #28]
 8006d88:	f8ca 4010 	str.w	r4, [sl, #16]
 8006d8c:	f8ca 2014 	str.w	r2, [sl, #20]
 8006d90:	f8ca 3018 	str.w	r3, [sl, #24]
 8006d94:	b007      	add	sp, #28
 8006d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9a:	4642      	mov	r2, r8
 8006d9c:	e7ec      	b.n	8006d78 <D32_1CH_HTONS_VOL_HP+0x108>
 8006d9e:	bf00      	nop
 8006da0:	20000000 	.word	0x20000000
 8006da4:	00060003 	.word	0x00060003
 8006da8:	000a000c 	.word	0x000a000c
 8006dac:	000c000a 	.word	0x000c000a
 8006db0:	00030006 	.word	0x00030006

08006db4 <D48_1CH_HTONS_VOL_HP>:
 8006db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	4613      	mov	r3, r2
 8006dba:	461c      	mov	r4, r3
 8006dbc:	b087      	sub	sp, #28
 8006dbe:	4625      	mov	r5, r4
 8006dc0:	4626      	mov	r6, r4
 8006dc2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8006dc4:	9205      	str	r2, [sp, #20]
 8006dc6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006dc8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8006dcc:	9501      	str	r5, [sp, #4]
 8006dce:	4680      	mov	r8, r0
 8006dd0:	6a35      	ldr	r5, [r6, #32]
 8006dd2:	6918      	ldr	r0, [r3, #16]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	9304      	str	r3, [sp, #16]
 8006dd8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8006ddc:	68a3      	ldr	r3, [r4, #8]
 8006dde:	9502      	str	r5, [sp, #8]
 8006de0:	68e4      	ldr	r4, [r4, #12]
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	f000 808c 	beq.w	8006f00 <D48_1CH_HTONS_VOL_HP+0x14c>
 8006de8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006dec:	4d45      	ldr	r5, [pc, #276]	; (8006f04 <D48_1CH_HTONS_VOL_HP+0x150>)
 8006dee:	9203      	str	r2, [sp, #12]
 8006df0:	468c      	mov	ip, r1
 8006df2:	e898 0044 	ldmia.w	r8, {r2, r6}
 8006df6:	f108 0806 	add.w	r8, r8, #6
 8006dfa:	ba52      	rev16	r2, r2
 8006dfc:	ba76      	rev16	r6, r6
 8006dfe:	b2d7      	uxtb	r7, r2
 8006e00:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006e04:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8006e08:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006e0c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8006e10:	0e12      	lsrs	r2, r2, #24
 8006e12:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8006e16:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8006e1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006e1e:	fa5f fb86 	uxtb.w	fp, r6
 8006e22:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8006e26:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8006e2a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8006e2e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8006e32:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8006e36:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006e3a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8006e3e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8006e42:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006e46:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006e4a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8006e4e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006e52:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006e56:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006e5a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8006e5e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8006e62:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8006e66:	4a28      	ldr	r2, [pc, #160]	; (8006f08 <D48_1CH_HTONS_VOL_HP+0x154>)
 8006e68:	fb2a 4202 	smlad	r2, sl, r2, r4
 8006e6c:	4927      	ldr	r1, [pc, #156]	; (8006f0c <D48_1CH_HTONS_VOL_HP+0x158>)
 8006e6e:	fb27 2201 	smlad	r2, r7, r1, r2
 8006e72:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006e76:	fb26 2201 	smlad	r2, r6, r1, r2
 8006e7a:	4925      	ldr	r1, [pc, #148]	; (8006f10 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8006e7c:	fb2a 3401 	smlad	r4, sl, r1, r3
 8006e80:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8006e84:	fb27 4403 	smlad	r4, r7, r3, r4
 8006e88:	4b22      	ldr	r3, [pc, #136]	; (8006f14 <D48_1CH_HTONS_VOL_HP+0x160>)
 8006e8a:	fb26 4403 	smlad	r4, r6, r3, r4
 8006e8e:	2101      	movs	r1, #1
 8006e90:	fb2a fa01 	smuad	sl, sl, r1
 8006e94:	4b20      	ldr	r3, [pc, #128]	; (8006f18 <D48_1CH_HTONS_VOL_HP+0x164>)
 8006e96:	fb27 a703 	smlad	r7, r7, r3, sl
 8006e9a:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <D48_1CH_HTONS_VOL_HP+0x168>)
 8006e9c:	fb26 7303 	smlad	r3, r6, r3, r7
 8006ea0:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8006ea4:	9e02      	ldr	r6, [sp, #8]
 8006ea6:	9f01      	ldr	r7, [sp, #4]
 8006ea8:	4410      	add	r0, r2
 8006eaa:	eba0 0009 	sub.w	r0, r0, r9
 8006eae:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8006eb2:	fba0 0106 	umull	r0, r1, r0, r6
 8006eb6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006eba:	fb06 110a 	mla	r1, r6, sl, r1
 8006ebe:	f141 0100 	adc.w	r1, r1, #0
 8006ec2:	0308      	lsls	r0, r1, #12
 8006ec4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8006ec8:	f04f 0a00 	mov.w	sl, #0
 8006ecc:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8006ed0:	4657      	mov	r7, sl
 8006ed2:	10b8      	asrs	r0, r7, #2
 8006ed4:	f300 000f 	ssat	r0, #16, r0
 8006ed8:	f82c 0b02 	strh.w	r0, [ip], #2
 8006edc:	0048      	lsls	r0, r1, #1
 8006ede:	9903      	ldr	r1, [sp, #12]
 8006ee0:	458c      	cmp	ip, r1
 8006ee2:	4691      	mov	r9, r2
 8006ee4:	d185      	bne.n	8006df2 <D48_1CH_HTONS_VOL_HP+0x3e>
 8006ee6:	9d05      	ldr	r5, [sp, #20]
 8006ee8:	616a      	str	r2, [r5, #20]
 8006eea:	9a04      	ldr	r2, [sp, #16]
 8006eec:	6128      	str	r0, [r5, #16]
 8006eee:	2000      	movs	r0, #0
 8006ef0:	60ab      	str	r3, [r5, #8]
 8006ef2:	60ec      	str	r4, [r5, #12]
 8006ef4:	f8c5 e01c 	str.w	lr, [r5, #28]
 8006ef8:	61aa      	str	r2, [r5, #24]
 8006efa:	b007      	add	sp, #28
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	464a      	mov	r2, r9
 8006f02:	e7f0      	b.n	8006ee6 <D48_1CH_HTONS_VOL_HP+0x132>
 8006f04:	20000000 	.word	0x20000000
 8006f08:	000f000a 	.word	0x000f000a
 8006f0c:	00060003 	.word	0x00060003
 8006f10:	00150019 	.word	0x00150019
 8006f14:	00190015 	.word	0x00190015
 8006f18:	00030006 	.word	0x00030006
 8006f1c:	000a000f 	.word	0x000a000f

08006f20 <D64_1CH_HTONS_VOL_HP>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	b089      	sub	sp, #36	; 0x24
 8006f26:	4614      	mov	r4, r2
 8006f28:	9207      	str	r2, [sp, #28]
 8006f2a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006f2c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8006f30:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8006f34:	6992      	ldr	r2, [r2, #24]
 8006f36:	9206      	str	r2, [sp, #24]
 8006f38:	68e2      	ldr	r2, [r4, #12]
 8006f3a:	9201      	str	r2, [sp, #4]
 8006f3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f3e:	9203      	str	r2, [sp, #12]
 8006f40:	6a22      	ldr	r2, [r4, #32]
 8006f42:	69e5      	ldr	r5, [r4, #28]
 8006f44:	68a6      	ldr	r6, [r4, #8]
 8006f46:	9204      	str	r2, [sp, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80b0 	beq.w	80070ae <D64_1CH_HTONS_VOL_HP+0x18e>
 8006f4e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006f52:	4f58      	ldr	r7, [pc, #352]	; (80070b4 <D64_1CH_HTONS_VOL_HP+0x194>)
 8006f54:	9305      	str	r3, [sp, #20]
 8006f56:	9102      	str	r1, [sp, #8]
 8006f58:	f850 2b08 	ldr.w	r2, [r0], #8
 8006f5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006f60:	ba52      	rev16	r2, r2
 8006f62:	fa93 f993 	rev16.w	r9, r3
 8006f66:	b2d4      	uxtb	r4, r2
 8006f68:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006f6c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8006f70:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006f74:	9901      	ldr	r1, [sp, #4]
 8006f76:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006f7a:	0e12      	lsrs	r2, r2, #24
 8006f7c:	44ab      	add	fp, r5
 8006f7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006f82:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8006f86:	fa5f f289 	uxtb.w	r2, r9
 8006f8a:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8006f8e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8006f92:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8006f96:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006f9a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006f9e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8006fa2:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8006fa6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006faa:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8006fae:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8006fb2:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8006fb6:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8006fba:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006fbe:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8006fc2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006fc6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006fca:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fd2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006fd6:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8006fda:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006fde:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8006fe2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006fe6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8006fea:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8006fee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006ff2:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8006ff6:	4b30      	ldr	r3, [pc, #192]	; (80070b8 <D64_1CH_HTONS_VOL_HP+0x198>)
 8006ff8:	fb2b 1303 	smlad	r3, fp, r3, r1
 8006ffc:	492f      	ldr	r1, [pc, #188]	; (80070bc <D64_1CH_HTONS_VOL_HP+0x19c>)
 8006ffe:	fb24 3301 	smlad	r3, r4, r1, r3
 8007002:	492f      	ldr	r1, [pc, #188]	; (80070c0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8007004:	fb22 3301 	smlad	r3, r2, r1, r3
 8007008:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800700c:	fb2e 390a 	smlad	r9, lr, sl, r3
 8007010:	4b2c      	ldr	r3, [pc, #176]	; (80070c4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8007012:	fb2b 6603 	smlad	r6, fp, r3, r6
 8007016:	fb2e 6613 	smladx	r6, lr, r3, r6
 800701a:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800701c:	fb24 6603 	smlad	r6, r4, r3, r6
 8007020:	fb22 6313 	smladx	r3, r2, r3, r6
 8007024:	f04f 0a01 	mov.w	sl, #1
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	fb2b fb0a 	smuad	fp, fp, sl
 800702e:	4b27      	ldr	r3, [pc, #156]	; (80070cc <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8007030:	fb24 ba03 	smlad	sl, r4, r3, fp
 8007034:	4b26      	ldr	r3, [pc, #152]	; (80070d0 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8007036:	fb22 a203 	smlad	r2, r2, r3, sl
 800703a:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800703c:	fb2e 2603 	smlad	r6, lr, r3, r2
 8007040:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8007044:	eb0a 020c 	add.w	r2, sl, ip
 8007048:	9c04      	ldr	r4, [sp, #16]
 800704a:	9903      	ldr	r1, [sp, #12]
 800704c:	eba2 0208 	sub.w	r2, r2, r8
 8007050:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8007054:	fba2 2304 	umull	r2, r3, r2, r4
 8007058:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800705c:	fb04 3309 	mla	r3, r4, r9, r3
 8007060:	f143 0300 	adc.w	r3, r3, #0
 8007064:	02da      	lsls	r2, r3, #11
 8007066:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800706a:	f04f 0900 	mov.w	r9, #0
 800706e:	fbc1 8902 	smlal	r8, r9, r1, r2
 8007072:	9902      	ldr	r1, [sp, #8]
 8007074:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8007078:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800707c:	f302 020f 	ssat	r2, #16, r2
 8007080:	9b05      	ldr	r3, [sp, #20]
 8007082:	f821 2b02 	strh.w	r2, [r1], #2
 8007086:	4299      	cmp	r1, r3
 8007088:	9102      	str	r1, [sp, #8]
 800708a:	46d0      	mov	r8, sl
 800708c:	f47f af64 	bne.w	8006f58 <D64_1CH_HTONS_VOL_HP+0x38>
 8007090:	9a07      	ldr	r2, [sp, #28]
 8007092:	9901      	ldr	r1, [sp, #4]
 8007094:	60d1      	str	r1, [r2, #12]
 8007096:	9906      	ldr	r1, [sp, #24]
 8007098:	6096      	str	r6, [r2, #8]
 800709a:	2000      	movs	r0, #0
 800709c:	61d5      	str	r5, [r2, #28]
 800709e:	f8c2 c010 	str.w	ip, [r2, #16]
 80070a2:	f8c2 a014 	str.w	sl, [r2, #20]
 80070a6:	6191      	str	r1, [r2, #24]
 80070a8:	b009      	add	sp, #36	; 0x24
 80070aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	46c2      	mov	sl, r8
 80070b0:	4622      	mov	r2, r4
 80070b2:	e7ee      	b.n	8007092 <D64_1CH_HTONS_VOL_HP+0x172>
 80070b4:	20000000 	.word	0x20000000
 80070b8:	001c0015 	.word	0x001c0015
 80070bc:	000f000a 	.word	0x000f000a
 80070c0:	00060003 	.word	0x00060003
 80070c4:	0024002a 	.word	0x0024002a
 80070c8:	002e0030 	.word	0x002e0030
 80070cc:	00030006 	.word	0x00030006
 80070d0:	000a000f 	.word	0x000a000f
 80070d4:	0015001c 	.word	0x0015001c

080070d8 <D80_1CH_HTONS_VOL_HP>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	4613      	mov	r3, r2
 80070de:	b089      	sub	sp, #36	; 0x24
 80070e0:	4686      	mov	lr, r0
 80070e2:	6918      	ldr	r0, [r3, #16]
 80070e4:	9000      	str	r0, [sp, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	461c      	mov	r4, r3
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	9302      	str	r3, [sp, #8]
 80070ee:	6983      	ldr	r3, [r0, #24]
 80070f0:	9306      	str	r3, [sp, #24]
 80070f2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80070f6:	69c3      	ldr	r3, [r0, #28]
 80070f8:	68c0      	ldr	r0, [r0, #12]
 80070fa:	9207      	str	r2, [sp, #28]
 80070fc:	9001      	str	r0, [sp, #4]
 80070fe:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8007100:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007102:	9003      	str	r0, [sp, #12]
 8007104:	6a20      	ldr	r0, [r4, #32]
 8007106:	9004      	str	r0, [sp, #16]
 8007108:	2a00      	cmp	r2, #0
 800710a:	f000 80d2 	beq.w	80072b2 <D80_1CH_HTONS_VOL_HP+0x1da>
 800710e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007112:	4869      	ldr	r0, [pc, #420]	; (80072b8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8007114:	9205      	str	r2, [sp, #20]
 8007116:	461c      	mov	r4, r3
 8007118:	f8de 5000 	ldr.w	r5, [lr]
 800711c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007120:	f8de 3008 	ldr.w	r3, [lr, #8]
 8007124:	f10e 0e0a 	add.w	lr, lr, #10
 8007128:	ba6d      	rev16	r5, r5
 800712a:	ba52      	rev16	r2, r2
 800712c:	fa93 fb93 	rev16.w	fp, r3
 8007130:	b2ee      	uxtb	r6, r5
 8007132:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8007136:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800713a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800713e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8007142:	eb04 0a07 	add.w	sl, r4, r7
 8007146:	0e2d      	lsrs	r5, r5, #24
 8007148:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800714c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8007150:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8007154:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8007158:	b2d5      	uxtb	r5, r2
 800715a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800715e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8007162:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8007166:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800716a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800716e:	0e12      	lsrs	r2, r2, #24
 8007170:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8007174:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8007178:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800717c:	fa5f f48b 	uxtb.w	r4, fp
 8007180:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8007184:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8007188:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800718c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8007190:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8007194:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8007198:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800719c:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 80071a0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80071a4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80071a8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80071ac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80071b0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80071b4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80071b8:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80071bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071c0:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80071c4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80071c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80071cc:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80071d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80071d4:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80071d8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80071dc:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80071e0:	4d36      	ldr	r5, [pc, #216]	; (80072bc <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80071e2:	9f01      	ldr	r7, [sp, #4]
 80071e4:	fb23 7505 	smlad	r5, r3, r5, r7
 80071e8:	4f35      	ldr	r7, [pc, #212]	; (80072c0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80071ea:	fb29 5507 	smlad	r5, r9, r7, r5
 80071ee:	4f35      	ldr	r7, [pc, #212]	; (80072c4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80071f0:	fb28 5507 	smlad	r5, r8, r7, r5
 80071f4:	4f34      	ldr	r7, [pc, #208]	; (80072c8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80071f6:	fb22 5507 	smlad	r5, r2, r7, r5
 80071fa:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80071fe:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8007202:	4d32      	ldr	r5, [pc, #200]	; (80072cc <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8007204:	fb23 cc05 	smlad	ip, r3, r5, ip
 8007208:	4d31      	ldr	r5, [pc, #196]	; (80072d0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800720a:	fb29 cc05 	smlad	ip, r9, r5, ip
 800720e:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8007212:	fb28 c505 	smlad	r5, r8, r5, ip
 8007216:	4f2f      	ldr	r7, [pc, #188]	; (80072d4 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8007218:	fb22 5507 	smlad	r5, r2, r7, r5
 800721c:	4f2e      	ldr	r7, [pc, #184]	; (80072d8 <D80_1CH_HTONS_VOL_HP+0x200>)
 800721e:	fb26 5507 	smlad	r5, r6, r7, r5
 8007222:	f04f 0a01 	mov.w	sl, #1
 8007226:	9501      	str	r5, [sp, #4]
 8007228:	fb23 fa0a 	smuad	sl, r3, sl
 800722c:	4b2b      	ldr	r3, [pc, #172]	; (80072dc <D80_1CH_HTONS_VOL_HP+0x204>)
 800722e:	fb29 a903 	smlad	r9, r9, r3, sl
 8007232:	4d2b      	ldr	r5, [pc, #172]	; (80072e0 <D80_1CH_HTONS_VOL_HP+0x208>)
 8007234:	fb28 9805 	smlad	r8, r8, r5, r9
 8007238:	4d2a      	ldr	r5, [pc, #168]	; (80072e4 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800723a:	fb22 8205 	smlad	r2, r2, r5, r8
 800723e:	4b2a      	ldr	r3, [pc, #168]	; (80072e8 <D80_1CH_HTONS_VOL_HP+0x210>)
 8007240:	fb26 2c03 	smlad	ip, r6, r3, r2
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	9d04      	ldr	r5, [sp, #16]
 8007248:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800724c:	4453      	add	r3, sl
 800724e:	461a      	mov	r2, r3
 8007250:	9b02      	ldr	r3, [sp, #8]
 8007252:	f8cd a008 	str.w	sl, [sp, #8]
 8007256:	1ad2      	subs	r2, r2, r3
 8007258:	17d7      	asrs	r7, r2, #31
 800725a:	fba2 2305 	umull	r2, r3, r2, r5
 800725e:	fb05 3307 	mla	r3, r5, r7, r3
 8007262:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8007266:	f143 0300 	adc.w	r3, r3, #0
 800726a:	9d03      	ldr	r5, [sp, #12]
 800726c:	029a      	lsls	r2, r3, #10
 800726e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007272:	2700      	movs	r7, #0
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	fbc5 6702 	smlal	r6, r7, r5, r2
 800727a:	10ba      	asrs	r2, r7, #2
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	f302 020f 	ssat	r2, #16, r2
 8007282:	9b05      	ldr	r3, [sp, #20]
 8007284:	f821 2b02 	strh.w	r2, [r1], #2
 8007288:	4299      	cmp	r1, r3
 800728a:	f47f af45 	bne.w	8007118 <D80_1CH_HTONS_VOL_HP+0x40>
 800728e:	4623      	mov	r3, r4
 8007290:	9907      	ldr	r1, [sp, #28]
 8007292:	9801      	ldr	r0, [sp, #4]
 8007294:	60c8      	str	r0, [r1, #12]
 8007296:	9a00      	ldr	r2, [sp, #0]
 8007298:	f8c1 c008 	str.w	ip, [r1, #8]
 800729c:	4608      	mov	r0, r1
 800729e:	61cb      	str	r3, [r1, #28]
 80072a0:	610a      	str	r2, [r1, #16]
 80072a2:	f8c1 a014 	str.w	sl, [r1, #20]
 80072a6:	9906      	ldr	r1, [sp, #24]
 80072a8:	6181      	str	r1, [r0, #24]
 80072aa:	2000      	movs	r0, #0
 80072ac:	b009      	add	sp, #36	; 0x24
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80072b6:	e7eb      	b.n	8007290 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80072b8:	20000000 	.word	0x20000000
 80072bc:	002d0024 	.word	0x002d0024
 80072c0:	001c0015 	.word	0x001c0015
 80072c4:	000f000a 	.word	0x000f000a
 80072c8:	00060003 	.word	0x00060003
 80072cc:	0037003f 	.word	0x0037003f
 80072d0:	00450049 	.word	0x00450049
 80072d4:	00490045 	.word	0x00490045
 80072d8:	003f0037 	.word	0x003f0037
 80072dc:	00030006 	.word	0x00030006
 80072e0:	000a000f 	.word	0x000a000f
 80072e4:	0015001c 	.word	0x0015001c
 80072e8:	0024002d 	.word	0x0024002d

080072ec <D128_1CH_HTONS_VOL_HP>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	b093      	sub	sp, #76	; 0x4c
 80072f2:	4614      	mov	r4, r2
 80072f4:	9211      	str	r2, [sp, #68]	; 0x44
 80072f6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80072f8:	6912      	ldr	r2, [r2, #16]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	4622      	mov	r2, r4
 80072fe:	4615      	mov	r5, r2
 8007300:	6964      	ldr	r4, [r4, #20]
 8007302:	9406      	str	r4, [sp, #24]
 8007304:	4614      	mov	r4, r2
 8007306:	6992      	ldr	r2, [r2, #24]
 8007308:	9210      	str	r2, [sp, #64]	; 0x40
 800730a:	68ea      	ldr	r2, [r5, #12]
 800730c:	9204      	str	r2, [sp, #16]
 800730e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007310:	69e6      	ldr	r6, [r4, #28]
 8007312:	920d      	str	r2, [sp, #52]	; 0x34
 8007314:	68a4      	ldr	r4, [r4, #8]
 8007316:	6a2a      	ldr	r2, [r5, #32]
 8007318:	9405      	str	r4, [sp, #20]
 800731a:	920e      	str	r2, [sp, #56]	; 0x38
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8145 	beq.w	80075ac <D128_1CH_HTONS_VOL_HP+0x2c0>
 8007322:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007326:	930f      	str	r3, [sp, #60]	; 0x3c
 8007328:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8007608 <D128_1CH_HTONS_VOL_HP+0x31c>
 800732c:	9107      	str	r1, [sp, #28]
 800732e:	f100 0310 	add.w	r3, r0, #16
 8007332:	4699      	mov	r9, r3
 8007334:	f1a9 0110 	sub.w	r1, r9, #16
 8007338:	c90e      	ldmia	r1, {r1, r2, r3}
 800733a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800733e:	ba49      	rev16	r1, r1
 8007340:	ba52      	rev16	r2, r2
 8007342:	ba5b      	rev16	r3, r3
 8007344:	fa90 fa90 	rev16.w	sl, r0
 8007348:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800734c:	b2cc      	uxtb	r4, r1
 800734e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8007352:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8007356:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800735a:	0e09      	lsrs	r1, r1, #24
 800735c:	4426      	add	r6, r4
 800735e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8007362:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8007366:	b2d0      	uxtb	r0, r2
 8007368:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800736c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8007370:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007374:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8007378:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800737c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8007380:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8007384:	0e12      	lsrs	r2, r2, #24
 8007386:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800738a:	9701      	str	r7, [sp, #4]
 800738c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8007390:	4627      	mov	r7, r4
 8007392:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8007396:	9702      	str	r7, [sp, #8]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800739e:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 80073a2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80073a6:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80073aa:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80073ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80073b2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80073b6:	0e1b      	lsrs	r3, r3, #24
 80073b8:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80073bc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80073c0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80073c4:	fa5f f38a 	uxtb.w	r3, sl
 80073c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80073cc:	960a      	str	r6, [sp, #40]	; 0x28
 80073ce:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80073d2:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80073d6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80073da:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80073de:	950b      	str	r5, [sp, #44]	; 0x2c
 80073e0:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80073e4:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80073e8:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80073ec:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80073f0:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80073f4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80073f8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80073fc:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8007400:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8007404:	9308      	str	r3, [sp, #32]
 8007406:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007410:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007414:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007426:	9308      	str	r3, [sp, #32]
 8007428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800742a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800742e:	950c      	str	r5, [sp, #48]	; 0x30
 8007430:	461d      	mov	r5, r3
 8007432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007434:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007438:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800743c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8007440:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	9202      	str	r2, [sp, #8]
 800744a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800744c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800744e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007452:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007456:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800745a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800745e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8007462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007466:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800746a:	9b08      	ldr	r3, [sp, #32]
 800746c:	9f01      	ldr	r7, [sp, #4]
 800746e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007472:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007476:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800747a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800747e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007482:	46be      	mov	lr, r7
 8007484:	0a96      	lsrs	r6, r2, #10
 8007486:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800748a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800748e:	4f49      	ldr	r7, [pc, #292]	; (80075b4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8007490:	9a04      	ldr	r2, [sp, #16]
 8007492:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8007496:	4a48      	ldr	r2, [pc, #288]	; (80075b8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8007498:	fb2a ee02 	smlad	lr, sl, r2, lr
 800749c:	4a47      	ldr	r2, [pc, #284]	; (80075bc <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800749e:	fb21 ee02 	smlad	lr, r1, r2, lr
 80074a2:	4a47      	ldr	r2, [pc, #284]	; (80075c0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80074a4:	fb24 ee02 	smlad	lr, r4, r2, lr
 80074a8:	4a46      	ldr	r2, [pc, #280]	; (80075c4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80074aa:	9f02      	ldr	r7, [sp, #8]
 80074ac:	fb27 ee02 	smlad	lr, r7, r2, lr
 80074b0:	4a45      	ldr	r2, [pc, #276]	; (80075c8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80074b2:	fb20 ee02 	smlad	lr, r0, r2, lr
 80074b6:	4a45      	ldr	r2, [pc, #276]	; (80075cc <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80074b8:	fb23 e702 	smlad	r7, r3, r2, lr
 80074bc:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80074c0:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80074c4:	9f01      	ldr	r7, [sp, #4]
 80074c6:	4a42      	ldr	r2, [pc, #264]	; (80075d0 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80074c8:	46bc      	mov	ip, r7
 80074ca:	9f05      	ldr	r7, [sp, #20]
 80074cc:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80074d0:	4a40      	ldr	r2, [pc, #256]	; (80075d4 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80074d2:	fb2a cc02 	smlad	ip, sl, r2, ip
 80074d6:	4f40      	ldr	r7, [pc, #256]	; (80075d8 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80074d8:	fb21 cc07 	smlad	ip, r1, r7, ip
 80074dc:	4f3f      	ldr	r7, [pc, #252]	; (80075dc <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80074de:	fb24 cc07 	smlad	ip, r4, r7, ip
 80074e2:	4f3f      	ldr	r7, [pc, #252]	; (80075e0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80074e4:	9a02      	ldr	r2, [sp, #8]
 80074e6:	fb22 cc07 	smlad	ip, r2, r7, ip
 80074ea:	4f3e      	ldr	r7, [pc, #248]	; (80075e4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80074ec:	fb20 cc07 	smlad	ip, r0, r7, ip
 80074f0:	4f3d      	ldr	r7, [pc, #244]	; (80075e8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80074f2:	fb23 c707 	smlad	r7, r3, r7, ip
 80074f6:	f8df c114 	ldr.w	ip, [pc, #276]	; 800760c <D128_1CH_HTONS_VOL_HP+0x320>
 80074fa:	fb25 720c 	smlad	r2, r5, ip, r7
 80074fe:	f04f 0b01 	mov.w	fp, #1
 8007502:	9204      	str	r2, [sp, #16]
 8007504:	9f01      	ldr	r7, [sp, #4]
 8007506:	fb27 fb0b 	smuad	fp, r7, fp
 800750a:	4f38      	ldr	r7, [pc, #224]	; (80075ec <D128_1CH_HTONS_VOL_HP+0x300>)
 800750c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8007510:	4f37      	ldr	r7, [pc, #220]	; (80075f0 <D128_1CH_HTONS_VOL_HP+0x304>)
 8007512:	fb21 aa07 	smlad	sl, r1, r7, sl
 8007516:	4f37      	ldr	r7, [pc, #220]	; (80075f4 <D128_1CH_HTONS_VOL_HP+0x308>)
 8007518:	fb24 aa07 	smlad	sl, r4, r7, sl
 800751c:	4f36      	ldr	r7, [pc, #216]	; (80075f8 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800751e:	9a02      	ldr	r2, [sp, #8]
 8007520:	fb22 a707 	smlad	r7, r2, r7, sl
 8007524:	4a35      	ldr	r2, [pc, #212]	; (80075fc <D128_1CH_HTONS_VOL_HP+0x310>)
 8007526:	fb20 7702 	smlad	r7, r0, r2, r7
 800752a:	4a35      	ldr	r2, [pc, #212]	; (8007600 <D128_1CH_HTONS_VOL_HP+0x314>)
 800752c:	fb23 7702 	smlad	r7, r3, r2, r7
 8007530:	4b34      	ldr	r3, [pc, #208]	; (8007604 <D128_1CH_HTONS_VOL_HP+0x318>)
 8007532:	fb25 7303 	smlad	r3, r5, r3, r7
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800753c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8007540:	4473      	add	r3, lr
 8007542:	461a      	mov	r2, r3
 8007544:	9b06      	ldr	r3, [sp, #24]
 8007546:	f8cd e018 	str.w	lr, [sp, #24]
 800754a:	1ad2      	subs	r2, r2, r3
 800754c:	17d1      	asrs	r1, r2, #31
 800754e:	fba2 2304 	umull	r2, r3, r2, r4
 8007552:	fb04 3301 	mla	r3, r4, r1, r3
 8007556:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800755a:	f143 0300 	adc.w	r3, r3, #0
 800755e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007560:	021a      	lsls	r2, r3, #8
 8007562:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007566:	2100      	movs	r1, #0
 8007568:	fbc4 0102 	smlal	r0, r1, r4, r2
 800756c:	108a      	asrs	r2, r1, #2
 800756e:	9907      	ldr	r1, [sp, #28]
 8007570:	f302 020f 	ssat	r2, #16, r2
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	f821 2b02 	strh.w	r2, [r1], #2
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800757e:	9107      	str	r1, [sp, #28]
 8007580:	4299      	cmp	r1, r3
 8007582:	f109 0910 	add.w	r9, r9, #16
 8007586:	f47f aed5 	bne.w	8007334 <D128_1CH_HTONS_VOL_HP+0x48>
 800758a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800758c:	9905      	ldr	r1, [sp, #20]
 800758e:	6091      	str	r1, [r2, #8]
 8007590:	9904      	ldr	r1, [sp, #16]
 8007592:	60d1      	str	r1, [r2, #12]
 8007594:	4613      	mov	r3, r2
 8007596:	61d6      	str	r6, [r2, #28]
 8007598:	9910      	ldr	r1, [sp, #64]	; 0x40
 800759a:	9a03      	ldr	r2, [sp, #12]
 800759c:	611a      	str	r2, [r3, #16]
 800759e:	2000      	movs	r0, #0
 80075a0:	f8c3 e014 	str.w	lr, [r3, #20]
 80075a4:	6199      	str	r1, [r3, #24]
 80075a6:	b013      	add	sp, #76	; 0x4c
 80075a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ac:	f8dd e018 	ldr.w	lr, [sp, #24]
 80075b0:	e7eb      	b.n	800758a <D128_1CH_HTONS_VOL_HP+0x29e>
 80075b2:	bf00      	nop
 80075b4:	00780069 	.word	0x00780069
 80075b8:	005b004e 	.word	0x005b004e
 80075bc:	00420037 	.word	0x00420037
 80075c0:	002d0024 	.word	0x002d0024
 80075c4:	001c0015 	.word	0x001c0015
 80075c8:	000f000a 	.word	0x000f000a
 80075cc:	00060003 	.word	0x00060003
 80075d0:	00880096 	.word	0x00880096
 80075d4:	00a200ac 	.word	0x00a200ac
 80075d8:	00b400ba 	.word	0x00b400ba
 80075dc:	00be00c0 	.word	0x00be00c0
 80075e0:	00c000be 	.word	0x00c000be
 80075e4:	00ba00b4 	.word	0x00ba00b4
 80075e8:	00ac00a2 	.word	0x00ac00a2
 80075ec:	00030006 	.word	0x00030006
 80075f0:	000a000f 	.word	0x000a000f
 80075f4:	0015001c 	.word	0x0015001c
 80075f8:	0024002d 	.word	0x0024002d
 80075fc:	00370042 	.word	0x00370042
 8007600:	004e005b 	.word	0x004e005b
 8007604:	00690078 	.word	0x00690078
 8007608:	20000000 	.word	0x20000000
 800760c:	00960088 	.word	0x00960088

08007610 <PDM_Filter_Init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	2240      	movs	r2, #64	; 0x40
 8007614:	4604      	mov	r4, r0
 8007616:	2100      	movs	r1, #0
 8007618:	300c      	adds	r0, #12
 800761a:	f004 f931 	bl	800b880 <memset>
 800761e:	493b      	ldr	r1, [pc, #236]	; (800770c <PDM_Filter_Init+0xfc>)
 8007620:	483b      	ldr	r0, [pc, #236]	; (8007710 <PDM_Filter_Init+0x100>)
 8007622:	f000 f98d 	bl	8007940 <CRC_Lock>
 8007626:	8822      	ldrh	r2, [r4, #0]
 8007628:	8963      	ldrh	r3, [r4, #10]
 800762a:	4938      	ldr	r1, [pc, #224]	; (800770c <PDM_Filter_Init+0xfc>)
 800762c:	8925      	ldrh	r5, [r4, #8]
 800762e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8007630:	2801      	cmp	r0, #1
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	bf18      	it	ne
 8007638:	2100      	movne	r1, #0
 800763a:	2a01      	cmp	r2, #1
 800763c:	6461      	str	r1, [r4, #68]	; 0x44
 800763e:	86e5      	strh	r5, [r4, #54]	; 0x36
 8007640:	61a3      	str	r3, [r4, #24]
 8007642:	6123      	str	r3, [r4, #16]
 8007644:	6163      	str	r3, [r4, #20]
 8007646:	60e3      	str	r3, [r4, #12]
 8007648:	6263      	str	r3, [r4, #36]	; 0x24
 800764a:	61e3      	str	r3, [r4, #28]
 800764c:	6223      	str	r3, [r4, #32]
 800764e:	6423      	str	r3, [r4, #64]	; 0x40
 8007650:	d918      	bls.n	8007684 <PDM_Filter_Init+0x74>
 8007652:	2003      	movs	r0, #3
 8007654:	2302      	movs	r3, #2
 8007656:	8862      	ldrh	r2, [r4, #2]
 8007658:	2a01      	cmp	r2, #1
 800765a:	d91d      	bls.n	8007698 <PDM_Filter_Init+0x88>
 800765c:	2140      	movs	r1, #64	; 0x40
 800765e:	2300      	movs	r3, #0
 8007660:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007662:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8007666:	6862      	ldr	r2, [r4, #4]
 8007668:	bf04      	itt	eq
 800766a:	6421      	streq	r1, [r4, #64]	; 0x40
 800766c:	460b      	moveq	r3, r1
 800766e:	b11a      	cbz	r2, 8007678 <PDM_Filter_Init+0x68>
 8007670:	f043 0310 	orr.w	r3, r3, #16
 8007674:	6423      	str	r3, [r4, #64]	; 0x40
 8007676:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007678:	2200      	movs	r2, #0
 800767a:	8722      	strh	r2, [r4, #56]	; 0x38
 800767c:	b908      	cbnz	r0, 8007682 <PDM_Filter_Init+0x72>
 800767e:	3380      	adds	r3, #128	; 0x80
 8007680:	6423      	str	r3, [r4, #64]	; 0x40
 8007682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007684:	4d23      	ldr	r5, [pc, #140]	; (8007714 <PDM_Filter_Init+0x104>)
 8007686:	d010      	beq.n	80076aa <PDM_Filter_Init+0x9a>
 8007688:	782a      	ldrb	r2, [r5, #0]
 800768a:	2a01      	cmp	r2, #1
 800768c:	d027      	beq.n	80076de <PDM_Filter_Init+0xce>
 800768e:	8862      	ldrh	r2, [r4, #2]
 8007690:	2a01      	cmp	r2, #1
 8007692:	f04f 0001 	mov.w	r0, #1
 8007696:	d8e1      	bhi.n	800765c <PDM_Filter_Init+0x4c>
 8007698:	d001      	beq.n	800769e <PDM_Filter_Init+0x8e>
 800769a:	4618      	mov	r0, r3
 800769c:	e7de      	b.n	800765c <PDM_Filter_Init+0x4c>
 800769e:	2220      	movs	r2, #32
 80076a0:	4618      	mov	r0, r3
 80076a2:	6422      	str	r2, [r4, #64]	; 0x40
 80076a4:	4613      	mov	r3, r2
 80076a6:	2160      	movs	r1, #96	; 0x60
 80076a8:	e7da      	b.n	8007660 <PDM_Filter_Init+0x50>
 80076aa:	7829      	ldrb	r1, [r5, #0]
 80076ac:	2900      	cmp	r1, #0
 80076ae:	d1ee      	bne.n	800768e <PDM_Filter_Init+0x7e>
 80076b0:	4919      	ldr	r1, [pc, #100]	; (8007718 <PDM_Filter_Init+0x108>)
 80076b2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8007720 <PDM_Filter_Init+0x110>
 80076b6:	4f19      	ldr	r7, [pc, #100]	; (800771c <PDM_Filter_Init+0x10c>)
 80076b8:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80076bc:	684a      	ldr	r2, [r1, #4]
 80076be:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80076c2:	ea02 0007 	and.w	r0, r2, r7
 80076c6:	4303      	orrs	r3, r0
 80076c8:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80076cc:	4413      	add	r3, r2
 80076ce:	f841 3f04 	str.w	r3, [r1, #4]!
 80076d2:	428e      	cmp	r6, r1
 80076d4:	d1f2      	bne.n	80076bc <PDM_Filter_Init+0xac>
 80076d6:	2001      	movs	r0, #1
 80076d8:	7028      	strb	r0, [r5, #0]
 80076da:	2300      	movs	r3, #0
 80076dc:	e7bb      	b.n	8007656 <PDM_Filter_Init+0x46>
 80076de:	490e      	ldr	r1, [pc, #56]	; (8007718 <PDM_Filter_Init+0x108>)
 80076e0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8007720 <PDM_Filter_Init+0x110>
 80076e4:	4f0d      	ldr	r7, [pc, #52]	; (800771c <PDM_Filter_Init+0x10c>)
 80076e6:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80076ea:	684a      	ldr	r2, [r1, #4]
 80076ec:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80076f0:	ea02 0007 	and.w	r0, r2, r7
 80076f4:	4303      	orrs	r3, r0
 80076f6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80076fa:	4413      	add	r3, r2
 80076fc:	f841 3f04 	str.w	r3, [r1, #4]!
 8007700:	428e      	cmp	r6, r1
 8007702:	d1f2      	bne.n	80076ea <PDM_Filter_Init+0xda>
 8007704:	2300      	movs	r3, #0
 8007706:	702b      	strb	r3, [r5, #0]
 8007708:	e7c1      	b.n	800768e <PDM_Filter_Init+0x7e>
 800770a:	bf00      	nop
 800770c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007710:	f407a5c2 	.word	0xf407a5c2
 8007714:	20001038 	.word	0x20001038
 8007718:	1ffffffc 	.word	0x1ffffffc
 800771c:	000ffc00 	.word	0x000ffc00
 8007720:	3ff00000 	.word	0x3ff00000

08007724 <PDM_Filter_setConfig>:
 8007724:	4b66      	ldr	r3, [pc, #408]	; (80078c0 <PDM_Filter_setConfig+0x19c>)
 8007726:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007728:	429a      	cmp	r2, r3
 800772a:	d001      	beq.n	8007730 <PDM_Filter_setConfig+0xc>
 800772c:	2004      	movs	r0, #4
 800772e:	4770      	bx	lr
 8007730:	b530      	push	{r4, r5, lr}
 8007732:	880a      	ldrh	r2, [r1, #0]
 8007734:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007736:	ed2d 8b04 	vpush	{d8-d9}
 800773a:	4604      	mov	r4, r0
 800773c:	460d      	mov	r5, r1
 800773e:	1e51      	subs	r1, r2, #1
 8007740:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8007744:	2906      	cmp	r1, #6
 8007746:	b083      	sub	sp, #12
 8007748:	6420      	str	r0, [r4, #64]	; 0x40
 800774a:	d91a      	bls.n	8007782 <PDM_Filter_setConfig+0x5e>
 800774c:	2008      	movs	r0, #8
 800774e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8007752:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007756:	4299      	cmp	r1, r3
 8007758:	d07e      	beq.n	8007858 <PDM_Filter_setConfig+0x134>
 800775a:	f113 0f0c 	cmn.w	r3, #12
 800775e:	da2a      	bge.n	80077b6 <PDM_Filter_setConfig+0x92>
 8007760:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8007764:	3040      	adds	r0, #64	; 0x40
 8007766:	80ab      	strh	r3, [r5, #4]
 8007768:	8622      	strh	r2, [r4, #48]	; 0x30
 800776a:	886b      	ldrh	r3, [r5, #2]
 800776c:	8663      	strh	r3, [r4, #50]	; 0x32
 800776e:	b920      	cbnz	r0, 800777a <PDM_Filter_setConfig+0x56>
 8007770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007776:	6423      	str	r3, [r4, #64]	; 0x40
 8007778:	2000      	movs	r0, #0
 800777a:	b003      	add	sp, #12
 800777c:	ecbd 8b04 	vpop	{d8-d9}
 8007780:	bd30      	pop	{r4, r5, pc}
 8007782:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8007784:	4291      	cmp	r1, r2
 8007786:	d06c      	beq.n	8007862 <PDM_Filter_setConfig+0x13e>
 8007788:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	4313      	orrs	r3, r2
 8007792:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8007796:	6423      	str	r3, [r4, #64]	; 0x40
 8007798:	2970      	cmp	r1, #112	; 0x70
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	f103 33ff 	add.w	r3, r3, #4294967295
 80077a2:	d066      	beq.n	8007872 <PDM_Filter_setConfig+0x14e>
 80077a4:	2b06      	cmp	r3, #6
 80077a6:	f200 8089 	bhi.w	80078bc <PDM_Filter_setConfig+0x198>
 80077aa:	e8df f003 	tbb	[pc, r3]
 80077ae:	4f52      	.short	0x4f52
 80077b0:	3d43494c 	.word	0x3d43494c
 80077b4:	46          	.byte	0x46
 80077b5:	00          	.byte	0x00
 80077b6:	2b33      	cmp	r3, #51	; 0x33
 80077b8:	dc32      	bgt.n	8007820 <PDM_Filter_setConfig+0xfc>
 80077ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80077bc:	f002 020f 	and.w	r2, r2, #15
 80077c0:	3a01      	subs	r2, #1
 80077c2:	2a06      	cmp	r2, #6
 80077c4:	d872      	bhi.n	80078ac <PDM_Filter_setConfig+0x188>
 80077c6:	493f      	ldr	r1, [pc, #252]	; (80078c4 <PDM_Filter_setConfig+0x1a0>)
 80077c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80077cc:	ed92 9a00 	vldr	s18, [r2]
 80077d0:	ed92 8a07 	vldr	s16, [r2, #28]
 80077d4:	9001      	str	r0, [sp, #4]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077de:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80077e2:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 80077e6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80077ea:	f008 fdc3 	bl	8010374 <powf>
 80077ee:	eddf 0a36 	vldr	s1, [pc, #216]	; 80078c8 <PDM_Filter_setConfig+0x1a4>
 80077f2:	eef0 8a40 	vmov.f32	s17, s0
 80077f6:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80077fa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80077fe:	f008 fdb9 	bl	8010374 <powf>
 8007802:	ee28 8a28 	vmul.f32	s16, s16, s17
 8007806:	ee28 0a00 	vmul.f32	s0, s16, s0
 800780a:	f008 fcd1 	bl	80101b0 <roundf>
 800780e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8007812:	88ab      	ldrh	r3, [r5, #4]
 8007814:	882a      	ldrh	r2, [r5, #0]
 8007816:	9801      	ldr	r0, [sp, #4]
 8007818:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800781c:	8723      	strh	r3, [r4, #56]	; 0x38
 800781e:	e7a3      	b.n	8007768 <PDM_Filter_setConfig+0x44>
 8007820:	2333      	movs	r3, #51	; 0x33
 8007822:	3040      	adds	r0, #64	; 0x40
 8007824:	80ab      	strh	r3, [r5, #4]
 8007826:	e79f      	b.n	8007768 <PDM_Filter_setConfig+0x44>
 8007828:	4b28      	ldr	r3, [pc, #160]	; (80078cc <PDM_Filter_setConfig+0x1a8>)
 800782a:	64a3      	str	r3, [r4, #72]	; 0x48
 800782c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007830:	2000      	movs	r0, #0
 8007832:	e792      	b.n	800775a <PDM_Filter_setConfig+0x36>
 8007834:	4b26      	ldr	r3, [pc, #152]	; (80078d0 <PDM_Filter_setConfig+0x1ac>)
 8007836:	64a3      	str	r3, [r4, #72]	; 0x48
 8007838:	e7f8      	b.n	800782c <PDM_Filter_setConfig+0x108>
 800783a:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <PDM_Filter_setConfig+0x1b0>)
 800783c:	64a3      	str	r3, [r4, #72]	; 0x48
 800783e:	e7f5      	b.n	800782c <PDM_Filter_setConfig+0x108>
 8007840:	4b25      	ldr	r3, [pc, #148]	; (80078d8 <PDM_Filter_setConfig+0x1b4>)
 8007842:	64a3      	str	r3, [r4, #72]	; 0x48
 8007844:	e7f2      	b.n	800782c <PDM_Filter_setConfig+0x108>
 8007846:	4b25      	ldr	r3, [pc, #148]	; (80078dc <PDM_Filter_setConfig+0x1b8>)
 8007848:	64a3      	str	r3, [r4, #72]	; 0x48
 800784a:	e7ef      	b.n	800782c <PDM_Filter_setConfig+0x108>
 800784c:	4b24      	ldr	r3, [pc, #144]	; (80078e0 <PDM_Filter_setConfig+0x1bc>)
 800784e:	64a3      	str	r3, [r4, #72]	; 0x48
 8007850:	e7ec      	b.n	800782c <PDM_Filter_setConfig+0x108>
 8007852:	4b24      	ldr	r3, [pc, #144]	; (80078e4 <PDM_Filter_setConfig+0x1c0>)
 8007854:	64a3      	str	r3, [r4, #72]	; 0x48
 8007856:	e7e9      	b.n	800782c <PDM_Filter_setConfig+0x108>
 8007858:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800785a:	4291      	cmp	r1, r2
 800785c:	f47f af7d 	bne.w	800775a <PDM_Filter_setConfig+0x36>
 8007860:	e783      	b.n	800776a <PDM_Filter_setConfig+0x46>
 8007862:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007866:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800786a:	4299      	cmp	r1, r3
 800786c:	d023      	beq.n	80078b6 <PDM_Filter_setConfig+0x192>
 800786e:	2000      	movs	r0, #0
 8007870:	e773      	b.n	800775a <PDM_Filter_setConfig+0x36>
 8007872:	2b06      	cmp	r3, #6
 8007874:	d822      	bhi.n	80078bc <PDM_Filter_setConfig+0x198>
 8007876:	e8df f003 	tbb	[pc, r3]
 800787a:	1316      	.short	0x1316
 800787c:	070a0d10 	.word	0x070a0d10
 8007880:	04          	.byte	0x04
 8007881:	00          	.byte	0x00
 8007882:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <PDM_Filter_setConfig+0x1c4>)
 8007884:	64a3      	str	r3, [r4, #72]	; 0x48
 8007886:	e7d1      	b.n	800782c <PDM_Filter_setConfig+0x108>
 8007888:	4b18      	ldr	r3, [pc, #96]	; (80078ec <PDM_Filter_setConfig+0x1c8>)
 800788a:	64a3      	str	r3, [r4, #72]	; 0x48
 800788c:	e7ce      	b.n	800782c <PDM_Filter_setConfig+0x108>
 800788e:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <PDM_Filter_setConfig+0x1cc>)
 8007890:	64a3      	str	r3, [r4, #72]	; 0x48
 8007892:	e7cb      	b.n	800782c <PDM_Filter_setConfig+0x108>
 8007894:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <PDM_Filter_setConfig+0x1d0>)
 8007896:	64a3      	str	r3, [r4, #72]	; 0x48
 8007898:	e7c8      	b.n	800782c <PDM_Filter_setConfig+0x108>
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <PDM_Filter_setConfig+0x1d4>)
 800789c:	64a3      	str	r3, [r4, #72]	; 0x48
 800789e:	e7c5      	b.n	800782c <PDM_Filter_setConfig+0x108>
 80078a0:	4b16      	ldr	r3, [pc, #88]	; (80078fc <PDM_Filter_setConfig+0x1d8>)
 80078a2:	64a3      	str	r3, [r4, #72]	; 0x48
 80078a4:	e7c2      	b.n	800782c <PDM_Filter_setConfig+0x108>
 80078a6:	4b16      	ldr	r3, [pc, #88]	; (8007900 <PDM_Filter_setConfig+0x1dc>)
 80078a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80078aa:	e7bf      	b.n	800782c <PDM_Filter_setConfig+0x108>
 80078ac:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8007904 <PDM_Filter_setConfig+0x1e0>
 80078b0:	eeb0 9a48 	vmov.f32	s18, s16
 80078b4:	e78e      	b.n	80077d4 <PDM_Filter_setConfig+0xb0>
 80078b6:	886b      	ldrh	r3, [r5, #2]
 80078b8:	8663      	strh	r3, [r4, #50]	; 0x32
 80078ba:	e759      	b.n	8007770 <PDM_Filter_setConfig+0x4c>
 80078bc:	2000      	movs	r0, #0
 80078be:	e746      	b.n	800774e <PDM_Filter_setConfig+0x2a>
 80078c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80078c4:	080121b0 	.word	0x080121b0
 80078c8:	42000000 	.word	0x42000000
 80078cc:	08005c91 	.word	0x08005c91
 80078d0:	08005b71 	.word	0x08005b71
 80078d4:	08005e21 	.word	0x08005e21
 80078d8:	08006665 	.word	0x08006665
 80078dc:	080063c5 	.word	0x080063c5
 80078e0:	080061a5 	.word	0x080061a5
 80078e4:	08005fb9 	.word	0x08005fb9
 80078e8:	08006c71 	.word	0x08006c71
 80078ec:	08006b39 	.word	0x08006b39
 80078f0:	08006a55 	.word	0x08006a55
 80078f4:	080072ed 	.word	0x080072ed
 80078f8:	080070d9 	.word	0x080070d9
 80078fc:	08006f21 	.word	0x08006f21
 8007900:	08006db5 	.word	0x08006db5
 8007904:	00000000 	.word	0x00000000

08007908 <PDM_Filter>:
 8007908:	b410      	push	{r4}
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <PDM_Filter+0x34>)
 800790c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800790e:	429c      	cmp	r4, r3
 8007910:	d003      	beq.n	800791a <PDM_Filter+0x12>
 8007912:	2004      	movs	r0, #4
 8007914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800791c:	05dc      	lsls	r4, r3, #23
 800791e:	d407      	bmi.n	8007930 <PDM_Filter+0x28>
 8007920:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007924:	bf14      	ite	ne
 8007926:	2020      	movne	r0, #32
 8007928:	2030      	moveq	r0, #48	; 0x30
 800792a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8007932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007936:	320c      	adds	r2, #12
 8007938:	4718      	bx	r3
 800793a:	bf00      	nop
 800793c:	b5e8b5cd 	.word	0xb5e8b5cd

08007940 <CRC_Lock>:
 8007940:	4a17      	ldr	r2, [pc, #92]	; (80079a0 <CRC_Lock+0x60>)
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	b410      	push	{r4}
 8007946:	f023 0301 	bic.w	r3, r3, #1
 800794a:	4c16      	ldr	r4, [pc, #88]	; (80079a4 <CRC_Lock+0x64>)
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	b933      	cbnz	r3, 8007960 <CRC_Lock+0x20>
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <CRC_Lock+0x68>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800795a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800795e:	d00f      	beq.n	8007980 <CRC_Lock+0x40>
 8007960:	4a12      	ldr	r2, [pc, #72]	; (80079ac <CRC_Lock+0x6c>)
 8007962:	2301      	movs	r3, #1
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	6813      	ldr	r3, [r2, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1fc      	bne.n	8007966 <CRC_Lock+0x26>
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <CRC_Lock+0x70>)
 800796e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007972:	6018      	str	r0, [r3, #0]
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	1a08      	subs	r0, r1, r0
 8007978:	fab0 f080 	clz	r0, r0
 800797c:	0940      	lsrs	r0, r0, #5
 800797e:	4770      	bx	lr
 8007980:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <CRC_Lock+0x74>)
 8007982:	2301      	movs	r3, #1
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1fc      	bne.n	8007986 <CRC_Lock+0x46>
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <CRC_Lock+0x78>)
 800798e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007992:	6018      	str	r0, [r3, #0]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	1a40      	subs	r0, r0, r1
 8007998:	fab0 f080 	clz	r0, r0
 800799c:	0940      	lsrs	r0, r0, #5
 800799e:	4770      	bx	lr
 80079a0:	e0002000 	.word	0xe0002000
 80079a4:	e0042000 	.word	0xe0042000
 80079a8:	5c001000 	.word	0x5c001000
 80079ac:	40023008 	.word	0x40023008
 80079b0:	40023000 	.word	0x40023000
 80079b4:	58024c08 	.word	0x58024c08
 80079b8:	58024c00 	.word	0x58024c00

080079bc <_ai_platform_acquire_crc>:
 80079bc:	2001      	movs	r0, #1
 80079be:	4770      	bx	lr

080079c0 <_ai_platform_release_crc>:
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop

080079c4 <ai_platform_get_weights_map>:
 80079c4:	b132      	cbz	r2, 80079d4 <ai_platform_get_weights_map+0x10>
 80079c6:	6912      	ldr	r2, [r2, #16]
 80079c8:	b122      	cbz	r2, 80079d4 <ai_platform_get_weights_map+0x10>
 80079ca:	b110      	cbz	r0, 80079d2 <ai_platform_get_weights_map+0xe>
 80079cc:	b921      	cbnz	r1, 80079d8 <ai_platform_get_weights_map+0x14>
 80079ce:	4608      	mov	r0, r1
 80079d0:	4770      	bx	lr
 80079d2:	4770      	bx	lr
 80079d4:	4610      	mov	r0, r2
 80079d6:	4770      	bx	lr
 80079d8:	b470      	push	{r4, r5, r6}
 80079da:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <ai_platform_get_weights_map+0x64>)
 80079dc:	6815      	ldr	r5, [r2, #0]
 80079de:	429d      	cmp	r5, r3
 80079e0:	d007      	beq.n	80079f2 <ai_platform_get_weights_map+0x2e>
 80079e2:	6002      	str	r2, [r0, #0]
 80079e4:	f1a1 0001 	sub.w	r0, r1, #1
 80079e8:	fab0 f080 	clz	r0, r0
 80079ec:	0940      	lsrs	r0, r0, #5
 80079ee:	bc70      	pop	{r4, r5, r6}
 80079f0:	4770      	bx	lr
 80079f2:	6854      	ldr	r4, [r2, #4]
 80079f4:	42ac      	cmp	r4, r5
 80079f6:	f102 0204 	add.w	r2, r2, #4
 80079fa:	d011      	beq.n	8007a20 <ai_platform_get_weights_map+0x5c>
 80079fc:	1f03      	subs	r3, r0, #4
 80079fe:	4616      	mov	r6, r2
 8007a00:	2000      	movs	r0, #0
 8007a02:	e003      	b.n	8007a0c <ai_platform_get_weights_map+0x48>
 8007a04:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8007a08:	42ac      	cmp	r4, r5
 8007a0a:	d009      	beq.n	8007a20 <ai_platform_get_weights_map+0x5c>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	4281      	cmp	r1, r0
 8007a10:	f843 4f04 	str.w	r4, [r3, #4]!
 8007a14:	d1f6      	bne.n	8007a04 <ai_platform_get_weights_map+0x40>
 8007a16:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007a1a:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <ai_platform_get_weights_map+0x64>)
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d001      	beq.n	8007a24 <ai_platform_get_weights_map+0x60>
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7e4      	b.n	80079ee <ai_platform_get_weights_map+0x2a>
 8007a24:	2001      	movs	r0, #1
 8007a26:	e7e2      	b.n	80079ee <ai_platform_get_weights_map+0x2a>
 8007a28:	a1facade 	.word	0xa1facade

08007a2c <ai_platform_get_activations_map>:
 8007a2c:	b132      	cbz	r2, 8007a3c <ai_platform_get_activations_map+0x10>
 8007a2e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007a30:	b122      	cbz	r2, 8007a3c <ai_platform_get_activations_map+0x10>
 8007a32:	b110      	cbz	r0, 8007a3a <ai_platform_get_activations_map+0xe>
 8007a34:	b921      	cbnz	r1, 8007a40 <ai_platform_get_activations_map+0x14>
 8007a36:	4608      	mov	r0, r1
 8007a38:	4770      	bx	lr
 8007a3a:	4770      	bx	lr
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4770      	bx	lr
 8007a40:	b470      	push	{r4, r5, r6}
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <ai_platform_get_activations_map+0x64>)
 8007a44:	6815      	ldr	r5, [r2, #0]
 8007a46:	429d      	cmp	r5, r3
 8007a48:	d007      	beq.n	8007a5a <ai_platform_get_activations_map+0x2e>
 8007a4a:	6002      	str	r2, [r0, #0]
 8007a4c:	f1a1 0001 	sub.w	r0, r1, #1
 8007a50:	fab0 f080 	clz	r0, r0
 8007a54:	0940      	lsrs	r0, r0, #5
 8007a56:	bc70      	pop	{r4, r5, r6}
 8007a58:	4770      	bx	lr
 8007a5a:	6854      	ldr	r4, [r2, #4]
 8007a5c:	42ac      	cmp	r4, r5
 8007a5e:	f102 0204 	add.w	r2, r2, #4
 8007a62:	d011      	beq.n	8007a88 <ai_platform_get_activations_map+0x5c>
 8007a64:	1f03      	subs	r3, r0, #4
 8007a66:	4616      	mov	r6, r2
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e003      	b.n	8007a74 <ai_platform_get_activations_map+0x48>
 8007a6c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8007a70:	42ac      	cmp	r4, r5
 8007a72:	d009      	beq.n	8007a88 <ai_platform_get_activations_map+0x5c>
 8007a74:	3001      	adds	r0, #1
 8007a76:	4281      	cmp	r1, r0
 8007a78:	f843 4f04 	str.w	r4, [r3, #4]!
 8007a7c:	d1f6      	bne.n	8007a6c <ai_platform_get_activations_map+0x40>
 8007a7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007a82:	4b03      	ldr	r3, [pc, #12]	; (8007a90 <ai_platform_get_activations_map+0x64>)
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d001      	beq.n	8007a8c <ai_platform_get_activations_map+0x60>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7e4      	b.n	8007a56 <ai_platform_get_activations_map+0x2a>
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	e7e2      	b.n	8007a56 <ai_platform_get_activations_map+0x2a>
 8007a90:	a1facade 	.word	0xa1facade

08007a94 <ai_platform_network_create>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	461d      	mov	r5, r3
 8007aa0:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8007aa4:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8007aa8:	f7ff ff88 	bl	80079bc <_ai_platform_acquire_crc>
 8007aac:	b178      	cbz	r0, 8007ace <ai_platform_network_create+0x3a>
 8007aae:	4b5a      	ldr	r3, [pc, #360]	; (8007c18 <ai_platform_network_create+0x184>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aba:	4602      	mov	r2, r0
 8007abc:	d00c      	beq.n	8007ad8 <ai_platform_network_create+0x44>
 8007abe:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <ai_platform_network_create+0x188>)
 8007ac0:	2118      	movs	r1, #24
 8007ac2:	6019      	str	r1, [r3, #0]
 8007ac4:	6819      	ldr	r1, [r3, #0]
 8007ac6:	2918      	cmp	r1, #24
 8007ac8:	d034      	beq.n	8007b34 <ai_platform_network_create+0xa0>
 8007aca:	f7ff ff79 	bl	80079c0 <_ai_platform_release_crc>
 8007ace:	f241 0033 	movw	r0, #4147	; 0x1033
 8007ad2:	b002      	add	sp, #8
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad8:	4b51      	ldr	r3, [pc, #324]	; (8007c20 <ai_platform_network_create+0x18c>)
 8007ada:	2101      	movs	r1, #1
 8007adc:	6019      	str	r1, [r3, #0]
 8007ade:	2114      	movs	r1, #20
 8007ae0:	e001      	b.n	8007ae6 <ai_platform_network_create+0x52>
 8007ae2:	3901      	subs	r1, #1
 8007ae4:	d002      	beq.n	8007aec <ai_platform_network_create+0x58>
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d1fa      	bne.n	8007ae2 <ai_platform_network_create+0x4e>
 8007aec:	4b4c      	ldr	r3, [pc, #304]	; (8007c20 <ai_platform_network_create+0x18c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	b9f3      	cbnz	r3, 8007b30 <ai_platform_network_create+0x9c>
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7ff ff64 	bl	80079c0 <_ai_platform_release_crc>
 8007af8:	4a4a      	ldr	r2, [pc, #296]	; (8007c24 <ai_platform_network_create+0x190>)
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	f7ff ff5b 	bl	80079bc <_ai_platform_acquire_crc>
 8007b06:	4b44      	ldr	r3, [pc, #272]	; (8007c18 <ai_platform_network_create+0x184>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b12:	d015      	beq.n	8007b40 <ai_platform_network_create+0xac>
 8007b14:	4b41      	ldr	r3, [pc, #260]	; (8007c1c <ai_platform_network_create+0x188>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	d1fc      	bne.n	8007b1a <ai_platform_network_create+0x86>
 8007b20:	4b41      	ldr	r3, [pc, #260]	; (8007c28 <ai_platform_network_create+0x194>)
 8007b22:	4a42      	ldr	r2, [pc, #264]	; (8007c2c <ai_platform_network_create+0x198>)
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	4b41      	ldr	r3, [pc, #260]	; (8007c30 <ai_platform_network_create+0x19c>)
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d016      	beq.n	8007b5c <ai_platform_network_create+0xc8>
 8007b2e:	e7fe      	b.n	8007b2e <ai_platform_network_create+0x9a>
 8007b30:	4610      	mov	r0, r2
 8007b32:	e7ca      	b.n	8007aca <ai_platform_network_create+0x36>
 8007b34:	2101      	movs	r1, #1
 8007b36:	6019      	str	r1, [r3, #0]
 8007b38:	6819      	ldr	r1, [r3, #0]
 8007b3a:	2900      	cmp	r1, #0
 8007b3c:	d1fc      	bne.n	8007b38 <ai_platform_network_create+0xa4>
 8007b3e:	e7d8      	b.n	8007af2 <ai_platform_network_create+0x5e>
 8007b40:	4b37      	ldr	r3, [pc, #220]	; (8007c20 <ai_platform_network_create+0x18c>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	d1fc      	bne.n	8007b46 <ai_platform_network_create+0xb2>
 8007b4c:	4b39      	ldr	r3, [pc, #228]	; (8007c34 <ai_platform_network_create+0x1a0>)
 8007b4e:	4a37      	ldr	r2, [pc, #220]	; (8007c2c <ai_platform_network_create+0x198>)
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	4b36      	ldr	r3, [pc, #216]	; (8007c30 <ai_platform_network_create+0x19c>)
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d000      	beq.n	8007b5c <ai_platform_network_create+0xc8>
 8007b5a:	e7fe      	b.n	8007b5a <ai_platform_network_create+0xc6>
 8007b5c:	f7ff ff30 	bl	80079c0 <_ai_platform_release_crc>
 8007b60:	b1af      	cbz	r7, 8007b8e <ai_platform_network_create+0xfa>
 8007b62:	4b35      	ldr	r3, [pc, #212]	; (8007c38 <ai_platform_network_create+0x1a4>)
 8007b64:	6033      	str	r3, [r6, #0]
 8007b66:	603e      	str	r6, [r7, #0]
 8007b68:	f000 fc8e 	bl	8008488 <core_init>
 8007b6c:	b990      	cbnz	r0, 8007b94 <ai_platform_network_create+0x100>
 8007b6e:	062d      	lsls	r5, r5, #24
 8007b70:	0424      	lsls	r4, r4, #16
 8007b72:	2230      	movs	r2, #48	; 0x30
 8007b74:	2300      	movs	r3, #0
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	2110      	movs	r1, #16
 8007b7a:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8007b7e:	2000      	movs	r0, #0
 8007b80:	432b      	orrs	r3, r5
 8007b82:	f362 0007 	bfi	r0, r2, #0, #8
 8007b86:	6473      	str	r3, [r6, #68]	; 0x44
 8007b88:	f361 201f 	bfi	r0, r1, #8, #24
 8007b8c:	e7a1      	b.n	8007ad2 <ai_platform_network_create+0x3e>
 8007b8e:	f241 0010 	movw	r0, #4112	; 0x1010
 8007b92:	e79e      	b.n	8007ad2 <ai_platform_network_create+0x3e>
 8007b94:	4a23      	ldr	r2, [pc, #140]	; (8007c24 <ai_platform_network_create+0x190>)
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	f7ff ff0d 	bl	80079bc <_ai_platform_acquire_crc>
 8007ba2:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <ai_platform_network_create+0x184>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bae:	d00d      	beq.n	8007bcc <ai_platform_network_create+0x138>
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <ai_platform_network_create+0x188>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	2a00      	cmp	r2, #0
 8007bba:	d1fc      	bne.n	8007bb6 <ai_platform_network_create+0x122>
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <ai_platform_network_create+0x194>)
 8007bbe:	4a1b      	ldr	r2, [pc, #108]	; (8007c2c <ai_platform_network_create+0x198>)
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	4b1a      	ldr	r3, [pc, #104]	; (8007c30 <ai_platform_network_create+0x19c>)
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d00e      	beq.n	8007be8 <ai_platform_network_create+0x154>
 8007bca:	e7fe      	b.n	8007bca <ai_platform_network_create+0x136>
 8007bcc:	4b14      	ldr	r3, [pc, #80]	; (8007c20 <ai_platform_network_create+0x18c>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	d1fc      	bne.n	8007bd2 <ai_platform_network_create+0x13e>
 8007bd8:	4b16      	ldr	r3, [pc, #88]	; (8007c34 <ai_platform_network_create+0x1a0>)
 8007bda:	4a14      	ldr	r2, [pc, #80]	; (8007c2c <ai_platform_network_create+0x198>)
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	4b13      	ldr	r3, [pc, #76]	; (8007c30 <ai_platform_network_create+0x19c>)
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d000      	beq.n	8007be8 <ai_platform_network_create+0x154>
 8007be6:	e7fe      	b.n	8007be6 <ai_platform_network_create+0x152>
 8007be8:	062d      	lsls	r5, r5, #24
 8007bea:	0424      	lsls	r4, r4, #16
 8007bec:	f7ff fee8 	bl	80079c0 <_ai_platform_release_crc>
 8007bf0:	ea45 0304 	orr.w	r3, r5, r4
 8007bf4:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8007bf8:	d001      	beq.n	8007bfe <ai_platform_network_create+0x16a>
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	e7ba      	b.n	8007b74 <ai_platform_network_create+0xe0>
 8007bfe:	a802      	add	r0, sp, #8
 8007c00:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <ai_platform_network_create+0x1a8>)
 8007c02:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007c06:	f003 fcb3 	bl	800b570 <ai_check_custom_types>
 8007c0a:	b110      	cbz	r0, 8007c12 <ai_platform_network_create+0x17e>
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	460a      	mov	r2, r1
 8007c10:	e7b3      	b.n	8007b7a <ai_platform_network_create+0xe6>
 8007c12:	2202      	movs	r2, #2
 8007c14:	e7ae      	b.n	8007b74 <ai_platform_network_create+0xe0>
 8007c16:	bf00      	nop
 8007c18:	e0042000 	.word	0xe0042000
 8007c1c:	58024c08 	.word	0x58024c08
 8007c20:	40023008 	.word	0x40023008
 8007c24:	e0002000 	.word	0xe0002000
 8007c28:	58024c00 	.word	0x58024c00
 8007c2c:	f407a5c2 	.word	0xf407a5c2
 8007c30:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c34:	40023000 	.word	0x40023000
 8007c38:	a1c00100 	.word	0xa1c00100
 8007c3c:	84048403 	.word	0x84048403

08007c40 <ai_platform_network_init>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d04d      	beq.n	8007ce4 <ai_platform_network_init+0xa4>
 8007c48:	4b7c      	ldr	r3, [pc, #496]	; (8007e3c <ai_platform_network_init+0x1fc>)
 8007c4a:	6802      	ldr	r2, [r0, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	4604      	mov	r4, r0
 8007c50:	d148      	bne.n	8007ce4 <ai_platform_network_init+0xa4>
 8007c52:	4a7b      	ldr	r2, [pc, #492]	; (8007e40 <ai_platform_network_init+0x200>)
 8007c54:	6813      	ldr	r3, [r2, #0]
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	f7ff fead 	bl	80079bc <_ai_platform_acquire_crc>
 8007c62:	4b78      	ldr	r3, [pc, #480]	; (8007e44 <ai_platform_network_init+0x204>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6e:	d00d      	beq.n	8007c8c <ai_platform_network_init+0x4c>
 8007c70:	4b75      	ldr	r3, [pc, #468]	; (8007e48 <ai_platform_network_init+0x208>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	d1fc      	bne.n	8007c76 <ai_platform_network_init+0x36>
 8007c7c:	4b73      	ldr	r3, [pc, #460]	; (8007e4c <ai_platform_network_init+0x20c>)
 8007c7e:	4a74      	ldr	r2, [pc, #464]	; (8007e50 <ai_platform_network_init+0x210>)
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	4b73      	ldr	r3, [pc, #460]	; (8007e54 <ai_platform_network_init+0x214>)
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d00d      	beq.n	8007ca6 <ai_platform_network_init+0x66>
 8007c8a:	e7fe      	b.n	8007c8a <ai_platform_network_init+0x4a>
 8007c8c:	4b72      	ldr	r3, [pc, #456]	; (8007e58 <ai_platform_network_init+0x218>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d1fc      	bne.n	8007c92 <ai_platform_network_init+0x52>
 8007c98:	4b70      	ldr	r3, [pc, #448]	; (8007e5c <ai_platform_network_init+0x21c>)
 8007c9a:	4a6d      	ldr	r2, [pc, #436]	; (8007e50 <ai_platform_network_init+0x210>)
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b6c      	ldr	r3, [pc, #432]	; (8007e54 <ai_platform_network_init+0x214>)
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d11d      	bne.n	8007ce2 <ai_platform_network_init+0xa2>
 8007ca6:	f7ff fe8b 	bl	80079c0 <_ai_platform_release_crc>
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	d076      	beq.n	8007d9c <ai_platform_network_init+0x15c>
 8007cae:	4b6c      	ldr	r3, [pc, #432]	; (8007e60 <ai_platform_network_init+0x220>)
 8007cb0:	682a      	ldr	r2, [r5, #0]
 8007cb2:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d030      	beq.n	8007d1c <ai_platform_network_init+0xdc>
 8007cba:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007cbc:	46a9      	mov	r9, r5
 8007cbe:	f105 0118 	add.w	r1, r5, #24
 8007cc2:	2e00      	cmp	r6, #0
 8007cc4:	f000 8095 	beq.w	8007df2 <ai_platform_network_init+0x1b2>
 8007cc8:	f1bc 0f00 	cmp.w	ip, #0
 8007ccc:	f000 80a4 	beq.w	8007e18 <ai_platform_network_init+0x1d8>
 8007cd0:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8007cd4:	f1b8 0f01 	cmp.w	r8, #1
 8007cd8:	d16a      	bne.n	8007db0 <ai_platform_network_init+0x170>
 8007cda:	2700      	movs	r7, #0
 8007cdc:	468c      	mov	ip, r1
 8007cde:	83a7      	strh	r7, [r4, #28]
 8007ce0:	e028      	b.n	8007d34 <ai_platform_network_init+0xf4>
 8007ce2:	e7fe      	b.n	8007ce2 <ai_platform_network_init+0xa2>
 8007ce4:	4a56      	ldr	r2, [pc, #344]	; (8007e40 <ai_platform_network_init+0x200>)
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	f7ff fe65 	bl	80079bc <_ai_platform_acquire_crc>
 8007cf2:	4b54      	ldr	r3, [pc, #336]	; (8007e44 <ai_platform_network_init+0x204>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cfe:	d067      	beq.n	8007dd0 <ai_platform_network_init+0x190>
 8007d00:	4b51      	ldr	r3, [pc, #324]	; (8007e48 <ai_platform_network_init+0x208>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	2a00      	cmp	r2, #0
 8007d0a:	d1fc      	bne.n	8007d06 <ai_platform_network_init+0xc6>
 8007d0c:	4b4f      	ldr	r3, [pc, #316]	; (8007e4c <ai_platform_network_init+0x20c>)
 8007d0e:	4a50      	ldr	r2, [pc, #320]	; (8007e50 <ai_platform_network_init+0x210>)
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4b4f      	ldr	r3, [pc, #316]	; (8007e54 <ai_platform_network_init+0x214>)
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d067      	beq.n	8007dea <ai_platform_network_init+0x1aa>
 8007d1a:	e7fe      	b.n	8007d1a <ai_platform_network_init+0xda>
 8007d1c:	8be1      	ldrh	r1, [r4, #30]
 8007d1e:	88eb      	ldrh	r3, [r5, #6]
 8007d20:	89af      	ldrh	r7, [r5, #12]
 8007d22:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8007d26:	88aa      	ldrh	r2, [r5, #4]
 8007d28:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8007d2c:	428b      	cmp	r3, r1
 8007d2e:	d13f      	bne.n	8007db0 <ai_platform_network_init+0x170>
 8007d30:	83a2      	strh	r2, [r4, #28]
 8007d32:	b19b      	cbz	r3, 8007d5c <ai_platform_network_init+0x11c>
 8007d34:	f04f 0e00 	mov.w	lr, #0
 8007d38:	46f2      	mov	sl, lr
 8007d3a:	eb09 060e 	add.w	r6, r9, lr
 8007d3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007d40:	6a25      	ldr	r5, [r4, #32]
 8007d42:	4475      	add	r5, lr
 8007d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d46:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d4e:	8be3      	ldrh	r3, [r4, #30]
 8007d50:	f10a 0a01 	add.w	sl, sl, #1
 8007d54:	459a      	cmp	sl, r3
 8007d56:	f10e 0e18 	add.w	lr, lr, #24
 8007d5a:	d3ee      	bcc.n	8007d3a <ai_platform_network_init+0xfa>
 8007d5c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007d5e:	4598      	cmp	r8, r3
 8007d60:	d12e      	bne.n	8007dc0 <ai_platform_network_init+0x180>
 8007d62:	84a7      	strh	r7, [r4, #36]	; 0x24
 8007d64:	f1b8 0f00 	cmp.w	r8, #0
 8007d68:	d012      	beq.n	8007d90 <ai_platform_network_init+0x150>
 8007d6a:	2700      	movs	r7, #0
 8007d6c:	46be      	mov	lr, r7
 8007d6e:	eb0c 0607 	add.w	r6, ip, r7
 8007d72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007d74:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007d76:	443d      	add	r5, r7
 8007d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d7a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007d84:	f10e 0e01 	add.w	lr, lr, #1
 8007d88:	459e      	cmp	lr, r3
 8007d8a:	f107 0718 	add.w	r7, r7, #24
 8007d8e:	d3ee      	bcc.n	8007d6e <ai_platform_network_init+0x12e>
 8007d90:	2303      	movs	r3, #3
 8007d92:	60e3      	str	r3, [r4, #12]
 8007d94:	4620      	mov	r0, r4
 8007d96:	f003 fc15 	bl	800b5c4 <ai_layers_init_all>
 8007d9a:	e006      	b.n	8007daa <ai_platform_network_init+0x16a>
 8007d9c:	f104 0010 	add.w	r0, r4, #16
 8007da0:	2211      	movs	r2, #17
 8007da2:	2110      	movs	r1, #16
 8007da4:	462c      	mov	r4, r5
 8007da6:	f000 fb71 	bl	800848c <core_set_error>
 8007daa:	4620      	mov	r0, r4
 8007dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db0:	f104 0010 	add.w	r0, r4, #16
 8007db4:	2212      	movs	r2, #18
 8007db6:	2116      	movs	r1, #22
 8007db8:	f000 fb68 	bl	800848c <core_set_error>
 8007dbc:	2400      	movs	r4, #0
 8007dbe:	e7f4      	b.n	8007daa <ai_platform_network_init+0x16a>
 8007dc0:	f104 0010 	add.w	r0, r4, #16
 8007dc4:	2213      	movs	r2, #19
 8007dc6:	2116      	movs	r1, #22
 8007dc8:	f000 fb60 	bl	800848c <core_set_error>
 8007dcc:	2400      	movs	r4, #0
 8007dce:	e7ec      	b.n	8007daa <ai_platform_network_init+0x16a>
 8007dd0:	4b21      	ldr	r3, [pc, #132]	; (8007e58 <ai_platform_network_init+0x218>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	d1fc      	bne.n	8007dd6 <ai_platform_network_init+0x196>
 8007ddc:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <ai_platform_network_init+0x21c>)
 8007dde:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <ai_platform_network_init+0x210>)
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4b1b      	ldr	r3, [pc, #108]	; (8007e54 <ai_platform_network_init+0x214>)
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d115      	bne.n	8007e16 <ai_platform_network_init+0x1d6>
 8007dea:	f7ff fde9 	bl	80079c0 <_ai_platform_release_crc>
 8007dee:	2400      	movs	r4, #0
 8007df0:	e7db      	b.n	8007daa <ai_platform_network_init+0x16a>
 8007df2:	8c28      	ldrh	r0, [r5, #32]
 8007df4:	8bea      	ldrh	r2, [r5, #30]
 8007df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007df8:	fb02 f200 	mul.w	r2, r2, r0
 8007dfc:	fb03 f302 	mul.w	r3, r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f43f af61 	beq.w	8007cc8 <ai_platform_network_init+0x88>
 8007e06:	f104 0010 	add.w	r0, r4, #16
 8007e0a:	2213      	movs	r2, #19
 8007e0c:	2110      	movs	r1, #16
 8007e0e:	4634      	mov	r4, r6
 8007e10:	f000 fb3c 	bl	800848c <core_set_error>
 8007e14:	e7c9      	b.n	8007daa <ai_platform_network_init+0x16a>
 8007e16:	e7fe      	b.n	8007e16 <ai_platform_network_init+0x1d6>
 8007e18:	8928      	ldrh	r0, [r5, #8]
 8007e1a:	88ea      	ldrh	r2, [r5, #6]
 8007e1c:	68eb      	ldr	r3, [r5, #12]
 8007e1e:	fb02 f200 	mul.w	r2, r2, r0
 8007e22:	fb03 f302 	mul.w	r3, r3, r2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f43f af52 	beq.w	8007cd0 <ai_platform_network_init+0x90>
 8007e2c:	f104 0010 	add.w	r0, r4, #16
 8007e30:	2212      	movs	r2, #18
 8007e32:	2110      	movs	r1, #16
 8007e34:	4664      	mov	r4, ip
 8007e36:	f000 fb29 	bl	800848c <core_set_error>
 8007e3a:	e7b6      	b.n	8007daa <ai_platform_network_init+0x16a>
 8007e3c:	a1c00100 	.word	0xa1c00100
 8007e40:	e0002000 	.word	0xe0002000
 8007e44:	e0042000 	.word	0xe0042000
 8007e48:	58024c08 	.word	0x58024c08
 8007e4c:	58024c00 	.word	0x58024c00
 8007e50:	f407a5c2 	.word	0xf407a5c2
 8007e54:	b5e8b5cd 	.word	0xb5e8b5cd
 8007e58:	40023008 	.word	0x40023008
 8007e5c:	40023000 	.word	0x40023000
 8007e60:	a1facade 	.word	0xa1facade

08007e64 <ai_platform_network_post_init>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	b120      	cbz	r0, 8007e72 <ai_platform_network_post_init+0xe>
 8007e68:	4b3f      	ldr	r3, [pc, #252]	; (8007f68 <ai_platform_network_post_init+0x104>)
 8007e6a:	6802      	ldr	r2, [r0, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	4604      	mov	r4, r0
 8007e70:	d02d      	beq.n	8007ece <ai_platform_network_post_init+0x6a>
 8007e72:	4a3e      	ldr	r2, [pc, #248]	; (8007f6c <ai_platform_network_post_init+0x108>)
 8007e74:	6813      	ldr	r3, [r2, #0]
 8007e76:	f023 0301 	bic.w	r3, r3, #1
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	f7ff fd9e 	bl	80079bc <_ai_platform_acquire_crc>
 8007e80:	4b3b      	ldr	r3, [pc, #236]	; (8007f70 <ai_platform_network_post_init+0x10c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8c:	d00d      	beq.n	8007eaa <ai_platform_network_post_init+0x46>
 8007e8e:	4b39      	ldr	r3, [pc, #228]	; (8007f74 <ai_platform_network_post_init+0x110>)
 8007e90:	2201      	movs	r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	d1fc      	bne.n	8007e94 <ai_platform_network_post_init+0x30>
 8007e9a:	4b37      	ldr	r3, [pc, #220]	; (8007f78 <ai_platform_network_post_init+0x114>)
 8007e9c:	4a37      	ldr	r2, [pc, #220]	; (8007f7c <ai_platform_network_post_init+0x118>)
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b37      	ldr	r3, [pc, #220]	; (8007f80 <ai_platform_network_post_init+0x11c>)
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d00d      	beq.n	8007ec4 <ai_platform_network_post_init+0x60>
 8007ea8:	e7fe      	b.n	8007ea8 <ai_platform_network_post_init+0x44>
 8007eaa:	4b36      	ldr	r3, [pc, #216]	; (8007f84 <ai_platform_network_post_init+0x120>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	2a00      	cmp	r2, #0
 8007eb4:	d1fc      	bne.n	8007eb0 <ai_platform_network_post_init+0x4c>
 8007eb6:	4b34      	ldr	r3, [pc, #208]	; (8007f88 <ai_platform_network_post_init+0x124>)
 8007eb8:	4a30      	ldr	r2, [pc, #192]	; (8007f7c <ai_platform_network_post_init+0x118>)
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4b30      	ldr	r3, [pc, #192]	; (8007f80 <ai_platform_network_post_init+0x11c>)
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d103      	bne.n	8007ecc <ai_platform_network_post_init+0x68>
 8007ec4:	f7ff fd7c 	bl	80079c0 <_ai_platform_release_crc>
 8007ec8:	2000      	movs	r0, #0
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	e7fe      	b.n	8007ecc <ai_platform_network_post_init+0x68>
 8007ece:	4a27      	ldr	r2, [pc, #156]	; (8007f6c <ai_platform_network_post_init+0x108>)
 8007ed0:	6813      	ldr	r3, [r2, #0]
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	f7ff fd70 	bl	80079bc <_ai_platform_acquire_crc>
 8007edc:	4b24      	ldr	r3, [pc, #144]	; (8007f70 <ai_platform_network_post_init+0x10c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee8:	d00d      	beq.n	8007f06 <ai_platform_network_post_init+0xa2>
 8007eea:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <ai_platform_network_post_init+0x110>)
 8007eec:	2201      	movs	r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	2a00      	cmp	r2, #0
 8007ef4:	d1fc      	bne.n	8007ef0 <ai_platform_network_post_init+0x8c>
 8007ef6:	4b20      	ldr	r3, [pc, #128]	; (8007f78 <ai_platform_network_post_init+0x114>)
 8007ef8:	4a20      	ldr	r2, [pc, #128]	; (8007f7c <ai_platform_network_post_init+0x118>)
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b20      	ldr	r3, [pc, #128]	; (8007f80 <ai_platform_network_post_init+0x11c>)
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d00e      	beq.n	8007f22 <ai_platform_network_post_init+0xbe>
 8007f04:	e7fe      	b.n	8007f04 <ai_platform_network_post_init+0xa0>
 8007f06:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <ai_platform_network_post_init+0x120>)
 8007f08:	2201      	movs	r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d1fc      	bne.n	8007f0c <ai_platform_network_post_init+0xa8>
 8007f12:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <ai_platform_network_post_init+0x124>)
 8007f14:	4a19      	ldr	r2, [pc, #100]	; (8007f7c <ai_platform_network_post_init+0x118>)
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b19      	ldr	r3, [pc, #100]	; (8007f80 <ai_platform_network_post_init+0x11c>)
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d000      	beq.n	8007f22 <ai_platform_network_post_init+0xbe>
 8007f20:	e7fe      	b.n	8007f20 <ai_platform_network_post_init+0xbc>
 8007f22:	f7ff fd4d 	bl	80079c0 <_ai_platform_release_crc>
 8007f26:	68e3      	ldr	r3, [r4, #12]
 8007f28:	f013 0502 	ands.w	r5, r3, #2
 8007f2c:	d011      	beq.n	8007f52 <ai_platform_network_post_init+0xee>
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f003 fb5c 	bl	800b5ec <ai_layers_post_init_all>
 8007f34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f36:	b1a3      	cbz	r3, 8007f62 <ai_platform_network_post_init+0xfe>
 8007f38:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007f3a:	b195      	cbz	r5, 8007f62 <ai_platform_network_post_init+0xfe>
 8007f3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007f3e:	4629      	mov	r1, r5
 8007f40:	2000      	movs	r0, #0
 8007f42:	4798      	blx	r3
 8007f44:	692b      	ldr	r3, [r5, #16]
 8007f46:	42ab      	cmp	r3, r5
 8007f48:	d00b      	beq.n	8007f62 <ai_platform_network_post_init+0xfe>
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	b14b      	cbz	r3, 8007f62 <ai_platform_network_post_init+0xfe>
 8007f4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f50:	e7f4      	b.n	8007f3c <ai_platform_network_post_init+0xd8>
 8007f52:	f104 0010 	add.w	r0, r4, #16
 8007f56:	2210      	movs	r2, #16
 8007f58:	2111      	movs	r1, #17
 8007f5a:	f000 fa97 	bl	800848c <core_set_error>
 8007f5e:	4628      	mov	r0, r5
 8007f60:	bd38      	pop	{r3, r4, r5, pc}
 8007f62:	2001      	movs	r0, #1
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	a1c00100 	.word	0xa1c00100
 8007f6c:	e0002000 	.word	0xe0002000
 8007f70:	e0042000 	.word	0xe0042000
 8007f74:	58024c08 	.word	0x58024c08
 8007f78:	58024c00 	.word	0x58024c00
 8007f7c:	f407a5c2 	.word	0xf407a5c2
 8007f80:	b5e8b5cd 	.word	0xb5e8b5cd
 8007f84:	40023008 	.word	0x40023008
 8007f88:	40023000 	.word	0x40023000

08007f8c <ai_platform_network_process>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b085      	sub	sp, #20
 8007f92:	460d      	mov	r5, r1
 8007f94:	9202      	str	r2, [sp, #8]
 8007f96:	4604      	mov	r4, r0
 8007f98:	b120      	cbz	r0, 8007fa4 <ai_platform_network_process+0x18>
 8007f9a:	4b7b      	ldr	r3, [pc, #492]	; (8008188 <ai_platform_network_process+0x1fc>)
 8007f9c:	6802      	ldr	r2, [r0, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	bf18      	it	ne
 8007fa2:	2400      	movne	r4, #0
 8007fa4:	4a79      	ldr	r2, [pc, #484]	; (800818c <ai_platform_network_process+0x200>)
 8007fa6:	6813      	ldr	r3, [r2, #0]
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	f7ff fd05 	bl	80079bc <_ai_platform_acquire_crc>
 8007fb2:	4b77      	ldr	r3, [pc, #476]	; (8008190 <ai_platform_network_process+0x204>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fbe:	d00d      	beq.n	8007fdc <ai_platform_network_process+0x50>
 8007fc0:	4b74      	ldr	r3, [pc, #464]	; (8008194 <ai_platform_network_process+0x208>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	2a00      	cmp	r2, #0
 8007fca:	d1fc      	bne.n	8007fc6 <ai_platform_network_process+0x3a>
 8007fcc:	4b72      	ldr	r3, [pc, #456]	; (8008198 <ai_platform_network_process+0x20c>)
 8007fce:	4a73      	ldr	r2, [pc, #460]	; (800819c <ai_platform_network_process+0x210>)
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	4b72      	ldr	r3, [pc, #456]	; (80081a0 <ai_platform_network_process+0x214>)
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d00e      	beq.n	8007ff8 <ai_platform_network_process+0x6c>
 8007fda:	e7fe      	b.n	8007fda <ai_platform_network_process+0x4e>
 8007fdc:	4b71      	ldr	r3, [pc, #452]	; (80081a4 <ai_platform_network_process+0x218>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	2a00      	cmp	r2, #0
 8007fe6:	d1fc      	bne.n	8007fe2 <ai_platform_network_process+0x56>
 8007fe8:	4b6f      	ldr	r3, [pc, #444]	; (80081a8 <ai_platform_network_process+0x21c>)
 8007fea:	4a6c      	ldr	r2, [pc, #432]	; (800819c <ai_platform_network_process+0x210>)
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b6b      	ldr	r3, [pc, #428]	; (80081a0 <ai_platform_network_process+0x214>)
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d000      	beq.n	8007ff8 <ai_platform_network_process+0x6c>
 8007ff6:	e7fe      	b.n	8007ff6 <ai_platform_network_process+0x6a>
 8007ff8:	f7ff fce2 	bl	80079c0 <_ai_platform_release_crc>
 8007ffc:	2c00      	cmp	r4, #0
 8007ffe:	f000 808e 	beq.w	800811e <ai_platform_network_process+0x192>
 8008002:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8008004:	2f00      	cmp	r7, #0
 8008006:	f040 823c 	bne.w	8008482 <ai_platform_network_process+0x4f6>
 800800a:	68e3      	ldr	r3, [r4, #12]
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	f04f 0b00 	mov.w	fp, #0
 8008014:	2b03      	cmp	r3, #3
 8008016:	f8c4 b014 	str.w	fp, [r4, #20]
 800801a:	f040 822b 	bne.w	8008474 <ai_platform_network_process+0x4e8>
 800801e:	2d00      	cmp	r5, #0
 8008020:	f000 80a8 	beq.w	8008174 <ai_platform_network_process+0x1e8>
 8008024:	2f00      	cmp	r7, #0
 8008026:	f000 80a5 	beq.w	8008174 <ai_platform_network_process+0x1e8>
 800802a:	883b      	ldrh	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80a1 	beq.w	8008174 <ai_platform_network_process+0x1e8>
 8008032:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8008036:	9401      	str	r4, [sp, #4]
 8008038:	46d8      	mov	r8, fp
 800803a:	4598      	cmp	r8, r3
 800803c:	f080 80b6 	bcs.w	80081ac <ai_platform_network_process+0x220>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80b2 	beq.w	80081ac <ai_platform_network_process+0x220>
 8008048:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800804c:	2e00      	cmp	r6, #0
 800804e:	f000 80ad 	beq.w	80081ac <ai_platform_network_process+0x220>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	9303      	str	r3, [sp, #12]
 8008058:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800805c:	eb13 0a04 	adds.w	sl, r3, r4
 8008060:	f000 8087 	beq.w	8008172 <ai_platform_network_process+0x1e6>
 8008064:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8008068:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800806c:	69b0      	ldr	r0, [r6, #24]
 800806e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8008072:	6841      	ldr	r1, [r0, #4]
 8008074:	fb0b f30e 	mul.w	r3, fp, lr
 8008078:	fb0c f303 	mul.w	r3, ip, r3
 800807c:	4299      	cmp	r1, r3
 800807e:	d36e      	bcc.n	800815e <ai_platform_network_process+0x1d2>
 8008080:	68f3      	ldr	r3, [r6, #12]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	455a      	cmp	r2, fp
 8008086:	d16a      	bne.n	800815e <ai_platform_network_process+0x1d2>
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	4572      	cmp	r2, lr
 800808c:	d167      	bne.n	800815e <ai_platform_network_process+0x1d2>
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	459c      	cmp	ip, r3
 8008092:	d164      	bne.n	800815e <ai_platform_network_process+0x1d2>
 8008094:	6800      	ldr	r0, [r0, #0]
 8008096:	f003 fb67 	bl	800b768 <ai_array_get_byte_size>
 800809a:	68f2      	ldr	r2, [r6, #12]
 800809c:	6973      	ldr	r3, [r6, #20]
 800809e:	68d2      	ldr	r2, [r2, #12]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	fb03 f302 	mul.w	r3, r3, r2
 80080a6:	4298      	cmp	r0, r3
 80080a8:	d359      	bcc.n	800815e <ai_platform_network_process+0x1d2>
 80080aa:	69b3      	ldr	r3, [r6, #24]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	f003 fb03 	bl	800b6b8 <ai_array_to_buffer_fmt>
 80080b2:	682b      	ldr	r3, [r5, #0]
 80080b4:	4043      	eors	r3, r0
 80080b6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80080ba:	d146      	bne.n	800814a <ai_platform_network_process+0x1be>
 80080bc:	692b      	ldr	r3, [r5, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d03a      	beq.n	8008138 <ai_platform_network_process+0x1ac>
 80080c2:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80080c6:	f1bb 0f00 	cmp.w	fp, #0
 80080ca:	d02d      	beq.n	8008128 <ai_platform_network_process+0x19c>
 80080cc:	68f2      	ldr	r2, [r6, #12]
 80080ce:	6973      	ldr	r3, [r6, #20]
 80080d0:	68d1      	ldr	r1, [r2, #12]
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	fb02 f201 	mul.w	r2, r2, r1
 80080d8:	f8ca 2008 	str.w	r2, [sl, #8]
 80080dc:	88ab      	ldrh	r3, [r5, #4]
 80080de:	fb02 f203 	mul.w	r2, r2, r3
 80080e2:	f8ca 200c 	str.w	r2, [sl, #12]
 80080e6:	6929      	ldr	r1, [r5, #16]
 80080e8:	f8ca 1004 	str.w	r1, [sl, #4]
 80080ec:	692b      	ldr	r3, [r5, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	9a03      	ldr	r2, [sp, #12]
 80080f2:	5113      	str	r3, [r2, r4]
 80080f4:	69b0      	ldr	r0, [r6, #24]
 80080f6:	6803      	ldr	r3, [r0, #0]
 80080f8:	45d9      	cmp	r9, fp
 80080fa:	bf38      	it	cc
 80080fc:	46d9      	movcc	r9, fp
 80080fe:	009a      	lsls	r2, r3, #2
 8008100:	d408      	bmi.n	8008114 <ai_platform_network_process+0x188>
 8008102:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008106:	1a9b      	subs	r3, r3, r2
 8008108:	4419      	add	r1, r3
 800810a:	6081      	str	r1, [r0, #8]
 800810c:	69b3      	ldr	r3, [r6, #24]
 800810e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008112:	60da      	str	r2, [r3, #12]
 8008114:	883b      	ldrh	r3, [r7, #0]
 8008116:	f108 0801 	add.w	r8, r8, #1
 800811a:	3518      	adds	r5, #24
 800811c:	e78d      	b.n	800803a <ai_platform_network_process+0xae>
 800811e:	46a3      	mov	fp, r4
 8008120:	4658      	mov	r0, fp
 8008122:	b005      	add	sp, #20
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	9c01      	ldr	r4, [sp, #4]
 800812a:	2221      	movs	r2, #33	; 0x21
 800812c:	f104 0010 	add.w	r0, r4, #16
 8008130:	2112      	movs	r1, #18
 8008132:	f000 f9ab 	bl	800848c <core_set_error>
 8008136:	e7f3      	b.n	8008120 <ai_platform_network_process+0x194>
 8008138:	9c01      	ldr	r4, [sp, #4]
 800813a:	2217      	movs	r2, #23
 800813c:	f104 0010 	add.w	r0, r4, #16
 8008140:	2112      	movs	r1, #18
 8008142:	469b      	mov	fp, r3
 8008144:	f000 f9a2 	bl	800848c <core_set_error>
 8008148:	e7ea      	b.n	8008120 <ai_platform_network_process+0x194>
 800814a:	9c01      	ldr	r4, [sp, #4]
 800814c:	2219      	movs	r2, #25
 800814e:	f104 0010 	add.w	r0, r4, #16
 8008152:	2112      	movs	r1, #18
 8008154:	f000 f99a 	bl	800848c <core_set_error>
 8008158:	f04f 0b00 	mov.w	fp, #0
 800815c:	e7e0      	b.n	8008120 <ai_platform_network_process+0x194>
 800815e:	9c01      	ldr	r4, [sp, #4]
 8008160:	2218      	movs	r2, #24
 8008162:	f104 0010 	add.w	r0, r4, #16
 8008166:	2112      	movs	r1, #18
 8008168:	f000 f990 	bl	800848c <core_set_error>
 800816c:	f04f 0b00 	mov.w	fp, #0
 8008170:	e7d6      	b.n	8008120 <ai_platform_network_process+0x194>
 8008172:	9c01      	ldr	r4, [sp, #4]
 8008174:	f104 0010 	add.w	r0, r4, #16
 8008178:	2217      	movs	r2, #23
 800817a:	2112      	movs	r1, #18
 800817c:	f000 f986 	bl	800848c <core_set_error>
 8008180:	f04f 0b00 	mov.w	fp, #0
 8008184:	e7cc      	b.n	8008120 <ai_platform_network_process+0x194>
 8008186:	bf00      	nop
 8008188:	a1c00100 	.word	0xa1c00100
 800818c:	e0002000 	.word	0xe0002000
 8008190:	e0042000 	.word	0xe0042000
 8008194:	58024c08 	.word	0x58024c08
 8008198:	58024c00 	.word	0x58024c00
 800819c:	f407a5c2 	.word	0xf407a5c2
 80081a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80081a4:	40023008 	.word	0x40023008
 80081a8:	40023000 	.word	0x40023000
 80081ac:	9c01      	ldr	r4, [sp, #4]
 80081ae:	9a02      	ldr	r2, [sp, #8]
 80081b0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	f000 80a9 	beq.w	800830a <ai_platform_network_process+0x37e>
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	f240 809b 	bls.w	80082f4 <ai_platform_network_process+0x368>
 80081be:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80081c2:	f11a 0f0c 	cmn.w	sl, #12
 80081c6:	f000 8095 	beq.w	80082f4 <ai_platform_network_process+0x368>
 80081ca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 8090 	beq.w	80082f4 <ai_platform_network_process+0x368>
 80081d4:	9d02      	ldr	r5, [sp, #8]
 80081d6:	9401      	str	r4, [sp, #4]
 80081d8:	f04f 0800 	mov.w	r8, #0
 80081dc:	4598      	cmp	r8, r3
 80081de:	f080 8092 	bcs.w	8008306 <ai_platform_network_process+0x37a>
 80081e2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 808d 	beq.w	8008306 <ai_platform_network_process+0x37a>
 80081ec:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	f000 8088 	beq.w	8008306 <ai_platform_network_process+0x37a>
 80081f6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8008202:	191f      	adds	r7, r3, r4
 8008204:	f000 812d 	beq.w	8008462 <ai_platform_network_process+0x4d6>
 8008208:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800820c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8008210:	69b0      	ldr	r0, [r6, #24]
 8008212:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8008216:	6841      	ldr	r1, [r0, #4]
 8008218:	fb0b f30e 	mul.w	r3, fp, lr
 800821c:	fb0c f303 	mul.w	r3, ip, r3
 8008220:	4299      	cmp	r1, r3
 8008222:	d366      	bcc.n	80082f2 <ai_platform_network_process+0x366>
 8008224:	68f3      	ldr	r3, [r6, #12]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	455a      	cmp	r2, fp
 800822a:	d162      	bne.n	80082f2 <ai_platform_network_process+0x366>
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	4572      	cmp	r2, lr
 8008230:	d15f      	bne.n	80082f2 <ai_platform_network_process+0x366>
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	459c      	cmp	ip, r3
 8008236:	d15c      	bne.n	80082f2 <ai_platform_network_process+0x366>
 8008238:	6800      	ldr	r0, [r0, #0]
 800823a:	f003 fa95 	bl	800b768 <ai_array_get_byte_size>
 800823e:	68f2      	ldr	r2, [r6, #12]
 8008240:	6973      	ldr	r3, [r6, #20]
 8008242:	68d2      	ldr	r2, [r2, #12]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	fb03 f302 	mul.w	r3, r3, r2
 800824a:	4298      	cmp	r0, r3
 800824c:	d351      	bcc.n	80082f2 <ai_platform_network_process+0x366>
 800824e:	69b3      	ldr	r3, [r6, #24]
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f003 fa31 	bl	800b6b8 <ai_array_to_buffer_fmt>
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	4043      	eors	r3, r0
 800825a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800825e:	d13e      	bne.n	80082de <ai_platform_network_process+0x352>
 8008260:	692b      	ldr	r3, [r5, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d032      	beq.n	80082cc <ai_platform_network_process+0x340>
 8008266:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800826a:	f1bb 0f00 	cmp.w	fp, #0
 800826e:	d025      	beq.n	80082bc <ai_platform_network_process+0x330>
 8008270:	68f2      	ldr	r2, [r6, #12]
 8008272:	6973      	ldr	r3, [r6, #20]
 8008274:	68d1      	ldr	r1, [r2, #12]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	fb02 f201 	mul.w	r2, r2, r1
 800827c:	60ba      	str	r2, [r7, #8]
 800827e:	88ab      	ldrh	r3, [r5, #4]
 8008280:	fb02 f203 	mul.w	r2, r2, r3
 8008284:	60fa      	str	r2, [r7, #12]
 8008286:	6929      	ldr	r1, [r5, #16]
 8008288:	6079      	str	r1, [r7, #4]
 800828a:	692b      	ldr	r3, [r5, #16]
 800828c:	4413      	add	r3, r2
 800828e:	9a02      	ldr	r2, [sp, #8]
 8008290:	5113      	str	r3, [r2, r4]
 8008292:	69b0      	ldr	r0, [r6, #24]
 8008294:	6803      	ldr	r3, [r0, #0]
 8008296:	45d9      	cmp	r9, fp
 8008298:	bf38      	it	cc
 800829a:	46d9      	movcc	r9, fp
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	d407      	bmi.n	80082b0 <ai_platform_network_process+0x324>
 80082a0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	4419      	add	r1, r3
 80082a8:	6081      	str	r1, [r0, #8]
 80082aa:	69b3      	ldr	r3, [r6, #24]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	60da      	str	r2, [r3, #12]
 80082b0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80082b4:	f108 0801 	add.w	r8, r8, #1
 80082b8:	3518      	adds	r5, #24
 80082ba:	e78f      	b.n	80081dc <ai_platform_network_process+0x250>
 80082bc:	9c01      	ldr	r4, [sp, #4]
 80082be:	2221      	movs	r2, #33	; 0x21
 80082c0:	f104 0010 	add.w	r0, r4, #16
 80082c4:	2113      	movs	r1, #19
 80082c6:	f000 f8e1 	bl	800848c <core_set_error>
 80082ca:	e729      	b.n	8008120 <ai_platform_network_process+0x194>
 80082cc:	9c01      	ldr	r4, [sp, #4]
 80082ce:	2217      	movs	r2, #23
 80082d0:	f104 0010 	add.w	r0, r4, #16
 80082d4:	2113      	movs	r1, #19
 80082d6:	469b      	mov	fp, r3
 80082d8:	f000 f8d8 	bl	800848c <core_set_error>
 80082dc:	e720      	b.n	8008120 <ai_platform_network_process+0x194>
 80082de:	9c01      	ldr	r4, [sp, #4]
 80082e0:	2219      	movs	r2, #25
 80082e2:	f104 0010 	add.w	r0, r4, #16
 80082e6:	2113      	movs	r1, #19
 80082e8:	f000 f8d0 	bl	800848c <core_set_error>
 80082ec:	f04f 0b00 	mov.w	fp, #0
 80082f0:	e716      	b.n	8008120 <ai_platform_network_process+0x194>
 80082f2:	9c01      	ldr	r4, [sp, #4]
 80082f4:	f104 0010 	add.w	r0, r4, #16
 80082f8:	2218      	movs	r2, #24
 80082fa:	2113      	movs	r1, #19
 80082fc:	f000 f8c6 	bl	800848c <core_set_error>
 8008300:	f04f 0b00 	mov.w	fp, #0
 8008304:	e70c      	b.n	8008120 <ai_platform_network_process+0x194>
 8008306:	9c01      	ldr	r4, [sp, #4]
 8008308:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800830a:	f8a4 9014 	strh.w	r9, [r4, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 80a4 	beq.w	800845c <ai_platform_network_process+0x4d0>
 8008314:	2b01      	cmp	r3, #1
 8008316:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008318:	f240 809e 	bls.w	8008458 <ai_platform_network_process+0x4cc>
 800831c:	f105 070c 	add.w	r7, r5, #12
 8008320:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8008324:	8aa3      	ldrh	r3, [r4, #20]
 8008326:	455b      	cmp	r3, fp
 8008328:	f67f aefa 	bls.w	8008120 <ai_platform_network_process+0x194>
 800832c:	9401      	str	r4, [sp, #4]
 800832e:	2d00      	cmp	r5, #0
 8008330:	d036      	beq.n	80083a0 <ai_platform_network_process+0x414>
 8008332:	882b      	ldrh	r3, [r5, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d033      	beq.n	80083a0 <ai_platform_network_process+0x414>
 8008338:	686b      	ldr	r3, [r5, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d030      	beq.n	80083a0 <ai_platform_network_process+0x414>
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f04f 0800 	mov.w	r8, #0
 8008344:	b9db      	cbnz	r3, 800837e <ai_platform_network_process+0x3f2>
 8008346:	e02b      	b.n	80083a0 <ai_platform_network_process+0x414>
 8008348:	68d4      	ldr	r4, [r2, #12]
 800834a:	1b00      	subs	r0, r0, r4
 800834c:	4401      	add	r1, r0
 800834e:	6091      	str	r1, [r2, #8]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	6872      	ldr	r2, [r6, #4]
 8008354:	60da      	str	r2, [r3, #12]
 8008356:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800835a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800835e:	440b      	add	r3, r1
 8008360:	4293      	cmp	r3, r2
 8008362:	bf24      	itt	cs
 8008364:	68f3      	ldrcs	r3, [r6, #12]
 8008366:	1ad3      	subcs	r3, r2, r3
 8008368:	6073      	str	r3, [r6, #4]
 800836a:	882b      	ldrh	r3, [r5, #0]
 800836c:	f108 0801 	add.w	r8, r8, #1
 8008370:	4598      	cmp	r8, r3
 8008372:	d215      	bcs.n	80083a0 <ai_platform_network_process+0x414>
 8008374:	686b      	ldr	r3, [r5, #4]
 8008376:	b19b      	cbz	r3, 80083a0 <ai_platform_network_process+0x414>
 8008378:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800837c:	b183      	cbz	r3, 80083a0 <ai_platform_network_process+0x414>
 800837e:	68a9      	ldr	r1, [r5, #8]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	f8d1 a000 	ldr.w	sl, [r1]
 8008386:	6814      	ldr	r4, [r2, #0]
 8008388:	6890      	ldr	r0, [r2, #8]
 800838a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800838e:	eb0a 0609 	add.w	r6, sl, r9
 8008392:	00a4      	lsls	r4, r4, #2
 8008394:	6871      	ldr	r1, [r6, #4]
 8008396:	d5d7      	bpl.n	8008348 <ai_platform_network_process+0x3bc>
 8008398:	68b2      	ldr	r2, [r6, #8]
 800839a:	f003 fa63 	bl	800b864 <memcpy>
 800839e:	e7da      	b.n	8008356 <ai_platform_network_process+0x3ca>
 80083a0:	9801      	ldr	r0, [sp, #4]
 80083a2:	f003 f93b 	bl	800b61c <ai_layers_forward_all>
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d047      	beq.n	800843a <ai_platform_network_process+0x4ae>
 80083aa:	883b      	ldrh	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d044      	beq.n	800843a <ai_platform_network_process+0x4ae>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d041      	beq.n	800843a <ai_platform_network_process+0x4ae>
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d03e      	beq.n	800843a <ai_platform_network_process+0x4ae>
 80083bc:	f04f 0800 	mov.w	r8, #0
 80083c0:	e019      	b.n	80083f6 <ai_platform_network_process+0x46a>
 80083c2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bf24      	itt	cs
 80083ca:	68f3      	ldrcs	r3, [r6, #12]
 80083cc:	1ad3      	subcs	r3, r2, r3
 80083ce:	6073      	str	r3, [r6, #4]
 80083d0:	6981      	ldr	r1, [r0, #24]
 80083d2:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80083d6:	1b12      	subs	r2, r2, r4
 80083d8:	4413      	add	r3, r2
 80083da:	608b      	str	r3, [r1, #8]
 80083dc:	6983      	ldr	r3, [r0, #24]
 80083de:	6872      	ldr	r2, [r6, #4]
 80083e0:	60da      	str	r2, [r3, #12]
 80083e2:	883b      	ldrh	r3, [r7, #0]
 80083e4:	f108 0801 	add.w	r8, r8, #1
 80083e8:	4598      	cmp	r8, r3
 80083ea:	d226      	bcs.n	800843a <ai_platform_network_process+0x4ae>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	b323      	cbz	r3, 800843a <ai_platform_network_process+0x4ae>
 80083f0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80083f4:	b308      	cbz	r0, 800843a <ai_platform_network_process+0x4ae>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6981      	ldr	r1, [r0, #24]
 80083fa:	f8d3 a000 	ldr.w	sl, [r3]
 80083fe:	680c      	ldr	r4, [r1, #0]
 8008400:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8008404:	eb0a 0609 	add.w	r6, sl, r9
 8008408:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800840c:	00a4      	lsls	r4, r4, #2
 800840e:	eb0c 0302 	add.w	r3, ip, r2
 8008412:	d5d6      	bpl.n	80083c2 <ai_platform_network_process+0x436>
 8008414:	6889      	ldr	r1, [r1, #8]
 8008416:	4660      	mov	r0, ip
 8008418:	f003 fa24 	bl	800b864 <memcpy>
 800841c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8008420:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008424:	440b      	add	r3, r1
 8008426:	4293      	cmp	r3, r2
 8008428:	bf24      	itt	cs
 800842a:	68f3      	ldrcs	r3, [r6, #12]
 800842c:	1ad3      	subcs	r3, r2, r3
 800842e:	6073      	str	r3, [r6, #4]
 8008430:	883b      	ldrh	r3, [r7, #0]
 8008432:	f108 0801 	add.w	r8, r8, #1
 8008436:	4598      	cmp	r8, r3
 8008438:	d3d8      	bcc.n	80083ec <ai_platform_network_process+0x460>
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8008440:	461a      	mov	r2, r3
 8008442:	f10b 0b01 	add.w	fp, fp, #1
 8008446:	8a9b      	ldrh	r3, [r3, #20]
 8008448:	fa1f fb8b 	uxth.w	fp, fp
 800844c:	455b      	cmp	r3, fp
 800844e:	f8a2 b016 	strh.w	fp, [r2, #22]
 8008452:	f63f af6c 	bhi.w	800832e <ai_platform_network_process+0x3a2>
 8008456:	e663      	b.n	8008120 <ai_platform_network_process+0x194>
 8008458:	2700      	movs	r7, #0
 800845a:	e761      	b.n	8008320 <ai_platform_network_process+0x394>
 800845c:	461d      	mov	r5, r3
 800845e:	461f      	mov	r7, r3
 8008460:	e75e      	b.n	8008320 <ai_platform_network_process+0x394>
 8008462:	9c01      	ldr	r4, [sp, #4]
 8008464:	2217      	movs	r2, #23
 8008466:	f104 0010 	add.w	r0, r4, #16
 800846a:	2113      	movs	r1, #19
 800846c:	f000 f80e 	bl	800848c <core_set_error>
 8008470:	46bb      	mov	fp, r7
 8008472:	e655      	b.n	8008120 <ai_platform_network_process+0x194>
 8008474:	f104 0010 	add.w	r0, r4, #16
 8008478:	2230      	movs	r2, #48	; 0x30
 800847a:	2111      	movs	r1, #17
 800847c:	f000 f806 	bl	800848c <core_set_error>
 8008480:	e64e      	b.n	8008120 <ai_platform_network_process+0x194>
 8008482:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008484:	e5c1      	b.n	800800a <ai_platform_network_process+0x7e>
 8008486:	bf00      	nop

08008488 <core_init>:
 8008488:	2001      	movs	r0, #1
 800848a:	4770      	bx	lr

0800848c <core_set_error>:
 800848c:	7803      	ldrb	r3, [r0, #0]
 800848e:	b933      	cbnz	r3, 800849e <core_set_error+0x12>
 8008490:	7001      	strb	r1, [r0, #0]
 8008492:	6803      	ldr	r3, [r0, #0]
 8008494:	f362 231f 	bfi	r3, r2, #8, #24
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	2001      	movs	r0, #1
 800849c:	4770      	bx	lr
 800849e:	2000      	movs	r0, #0
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop

080084a4 <func_dummy>:
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop

080084a8 <ai_dict8_dot_array_f32>:
 80084a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	f8dd c020 	ldr.w	ip, [sp, #32]
 80084b0:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80084b4:	f000 80c0 	beq.w	8008638 <ai_dict8_dot_array_f32+0x190>
 80084b8:	f101 0408 	add.w	r4, r1, #8
 80084bc:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80084c0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8008640 <ai_dict8_dot_array_f32+0x198>
 80084c4:	eb04 0e09 	add.w	lr, r4, r9
 80084c8:	f103 0520 	add.w	r5, r3, #32
 80084cc:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80084d0:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80084d4:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80084d8:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80084dc:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80084e0:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80084e4:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80084e8:	ed55 3a04 	vldr	s7, [r5, #-16]
 80084ec:	ed55 4a03 	vldr	s9, [r5, #-12]
 80084f0:	ed55 5a02 	vldr	s11, [r5, #-8]
 80084f4:	ed55 6a01 	vldr	s13, [r5, #-4]
 80084f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084fc:	edd6 7a00 	vldr	s15, [r6]
 8008500:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8008504:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008508:	ee67 7a83 	vmul.f32	s15, s15, s6
 800850c:	ed9a 3a00 	vldr	s6, [sl]
 8008510:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8008514:	eee3 7a05 	vfma.f32	s15, s6, s10
 8008518:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800851c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008520:	ed97 3a00 	vldr	s6, [r7]
 8008524:	ed96 5a00 	vldr	s10, [r6]
 8008528:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800852c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8008530:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008534:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008538:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800853c:	ed9a 3a00 	vldr	s6, [sl]
 8008540:	ed96 4a00 	vldr	s8, [r6]
 8008544:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8008548:	eee5 7a06 	vfma.f32	s15, s10, s12
 800854c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008550:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008554:	ed97 5a00 	vldr	s10, [r7]
 8008558:	ed96 6a00 	vldr	s12, [r6]
 800855c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008560:	3408      	adds	r4, #8
 8008562:	45a6      	cmp	lr, r4
 8008564:	f105 0520 	add.w	r5, r5, #32
 8008568:	eee4 7a24 	vfma.f32	s15, s8, s9
 800856c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008570:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008578:	d1a8      	bne.n	80084cc <ai_dict8_dot_array_f32+0x24>
 800857a:	4449      	add	r1, r9
 800857c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008580:	f01c 0c07 	ands.w	ip, ip, #7
 8008584:	d050      	beq.n	8008628 <ai_dict8_dot_array_f32+0x180>
 8008586:	780c      	ldrb	r4, [r1, #0]
 8008588:	edd3 6a00 	vldr	s13, [r3]
 800858c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008590:	edd4 7a00 	vldr	s15, [r4]
 8008594:	f1bc 0f01 	cmp.w	ip, #1
 8008598:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800859c:	d044      	beq.n	8008628 <ai_dict8_dot_array_f32+0x180>
 800859e:	784c      	ldrb	r4, [r1, #1]
 80085a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80085a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80085a8:	edd4 7a00 	vldr	s15, [r4]
 80085ac:	f1bc 0f02 	cmp.w	ip, #2
 80085b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085b4:	d038      	beq.n	8008628 <ai_dict8_dot_array_f32+0x180>
 80085b6:	788c      	ldrb	r4, [r1, #2]
 80085b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80085bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80085c0:	edd4 7a00 	vldr	s15, [r4]
 80085c4:	f1bc 0f03 	cmp.w	ip, #3
 80085c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085cc:	d02c      	beq.n	8008628 <ai_dict8_dot_array_f32+0x180>
 80085ce:	78cc      	ldrb	r4, [r1, #3]
 80085d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80085d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80085d8:	edd4 7a00 	vldr	s15, [r4]
 80085dc:	f1bc 0f04 	cmp.w	ip, #4
 80085e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085e4:	d020      	beq.n	8008628 <ai_dict8_dot_array_f32+0x180>
 80085e6:	790c      	ldrb	r4, [r1, #4]
 80085e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80085ec:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80085f0:	edd4 7a00 	vldr	s15, [r4]
 80085f4:	f1bc 0f05 	cmp.w	ip, #5
 80085f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085fc:	d014      	beq.n	8008628 <ai_dict8_dot_array_f32+0x180>
 80085fe:	794c      	ldrb	r4, [r1, #5]
 8008600:	edd3 6a05 	vldr	s13, [r3, #20]
 8008604:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008608:	edd4 7a00 	vldr	s15, [r4]
 800860c:	f1bc 0f06 	cmp.w	ip, #6
 8008610:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008614:	d008      	beq.n	8008628 <ai_dict8_dot_array_f32+0x180>
 8008616:	7989      	ldrb	r1, [r1, #6]
 8008618:	edd3 7a06 	vldr	s15, [r3, #24]
 800861c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008620:	edd2 6a00 	vldr	s13, [r2]
 8008624:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008628:	edd0 7a00 	vldr	s15, [r0]
 800862c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008630:	ed80 7a00 	vstr	s14, [r0]
 8008634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008638:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008640 <ai_dict8_dot_array_f32+0x198>
 800863c:	e7a0      	b.n	8008580 <ai_dict8_dot_array_f32+0xd8>
 800863e:	bf00      	nop
 8008640:	00000000 	.word	0x00000000

08008644 <ai_dict4_dot_array_f32>:
 8008644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800864a:	f027 0c01 	bic.w	ip, r7, #1
 800864e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8008652:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008656:	f000 80ae 	beq.w	80087b6 <ai_dict4_dot_array_f32+0x172>
 800865a:	1d0d      	adds	r5, r1, #4
 800865c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8008660:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80087bc <ai_dict4_dot_array_f32+0x178>
 8008664:	eb05 0e09 	add.w	lr, r5, r9
 8008668:	f103 0420 	add.w	r4, r3, #32
 800866c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8008670:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8008674:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8008678:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800867c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8008680:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8008684:	ed14 5a04 	vldr	s10, [r4, #-16]
 8008688:	ed54 5a03 	vldr	s11, [r4, #-12]
 800868c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008690:	ed54 6a01 	vldr	s13, [r4, #-4]
 8008694:	f006 0a0f 	and.w	sl, r6, #15
 8008698:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800869c:	edda 7a00 	vldr	s15, [sl]
 80086a0:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80086a4:	0936      	lsrs	r6, r6, #4
 80086a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086aa:	ee67 7a83 	vmul.f32	s15, s15, s6
 80086ae:	ed96 3a00 	vldr	s6, [r6]
 80086b2:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80086b6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80086ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086be:	f00b 0b0f 	and.w	fp, fp, #15
 80086c2:	edd6 3a00 	vldr	s7, [r6]
 80086c6:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80086ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 80086ce:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80086d2:	3504      	adds	r5, #4
 80086d4:	ed9b 4a00 	vldr	s8, [fp]
 80086d8:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80086dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80086e0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80086e4:	f00a 0a0f 	and.w	sl, sl, #15
 80086e8:	eddb 4a00 	vldr	s9, [fp]
 80086ec:	eee4 7a85 	vfma.f32	s15, s9, s10
 80086f0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80086f4:	45ae      	cmp	lr, r5
 80086f6:	ed9a 5a00 	vldr	s10, [sl]
 80086fa:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80086fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008702:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008706:	f006 060f 	and.w	r6, r6, #15
 800870a:	edda 5a00 	vldr	s11, [sl]
 800870e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008716:	f104 0420 	add.w	r4, r4, #32
 800871a:	ed96 6a00 	vldr	s12, [r6]
 800871e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008726:	d1a1      	bne.n	800866c <ai_dict4_dot_array_f32+0x28>
 8008728:	4449      	add	r1, r9
 800872a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800872e:	459c      	cmp	ip, r3
 8008730:	d92d      	bls.n	800878e <ai_dict4_dot_array_f32+0x14a>
 8008732:	f10c 0c07 	add.w	ip, ip, #7
 8008736:	f103 0508 	add.w	r5, r3, #8
 800873a:	ebac 0c05 	sub.w	ip, ip, r5
 800873e:	f02c 0407 	bic.w	r4, ip, #7
 8008742:	f103 0810 	add.w	r8, r3, #16
 8008746:	44a0      	add	r8, r4
 8008748:	f101 3eff 	add.w	lr, r1, #4294967295
 800874c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8008750:	ed15 6a01 	vldr	s12, [r5, #-4]
 8008754:	ed55 6a02 	vldr	s13, [r5, #-8]
 8008758:	f004 060f 	and.w	r6, r4, #15
 800875c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008760:	0924      	lsrs	r4, r4, #4
 8008762:	edd6 7a00 	vldr	s15, [r6]
 8008766:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800876a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800876e:	ed94 6a00 	vldr	s12, [r4]
 8008772:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008776:	3508      	adds	r5, #8
 8008778:	45a8      	cmp	r8, r5
 800877a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800877e:	d1e5      	bne.n	800874c <ai_dict4_dot_array_f32+0x108>
 8008780:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8008784:	f10c 0c01 	add.w	ip, ip, #1
 8008788:	4461      	add	r1, ip
 800878a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800878e:	07fc      	lsls	r4, r7, #31
 8008790:	d509      	bpl.n	80087a6 <ai_dict4_dot_array_f32+0x162>
 8008792:	7809      	ldrb	r1, [r1, #0]
 8008794:	edd3 7a00 	vldr	s15, [r3]
 8008798:	090b      	lsrs	r3, r1, #4
 800879a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800879e:	edd2 6a00 	vldr	s13, [r2]
 80087a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087a6:	edd0 7a00 	vldr	s15, [r0]
 80087aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ae:	ed80 7a00 	vstr	s14, [r0]
 80087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b6:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80087bc <ai_dict4_dot_array_f32+0x178>
 80087ba:	e7b8      	b.n	800872e <ai_dict4_dot_array_f32+0xea>
 80087bc:	00000000 	.word	0x00000000

080087c0 <ai_dict_decompress_f32>:
 80087c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087c4:	9f08      	ldr	r7, [sp, #32]
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80087cc:	d00e      	beq.n	80087ec <ai_dict_decompress_f32+0x2c>
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d10a      	bne.n	80087e8 <ai_dict_decompress_f32+0x28>
 80087d2:	42b8      	cmp	r0, r7
 80087d4:	d208      	bcs.n	80087e8 <ai_dict_decompress_f32+0x28>
 80087d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f840 3b04 	str.w	r3, [r0], #4
 80087e4:	4287      	cmp	r7, r0
 80087e6:	d8f6      	bhi.n	80087d6 <ai_dict_decompress_f32+0x16>
 80087e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80087f2:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80087f6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80087fa:	f003 0e01 	and.w	lr, r3, #1
 80087fe:	42b8      	cmp	r0, r7
 8008800:	d2f2      	bcs.n	80087e8 <ai_dict_decompress_f32+0x28>
 8008802:	f1bc 0f00 	cmp.w	ip, #0
 8008806:	d01a      	beq.n	800883e <ai_dict_decompress_f32+0x7e>
 8008808:	f100 0508 	add.w	r5, r0, #8
 800880c:	1e4c      	subs	r4, r1, #1
 800880e:	eb01 0608 	add.w	r6, r1, r8
 8008812:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008816:	091b      	lsrs	r3, r3, #4
 8008818:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800881c:	42a6      	cmp	r6, r4
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f845 3c08 	str.w	r3, [r5, #-8]
 8008824:	7823      	ldrb	r3, [r4, #0]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800882e:	f105 0508 	add.w	r5, r5, #8
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f845 3c0c 	str.w	r3, [r5, #-12]
 8008838:	d1eb      	bne.n	8008812 <ai_dict_decompress_f32+0x52>
 800883a:	4461      	add	r1, ip
 800883c:	4448      	add	r0, r9
 800883e:	f1be 0f00 	cmp.w	lr, #0
 8008842:	d103      	bne.n	800884c <ai_dict_decompress_f32+0x8c>
 8008844:	4287      	cmp	r7, r0
 8008846:	d8dc      	bhi.n	8008802 <ai_dict_decompress_f32+0x42>
 8008848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800884c:	780b      	ldrb	r3, [r1, #0]
 800884e:	091b      	lsrs	r3, r3, #4
 8008850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008854:	3101      	adds	r1, #1
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	3004      	adds	r0, #4
 800885c:	e7cf      	b.n	80087fe <ai_dict_decompress_f32+0x3e>
 800885e:	bf00      	nop

08008860 <forward_conv2d>:
 8008860:	6983      	ldr	r3, [r0, #24]
 8008862:	881a      	ldrh	r2, [r3, #0]
 8008864:	2a00      	cmp	r2, #0
 8008866:	f000 87c7 	beq.w	80097f8 <forward_conv2d+0xf98>
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	6859      	ldr	r1, [r3, #4]
 800886e:	b101      	cbz	r1, 8008872 <forward_conv2d+0x12>
 8008870:	6809      	ldr	r1, [r1, #0]
 8008872:	2a01      	cmp	r2, #1
 8008874:	f240 87bd 	bls.w	80097f2 <forward_conv2d+0xf92>
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	ed2d 8b10 	vpush	{d8-d15}
 8008880:	b0cb      	sub	sp, #300	; 0x12c
 8008882:	691c      	ldr	r4, [r3, #16]
 8008884:	af02      	add	r7, sp, #8
 8008886:	2c00      	cmp	r4, #0
 8008888:	f000 87af 	beq.w	80097ea <forward_conv2d+0xf8a>
 800888c:	6824      	ldr	r4, [r4, #0]
 800888e:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8008892:	2a02      	cmp	r2, #2
 8008894:	f000 87a4 	beq.w	80097e0 <forward_conv2d+0xf80>
 8008898:	69dd      	ldr	r5, [r3, #28]
 800889a:	2d00      	cmp	r5, #0
 800889c:	f000 8799 	beq.w	80097d2 <forward_conv2d+0xf72>
 80088a0:	f113 0218 	adds.w	r2, r3, #24
 80088a4:	682c      	ldr	r4, [r5, #0]
 80088a6:	d004      	beq.n	80088b2 <forward_conv2d+0x52>
 80088a8:	8b1b      	ldrh	r3, [r3, #24]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	f240 87a6 	bls.w	80097fc <forward_conv2d+0xf9c>
 80088b0:	686a      	ldr	r2, [r5, #4]
 80088b2:	68ab      	ldr	r3, [r5, #8]
 80088b4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80088b8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80088bc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80088c0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80088c4:	68ce      	ldr	r6, [r1, #12]
 80088c6:	69a1      	ldr	r1, [r4, #24]
 80088c8:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80088cc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80088d0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80088d4:	f8de 1004 	ldr.w	r1, [lr, #4]
 80088d8:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80088dc:	f8de 100c 	ldr.w	r1, [lr, #12]
 80088e0:	6479      	str	r1, [r7, #68]	; 0x44
 80088e2:	f8de 1008 	ldr.w	r1, [lr, #8]
 80088e6:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80088ea:	6871      	ldr	r1, [r6, #4]
 80088ec:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80088f0:	68f1      	ldr	r1, [r6, #12]
 80088f2:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80088f6:	68b1      	ldr	r1, [r6, #8]
 80088f8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80088fc:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008900:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008904:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008908:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800890c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008910:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8008912:	6889      	ldr	r1, [r1, #8]
 8008914:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008918:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800891a:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800891e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8008922:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008924:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008928:	69c1      	ldr	r1, [r0, #28]
 800892a:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800892e:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 8008932:	2a00      	cmp	r2, #0
 8008934:	f000 8749 	beq.w	80097ca <forward_conv2d+0xf6a>
 8008938:	6992      	ldr	r2, [r2, #24]
 800893a:	6892      	ldr	r2, [r2, #8]
 800893c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008940:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008944:	6992      	ldr	r2, [r2, #24]
 8008946:	6892      	ldr	r2, [r2, #8]
 8008948:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800894c:	4606      	mov	r6, r0
 800894e:	6a00      	ldr	r0, [r0, #32]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 872c 	beq.w	80097ae <forward_conv2d+0xf4e>
 8008956:	699a      	ldr	r2, [r3, #24]
 8008958:	2a00      	cmp	r2, #0
 800895a:	f000 8594 	beq.w	8009486 <forward_conv2d+0xc26>
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008966:	e9d2 0100 	ldrd	r0, r1, [r2]
 800896a:	6893      	ldr	r3, [r2, #8]
 800896c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008970:	f002 fefa 	bl	800b768 <ai_array_get_byte_size>
 8008974:	69a3      	ldr	r3, [r4, #24]
 8008976:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800897a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008984:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800898a:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800898e:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 8008992:	fa1f f088 	uxth.w	r0, r8
 8008996:	4125      	asrs	r5, r4
 8008998:	3801      	subs	r0, #1
 800899a:	1e4c      	subs	r4, r1, #1
 800899c:	fb04 1100 	mla	r1, r4, r0, r1
 80089a0:	6439      	str	r1, [r7, #64]	; 0x40
 80089a2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80089a6:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8008d48 <forward_conv2d+0x4e8>
 80089aa:	fa1f f289 	uxth.w	r2, r9
 80089ae:	3a01      	subs	r2, #1
 80089b0:	1e48      	subs	r0, r1, #1
 80089b2:	fb00 1102 	mla	r1, r0, r2, r1
 80089b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089ba:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80089be:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80089c2:	4610      	mov	r0, r2
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	bf08      	it	eq
 80089c8:	4660      	moveq	r0, ip
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	b2ad      	uxth	r5, r5
 80089ce:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80089d2:	f000 8533 	beq.w	800943c <forward_conv2d+0xbdc>
 80089d6:	2b08      	cmp	r3, #8
 80089d8:	f000 8530 	beq.w	800943c <forward_conv2d+0xbdc>
 80089dc:	fa1f f38b 	uxth.w	r3, fp
 80089e0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80089e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80089e8:	425b      	negs	r3, r3
 80089ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089ee:	2900      	cmp	r1, #0
 80089f0:	f000 8242 	beq.w	8008e78 <forward_conv2d+0x618>
 80089f4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80089f8:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 80089fc:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8008d44 <forward_conv2d+0x4e4>
 8008a00:	fb00 f305 	mul.w	r3, r0, r5
 8008a04:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 8008a08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8008a0c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008a10:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 8008a14:	663d      	str	r5, [r7, #96]	; 0x60
 8008a16:	fa0f f288 	sxth.w	r2, r8
 8008a1a:	fb03 f400 	mul.w	r4, r3, r0
 8008a1e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008a22:	fa1f f18a 	uxth.w	r1, sl
 8008a26:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a2a:	67bc      	str	r4, [r7, #120]	; 0x78
 8008a2c:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8008a30:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008a34:	4249      	negs	r1, r1
 8008a36:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008a3a:	0092      	lsls	r2, r2, #2
 8008a3c:	0081      	lsls	r1, r0, #2
 8008a3e:	4605      	mov	r5, r0
 8008a40:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008a44:	fb04 f200 	mul.w	r2, r4, r0
 8008a48:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008a4c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8008a50:	fb01 fc00 	mul.w	ip, r1, r0
 8008a54:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 8008a58:	fb01 fc03 	mul.w	ip, r1, r3
 8008a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a5e:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a6c:	fa0f f689 	sxth.w	r6, r9
 8008a70:	469c      	mov	ip, r3
 8008a72:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 8008a76:	4633      	mov	r3, r6
 8008a78:	fb0c f606 	mul.w	r6, ip, r6
 8008a7c:	677e      	str	r6, [r7, #116]	; 0x74
 8008a7e:	4666      	mov	r6, ip
 8008a80:	fb04 f606 	mul.w	r6, r4, r6
 8008a84:	4686      	mov	lr, r0
 8008a86:	4620      	mov	r0, r4
 8008a88:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8008a8c:	62be      	str	r6, [r7, #40]	; 0x28
 8008a8e:	fb01 f404 	mul.w	r4, r1, r4
 8008a92:	fb03 f605 	mul.w	r6, r3, r5
 8008a96:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8008a98:	66bc      	str	r4, [r7, #104]	; 0x68
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008aa2:	627e      	str	r6, [r7, #36]	; 0x24
 8008aa4:	fb05 f404 	mul.w	r4, r5, r4
 8008aa8:	617c      	str	r4, [r7, #20]
 8008aaa:	460c      	mov	r4, r1
 8008aac:	fb04 f403 	mul.w	r4, r4, r3
 8008ab0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008ab4:	65bc      	str	r4, [r7, #88]	; 0x58
 8008ab6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8008aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008abe:	fb01 f104 	mul.w	r1, r1, r4
 8008ac2:	61b9      	str	r1, [r7, #24]
 8008ac4:	0091      	lsls	r1, r2, #2
 8008ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8008acc:	fb00 f202 	mul.w	r2, r0, r2
 8008ad0:	0081      	lsls	r1, r0, #2
 8008ad2:	61f9      	str	r1, [r7, #28]
 8008ad4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8008ad8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8008adc:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008ae0:	011a      	lsls	r2, r3, #4
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ae8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008af0:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8008af4:	2300      	movs	r3, #0
 8008af6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008afc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8008b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008b08:	2900      	cmp	r1, #0
 8008b0a:	441a      	add	r2, r3
 8008b0c:	bfb4      	ite	lt
 8008b0e:	2100      	movlt	r1, #0
 8008b10:	2300      	movge	r3, #0
 8008b12:	4282      	cmp	r2, r0
 8008b14:	bf28      	it	cs
 8008b16:	4602      	movcs	r2, r0
 8008b18:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8008b1c:	2801      	cmp	r0, #1
 8008b1e:	f000 8320 	beq.w	8009162 <forward_conv2d+0x902>
 8008b22:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008b26:	4281      	cmp	r1, r0
 8008b28:	f000 81c3 	beq.w	8008eb2 <forward_conv2d+0x652>
 8008b2c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008b30:	2900      	cmp	r1, #0
 8008b32:	f000 8182 	beq.w	8008e3a <forward_conv2d+0x5da>
 8008b36:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8008b3a:	fb93 f1f0 	sdiv	r1, r3, r0
 8008b3e:	fb00 3111 	mls	r1, r0, r1, r3
 8008b42:	1a41      	subs	r1, r0, r1
 8008b44:	1ad2      	subs	r2, r2, r3
 8008b46:	fb91 f5f0 	sdiv	r5, r1, r0
 8008b4a:	fb00 1515 	mls	r5, r0, r5, r1
 8008b4e:	1b52      	subs	r2, r2, r5
 8008b50:	4601      	mov	r1, r0
 8008b52:	4402      	add	r2, r0
 8008b54:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008b58:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 8008b5c:	f8c7 b020 	str.w	fp, [r7, #32]
 8008b60:	4604      	mov	r4, r0
 8008b62:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8008b66:	fbb4 f4f0 	udiv	r4, r4, r0
 8008b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b6c:	3a01      	subs	r2, #1
 8008b6e:	fb92 f8f1 	sdiv	r8, r2, r1
 8008b72:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008b76:	eba0 0c04 	sub.w	ip, r0, r4
 8008b7a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008b7e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008b82:	4614      	mov	r4, r2
 8008b84:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008b88:	fbb4 f2f2 	udiv	r2, r4, r2
 8008b8c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008b90:	657a      	str	r2, [r7, #84]	; 0x54
 8008b92:	441d      	add	r5, r3
 8008b94:	fb0e f000 	mul.w	r0, lr, r0
 8008b98:	440b      	add	r3, r1
 8008b9a:	eba6 0608 	sub.w	r6, r6, r8
 8008b9e:	fb04 f505 	mul.w	r5, r4, r5
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8008ba8:	fb93 f3f4 	sdiv	r3, r3, r4
 8008bac:	fb00 f406 	mul.w	r4, r0, r6
 8008bb0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008bb4:	66fd      	str	r5, [r7, #108]	; 0x6c
 8008bb6:	0091      	lsls	r1, r2, #2
 8008bb8:	fb00 f003 	mul.w	r0, r0, r3
 8008bbc:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8008bc0:	6538      	str	r0, [r7, #80]	; 0x50
 8008bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bc6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8008bca:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8008bce:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8008bd2:	1ac3      	subs	r3, r0, r3
 8008bd4:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8008bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bdc:	008b      	lsls	r3, r1, #2
 8008bde:	637b      	str	r3, [r7, #52]	; 0x34
 8008be0:	00d3      	lsls	r3, r2, #3
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8008bfa:	673b      	str	r3, [r7, #112]	; 0x70
 8008bfc:	46c2      	mov	sl, r8
 8008bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c06:	eb03 0c02 	add.w	ip, r3, r2
 8008c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f2c0 813b 	blt.w	8008e8a <forward_conv2d+0x62a>
 8008c14:	2000      	movs	r0, #0
 8008c16:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8008c18:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	4606      	mov	r6, r0
 8008c20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c28:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c32:	440a      	add	r2, r1
 8008c34:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008c38:	428b      	cmp	r3, r1
 8008c3a:	bf94      	ite	ls
 8008c3c:	ebc6 0303 	rsbls	r3, r6, r3
 8008c40:	ebc6 0301 	rsbhi	r3, r6, r1
 8008c44:	4415      	add	r5, r2
 8008c46:	1a1b      	subs	r3, r3, r0
 8008c48:	00a4      	lsls	r4, r4, #2
 8008c4a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8008c4e:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8008c52:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8008c56:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8008c58:	4602      	mov	r2, r0
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	bf08      	it	eq
 8008c5e:	4662      	moveq	r2, ip
 8008c60:	f108 31ff 	add.w	r1, r8, #4294967295
 8008c64:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008c68:	fb91 f1f0 	sdiv	r1, r1, r0
 8008c6c:	4429      	add	r1, r5
 8008c6e:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8008c72:	fb0e 5501 	mla	r5, lr, r1, r5
 8008c76:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008c7a:	4403      	add	r3, r0
 8008c7c:	fb01 6104 	mla	r1, r1, r4, r6
 8008c80:	3b01      	subs	r3, #1
 8008c82:	fb93 f6f0 	sdiv	r6, r3, r0
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008c8c:	fb06 3110 	mls	r1, r6, r0, r3
 8008c90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c94:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8008c98:	4562      	cmp	r2, ip
 8008c9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008c9e:	bf08      	it	eq
 8008ca0:	eeb0 6a48 	vmoveq.f32	s12, s16
 8008ca4:	1b9b      	subs	r3, r3, r6
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d076      	beq.n	8008d98 <forward_conv2d+0x538>
 8008caa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008cae:	fb0e f803 	mul.w	r8, lr, r3
 8008cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cb4:	fb00 fb01 	mul.w	fp, r0, r1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d06d      	beq.n	8008d98 <forward_conv2d+0x538>
 8008cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cc0:	18d3      	adds	r3, r2, r3
 8008cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8008cce:	2300      	movs	r3, #0
 8008cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8008cd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd8:	4413      	add	r3, r2
 8008cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008cec:	ecf3 7a01 	vldmia	r3!, {s15}
 8008cf0:	f1ba 0f00 	cmp.w	sl, #0
 8008cf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008cf8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008cfc:	f340 80c3 	ble.w	8008e86 <forward_conv2d+0x626>
 8008d00:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8008d04:	f04f 0c00 	mov.w	ip, #0
 8008d08:	2e00      	cmp	r6, #0
 8008d0a:	dd1f      	ble.n	8008d4c <forward_conv2d+0x4ec>
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	eb00 040e 	add.w	r4, r0, lr
 8008d12:	4284      	cmp	r4, r0
 8008d14:	d910      	bls.n	8008d38 <forward_conv2d+0x4d8>
 8008d16:	4603      	mov	r3, r0
 8008d18:	462a      	mov	r2, r5
 8008d1a:	ecb3 7a01 	vldmia	r3!, {s14}
 8008d1e:	ecf2 6a01 	vldmia	r2!, {s13}
 8008d22:	429c      	cmp	r4, r3
 8008d24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008d28:	d8f7      	bhi.n	8008d1a <forward_conv2d+0x4ba>
 8008d2a:	43c3      	mvns	r3, r0
 8008d2c:	441c      	add	r4, r3
 8008d2e:	f024 0403 	bic.w	r4, r4, #3
 8008d32:	3404      	adds	r4, #4
 8008d34:	4425      	add	r5, r4
 8008d36:	4420      	add	r0, r4
 8008d38:	3101      	adds	r1, #1
 8008d3a:	428e      	cmp	r6, r1
 8008d3c:	4448      	add	r0, r9
 8008d3e:	d1e6      	bne.n	8008d0e <forward_conv2d+0x4ae>
 8008d40:	e004      	b.n	8008d4c <forward_conv2d+0x4ec>
 8008d42:	bf00      	nop
 8008d44:	00000000 	.word	0x00000000
 8008d48:	080084a5 	.word	0x080084a5
 8008d4c:	f10c 0c01 	add.w	ip, ip, #1
 8008d50:	45e2      	cmp	sl, ip
 8008d52:	4458      	add	r0, fp
 8008d54:	4445      	add	r5, r8
 8008d56:	d1d7      	bne.n	8008d08 <forward_conv2d+0x4a8>
 8008d58:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d60:	441d      	add	r5, r3
 8008d62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d66:	ece3 7a01 	vstmia	r3!, {s15}
 8008d6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d1b8      	bne.n	8008ce8 <forward_conv2d+0x488>
 8008d76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d7e:	4472      	add	r2, lr
 8008d80:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d86:	1a52      	subs	r2, r2, r1
 8008d88:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8008d8c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008d90:	3301      	adds	r3, #1
 8008d92:	429a      	cmp	r2, r3
 8008d94:	667b      	str	r3, [r7, #100]	; 0x64
 8008d96:	d19c      	bne.n	8008cd2 <forward_conv2d+0x472>
 8008d98:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8008d9c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008da2:	4608      	mov	r0, r1
 8008da4:	4410      	add	r0, r2
 8008da6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008daa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8008dae:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8008db2:	4401      	add	r1, r0
 8008db4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8008db8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008dbc:	1a8a      	subs	r2, r1, r2
 8008dbe:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008dc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	673b      	str	r3, [r7, #112]	; 0x70
 8008dcc:	f47f af17 	bne.w	8008bfe <forward_conv2d+0x39e>
 8008dd0:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8008dd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dd8:	b37b      	cbz	r3, 8008e3a <forward_conv2d+0x5da>
 8008dda:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8008dde:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 8008de2:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 8008de6:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 8008dea:	2500      	movs	r5, #0
 8008dec:	46a2      	mov	sl, r4
 8008dee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008df2:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8008df6:	f8c2 a008 	str.w	sl, [r2, #8]
 8008dfa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008dfe:	4633      	mov	r3, r6
 8008e00:	4641      	mov	r1, r8
 8008e02:	4416      	add	r6, r2
 8008e04:	4640      	mov	r0, r8
 8008e06:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008e0a:	47a0      	blx	r4
 8008e0c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008e10:	4492      	add	sl, r2
 8008e12:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008e16:	eba6 0309 	sub.w	r3, r6, r9
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bfa8      	it	ge
 8008e1e:	464e      	movge	r6, r9
 8008e20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e24:	3501      	adds	r5, #1
 8008e26:	42ab      	cmp	r3, r5
 8008e28:	d1e1      	bne.n	8008dee <forward_conv2d+0x58e>
 8008e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8008e34:	4413      	add	r3, r2
 8008e36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	609a      	str	r2, [r3, #8]
 8008e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e52:	4418      	add	r0, r3
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e60:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008e64:	4413      	add	r3, r2
 8008e66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e6e:	3101      	adds	r1, #1
 8008e70:	428b      	cmp	r3, r1
 8008e72:	67f9      	str	r1, [r7, #124]	; 0x7c
 8008e74:	f47f ae42 	bne.w	8008afc <forward_conv2d+0x29c>
 8008e78:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	ecbd 8b10 	vpop	{d8-d15}
 8008e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e86:	461a      	mov	r2, r3
 8008e88:	e768      	b.n	8008d5c <forward_conv2d+0x4fc>
 8008e8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008e8e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8008e92:	fb90 f3f2 	sdiv	r3, r0, r2
 8008e96:	fb02 0313 	mls	r3, r2, r3, r0
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	fb93 f0f2 	sdiv	r0, r3, r2
 8008ea2:	fb02 3010 	mls	r0, r2, r0, r3
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	462e      	mov	r6, r5
 8008eaa:	18c4      	adds	r4, r0, r3
 8008eac:	eb02 0805 	add.w	r8, r2, r5
 8008eb0:	e6b6      	b.n	8008c20 <forward_conv2d+0x3c0>
 8008eb2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008eb4:	2901      	cmp	r1, #1
 8008eb6:	f47f ae39 	bne.w	8008b2c <forward_conv2d+0x2cc>
 8008eba:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d0bb      	beq.n	8008e3a <forward_conv2d+0x5da>
 8008ec2:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008ec6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008eca:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 8008ece:	fbb1 f5f0 	udiv	r5, r1, r0
 8008ed2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008ed6:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8008eda:	633d      	str	r5, [r7, #48]	; 0x30
 8008edc:	1ad2      	subs	r2, r2, r3
 8008ede:	1a8c      	subs	r4, r1, r2
 8008ee0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ee4:	00b2      	lsls	r2, r6, #2
 8008ee6:	fb02 f204 	mul.w	r2, r2, r4
 8008eea:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8008eee:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8008ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ef4:	0082      	lsls	r2, r0, #2
 8008ef6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ef8:	00ca      	lsls	r2, r1, #3
 8008efa:	603a      	str	r2, [r7, #0]
 8008efc:	00aa      	lsls	r2, r5, #2
 8008efe:	60ba      	str	r2, [r7, #8]
 8008f00:	fb03 f206 	mul.w	r2, r3, r6
 8008f04:	673a      	str	r2, [r7, #112]	; 0x70
 8008f06:	69fa      	ldr	r2, [r7, #28]
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008f1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008f22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f26:	2300      	movs	r3, #0
 8008f28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f2c0 8110 	blt.w	8009156 <forward_conv2d+0x8f6>
 8008f36:	2100      	movs	r1, #0
 8008f38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f3a:	460a      	mov	r2, r1
 8008f3c:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8008f40:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8008f44:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 8008f48:	4420      	add	r0, r4
 8008f4a:	4408      	add	r0, r1
 8008f4c:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008f50:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8008f54:	190c      	adds	r4, r1, r4
 8008f56:	42ac      	cmp	r4, r5
 8008f58:	bf28      	it	cs
 8008f5a:	462c      	movcs	r4, r5
 8008f5c:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008f60:	0080      	lsls	r0, r0, #2
 8008f62:	1aa4      	subs	r4, r4, r2
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	f000 80e7 	beq.w	8009138 <forward_conv2d+0x8d8>
 8008f6a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8008f6e:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 8008f72:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008f76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f7a:	42b5      	cmp	r5, r6
 8008f7c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8008f80:	eba3 0204 	sub.w	r2, r3, r4
 8008f84:	eba1 0104 	sub.w	r1, r1, r4
 8008f88:	bf08      	it	eq
 8008f8a:	eef0 3a48 	vmoveq.f32	s7, s16
 8008f8e:	462b      	mov	r3, r5
 8008f90:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8008f92:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8008f96:	4428      	add	r0, r5
 8008f98:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008f9c:	fb05 6e00 	mla	lr, r5, r0, r6
 8008fa0:	eb0e 000b 	add.w	r0, lr, fp
 8008fa4:	4586      	cmp	lr, r0
 8008fa6:	6238      	str	r0, [r7, #32]
 8008fa8:	f080 80a5 	bcs.w	80090f6 <forward_conv2d+0x896>
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fb4:	fb0b f101 	mul.w	r1, fp, r1
 8008fb8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008fbc:	f024 0803 	bic.w	r8, r4, #3
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	f000 8098 	beq.w	80090f6 <forward_conv2d+0x896>
 8008fc6:	f108 32ff 	add.w	r2, r8, #4294967295
 8008fca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008fcc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008fd0:	0892      	lsrs	r2, r2, #2
 8008fd2:	3201      	adds	r2, #1
 8008fd4:	4401      	add	r1, r0
 8008fd6:	fb02 f00a 	mul.w	r0, r2, sl
 8008fda:	6578      	str	r0, [r7, #84]	; 0x54
 8008fdc:	0110      	lsls	r0, r2, #4
 8008fde:	0092      	lsls	r2, r2, #2
 8008fe0:	653a      	str	r2, [r7, #80]	; 0x50
 8008fe2:	1aca      	subs	r2, r1, r3
 8008fe4:	613a      	str	r2, [r7, #16]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	6678      	str	r0, [r7, #100]	; 0x64
 8008fea:	4413      	add	r3, r2
 8008fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ff0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff6:	4413      	add	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	4413      	add	r3, r2
 8009002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009008:	ecf3 6a01 	vldmia	r3!, {s13}
 800900c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009010:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009014:	2b00      	cmp	r3, #0
 8009016:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800901a:	dd57      	ble.n	80090cc <forward_conv2d+0x86c>
 800901c:	4676      	mov	r6, lr
 800901e:	f04f 0c00 	mov.w	ip, #0
 8009022:	f1b8 0f00 	cmp.w	r8, #0
 8009026:	f340 8085 	ble.w	8009134 <forward_conv2d+0x8d4>
 800902a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800902e:	f109 0310 	add.w	r3, r9, #16
 8009032:	18b1      	adds	r1, r6, r2
 8009034:	2000      	movs	r0, #0
 8009036:	4632      	mov	r2, r6
 8009038:	eb02 050b 	add.w	r5, r2, fp
 800903c:	ed95 7a00 	vldr	s14, [r5]
 8009040:	ed53 7a03 	vldr	s15, [r3, #-12]
 8009044:	ed92 4a00 	vldr	s8, [r2]
 8009048:	ed53 4a04 	vldr	s9, [r3, #-16]
 800904c:	ed91 5a00 	vldr	s10, [r1]
 8009050:	ed53 5a02 	vldr	s11, [r3, #-8]
 8009054:	ed13 6a01 	vldr	s12, [r3, #-4]
 8009058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905c:	eb01 050b 	add.w	r5, r1, fp
 8009060:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009064:	3004      	adds	r0, #4
 8009066:	4540      	cmp	r0, r8
 8009068:	ed95 7a00 	vldr	s14, [r5]
 800906c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009070:	4452      	add	r2, sl
 8009072:	4451      	add	r1, sl
 8009074:	f103 0310 	add.w	r3, r3, #16
 8009078:	eee7 7a06 	vfma.f32	s15, s14, s12
 800907c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009080:	dbda      	blt.n	8009038 <forward_conv2d+0x7d8>
 8009082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009084:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009086:	441e      	add	r6, r3
 8009088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800908a:	4499      	add	r9, r3
 800908c:	42a0      	cmp	r0, r4
 800908e:	da11      	bge.n	80090b4 <forward_conv2d+0x854>
 8009090:	4602      	mov	r2, r0
 8009092:	4633      	mov	r3, r6
 8009094:	4649      	mov	r1, r9
 8009096:	edd3 7a00 	vldr	s15, [r3]
 800909a:	ecb1 7a01 	vldmia	r1!, {s14}
 800909e:	3201      	adds	r2, #1
 80090a0:	42a2      	cmp	r2, r4
 80090a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80090a6:	445b      	add	r3, fp
 80090a8:	d1f5      	bne.n	8009096 <forward_conv2d+0x836>
 80090aa:	1a20      	subs	r0, r4, r0
 80090ac:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80090b0:	fb00 660b 	mla	r6, r0, fp, r6
 80090b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090b8:	441e      	add	r6, r3
 80090ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80090be:	4499      	add	r9, r3
 80090c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090c4:	f10c 0c01 	add.w	ip, ip, #1
 80090c8:	4563      	cmp	r3, ip
 80090ca:	d1aa      	bne.n	8009022 <forward_conv2d+0x7c2>
 80090cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ce:	4499      	add	r9, r3
 80090d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d2:	ece3 6a01 	vstmia	r3!, {s13}
 80090d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090d8:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 80090dc:	4293      	cmp	r3, r2
 80090de:	d191      	bne.n	8009004 <forward_conv2d+0x7a4>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	f10e 0e04 	add.w	lr, lr, #4
 80090f0:	459e      	cmp	lr, r3
 80090f2:	f4ff af7d 	bcc.w	8008ff0 <forward_conv2d+0x790>
 80090f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80090fa:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80090fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009102:	440a      	add	r2, r1
 8009104:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009108:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800910c:	4608      	mov	r0, r1
 800910e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009112:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009116:	4410      	add	r0, r2
 8009118:	1a8a      	subs	r2, r1, r2
 800911a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800911e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009122:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8009126:	3301      	adds	r3, #1
 8009128:	429a      	cmp	r2, r3
 800912a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800912e:	f47f aefd 	bne.w	8008f2c <forward_conv2d+0x6cc>
 8009132:	e64f      	b.n	8008dd4 <forward_conv2d+0x574>
 8009134:	2000      	movs	r0, #0
 8009136:	e7a9      	b.n	800908c <forward_conv2d+0x82c>
 8009138:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800913c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8009140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009144:	1b19      	subs	r1, r3, r4
 8009146:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800914a:	eef0 3a48 	vmov.f32	s7, s16
 800914e:	1b1a      	subs	r2, r3, r4
 8009150:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009154:	e71c      	b.n	8008f90 <forward_conv2d+0x730>
 8009156:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800915a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800915c:	460a      	mov	r2, r1
 800915e:	440b      	add	r3, r1
 8009160:	e6ec      	b.n	8008f3c <forward_conv2d+0x6dc>
 8009162:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009164:	2801      	cmp	r0, #1
 8009166:	f47f ace1 	bne.w	8008b2c <forward_conv2d+0x2cc>
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800916e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8009172:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009178:	fb00 4101 	mla	r1, r0, r1, r4
 800917c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009180:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009184:	f080 8191 	bcs.w	80094aa <forward_conv2d+0xc4a>
 8009188:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800918c:	2a00      	cmp	r2, #0
 800918e:	f43f ae21 	beq.w	8008dd4 <forward_conv2d+0x574>
 8009192:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009194:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8009198:	fb02 f303 	mul.w	r3, r2, r3
 800919c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800919e:	667b      	str	r3, [r7, #100]	; 0x64
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091a4:	188b      	adds	r3, r1, r2
 80091a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80091b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091c0:	2300      	movs	r3, #0
 80091c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 8133 	beq.w	8009436 <forward_conv2d+0xbd6>
 80091d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091d4:	ed93 6a00 	vldr	s12, [r3]
 80091d8:	3304      	adds	r3, #4
 80091da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8101 	beq.w	80093ea <forward_conv2d+0xb8a>
 80091e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091f0:	eb03 0802 	add.w	r8, r3, r2
 80091f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009204:	673b      	str	r3, [r7, #112]	; 0x70
 8009206:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800920a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800920e:	f04f 0b00 	mov.w	fp, #0
 8009212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009216:	2b00      	cmp	r3, #0
 8009218:	f2c0 8104 	blt.w	8009424 <forward_conv2d+0xbc4>
 800921c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009220:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009222:	2300      	movs	r3, #0
 8009224:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8009228:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800922c:	eb02 0c04 	add.w	ip, r2, r4
 8009230:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009234:	4540      	cmp	r0, r8
 8009236:	bf94      	ite	ls
 8009238:	ebc3 0300 	rsbls	r3, r3, r0
 800923c:	ebc3 0308 	rsbhi	r3, r3, r8
 8009240:	eba2 0903 	sub.w	r9, r2, r3
 8009244:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009248:	1ac4      	subs	r4, r0, r3
 800924a:	fb03 f302 	mul.w	r3, r3, r2
 800924e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009252:	2a00      	cmp	r2, #0
 8009254:	f340 80e3 	ble.w	800941e <forward_conv2d+0xbbe>
 8009258:	f023 050f 	bic.w	r5, r3, #15
 800925c:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8009260:	1e68      	subs	r0, r5, #1
 8009262:	0900      	lsrs	r0, r0, #4
 8009264:	3001      	adds	r0, #1
 8009266:	fb06 f204 	mul.w	r2, r6, r4
 800926a:	657a      	str	r2, [r7, #84]	; 0x54
 800926c:	0102      	lsls	r2, r0, #4
 800926e:	653a      	str	r2, [r7, #80]	; 0x50
 8009270:	fb06 f909 	mul.w	r9, r6, r9
 8009274:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009278:	eef0 6a46 	vmov.f32	s13, s12
 800927c:	f04f 0e00 	mov.w	lr, #0
 8009280:	4662      	mov	r2, ip
 8009282:	2d00      	cmp	r5, #0
 8009284:	f340 80c9 	ble.w	800941a <forward_conv2d+0xbba>
 8009288:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800928c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009290:	2600      	movs	r6, #0
 8009292:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8009296:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800929a:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800929e:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 80092a2:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 80092a6:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80092aa:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80092ae:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80092b2:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80092b6:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80092ba:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80092be:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80092c2:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80092c6:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80092ca:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80092ce:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80092d2:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80092d6:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80092da:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80092de:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80092e2:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 80092e6:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80092ea:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 80092ee:	ed50 3a04 	vldr	s7, [r0, #-16]
 80092f2:	ed14 4a04 	vldr	s8, [r4, #-16]
 80092f6:	ed50 4a03 	vldr	s9, [r0, #-12]
 80092fa:	ed14 5a03 	vldr	s10, [r4, #-12]
 80092fe:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009302:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009306:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800930a:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800930e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009312:	3610      	adds	r6, #16
 8009314:	42ae      	cmp	r6, r5
 8009316:	ed14 fa01 	vldr	s30, [r4, #-4]
 800931a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800931e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009322:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009326:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800932a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800932e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009332:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009336:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800933a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800933e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009342:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009346:	eee1 7a82 	vfma.f32	s15, s3, s4
 800934a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800934e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009352:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009356:	eee5 7a87 	vfma.f32	s15, s11, s14
 800935a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800935e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009362:	db96      	blt.n	8009292 <forward_conv2d+0xa32>
 8009364:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009366:	4451      	add	r1, sl
 8009368:	4452      	add	r2, sl
 800936a:	4283      	cmp	r3, r0
 800936c:	dd0f      	ble.n	800938e <forward_conv2d+0xb2e>
 800936e:	4604      	mov	r4, r0
 8009370:	468c      	mov	ip, r1
 8009372:	4616      	mov	r6, r2
 8009374:	ecb6 7a01 	vldmia	r6!, {s14}
 8009378:	ecfc 7a01 	vldmia	ip!, {s15}
 800937c:	3401      	adds	r4, #1
 800937e:	42a3      	cmp	r3, r4
 8009380:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009384:	d1f6      	bne.n	8009374 <forward_conv2d+0xb14>
 8009386:	1a18      	subs	r0, r3, r0
 8009388:	0080      	lsls	r0, r0, #2
 800938a:	4402      	add	r2, r0
 800938c:	4401      	add	r1, r0
 800938e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009390:	4402      	add	r2, r0
 8009392:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009396:	f10e 0e01 	add.w	lr, lr, #1
 800939a:	4570      	cmp	r0, lr
 800939c:	4449      	add	r1, r9
 800939e:	f47f af70 	bne.w	8009282 <forward_conv2d+0xa22>
 80093a2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80093a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093a8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80093ac:	edc3 6a00 	vstr	s13, [r3]
 80093b0:	4608      	mov	r0, r1
 80093b2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80093b6:	440b      	add	r3, r1
 80093b8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80093bc:	673b      	str	r3, [r7, #112]	; 0x70
 80093be:	4410      	add	r0, r2
 80093c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093c2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80093c6:	4608      	mov	r0, r1
 80093c8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80093cc:	4418      	add	r0, r3
 80093ce:	1acb      	subs	r3, r1, r3
 80093d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093d8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80093dc:	f10b 0b01 	add.w	fp, fp, #1
 80093e0:	455b      	cmp	r3, fp
 80093e2:	eba8 0802 	sub.w	r8, r8, r2
 80093e6:	f47f af14 	bne.w	8009212 <forward_conv2d+0x9b2>
 80093ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80093ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093f4:	440a      	add	r2, r1
 80093f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80093fe:	3204      	adds	r2, #4
 8009400:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009404:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009408:	3301      	adds	r3, #1
 800940a:	429a      	cmp	r2, r3
 800940c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009410:	f47f aed9 	bne.w	80091c6 <forward_conv2d+0x966>
 8009414:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 8009418:	e4dc      	b.n	8008dd4 <forward_conv2d+0x574>
 800941a:	2000      	movs	r0, #0
 800941c:	e7a5      	b.n	800936a <forward_conv2d+0xb0a>
 800941e:	eef0 6a46 	vmov.f32	s13, s12
 8009422:	e7be      	b.n	80093a2 <forward_conv2d+0xb42>
 8009424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009428:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800942c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009430:	eba8 0303 	sub.w	r3, r8, r3
 8009434:	e6f6      	b.n	8009224 <forward_conv2d+0x9c4>
 8009436:	eeb0 6a48 	vmov.f32	s12, s16
 800943a:	e6d0      	b.n	80091de <forward_conv2d+0x97e>
 800943c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8009440:	68ca      	ldr	r2, [r1, #12]
 8009442:	2a00      	cmp	r2, #0
 8009444:	f43f aaca 	beq.w	80089dc <forward_conv2d+0x17c>
 8009448:	69b3      	ldr	r3, [r6, #24]
 800944a:	8818      	ldrh	r0, [r3, #0]
 800944c:	2803      	cmp	r0, #3
 800944e:	f240 819f 	bls.w	8009790 <forward_conv2d+0xf30>
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	b32b      	cbz	r3, 80094a4 <forward_conv2d+0xc44>
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	b31b      	cbz	r3, 80094a4 <forward_conv2d+0xc44>
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	6889      	ldr	r1, [r1, #8]
 8009460:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800946a:	9000      	str	r0, [sp, #0]
 800946c:	462b      	mov	r3, r5
 800946e:	4620      	mov	r0, r4
 8009470:	f7ff f9a6 	bl	80087c0 <ai_dict_decompress_f32>
 8009474:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009478:	2c00      	cmp	r4, #0
 800947a:	bf18      	it	ne
 800947c:	4623      	movne	r3, r4
 800947e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009482:	f7ff baab 	b.w	80089dc <forward_conv2d+0x17c>
 8009486:	2800      	cmp	r0, #0
 8009488:	f000 8185 	beq.w	8009796 <forward_conv2d+0xf36>
 800948c:	6883      	ldr	r3, [r0, #8]
 800948e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009492:	2301      	movs	r3, #1
 8009494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009498:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800949c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094a0:	f7ff ba6d 	b.w	800897e <forward_conv2d+0x11e>
 80094a4:	2300      	movs	r3, #0
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	deff      	udf	#255	; 0xff
 80094aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80094ae:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 80094b2:	320a      	adds	r2, #10
 80094b4:	f022 0207 	bic.w	r2, r2, #7
 80094b8:	ebad 0d02 	sub.w	sp, sp, r2
 80094bc:	aa02      	add	r2, sp, #8
 80094be:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80094c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	f000 814d 	beq.w	8009766 <forward_conv2d+0xf06>
 80094cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094ce:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80094d2:	fb02 f303 	mul.w	r3, r2, r3
 80094d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094d8:	657b      	str	r3, [r7, #84]	; 0x54
 80094da:	1a9b      	subs	r3, r3, r2
 80094dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094e2:	4413      	add	r3, r2
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094f2:	673b      	str	r3, [r7, #112]	; 0x70
 80094f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009504:	b13b      	cbz	r3, 8009516 <forward_conv2d+0xcb6>
 8009506:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800950a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800950e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009512:	f002 f9a7 	bl	800b864 <memcpy>
 8009516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8135 	beq.w	800978a <forward_conv2d+0xf2a>
 8009520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009522:	ed93 6a00 	vldr	s12, [r3]
 8009526:	3304      	adds	r3, #4
 8009528:	673b      	str	r3, [r7, #112]	; 0x70
 800952a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8101 	beq.w	8009736 <forward_conv2d+0xed6>
 8009534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009538:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800953c:	eb03 0802 	add.w	r8, r3, r2
 8009540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009552:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800955a:	f04f 0b00 	mov.w	fp, #0
 800955e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009562:	2b00      	cmp	r3, #0
 8009564:	f2c0 8108 	blt.w	8009778 <forward_conv2d+0xf18>
 8009568:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800956c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800956e:	2300      	movs	r3, #0
 8009570:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009574:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009578:	eb02 0c04 	add.w	ip, r2, r4
 800957c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009580:	4540      	cmp	r0, r8
 8009582:	bf94      	ite	ls
 8009584:	ebc3 0300 	rsbls	r3, r3, r0
 8009588:	ebc3 0308 	rsbhi	r3, r3, r8
 800958c:	eba2 0903 	sub.w	r9, r2, r3
 8009590:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009594:	1ac4      	subs	r4, r0, r3
 8009596:	fb03 f302 	mul.w	r3, r3, r2
 800959a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800959e:	2a00      	cmp	r2, #0
 80095a0:	f340 80e7 	ble.w	8009772 <forward_conv2d+0xf12>
 80095a4:	f023 050f 	bic.w	r5, r3, #15
 80095a8:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 80095ac:	1e68      	subs	r0, r5, #1
 80095ae:	0900      	lsrs	r0, r0, #4
 80095b0:	3001      	adds	r0, #1
 80095b2:	fb06 f204 	mul.w	r2, r6, r4
 80095b6:	653a      	str	r2, [r7, #80]	; 0x50
 80095b8:	0102      	lsls	r2, r0, #4
 80095ba:	633a      	str	r2, [r7, #48]	; 0x30
 80095bc:	fb06 f909 	mul.w	r9, r6, r9
 80095c0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80095c4:	eef0 6a46 	vmov.f32	s13, s12
 80095c8:	f04f 0e00 	mov.w	lr, #0
 80095cc:	4662      	mov	r2, ip
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	f340 80cd 	ble.w	800976e <forward_conv2d+0xf0e>
 80095d4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80095d8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80095dc:	2600      	movs	r6, #0
 80095de:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 80095e2:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80095e6:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 80095ea:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 80095ee:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80095f2:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80095f6:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80095fa:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 80095fe:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 8009602:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 8009606:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800960a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800960e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8009612:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8009616:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800961a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800961e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8009622:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8009626:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800962a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800962e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009632:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8009636:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800963a:	ed54 3a04 	vldr	s7, [r4, #-16]
 800963e:	ed10 4a04 	vldr	s8, [r0, #-16]
 8009642:	ed50 4a03 	vldr	s9, [r0, #-12]
 8009646:	ed14 5a03 	vldr	s10, [r4, #-12]
 800964a:	ed54 5a02 	vldr	s11, [r4, #-8]
 800964e:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009652:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8009656:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800965a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800965e:	3610      	adds	r6, #16
 8009660:	42b5      	cmp	r5, r6
 8009662:	ed14 fa01 	vldr	s30, [r4, #-4]
 8009666:	ed50 ea01 	vldr	s29, [r0, #-4]
 800966a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800966e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009672:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009676:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800967a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800967e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009682:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009686:	eee9 7a89 	vfma.f32	s15, s19, s18
 800968a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800968e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009692:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009696:	eee2 7a83 	vfma.f32	s15, s5, s6
 800969a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800969e:	eee4 7a85 	vfma.f32	s15, s9, s10
 80096a2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80096a6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80096aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80096ae:	dc96      	bgt.n	80095de <forward_conv2d+0xd7e>
 80096b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b2:	4451      	add	r1, sl
 80096b4:	4452      	add	r2, sl
 80096b6:	4283      	cmp	r3, r0
 80096b8:	dd0f      	ble.n	80096da <forward_conv2d+0xe7a>
 80096ba:	4604      	mov	r4, r0
 80096bc:	468c      	mov	ip, r1
 80096be:	4616      	mov	r6, r2
 80096c0:	ecb6 7a01 	vldmia	r6!, {s14}
 80096c4:	ecfc 7a01 	vldmia	ip!, {s15}
 80096c8:	3401      	adds	r4, #1
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80096d0:	d1f6      	bne.n	80096c0 <forward_conv2d+0xe60>
 80096d2:	1a18      	subs	r0, r3, r0
 80096d4:	0080      	lsls	r0, r0, #2
 80096d6:	4402      	add	r2, r0
 80096d8:	4401      	add	r1, r0
 80096da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80096dc:	4402      	add	r2, r0
 80096de:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80096e2:	f10e 0e01 	add.w	lr, lr, #1
 80096e6:	4570      	cmp	r0, lr
 80096e8:	4449      	add	r1, r9
 80096ea:	f47f af70 	bne.w	80095ce <forward_conv2d+0xd6e>
 80096ee:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80096f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80096f8:	edc3 6a00 	vstr	s13, [r3]
 80096fc:	4608      	mov	r0, r1
 80096fe:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009702:	440b      	add	r3, r1
 8009704:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800970a:	4410      	add	r0, r2
 800970c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800970e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8009712:	4608      	mov	r0, r1
 8009714:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009718:	4418      	add	r0, r3
 800971a:	1acb      	subs	r3, r1, r3
 800971c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009720:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009724:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8009728:	f10b 0b01 	add.w	fp, fp, #1
 800972c:	455b      	cmp	r3, fp
 800972e:	eba8 0802 	sub.w	r8, r8, r2
 8009732:	f47f af14 	bne.w	800955e <forward_conv2d+0xcfe>
 8009736:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800973a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800973e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009742:	440a      	add	r2, r1
 8009744:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009748:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800974c:	3204      	adds	r2, #4
 800974e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009752:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009756:	3301      	adds	r3, #1
 8009758:	429a      	cmp	r2, r3
 800975a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800975e:	f47f aed0 	bne.w	8009502 <forward_conv2d+0xca2>
 8009762:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 8009766:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800976a:	f7ff bb33 	b.w	8008dd4 <forward_conv2d+0x574>
 800976e:	2000      	movs	r0, #0
 8009770:	e7a1      	b.n	80096b6 <forward_conv2d+0xe56>
 8009772:	eef0 6a46 	vmov.f32	s13, s12
 8009776:	e7ba      	b.n	80096ee <forward_conv2d+0xe8e>
 8009778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009780:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009784:	eba8 0303 	sub.w	r3, r8, r3
 8009788:	e6f2      	b.n	8009570 <forward_conv2d+0xd10>
 800978a:	eeb0 6a48 	vmov.f32	s12, s16
 800978e:	e6cc      	b.n	800952a <forward_conv2d+0xcca>
 8009790:	2300      	movs	r3, #0
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	deff      	udf	#255	; 0xff
 8009796:	4603      	mov	r3, r0
 8009798:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800979c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80097a0:	2301      	movs	r3, #1
 80097a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097aa:	f7ff b8e8 	b.w	800897e <forward_conv2d+0x11e>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d0f2      	beq.n	8009798 <forward_conv2d+0xf38>
 80097b2:	6882      	ldr	r2, [r0, #8]
 80097b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80097b8:	2301      	movs	r3, #1
 80097ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097be:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80097c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097c6:	f7ff b8da 	b.w	800897e <forward_conv2d+0x11e>
 80097ca:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80097ce:	f7ff b8b7 	b.w	8008940 <forward_conv2d+0xe0>
 80097d2:	3318      	adds	r3, #24
 80097d4:	d007      	beq.n	80097e6 <forward_conv2d+0xf86>
 80097d6:	462a      	mov	r2, r5
 80097d8:	462c      	mov	r4, r5
 80097da:	462b      	mov	r3, r5
 80097dc:	f7ff b86a 	b.w	80088b4 <forward_conv2d+0x54>
 80097e0:	2300      	movs	r3, #0
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	deff      	udf	#255	; 0xff
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	deff      	udf	#255	; 0xff
 80097ea:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80097ee:	f7ff b850 	b.w	8008892 <forward_conv2d+0x32>
 80097f2:	2300      	movs	r3, #0
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	deff      	udf	#255	; 0xff
 80097f8:	6853      	ldr	r3, [r2, #4]
 80097fa:	deff      	udf	#255	; 0xff
 80097fc:	2200      	movs	r2, #0
 80097fe:	f7ff b858 	b.w	80088b2 <forward_conv2d+0x52>
 8009802:	bf00      	nop

08009804 <forward_conv2d_nl_pool>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	ed2d 8b10 	vpush	{d8-d15}
 800980c:	b0e1      	sub	sp, #388	; 0x184
 800980e:	6983      	ldr	r3, [r0, #24]
 8009810:	881e      	ldrh	r6, [r3, #0]
 8009812:	af0a      	add	r7, sp, #40	; 0x28
 8009814:	2e00      	cmp	r6, #0
 8009816:	f000 859b 	beq.w	800a350 <forward_conv2d_nl_pool+0xb4c>
 800981a:	6859      	ldr	r1, [r3, #4]
 800981c:	684a      	ldr	r2, [r1, #4]
 800981e:	2a00      	cmp	r2, #0
 8009820:	f000 8593 	beq.w	800a34a <forward_conv2d_nl_pool+0xb46>
 8009824:	f8d2 c000 	ldr.w	ip, [r2]
 8009828:	2e01      	cmp	r6, #1
 800982a:	f240 858b 	bls.w	800a344 <forward_conv2d_nl_pool+0xb40>
 800982e:	690a      	ldr	r2, [r1, #16]
 8009830:	2a00      	cmp	r2, #0
 8009832:	f000 8582 	beq.w	800a33a <forward_conv2d_nl_pool+0xb36>
 8009836:	f8d2 9000 	ldr.w	r9, [r2]
 800983a:	2e02      	cmp	r6, #2
 800983c:	f000 8582 	beq.w	800a344 <forward_conv2d_nl_pool+0xb40>
 8009840:	69cd      	ldr	r5, [r1, #28]
 8009842:	2d00      	cmp	r5, #0
 8009844:	f000 8571 	beq.w	800a32a <forward_conv2d_nl_pool+0xb26>
 8009848:	682a      	ldr	r2, [r5, #0]
 800984a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800984e:	f111 0218 	adds.w	r2, r1, #24
 8009852:	d004      	beq.n	800985e <forward_conv2d_nl_pool+0x5a>
 8009854:	8b0a      	ldrh	r2, [r1, #24]
 8009856:	2a01      	cmp	r2, #1
 8009858:	f240 857c 	bls.w	800a354 <forward_conv2d_nl_pool+0xb50>
 800985c:	686a      	ldr	r2, [r5, #4]
 800985e:	68a9      	ldr	r1, [r5, #8]
 8009860:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009862:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8009866:	f8dc b018 	ldr.w	fp, [ip, #24]
 800986a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800986e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8009872:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009876:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800987a:	f8db 4008 	ldr.w	r4, [fp, #8]
 800987e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8009882:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009886:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800988a:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800988e:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8009892:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009896:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800989a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800989e:	f8de 4004 	ldr.w	r4, [lr, #4]
 80098a2:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 80098a6:	f8de 400c 	ldr.w	r4, [lr, #12]
 80098aa:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80098ae:	f8de 4008 	ldr.w	r4, [lr, #8]
 80098b2:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80098b6:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80098ba:	6824      	ldr	r4, [r4, #0]
 80098bc:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80098c0:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80098c4:	6864      	ldr	r4, [r4, #4]
 80098c6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80098ca:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80098ce:	68a5      	ldr	r5, [r4, #8]
 80098d0:	f8da 4004 	ldr.w	r4, [sl, #4]
 80098d4:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80098d8:	f8da 4008 	ldr.w	r4, [sl, #8]
 80098dc:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80098e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80098e2:	6824      	ldr	r4, [r4, #0]
 80098e4:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 80098e8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80098ea:	6864      	ldr	r4, [r4, #4]
 80098ec:	643c      	str	r4, [r7, #64]	; 0x40
 80098ee:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80098f2:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80098f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80098f8:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80098fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80098fe:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8009902:	69c4      	ldr	r4, [r0, #28]
 8009904:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8009908:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800990a:	64bc      	str	r4, [r7, #72]	; 0x48
 800990c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800990e:	647c      	str	r4, [r7, #68]	; 0x44
 8009910:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8009912:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8009916:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800991a:	2a00      	cmp	r2, #0
 800991c:	f000 84f8 	beq.w	800a310 <forward_conv2d_nl_pool+0xb0c>
 8009920:	6992      	ldr	r2, [r2, #24]
 8009922:	6892      	ldr	r2, [r2, #8]
 8009924:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8009928:	4680      	mov	r8, r0
 800992a:	6a00      	ldr	r0, [r0, #32]
 800992c:	2900      	cmp	r1, #0
 800992e:	f000 84e4 	beq.w	800a2fa <forward_conv2d_nl_pool+0xaf6>
 8009932:	698a      	ldr	r2, [r1, #24]
 8009934:	2a00      	cmp	r2, #0
 8009936:	f000 8533 	beq.w	800a3a0 <forward_conv2d_nl_pool+0xb9c>
 800993a:	694b      	ldr	r3, [r1, #20]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009942:	e9d2 0100 	ldrd	r0, r1, [r2]
 8009946:	6893      	ldr	r3, [r2, #8]
 8009948:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800994c:	f001 ff0c 	bl	800b768 <ai_array_get_byte_size>
 8009950:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009954:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009958:	881e      	ldrh	r6, [r3, #0]
 800995a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800995e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8009962:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 8009966:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009968:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800996c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8009970:	fa11 f585 	uxtah	r5, r1, r5
 8009974:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8009978:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800997c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8009980:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8009984:	3901      	subs	r1, #1
 8009986:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800998a:	eb05 0e00 	add.w	lr, r5, r0
 800998e:	fa1f f28a 	uxth.w	r2, sl
 8009992:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8009996:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800999a:	f8dc 4000 	ldr.w	r4, [ip]
 800999e:	f8dc 1000 	ldr.w	r1, [ip]
 80099a2:	3a01      	subs	r2, #1
 80099a4:	fb00 5002 	mla	r0, r0, r2, r5
 80099a8:	fa1f f28b 	uxth.w	r2, fp
 80099ac:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 80099b0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80099b4:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80099b8:	1e50      	subs	r0, r2, #1
 80099ba:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80099be:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80099c2:	fa44 f101 	asr.w	r1, r4, r1
 80099c6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80099ca:	f8dc 4000 	ldr.w	r4, [ip]
 80099ce:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80099d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80099d6:	f3c4 4543 	ubfx	r5, r4, #17, #4
 80099da:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80099de:	ebae 0202 	sub.w	r2, lr, r2
 80099e2:	fa1f fe81 	uxth.w	lr, r1
 80099e6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80099ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80099ee:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80099f2:	3c01      	subs	r4, #1
 80099f4:	fb04 1100 	mla	r1, r4, r0, r1
 80099f8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80099fc:	1c51      	adds	r1, r2, #1
 80099fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a02:	487c      	ldr	r0, [pc, #496]	; (8009bf4 <forward_conv2d_nl_pool+0x3f0>)
 8009a04:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8009a08:	4611      	mov	r1, r2
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	bf08      	it	eq
 8009a0e:	4601      	moveq	r1, r0
 8009a10:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8009a14:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8009a18:	2d04      	cmp	r5, #4
 8009a1a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8009a1e:	f000 849e 	beq.w	800a35e <forward_conv2d_nl_pool+0xb5a>
 8009a22:	2d08      	cmp	r5, #8
 8009a24:	f000 849b 	beq.w	800a35e <forward_conv2d_nl_pool+0xb5a>
 8009a28:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8009a2c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8009a30:	2e03      	cmp	r6, #3
 8009a32:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8009a36:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8009a3a:	f240 8483 	bls.w	800a344 <forward_conv2d_nl_pool+0xb40>
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 8489 	beq.w	800a35a <forward_conv2d_nl_pool+0xb56>
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8009a56:	6899      	ldr	r1, [r3, #8]
 8009a58:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8009a5c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009a60:	6896      	ldr	r6, [r2, #8]
 8009a62:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8009a66:	4249      	negs	r1, r1
 8009a68:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f000 82dd 	beq.w	800a02c <forward_conv2d_nl_pool+0x828>
 8009a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009a76:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009a7a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009a7e:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8009a82:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8009bf8 <forward_conv2d_nl_pool+0x3f4>
 8009a86:	fb03 f200 	mul.w	r2, r3, r0
 8009a8a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009a8e:	008c      	lsls	r4, r1, #2
 8009a90:	fb04 f000 	mul.w	r0, r4, r0
 8009a94:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8009a98:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8009a9c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8009aa0:	fb01 fc02 	mul.w	ip, r1, r2
 8009aa4:	00a2      	lsls	r2, r4, #2
 8009aa6:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aae:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8009ab2:	00ab      	lsls	r3, r5, #2
 8009ab4:	4694      	mov	ip, r2
 8009ab6:	fb0c f204 	mul.w	r2, ip, r4
 8009aba:	fb04 f303 	mul.w	r3, r4, r3
 8009abe:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8009ac2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8009ac6:	00a4      	lsls	r4, r4, #2
 8009ac8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009acc:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8009ad0:	f04f 0c00 	mov.w	ip, #0
 8009ad4:	fa0f f58b 	sxth.w	r5, fp
 8009ad8:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8009adc:	46a4      	mov	ip, r4
 8009ade:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8009ae2:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8009ae6:	fa0f f58a 	sxth.w	r5, sl
 8009aea:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8009aee:	fb0c fc04 	mul.w	ip, ip, r4
 8009af2:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8009af6:	fb06 fc03 	mul.w	ip, r6, r3
 8009afa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009afe:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8009b02:	4240      	negs	r0, r0
 8009b04:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8009b08:	469c      	mov	ip, r3
 8009b0a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8009b0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b12:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8009b16:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8009b1a:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8009b1e:	fb00 f303 	mul.w	r3, r0, r3
 8009b22:	460d      	mov	r5, r1
 8009b24:	fb0c fc04 	mul.w	ip, ip, r4
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
 8009b2a:	fb04 f305 	mul.w	r3, r4, r5
 8009b2e:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8009b32:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8009b36:	623b      	str	r3, [r7, #32]
 8009b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b3c:	46a6      	mov	lr, r4
 8009b3e:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8009b42:	fb05 f503 	mul.w	r5, r5, r3
 8009b46:	667d      	str	r5, [r7, #100]	; 0x64
 8009b48:	4625      	mov	r5, r4
 8009b4a:	fb05 f503 	mul.w	r5, r5, r3
 8009b4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009b52:	66bd      	str	r5, [r7, #104]	; 0x68
 8009b54:	fb00 f101 	mul.w	r1, r0, r1
 8009b58:	fb03 f306 	mul.w	r3, r3, r6
 8009b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8009b5e:	008b      	lsls	r3, r1, #2
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30
 8009b62:	0093      	lsls	r3, r2, #2
 8009b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b66:	0083      	lsls	r3, r0, #2
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b6e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8009b72:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009b76:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8009b7a:	2400      	movs	r4, #0
 8009b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b7e:	4603      	mov	r3, r0
 8009b80:	fb03 f301 	mul.w	r3, r3, r1
 8009b84:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8009b88:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8009b8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009b90:	00d1      	lsls	r1, r2, #3
 8009b92:	0113      	lsls	r3, r2, #4
 8009b94:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8009b98:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8009b9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009ba0:	fb00 f004 	mul.w	r0, r0, r4
 8009ba4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009ba8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009baa:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009bae:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8009bb2:	469a      	mov	sl, r3
 8009bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f340 81d0 	ble.w	8009f5e <forward_conv2d_nl_pool+0x75a>
 8009bbe:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8009bc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bc6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009bca:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8009bce:	2900      	cmp	r1, #0
 8009bd0:	441a      	add	r2, r3
 8009bd2:	bfb4      	ite	lt
 8009bd4:	2100      	movlt	r1, #0
 8009bd6:	2300      	movge	r3, #0
 8009bd8:	4282      	cmp	r2, r0
 8009bda:	bf28      	it	cs
 8009bdc:	4602      	movcs	r2, r0
 8009bde:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009be2:	2801      	cmp	r0, #1
 8009be4:	f000 83f6 	beq.w	800a3d4 <forward_conv2d_nl_pool+0xbd0>
 8009be8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009bec:	4281      	cmp	r1, r0
 8009bee:	f000 822a 	beq.w	800a046 <forward_conv2d_nl_pool+0x842>
 8009bf2:	e003      	b.n	8009bfc <forward_conv2d_nl_pool+0x3f8>
 8009bf4:	080084a5 	.word	0x080084a5
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8009c00:	2900      	cmp	r1, #0
 8009c02:	f000 819f 	beq.w	8009f44 <forward_conv2d_nl_pool+0x740>
 8009c06:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8009c0a:	fb93 f1f0 	sdiv	r1, r3, r0
 8009c0e:	fb00 3111 	mls	r1, r0, r1, r3
 8009c12:	1a41      	subs	r1, r0, r1
 8009c14:	1ad2      	subs	r2, r2, r3
 8009c16:	fb91 f5f0 	sdiv	r5, r1, r0
 8009c1a:	fb00 1515 	mls	r5, r0, r5, r1
 8009c1e:	1b52      	subs	r2, r2, r5
 8009c20:	4601      	mov	r1, r0
 8009c22:	4402      	add	r2, r0
 8009c24:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8009c28:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009c32:	fbb4 f4f0 	udiv	r4, r4, r0
 8009c36:	6a38      	ldr	r0, [r7, #32]
 8009c38:	3a01      	subs	r2, #1
 8009c3a:	fb92 f8f1 	sdiv	r8, r2, r1
 8009c3e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009c42:	eba0 0c04 	sub.w	ip, r0, r4
 8009c46:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009c4a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009c4e:	4614      	mov	r4, r2
 8009c50:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009c54:	fbb4 f2f2 	udiv	r2, r4, r2
 8009c58:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8009c5c:	663a      	str	r2, [r7, #96]	; 0x60
 8009c5e:	441d      	add	r5, r3
 8009c60:	fb0e f000 	mul.w	r0, lr, r0
 8009c64:	440b      	add	r3, r1
 8009c66:	eba6 0608 	sub.w	r6, r6, r8
 8009c6a:	fb04 f505 	mul.w	r5, r4, r5
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8009c74:	fb93 f3f4 	sdiv	r3, r3, r4
 8009c78:	fb00 f406 	mul.w	r4, r0, r6
 8009c7c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009c80:	677d      	str	r5, [r7, #116]	; 0x74
 8009c82:	0091      	lsls	r1, r2, #2
 8009c84:	fb00 f003 	mul.w	r0, r0, r3
 8009c88:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8009c8c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c92:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8009c96:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8009c9a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8009c9e:	1ac3      	subs	r3, r0, r3
 8009ca0:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8009ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ca8:	008b      	lsls	r3, r1, #2
 8009caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cac:	00d3      	lsls	r3, r2, #3
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8009cc6:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8009cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ccc:	46c2      	mov	sl, r8
 8009cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009cd6:	eb03 0c02 	add.w	ip, r3, r2
 8009cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f2c0 811c 	blt.w	8009f1c <forward_conv2d_nl_pool+0x718>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8009ce8:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8009cec:	4605      	mov	r5, r0
 8009cee:	4606      	mov	r6, r0
 8009cf0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009cf4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009cf8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009d02:	440a      	add	r2, r1
 8009d04:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009d08:	428b      	cmp	r3, r1
 8009d0a:	bf94      	ite	ls
 8009d0c:	ebc6 0303 	rsbls	r3, r6, r3
 8009d10:	ebc6 0301 	rsbhi	r3, r6, r1
 8009d14:	4415      	add	r5, r2
 8009d16:	1a1b      	subs	r3, r3, r0
 8009d18:	00a4      	lsls	r4, r4, #2
 8009d1a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8009d1e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8009d22:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8009d26:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8009d28:	4602      	mov	r2, r0
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	bf08      	it	eq
 8009d2e:	4662      	moveq	r2, ip
 8009d30:	f108 31ff 	add.w	r1, r8, #4294967295
 8009d34:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8009d38:	fb91 f1f0 	sdiv	r1, r1, r0
 8009d3c:	4429      	add	r1, r5
 8009d3e:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8009d42:	fb0e 5501 	mla	r5, lr, r1, r5
 8009d46:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009d4a:	4403      	add	r3, r0
 8009d4c:	fb01 6104 	mla	r1, r1, r4, r6
 8009d50:	3b01      	subs	r3, #1
 8009d52:	fb93 f6f0 	sdiv	r6, r3, r0
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009d5c:	fb06 3110 	mls	r1, r6, r0, r3
 8009d60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009d64:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009d68:	4562      	cmp	r2, ip
 8009d6a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009d6e:	bf08      	it	eq
 8009d70:	eeb0 6a48 	vmoveq.f32	s12, s16
 8009d74:	1b9b      	subs	r3, r3, r6
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d070      	beq.n	8009e5c <forward_conv2d_nl_pool+0x658>
 8009d7a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8009d7e:	fb0e f803 	mul.w	r8, lr, r3
 8009d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d84:	fb00 fb01 	mul.w	fp, r0, r1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d067      	beq.n	8009e5c <forward_conv2d_nl_pool+0x658>
 8009d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d90:	18d3      	adds	r3, r2, r3
 8009d92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d9a:	1a9b      	subs	r3, r3, r2
 8009d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d9e:	2300      	movs	r3, #0
 8009da0:	673b      	str	r3, [r7, #112]	; 0x70
 8009da2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	4413      	add	r3, r2
 8009daa:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	4413      	add	r3, r2
 8009db4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009db8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009dbc:	ecf3 7a01 	vldmia	r3!, {s15}
 8009dc0:	f1ba 0f00 	cmp.w	sl, #0
 8009dc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009dc8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009dcc:	f340 80a4 	ble.w	8009f18 <forward_conv2d_nl_pool+0x714>
 8009dd0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009dd4:	f04f 0c00 	mov.w	ip, #0
 8009dd8:	2e00      	cmp	r6, #0
 8009dda:	dd19      	ble.n	8009e10 <forward_conv2d_nl_pool+0x60c>
 8009ddc:	2100      	movs	r1, #0
 8009dde:	eb00 040e 	add.w	r4, r0, lr
 8009de2:	4284      	cmp	r4, r0
 8009de4:	d910      	bls.n	8009e08 <forward_conv2d_nl_pool+0x604>
 8009de6:	4603      	mov	r3, r0
 8009de8:	462a      	mov	r2, r5
 8009dea:	ecb3 7a01 	vldmia	r3!, {s14}
 8009dee:	ecf2 6a01 	vldmia	r2!, {s13}
 8009df2:	429c      	cmp	r4, r3
 8009df4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009df8:	d8f7      	bhi.n	8009dea <forward_conv2d_nl_pool+0x5e6>
 8009dfa:	43c3      	mvns	r3, r0
 8009dfc:	441c      	add	r4, r3
 8009dfe:	f024 0403 	bic.w	r4, r4, #3
 8009e02:	3404      	adds	r4, #4
 8009e04:	4425      	add	r5, r4
 8009e06:	4420      	add	r0, r4
 8009e08:	3101      	adds	r1, #1
 8009e0a:	428e      	cmp	r6, r1
 8009e0c:	4448      	add	r0, r9
 8009e0e:	d1e6      	bne.n	8009dde <forward_conv2d_nl_pool+0x5da>
 8009e10:	f10c 0c01 	add.w	ip, ip, #1
 8009e14:	45e2      	cmp	sl, ip
 8009e16:	4458      	add	r0, fp
 8009e18:	4445      	add	r5, r8
 8009e1a:	d1dd      	bne.n	8009dd8 <forward_conv2d_nl_pool+0x5d4>
 8009e1c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e24:	441d      	add	r5, r3
 8009e26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e2a:	ece3 7a01 	vstmia	r3!, {s15}
 8009e2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d1be      	bne.n	8009db8 <forward_conv2d_nl_pool+0x5b4>
 8009e3a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009e3e:	69f9      	ldr	r1, [r7, #28]
 8009e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e42:	4472      	add	r2, lr
 8009e44:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e4a:	1a52      	subs	r2, r2, r1
 8009e4c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8009e50:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009e54:	3301      	adds	r3, #1
 8009e56:	429a      	cmp	r2, r3
 8009e58:	673b      	str	r3, [r7, #112]	; 0x70
 8009e5a:	d1a2      	bne.n	8009da2 <forward_conv2d_nl_pool+0x59e>
 8009e5c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009e60:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e66:	4608      	mov	r0, r1
 8009e68:	4410      	add	r0, r2
 8009e6a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009e6e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009e72:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009e76:	4401      	add	r1, r0
 8009e78:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8009e7c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009e80:	1a8a      	subs	r2, r1, r2
 8009e82:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8009e86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e90:	f47f af1d 	bne.w	8009cce <forward_conv2d_nl_pool+0x4ca>
 8009e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e9c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	f000 8210 	beq.w	800a2c8 <forward_conv2d_nl_pool+0xac4>
 8009ea8:	2400      	movs	r4, #0
 8009eaa:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8009eae:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8009eb2:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8009eb6:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8009eba:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8009ebe:	609e      	str	r6, [r3, #8]
 8009ec0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009ec4:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8009ec8:	462b      	mov	r3, r5
 8009eca:	4641      	mov	r1, r8
 8009ecc:	4640      	mov	r0, r8
 8009ece:	47a0      	blx	r4
 8009ed0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009ed4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8009ed8:	6859      	ldr	r1, [r3, #4]
 8009eda:	68da      	ldr	r2, [r3, #12]
 8009edc:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8009ee0:	4405      	add	r5, r0
 8009ee2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009ee6:	0089      	lsls	r1, r1, #2
 8009ee8:	4406      	add	r6, r0
 8009eea:	eba5 0c09 	sub.w	ip, r5, r9
 8009eee:	1850      	adds	r0, r2, r1
 8009ef0:	45a4      	cmp	ip, r4
 8009ef2:	bfa8      	it	ge
 8009ef4:	464d      	movge	r5, r9
 8009ef6:	4286      	cmp	r6, r0
 8009ef8:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8009efc:	bf28      	it	cs
 8009efe:	1a76      	subcs	r6, r6, r1
 8009f00:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8009f04:	3001      	adds	r0, #1
 8009f06:	4281      	cmp	r1, r0
 8009f08:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8009f0c:	d1d7      	bne.n	8009ebe <forward_conv2d_nl_pool+0x6ba>
 8009f0e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8009f12:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8009f16:	e019      	b.n	8009f4c <forward_conv2d_nl_pool+0x748>
 8009f18:	461a      	mov	r2, r3
 8009f1a:	e781      	b.n	8009e20 <forward_conv2d_nl_pool+0x61c>
 8009f1c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009f20:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8009f24:	fb90 f3f2 	sdiv	r3, r0, r2
 8009f28:	fb02 0313 	mls	r3, r2, r3, r0
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	4605      	mov	r5, r0
 8009f30:	fb93 f0f2 	sdiv	r0, r3, r2
 8009f34:	fb02 3010 	mls	r0, r2, r0, r3
 8009f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f3a:	462e      	mov	r6, r5
 8009f3c:	18c4      	adds	r4, r0, r3
 8009f3e:	eb02 0805 	add.w	r8, r2, r5
 8009f42:	e6d5      	b.n	8009cf0 <forward_conv2d_nl_pool+0x4ec>
 8009f44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	68da      	ldr	r2, [r3, #12]
 8009f4c:	609a      	str	r2, [r3, #8]
 8009f4e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009f52:	3301      	adds	r3, #1
 8009f54:	b21b      	sxth	r3, r3
 8009f56:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f64:	f100 83bf 	bmi.w	800a6e6 <forward_conv2d_nl_pool+0xee2>
 8009f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f6c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8009f70:	42a3      	cmp	r3, r4
 8009f72:	f200 839d 	bhi.w	800a6b0 <forward_conv2d_nl_pool+0xeac>
 8009f76:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	6990      	ldr	r0, [r2, #24]
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f84:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8009f88:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	fa1f f188 	uxth.w	r1, r8
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f98:	9308      	str	r3, [sp, #32]
 8009f9a:	9105      	str	r1, [sp, #20]
 8009f9c:	2601      	movs	r6, #1
 8009f9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009fa2:	9607      	str	r6, [sp, #28]
 8009fa4:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8009fa8:	9506      	str	r5, [sp, #24]
 8009faa:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8009fae:	9304      	str	r3, [sp, #16]
 8009fb0:	1a64      	subs	r4, r4, r1
 8009fb2:	b2b1      	uxth	r1, r6
 8009fb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8009fbe:	b224      	sxth	r4, r4
 8009fc0:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8009fc4:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8009fc8:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8009fcc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8009fce:	47a0      	blx	r4
 8009fd0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009fd4:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8009fd8:	688a      	ldr	r2, [r1, #8]
 8009fda:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8009fdc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8009fe0:	fa0f f388 	sxth.w	r3, r8
 8009fe4:	1af3      	subs	r3, r6, r3
 8009fe6:	4422      	add	r2, r4
 8009fe8:	462e      	mov	r6, r5
 8009fea:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8009fee:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8009ff2:	608a      	str	r2, [r1, #8]
 8009ff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ff8:	4426      	add	r6, r4
 8009ffa:	b21b      	sxth	r3, r3
 8009ffc:	1b2c      	subs	r4, r5, r4
 8009ffe:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800a002:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800a004:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800a008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a00c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a010:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800a014:	3001      	adds	r0, #1
 800a016:	442c      	add	r4, r5
 800a018:	4283      	cmp	r3, r0
 800a01a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 800a01e:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800a022:	f63f adc7 	bhi.w	8009bb4 <forward_conv2d_nl_pool+0x3b0>
 800a026:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	609a      	str	r2, [r3, #8]
 800a030:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a034:	68d3      	ldr	r3, [r2, #12]
 800a036:	6093      	str	r3, [r2, #8]
 800a038:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800a03c:	46bd      	mov	sp, r7
 800a03e:	ecbd 8b10 	vpop	{d8-d15}
 800a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a046:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a048:	2901      	cmp	r1, #1
 800a04a:	f47f add7 	bne.w	8009bfc <forward_conv2d_nl_pool+0x3f8>
 800a04e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800a052:	2900      	cmp	r1, #0
 800a054:	f43f af76 	beq.w	8009f44 <forward_conv2d_nl_pool+0x740>
 800a058:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800a05c:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800a060:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800a064:	1ad2      	subs	r2, r2, r3
 800a066:	1a8c      	subs	r4, r1, r2
 800a068:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800a06c:	00b2      	lsls	r2, r6, #2
 800a06e:	fb02 f204 	mul.w	r2, r2, r4
 800a072:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800a076:	fbb1 f1f0 	udiv	r1, r1, r0
 800a07a:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800a07e:	460d      	mov	r5, r1
 800a080:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a082:	62ba      	str	r2, [r7, #40]	; 0x28
 800a084:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800a088:	0082      	lsls	r2, r0, #2
 800a08a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a08c:	00ca      	lsls	r2, r1, #3
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	00aa      	lsls	r2, r5, #2
 800a092:	60ba      	str	r2, [r7, #8]
 800a094:	fb03 f206 	mul.w	r2, r3, r6
 800a098:	67ba      	str	r2, [r7, #120]	; 0x78
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	fb02 f303 	mul.w	r3, r2, r3
 800a0a0:	617b      	str	r3, [r7, #20]
 800a0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a0aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0ae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a0b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a0b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f2c0 8112 	blt.w	800a2ee <forward_conv2d_nl_pool+0xaea>
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ce:	460a      	mov	r2, r1
 800a0d0:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800a0d4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800a0d8:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800a0dc:	4420      	add	r0, r4
 800a0de:	4408      	add	r0, r1
 800a0e0:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800a0e4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800a0e8:	190c      	adds	r4, r1, r4
 800a0ea:	42ac      	cmp	r4, r5
 800a0ec:	bf28      	it	cs
 800a0ee:	462c      	movcs	r4, r5
 800a0f0:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800a0f4:	0080      	lsls	r0, r0, #2
 800a0f6:	1aa4      	subs	r4, r4, r2
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	f000 80e9 	beq.w	800a2d0 <forward_conv2d_nl_pool+0xacc>
 800a0fe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a102:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800a106:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800a10a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a10e:	42b5      	cmp	r5, r6
 800a110:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800a114:	eba3 0204 	sub.w	r2, r3, r4
 800a118:	eba1 0104 	sub.w	r1, r1, r4
 800a11c:	bf08      	it	eq
 800a11e:	eef0 3a48 	vmoveq.f32	s7, s16
 800a122:	462b      	mov	r3, r5
 800a124:	697d      	ldr	r5, [r7, #20]
 800a126:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800a12a:	4428      	add	r0, r5
 800a12c:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800a130:	fb05 6e00 	mla	lr, r5, r0, r6
 800a134:	eb0e 000b 	add.w	r0, lr, fp
 800a138:	4586      	cmp	lr, r0
 800a13a:	61f8      	str	r0, [r7, #28]
 800a13c:	f080 80a5 	bcs.w	800a28a <forward_conv2d_nl_pool+0xa86>
 800a140:	0092      	lsls	r2, r2, #2
 800a142:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800a146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a148:	fb01 f10b 	mul.w	r1, r1, fp
 800a14c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800a150:	f024 0803 	bic.w	r8, r4, #3
 800a154:	2a00      	cmp	r2, #0
 800a156:	f000 8098 	beq.w	800a28a <forward_conv2d_nl_pool+0xa86>
 800a15a:	f108 32ff 	add.w	r2, r8, #4294967295
 800a15e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a160:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800a164:	0892      	lsrs	r2, r2, #2
 800a166:	3201      	adds	r2, #1
 800a168:	4401      	add	r1, r0
 800a16a:	fb02 f00a 	mul.w	r0, r2, sl
 800a16e:	6638      	str	r0, [r7, #96]	; 0x60
 800a170:	0110      	lsls	r0, r2, #4
 800a172:	0092      	lsls	r2, r2, #2
 800a174:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a176:	1aca      	subs	r2, r1, r3
 800a178:	613a      	str	r2, [r7, #16]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	6738      	str	r0, [r7, #112]	; 0x70
 800a17e:	4413      	add	r3, r2
 800a180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a184:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a18a:	4413      	add	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	4413      	add	r3, r2
 800a196:	677b      	str	r3, [r7, #116]	; 0x74
 800a198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a19c:	ecf3 6a01 	vldmia	r3!, {s13}
 800a1a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a1ae:	dd57      	ble.n	800a260 <forward_conv2d_nl_pool+0xa5c>
 800a1b0:	4676      	mov	r6, lr
 800a1b2:	f04f 0c00 	mov.w	ip, #0
 800a1b6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ba:	f340 8087 	ble.w	800a2cc <forward_conv2d_nl_pool+0xac8>
 800a1be:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a1c2:	f109 0310 	add.w	r3, r9, #16
 800a1c6:	18b1      	adds	r1, r6, r2
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	eb02 050b 	add.w	r5, r2, fp
 800a1d0:	ed95 7a00 	vldr	s14, [r5]
 800a1d4:	ed53 7a03 	vldr	s15, [r3, #-12]
 800a1d8:	ed92 4a00 	vldr	s8, [r2]
 800a1dc:	ed53 4a04 	vldr	s9, [r3, #-16]
 800a1e0:	ed91 5a00 	vldr	s10, [r1]
 800a1e4:	ed53 5a02 	vldr	s11, [r3, #-8]
 800a1e8:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f0:	eb01 050b 	add.w	r5, r1, fp
 800a1f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a1f8:	3004      	adds	r0, #4
 800a1fa:	4540      	cmp	r0, r8
 800a1fc:	ed95 7a00 	vldr	s14, [r5]
 800a200:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a204:	4452      	add	r2, sl
 800a206:	4451      	add	r1, sl
 800a208:	f103 0310 	add.w	r3, r3, #16
 800a20c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a210:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a214:	dbda      	blt.n	800a1cc <forward_conv2d_nl_pool+0x9c8>
 800a216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a218:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a21a:	441e      	add	r6, r3
 800a21c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a21e:	4499      	add	r9, r3
 800a220:	42a0      	cmp	r0, r4
 800a222:	da11      	bge.n	800a248 <forward_conv2d_nl_pool+0xa44>
 800a224:	4602      	mov	r2, r0
 800a226:	4633      	mov	r3, r6
 800a228:	4649      	mov	r1, r9
 800a22a:	edd3 7a00 	vldr	s15, [r3]
 800a22e:	ecb1 7a01 	vldmia	r1!, {s14}
 800a232:	3201      	adds	r2, #1
 800a234:	42a2      	cmp	r2, r4
 800a236:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a23a:	445b      	add	r3, fp
 800a23c:	d1f5      	bne.n	800a22a <forward_conv2d_nl_pool+0xa26>
 800a23e:	1a20      	subs	r0, r4, r0
 800a240:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800a244:	fb00 660b 	mla	r6, r0, fp, r6
 800a248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a24c:	441e      	add	r6, r3
 800a24e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a252:	4499      	add	r9, r3
 800a254:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a258:	f10c 0c01 	add.w	ip, ip, #1
 800a25c:	4563      	cmp	r3, ip
 800a25e:	d1aa      	bne.n	800a1b6 <forward_conv2d_nl_pool+0x9b2>
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	4499      	add	r9, r3
 800a264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a266:	ece3 6a01 	vstmia	r3!, {s13}
 800a26a:	677b      	str	r3, [r7, #116]	; 0x74
 800a26c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 800a270:	4293      	cmp	r3, r2
 800a272:	d191      	bne.n	800a198 <forward_conv2d_nl_pool+0x994>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	f10e 0e04 	add.w	lr, lr, #4
 800a284:	459e      	cmp	lr, r3
 800a286:	f4ff af7d 	bcc.w	800a184 <forward_conv2d_nl_pool+0x980>
 800a28a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a28e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800a292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a296:	440a      	add	r2, r1
 800a298:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800a29c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a2a6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a2aa:	4410      	add	r0, r2
 800a2ac:	1a8a      	subs	r2, r1, r2
 800a2ae:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a2b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800a2b6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2c2:	f47f aefd 	bne.w	800a0c0 <forward_conv2d_nl_pool+0x8bc>
 800a2c6:	e5e7      	b.n	8009e98 <forward_conv2d_nl_pool+0x694>
 800a2c8:	68da      	ldr	r2, [r3, #12]
 800a2ca:	e63f      	b.n	8009f4c <forward_conv2d_nl_pool+0x748>
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e7a7      	b.n	800a220 <forward_conv2d_nl_pool+0xa1c>
 800a2d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a2d4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800a2d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2dc:	1b19      	subs	r1, r3, r4
 800a2de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a2e2:	eef0 3a48 	vmov.f32	s7, s16
 800a2e6:	1b1a      	subs	r2, r3, r4
 800a2e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a2ec:	e71a      	b.n	800a124 <forward_conv2d_nl_pool+0x920>
 800a2ee:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a2f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2f4:	460a      	mov	r2, r1
 800a2f6:	440b      	add	r3, r1
 800a2f8:	e6ea      	b.n	800a0d0 <forward_conv2d_nl_pool+0x8cc>
 800a2fa:	b168      	cbz	r0, 800a318 <forward_conv2d_nl_pool+0xb14>
 800a2fc:	6882      	ldr	r2, [r0, #8]
 800a2fe:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800a302:	2201      	movs	r2, #1
 800a304:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800a308:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a30c:	f7ff bb29 	b.w	8009962 <forward_conv2d_nl_pool+0x15e>
 800a310:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800a314:	f7ff bb08 	b.w	8009928 <forward_conv2d_nl_pool+0x124>
 800a318:	2201      	movs	r2, #1
 800a31a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800a31e:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800a322:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a326:	f7ff bb1c 	b.w	8009962 <forward_conv2d_nl_pool+0x15e>
 800a32a:	3118      	adds	r1, #24
 800a32c:	d008      	beq.n	800a340 <forward_conv2d_nl_pool+0xb3c>
 800a32e:	462a      	mov	r2, r5
 800a330:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 800a334:	4629      	mov	r1, r5
 800a336:	f7ff ba93 	b.w	8009860 <forward_conv2d_nl_pool+0x5c>
 800a33a:	4691      	mov	r9, r2
 800a33c:	f7ff ba7d 	b.w	800983a <forward_conv2d_nl_pool+0x36>
 800a340:	68cb      	ldr	r3, [r1, #12]
 800a342:	deff      	udf	#255	; 0xff
 800a344:	2300      	movs	r3, #0
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	deff      	udf	#255	; 0xff
 800a34a:	4694      	mov	ip, r2
 800a34c:	f7ff ba6c 	b.w	8009828 <forward_conv2d_nl_pool+0x24>
 800a350:	6873      	ldr	r3, [r6, #4]
 800a352:	deff      	udf	#255	; 0xff
 800a354:	2200      	movs	r2, #0
 800a356:	f7ff ba82 	b.w	800985e <forward_conv2d_nl_pool+0x5a>
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	deff      	udf	#255	; 0xff
 800a35e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800a362:	2a00      	cmp	r2, #0
 800a364:	f43f ab60 	beq.w	8009a28 <forward_conv2d_nl_pool+0x224>
 800a368:	2e03      	cmp	r6, #3
 800a36a:	d9eb      	bls.n	800a344 <forward_conv2d_nl_pool+0xb40>
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	b323      	cbz	r3, 800a3bc <forward_conv2d_nl_pool+0xbb8>
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	b313      	cbz	r3, 800a3bc <forward_conv2d_nl_pool+0xbb8>
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a37c:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800a386:	9000      	str	r0, [sp, #0]
 800a388:	4673      	mov	r3, lr
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7fe fa18 	bl	80087c0 <ai_dict_decompress_f32>
 800a390:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a394:	b17c      	cbz	r4, 800a3b6 <forward_conv2d_nl_pool+0xbb2>
 800a396:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800a39a:	881e      	ldrh	r6, [r3, #0]
 800a39c:	f7ff bb44 	b.w	8009a28 <forward_conv2d_nl_pool+0x224>
 800a3a0:	b178      	cbz	r0, 800a3c2 <forward_conv2d_nl_pool+0xbbe>
 800a3a2:	6881      	ldr	r1, [r0, #8]
 800a3a4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800a3ae:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a3b2:	f7ff bad6 	b.w	8009962 <forward_conv2d_nl_pool+0x15e>
 800a3b6:	881e      	ldrh	r6, [r3, #0]
 800a3b8:	f7ff bb36 	b.w	8009a28 <forward_conv2d_nl_pool+0x224>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	deff      	udf	#255	; 0xff
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800a3c8:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800a3cc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a3d0:	f7ff bac7 	b.w	8009962 <forward_conv2d_nl_pool+0x15e>
 800a3d4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a3d6:	2801      	cmp	r0, #1
 800a3d8:	f47f ac10 	bne.w	8009bfc <forward_conv2d_nl_pool+0x3f8>
 800a3dc:	1ad2      	subs	r2, r2, r3
 800a3de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3e0:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800a3e4:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800a3e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ea:	fb00 4101 	mla	r1, r0, r1, r4
 800a3ee:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800a3f2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800a3f6:	f080 81c4 	bcs.w	800a782 <forward_conv2d_nl_pool+0xf7e>
 800a3fa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800a3fe:	2a00      	cmp	r2, #0
 800a400:	f43f ad4a 	beq.w	8009e98 <forward_conv2d_nl_pool+0x694>
 800a404:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a408:	fb02 f303 	mul.w	r3, r2, r3
 800a40c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a40e:	677b      	str	r3, [r7, #116]	; 0x74
 800a410:	1a9b      	subs	r3, r3, r2
 800a412:	663b      	str	r3, [r7, #96]	; 0x60
 800a414:	188b      	adds	r3, r1, r2
 800a416:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a41c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a428:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800a42c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a434:	2300      	movs	r3, #0
 800a436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a43a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 8133 	beq.w	800a6aa <forward_conv2d_nl_pool+0xea6>
 800a444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a448:	ed93 6a00 	vldr	s12, [r3]
 800a44c:	3304      	adds	r3, #4
 800a44e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a452:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 8101 	beq.w	800a65e <forward_conv2d_nl_pool+0xe5a>
 800a45c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a460:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800a464:	eb03 0802 	add.w	r8, r3, r2
 800a468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a46a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a46e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a478:	67bb      	str	r3, [r7, #120]	; 0x78
 800a47a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a47e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a482:	f04f 0b00 	mov.w	fp, #0
 800a486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f2c0 8104 	blt.w	800a698 <forward_conv2d_nl_pool+0xe94>
 800a490:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800a494:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a496:	2300      	movs	r3, #0
 800a498:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800a49c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800a4a0:	eb02 0c04 	add.w	ip, r2, r4
 800a4a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800a4a8:	4540      	cmp	r0, r8
 800a4aa:	bf94      	ite	ls
 800a4ac:	ebc3 0300 	rsbls	r3, r3, r0
 800a4b0:	ebc3 0308 	rsbhi	r3, r3, r8
 800a4b4:	eba2 0903 	sub.w	r9, r2, r3
 800a4b8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800a4bc:	1ac4      	subs	r4, r0, r3
 800a4be:	fb03 f302 	mul.w	r3, r3, r2
 800a4c2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	f340 80e3 	ble.w	800a692 <forward_conv2d_nl_pool+0xe8e>
 800a4cc:	f023 050f 	bic.w	r5, r3, #15
 800a4d0:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800a4d4:	1e68      	subs	r0, r5, #1
 800a4d6:	0900      	lsrs	r0, r0, #4
 800a4d8:	3001      	adds	r0, #1
 800a4da:	fb06 f204 	mul.w	r2, r6, r4
 800a4de:	673a      	str	r2, [r7, #112]	; 0x70
 800a4e0:	0102      	lsls	r2, r0, #4
 800a4e2:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4e4:	fb06 f909 	mul.w	r9, r6, r9
 800a4e8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800a4ec:	eef0 6a46 	vmov.f32	s13, s12
 800a4f0:	f04f 0e00 	mov.w	lr, #0
 800a4f4:	4662      	mov	r2, ip
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	f340 80c9 	ble.w	800a68e <forward_conv2d_nl_pool+0xe8a>
 800a4fc:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800a500:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800a504:	2600      	movs	r6, #0
 800a506:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800a50a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800a50e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800a512:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800a516:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800a51a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800a51e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800a522:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800a526:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800a52a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800a52e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800a532:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800a536:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800a53a:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800a53e:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800a542:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800a546:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800a54a:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800a54e:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800a552:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800a556:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800a55a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800a55e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800a562:	ed50 3a04 	vldr	s7, [r0, #-16]
 800a566:	ed14 4a04 	vldr	s8, [r4, #-16]
 800a56a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800a56e:	ed14 5a03 	vldr	s10, [r4, #-12]
 800a572:	ed50 5a02 	vldr	s11, [r0, #-8]
 800a576:	ed14 7a02 	vldr	s14, [r4, #-8]
 800a57a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800a57e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800a582:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a586:	3610      	adds	r6, #16
 800a588:	42ae      	cmp	r6, r5
 800a58a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800a58e:	ed50 ea01 	vldr	s29, [r0, #-4]
 800a592:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800a596:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800a59a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800a59e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800a5a2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a5a6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a5aa:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a5ae:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a5b2:	eee8 7a80 	vfma.f32	s15, s17, s0
 800a5b6:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a5ba:	eee1 7a82 	vfma.f32	s15, s3, s4
 800a5be:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a5c2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a5c6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a5ca:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a5ce:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a5d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5d6:	db96      	blt.n	800a506 <forward_conv2d_nl_pool+0xd02>
 800a5d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a5da:	4451      	add	r1, sl
 800a5dc:	4452      	add	r2, sl
 800a5de:	4283      	cmp	r3, r0
 800a5e0:	dd0f      	ble.n	800a602 <forward_conv2d_nl_pool+0xdfe>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	468c      	mov	ip, r1
 800a5e6:	4616      	mov	r6, r2
 800a5e8:	ecb6 7a01 	vldmia	r6!, {s14}
 800a5ec:	ecfc 7a01 	vldmia	ip!, {s15}
 800a5f0:	3401      	adds	r4, #1
 800a5f2:	42a3      	cmp	r3, r4
 800a5f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a5f8:	d1f6      	bne.n	800a5e8 <forward_conv2d_nl_pool+0xde4>
 800a5fa:	1a18      	subs	r0, r3, r0
 800a5fc:	0080      	lsls	r0, r0, #2
 800a5fe:	4402      	add	r2, r0
 800a600:	4401      	add	r1, r0
 800a602:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a604:	4402      	add	r2, r0
 800a606:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800a60a:	f10e 0e01 	add.w	lr, lr, #1
 800a60e:	4570      	cmp	r0, lr
 800a610:	4449      	add	r1, r9
 800a612:	f47f af70 	bne.w	800a4f6 <forward_conv2d_nl_pool+0xcf2>
 800a616:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a61a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a61c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a620:	edc3 6a00 	vstr	s13, [r3]
 800a624:	4608      	mov	r0, r1
 800a626:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800a62a:	440b      	add	r3, r1
 800a62c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800a630:	67bb      	str	r3, [r7, #120]	; 0x78
 800a632:	4410      	add	r0, r2
 800a634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a636:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800a63a:	4608      	mov	r0, r1
 800a63c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800a640:	4418      	add	r0, r3
 800a642:	1acb      	subs	r3, r1, r3
 800a644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a648:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a64c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800a650:	f10b 0b01 	add.w	fp, fp, #1
 800a654:	455b      	cmp	r3, fp
 800a656:	eba8 0802 	sub.w	r8, r8, r2
 800a65a:	f47f af14 	bne.w	800a486 <forward_conv2d_nl_pool+0xc82>
 800a65e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a668:	440a      	add	r2, r1
 800a66a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800a66e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a672:	3204      	adds	r2, #4
 800a674:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a678:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800a67c:	3301      	adds	r3, #1
 800a67e:	429a      	cmp	r2, r3
 800a680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a684:	f47f aed9 	bne.w	800a43a <forward_conv2d_nl_pool+0xc36>
 800a688:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800a68c:	e404      	b.n	8009e98 <forward_conv2d_nl_pool+0x694>
 800a68e:	2000      	movs	r0, #0
 800a690:	e7a5      	b.n	800a5de <forward_conv2d_nl_pool+0xdda>
 800a692:	eef0 6a46 	vmov.f32	s13, s12
 800a696:	e7be      	b.n	800a616 <forward_conv2d_nl_pool+0xe12>
 800a698:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a69c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a6a0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800a6a4:	eba8 0303 	sub.w	r3, r8, r3
 800a6a8:	e6f6      	b.n	800a498 <forward_conv2d_nl_pool+0xc94>
 800a6aa:	eeb0 6a48 	vmov.f32	s12, s16
 800a6ae:	e6d0      	b.n	800a452 <forward_conv2d_nl_pool+0xc4e>
 800a6b0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800a6be:	4419      	add	r1, r3
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a6c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6cc:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a6d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a6da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	f63f aa68 	bhi.w	8009bb4 <forward_conv2d_nl_pool+0x3b0>
 800a6e4:	e49f      	b.n	800a026 <forward_conv2d_nl_pool+0x822>
 800a6e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6ea:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800a6f4:	68d1      	ldr	r1, [r2, #12]
 800a6f6:	6853      	ldr	r3, [r2, #4]
 800a6f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6fa:	fb00 4012 	mls	r0, r0, r2, r4
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4281      	cmp	r1, r0
 800a702:	bf88      	it	hi
 800a704:	18c0      	addhi	r0, r0, r3
 800a706:	4281      	cmp	r1, r0
 800a708:	eb01 0203 	add.w	r2, r1, r3
 800a70c:	d216      	bcs.n	800a73c <forward_conv2d_nl_pool+0xf38>
 800a70e:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800a712:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800a716:	42a1      	cmp	r1, r4
 800a718:	d010      	beq.n	800a73c <forward_conv2d_nl_pool+0xf38>
 800a71a:	4290      	cmp	r0, r2
 800a71c:	d20e      	bcs.n	800a73c <forward_conv2d_nl_pool+0xf38>
 800a71e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800a722:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800a726:	f850 3b04 	ldr.w	r3, [r0], #4
 800a72a:	f841 3b04 	str.w	r3, [r1], #4
 800a72e:	69a2      	ldr	r2, [r4, #24]
 800a730:	6853      	ldr	r3, [r2, #4]
 800a732:	68d2      	ldr	r2, [r2, #12]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	441a      	add	r2, r3
 800a738:	4282      	cmp	r2, r0
 800a73a:	d8f4      	bhi.n	800a726 <forward_conv2d_nl_pool+0xf22>
 800a73c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800a740:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800a744:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800a748:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800a74a:	4420      	add	r0, r4
 800a74c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800a750:	1a40      	subs	r0, r0, r1
 800a752:	4421      	add	r1, r4
 800a754:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800a758:	442c      	add	r4, r5
 800a75a:	b209      	sxth	r1, r1
 800a75c:	b200      	sxth	r0, r0
 800a75e:	4294      	cmp	r4, r2
 800a760:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800a764:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800a768:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800a76c:	4621      	mov	r1, r4
 800a76e:	f4ff abfb 	bcc.w	8009f68 <forward_conv2d_nl_pool+0x764>
 800a772:	425b      	negs	r3, r3
 800a774:	4419      	add	r1, r3
 800a776:	4291      	cmp	r1, r2
 800a778:	d2fc      	bcs.n	800a774 <forward_conv2d_nl_pool+0xf70>
 800a77a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800a77e:	f7ff bbf3 	b.w	8009f68 <forward_conv2d_nl_pool+0x764>
 800a782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a786:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800a78a:	320a      	adds	r2, #10
 800a78c:	f022 0207 	bic.w	r2, r2, #7
 800a790:	ebad 0d02 	sub.w	sp, sp, r2
 800a794:	aa0a      	add	r2, sp, #40	; 0x28
 800a796:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800a79a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	f000 8153 	beq.w	800aa4a <forward_conv2d_nl_pool+0x1246>
 800a7a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a7a8:	f8c7 b01c 	str.w	fp, [r7, #28]
 800a7ac:	fb02 f303 	mul.w	r3, r2, r3
 800a7b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7b2:	663b      	str	r3, [r7, #96]	; 0x60
 800a7b4:	1a9b      	subs	r3, r3, r2
 800a7b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7bc:	f8c7 a014 	str.w	sl, [r7, #20]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a7c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a7cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a7e4:	b13b      	cbz	r3, 800a7f6 <forward_conv2d_nl_pool+0xff2>
 800a7e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a7ea:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800a7ee:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800a7f2:	f001 f837 	bl	800b864 <memcpy>
 800a7f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8137 	beq.w	800aa6e <forward_conv2d_nl_pool+0x126a>
 800a800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a802:	ed93 6a00 	vldr	s12, [r3]
 800a806:	3304      	adds	r3, #4
 800a808:	67bb      	str	r3, [r7, #120]	; 0x78
 800a80a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 8101 	beq.w	800aa16 <forward_conv2d_nl_pool+0x1212>
 800a814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a818:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800a81c:	eb03 0802 	add.w	r8, r3, r2
 800a820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a830:	677b      	str	r3, [r7, #116]	; 0x74
 800a832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a83a:	f04f 0b00 	mov.w	fp, #0
 800a83e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a842:	2b00      	cmp	r3, #0
 800a844:	f2c0 810a 	blt.w	800aa5c <forward_conv2d_nl_pool+0x1258>
 800a848:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800a84c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a84e:	2300      	movs	r3, #0
 800a850:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800a854:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800a858:	eb02 0c04 	add.w	ip, r2, r4
 800a85c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800a860:	4540      	cmp	r0, r8
 800a862:	bf94      	ite	ls
 800a864:	ebc3 0300 	rsbls	r3, r3, r0
 800a868:	ebc3 0308 	rsbhi	r3, r3, r8
 800a86c:	eba2 0903 	sub.w	r9, r2, r3
 800a870:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800a874:	1ac4      	subs	r4, r0, r3
 800a876:	fb03 f302 	mul.w	r3, r3, r2
 800a87a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a87e:	2a00      	cmp	r2, #0
 800a880:	f340 80e9 	ble.w	800aa56 <forward_conv2d_nl_pool+0x1252>
 800a884:	f023 050f 	bic.w	r5, r3, #15
 800a888:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800a88c:	1e68      	subs	r0, r5, #1
 800a88e:	0900      	lsrs	r0, r0, #4
 800a890:	3001      	adds	r0, #1
 800a892:	fb06 f204 	mul.w	r2, r6, r4
 800a896:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a898:	0102      	lsls	r2, r0, #4
 800a89a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a89c:	fb06 f909 	mul.w	r9, r6, r9
 800a8a0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800a8a4:	eef0 6a46 	vmov.f32	s13, s12
 800a8a8:	f04f 0e00 	mov.w	lr, #0
 800a8ac:	4662      	mov	r2, ip
 800a8ae:	2d00      	cmp	r5, #0
 800a8b0:	f340 80cf 	ble.w	800aa52 <forward_conv2d_nl_pool+0x124e>
 800a8b4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800a8b8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800a8bc:	2600      	movs	r6, #0
 800a8be:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800a8c2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800a8c6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800a8ca:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800a8ce:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800a8d2:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800a8d6:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800a8da:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800a8de:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800a8e2:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800a8e6:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800a8ea:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800a8ee:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800a8f2:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800a8f6:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800a8fa:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800a8fe:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800a902:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800a906:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800a90a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800a90e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800a912:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800a916:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800a91a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800a91e:	ed14 4a04 	vldr	s8, [r4, #-16]
 800a922:	ed54 4a03 	vldr	s9, [r4, #-12]
 800a926:	ed10 5a03 	vldr	s10, [r0, #-12]
 800a92a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800a92e:	ed14 7a02 	vldr	s14, [r4, #-8]
 800a932:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800a936:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800a93a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a93e:	3610      	adds	r6, #16
 800a940:	42ae      	cmp	r6, r5
 800a942:	ed14 fa01 	vldr	s30, [r4, #-4]
 800a946:	ed50 ea01 	vldr	s29, [r0, #-4]
 800a94a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800a94e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800a952:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800a956:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800a95a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a95e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a962:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a966:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a96a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800a96e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a972:	eee1 7a82 	vfma.f32	s15, s3, s4
 800a976:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a97a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a97e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a982:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a986:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a98a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a98e:	db96      	blt.n	800a8be <forward_conv2d_nl_pool+0x10ba>
 800a990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a992:	4451      	add	r1, sl
 800a994:	4452      	add	r2, sl
 800a996:	4283      	cmp	r3, r0
 800a998:	dd0f      	ble.n	800a9ba <forward_conv2d_nl_pool+0x11b6>
 800a99a:	4604      	mov	r4, r0
 800a99c:	468c      	mov	ip, r1
 800a99e:	4616      	mov	r6, r2
 800a9a0:	ecb6 7a01 	vldmia	r6!, {s14}
 800a9a4:	ecfc 7a01 	vldmia	ip!, {s15}
 800a9a8:	3401      	adds	r4, #1
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a9b0:	d1f6      	bne.n	800a9a0 <forward_conv2d_nl_pool+0x119c>
 800a9b2:	1a18      	subs	r0, r3, r0
 800a9b4:	0080      	lsls	r0, r0, #2
 800a9b6:	4402      	add	r2, r0
 800a9b8:	4401      	add	r1, r0
 800a9ba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a9bc:	4402      	add	r2, r0
 800a9be:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800a9c2:	f10e 0e01 	add.w	lr, lr, #1
 800a9c6:	4570      	cmp	r0, lr
 800a9c8:	4449      	add	r1, r9
 800a9ca:	f47f af70 	bne.w	800a8ae <forward_conv2d_nl_pool+0x10aa>
 800a9ce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a9d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a9d8:	edc3 6a00 	vstr	s13, [r3]
 800a9dc:	4608      	mov	r0, r1
 800a9de:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800a9e2:	440b      	add	r3, r1
 800a9e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800a9e8:	677b      	str	r3, [r7, #116]	; 0x74
 800a9ea:	4410      	add	r0, r2
 800a9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ee:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800a9f8:	4418      	add	r0, r3
 800a9fa:	1acb      	subs	r3, r1, r3
 800a9fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa00:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800aa04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800aa08:	f10b 0b01 	add.w	fp, fp, #1
 800aa0c:	455b      	cmp	r3, fp
 800aa0e:	eba8 0802 	sub.w	r8, r8, r2
 800aa12:	f47f af14 	bne.w	800a83e <forward_conv2d_nl_pool+0x103a>
 800aa16:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800aa1a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800aa1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa22:	440a      	add	r2, r1
 800aa24:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800aa28:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800aa2c:	3204      	adds	r2, #4
 800aa2e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800aa32:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800aa36:	3301      	adds	r3, #1
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa3e:	f47f aecf 	bne.w	800a7e0 <forward_conv2d_nl_pool+0xfdc>
 800aa42:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800aa46:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800aa4a:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800aa4e:	f7ff ba23 	b.w	8009e98 <forward_conv2d_nl_pool+0x694>
 800aa52:	2000      	movs	r0, #0
 800aa54:	e79f      	b.n	800a996 <forward_conv2d_nl_pool+0x1192>
 800aa56:	eef0 6a46 	vmov.f32	s13, s12
 800aa5a:	e7b8      	b.n	800a9ce <forward_conv2d_nl_pool+0x11ca>
 800aa5c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800aa60:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800aa64:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800aa68:	eba8 0303 	sub.w	r3, r8, r3
 800aa6c:	e6f0      	b.n	800a850 <forward_conv2d_nl_pool+0x104c>
 800aa6e:	eeb0 6a48 	vmov.f32	s12, s16
 800aa72:	e6ca      	b.n	800a80a <forward_conv2d_nl_pool+0x1006>

0800aa74 <forward_dense>:
 800aa74:	6983      	ldr	r3, [r0, #24]
 800aa76:	881a      	ldrh	r2, [r3, #0]
 800aa78:	2a00      	cmp	r2, #0
 800aa7a:	f000 80b5 	beq.w	800abe8 <forward_dense+0x174>
 800aa7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa82:	ed2d 8b10 	vpush	{d8-d15}
 800aa86:	685f      	ldr	r7, [r3, #4]
 800aa88:	687e      	ldr	r6, [r7, #4]
 800aa8a:	b091      	sub	sp, #68	; 0x44
 800aa8c:	b106      	cbz	r6, 800aa90 <forward_dense+0x1c>
 800aa8e:	6836      	ldr	r6, [r6, #0]
 800aa90:	2a01      	cmp	r2, #1
 800aa92:	f240 80a6 	bls.w	800abe2 <forward_dense+0x16e>
 800aa96:	693d      	ldr	r5, [r7, #16]
 800aa98:	b105      	cbz	r5, 800aa9c <forward_dense+0x28>
 800aa9a:	682d      	ldr	r5, [r5, #0]
 800aa9c:	2a02      	cmp	r2, #2
 800aa9e:	f000 80a5 	beq.w	800abec <forward_dense+0x178>
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 821b 	beq.w	800aee0 <forward_dense+0x46c>
 800aaaa:	6819      	ldr	r1, [r3, #0]
 800aaac:	9106      	str	r1, [sp, #24]
 800aaae:	f117 0118 	adds.w	r1, r7, #24
 800aab2:	f000 80c9 	beq.w	800ac48 <forward_dense+0x1d4>
 800aab6:	8b39      	ldrh	r1, [r7, #24]
 800aab8:	2901      	cmp	r1, #1
 800aaba:	f240 820e 	bls.w	800aeda <forward_dense+0x466>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 80c4 	beq.w	800ac4c <forward_dense+0x1d8>
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	9307      	str	r3, [sp, #28]
 800aac8:	9b06      	ldr	r3, [sp, #24]
 800aaca:	68ec      	ldr	r4, [r5, #12]
 800aacc:	6998      	ldr	r0, [r3, #24]
 800aace:	68f1      	ldr	r1, [r6, #12]
 800aad0:	6803      	ldr	r3, [r0, #0]
 800aad2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800aad6:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800aada:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800aade:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800aae2:	fa49 f101 	asr.w	r1, r9, r1
 800aae6:	910b      	str	r1, [sp, #44]	; 0x2c
 800aae8:	2a03      	cmp	r2, #3
 800aaea:	fb0e f10c 	mul.w	r1, lr, ip
 800aaee:	6864      	ldr	r4, [r4, #4]
 800aaf0:	9108      	str	r1, [sp, #32]
 800aaf2:	f000 81de 	beq.w	800aeb2 <forward_dense+0x43e>
 800aaf6:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800aaf8:	b117      	cbz	r7, 800ab00 <forward_dense+0x8c>
 800aafa:	683f      	ldr	r7, [r7, #0]
 800aafc:	b107      	cbz	r7, 800ab00 <forward_dense+0x8c>
 800aafe:	69bf      	ldr	r7, [r7, #24]
 800ab00:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	f000 81d7 	beq.w	800aeb8 <forward_dense+0x444>
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	f000 81d4 	beq.w	800aeb8 <forward_dense+0x444>
 800ab10:	f04f 0a00 	mov.w	sl, #0
 800ab14:	69ab      	ldr	r3, [r5, #24]
 800ab16:	69b2      	ldr	r2, [r6, #24]
 800ab18:	6899      	ldr	r1, [r3, #8]
 800ab1a:	9b06      	ldr	r3, [sp, #24]
 800ab1c:	9104      	str	r1, [sp, #16]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	6897      	ldr	r7, [r2, #8]
 800ab22:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ab26:	00a3      	lsls	r3, r4, #2
 800ab28:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2a:	18ce      	adds	r6, r1, r3
 800ab2c:	9b08      	ldr	r3, [sp, #32]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d052      	beq.n	800abd8 <forward_dense+0x164>
 800ab32:	f1a8 0310 	sub.w	r3, r8, #16
 800ab36:	091b      	lsrs	r3, r3, #4
 800ab38:	3301      	adds	r3, #1
 800ab3a:	019b      	lsls	r3, r3, #6
 800ab3c:	930c      	str	r3, [sp, #48]	; 0x30
 800ab3e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800ab42:	930a      	str	r3, [sp, #40]	; 0x28
 800ab44:	2300      	movs	r3, #0
 800ab46:	9305      	str	r3, [sp, #20]
 800ab48:	eddf aace 	vldr	s21, [pc, #824]	; 800ae84 <forward_dense+0x410>
 800ab4c:	f008 030f 	and.w	r3, r8, #15
 800ab50:	930d      	str	r3, [sp, #52]	; 0x34
 800ab52:	9b06      	ldr	r3, [sp, #24]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	689d      	ldr	r5, [r3, #8]
 800ab58:	9b07      	ldr	r3, [sp, #28]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 818f 	beq.w	800ae7e <forward_dense+0x40a>
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	689c      	ldr	r4, [r3, #8]
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	f1ba 0f00 	cmp.w	sl, #0
 800ab6a:	d071      	beq.n	800ac50 <forward_dense+0x1dc>
 800ab6c:	42b3      	cmp	r3, r6
 800ab6e:	d229      	bcs.n	800abc4 <forward_dense+0x150>
 800ab70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab72:	469b      	mov	fp, r3
 800ab74:	ab0f      	add	r3, sp, #60	; 0x3c
 800ab76:	9303      	str	r3, [sp, #12]
 800ab78:	2a04      	cmp	r2, #4
 800ab7a:	4633      	mov	r3, r6
 800ab7c:	4646      	mov	r6, r8
 800ab7e:	4698      	mov	r8, r3
 800ab80:	d037      	beq.n	800abf2 <forward_dense+0x17e>
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	f000 8180 	beq.w	800ae88 <forward_dense+0x414>
 800ab88:	f8d4 c000 	ldr.w	ip, [r4]
 800ab8c:	9803      	ldr	r0, [sp, #12]
 800ab8e:	9600      	str	r6, [sp, #0]
 800ab90:	463b      	mov	r3, r7
 800ab92:	4629      	mov	r1, r5
 800ab94:	4652      	mov	r2, sl
 800ab96:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ab9a:	f7fd fc85 	bl	80084a8 <ai_dict8_dot_array_f32>
 800ab9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aba0:	f84b 3b04 	str.w	r3, [fp], #4
 800aba4:	45c3      	cmp	fp, r8
 800aba6:	f104 0404 	add.w	r4, r4, #4
 800abaa:	444d      	add	r5, r9
 800abac:	d3e9      	bcc.n	800ab82 <forward_dense+0x10e>
 800abae:	4643      	mov	r3, r8
 800abb0:	46b0      	mov	r8, r6
 800abb2:	461e      	mov	r6, r3
 800abb4:	9a04      	ldr	r2, [sp, #16]
 800abb6:	43d3      	mvns	r3, r2
 800abb8:	4433      	add	r3, r6
 800abba:	f023 0303 	bic.w	r3, r3, #3
 800abbe:	3304      	adds	r3, #4
 800abc0:	18d3      	adds	r3, r2, r3
 800abc2:	9304      	str	r3, [sp, #16]
 800abc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abc6:	9b05      	ldr	r3, [sp, #20]
 800abc8:	4417      	add	r7, r2
 800abca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abcc:	4416      	add	r6, r2
 800abce:	9a08      	ldr	r2, [sp, #32]
 800abd0:	3301      	adds	r3, #1
 800abd2:	4293      	cmp	r3, r2
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	d1bc      	bne.n	800ab52 <forward_dense+0xde>
 800abd8:	b011      	add	sp, #68	; 0x44
 800abda:	ecbd 8b10 	vpop	{d8-d15}
 800abde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe2:	2300      	movs	r3, #0
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	deff      	udf	#255	; 0xff
 800abe8:	6853      	ldr	r3, [r2, #4]
 800abea:	deff      	udf	#255	; 0xff
 800abec:	2300      	movs	r3, #0
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	deff      	udf	#255	; 0xff
 800abf2:	b1a4      	cbz	r4, 800ac1e <forward_dense+0x1aa>
 800abf4:	f8d4 c000 	ldr.w	ip, [r4]
 800abf8:	9803      	ldr	r0, [sp, #12]
 800abfa:	9600      	str	r6, [sp, #0]
 800abfc:	463b      	mov	r3, r7
 800abfe:	4629      	mov	r1, r5
 800ac00:	4652      	mov	r2, sl
 800ac02:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ac06:	f7fd fd1d 	bl	8008644 <ai_dict4_dot_array_f32>
 800ac0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac0c:	f84b 3b04 	str.w	r3, [fp], #4
 800ac10:	45c3      	cmp	fp, r8
 800ac12:	f104 0404 	add.w	r4, r4, #4
 800ac16:	444d      	add	r5, r9
 800ac18:	d2c9      	bcs.n	800abae <forward_dense+0x13a>
 800ac1a:	2c00      	cmp	r4, #0
 800ac1c:	d1ea      	bne.n	800abf4 <forward_dense+0x180>
 800ac1e:	4634      	mov	r4, r6
 800ac20:	4646      	mov	r6, r8
 800ac22:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ac26:	9400      	str	r4, [sp, #0]
 800ac28:	463b      	mov	r3, r7
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	4652      	mov	r2, sl
 800ac2e:	4640      	mov	r0, r8
 800ac30:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ac34:	f7fd fd06 	bl	8008644 <ai_dict4_dot_array_f32>
 800ac38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac3a:	f84b 3b04 	str.w	r3, [fp], #4
 800ac3e:	45b3      	cmp	fp, r6
 800ac40:	444d      	add	r5, r9
 800ac42:	d3f0      	bcc.n	800ac26 <forward_dense+0x1b2>
 800ac44:	46a0      	mov	r8, r4
 800ac46:	e7b5      	b.n	800abb4 <forward_dense+0x140>
 800ac48:	9107      	str	r1, [sp, #28]
 800ac4a:	e73d      	b.n	800aac8 <forward_dense+0x54>
 800ac4c:	9307      	str	r3, [sp, #28]
 800ac4e:	e73b      	b.n	800aac8 <forward_dense+0x54>
 800ac50:	42b3      	cmp	r3, r6
 800ac52:	d2b7      	bcs.n	800abc4 <forward_dense+0x150>
 800ac54:	4618      	mov	r0, r3
 800ac56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac58:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800ac5c:	eb07 0c03 	add.w	ip, r7, r3
 800ac60:	469e      	mov	lr, r3
 800ac62:	2c00      	cmp	r4, #0
 800ac64:	f000 80ff 	beq.w	800ae66 <forward_dense+0x3f2>
 800ac68:	f1b8 0f0f 	cmp.w	r8, #15
 800ac6c:	edd4 fa00 	vldr	s31, [r4]
 800ac70:	eddf 6a84 	vldr	s13, [pc, #528]	; 800ae84 <forward_dense+0x410>
 800ac74:	f104 0404 	add.w	r4, r4, #4
 800ac78:	f240 80fd 	bls.w	800ae76 <forward_dense+0x402>
 800ac7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ac80:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800ac84:	4641      	mov	r1, r8
 800ac86:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800ac8a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800ac8e:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800ac92:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800ac96:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800ac9a:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800ac9e:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800aca2:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800aca6:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800acaa:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800acae:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800acb2:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800acb6:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800acba:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800acbe:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800acc2:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800acc6:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800acca:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800acce:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800acd2:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800acd6:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800acda:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800acde:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800ace2:	ed12 4a04 	vldr	s8, [r2, #-16]
 800ace6:	ed53 4a04 	vldr	s9, [r3, #-16]
 800acea:	ed13 5a03 	vldr	s10, [r3, #-12]
 800acee:	ed52 5a03 	vldr	s11, [r2, #-12]
 800acf2:	ed13 6a02 	vldr	s12, [r3, #-8]
 800acf6:	ed12 7a02 	vldr	s14, [r2, #-8]
 800acfa:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800acfe:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800ad02:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800ad06:	3910      	subs	r1, #16
 800ad08:	290f      	cmp	r1, #15
 800ad0a:	ed52 ea01 	vldr	s29, [r2, #-4]
 800ad0e:	ed13 ea01 	vldr	s28, [r3, #-4]
 800ad12:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800ad16:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800ad1a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800ad1e:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800ad22:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800ad26:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800ad2a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ad2e:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ad32:	eee0 7a20 	vfma.f32	s15, s0, s1
 800ad36:	eee1 7a21 	vfma.f32	s15, s2, s3
 800ad3a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ad3e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ad42:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ad46:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ad4a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ad4e:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800ad52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ad56:	d896      	bhi.n	800ac86 <forward_dense+0x212>
 800ad58:	eb05 010e 	add.w	r1, r5, lr
 800ad5c:	465b      	mov	r3, fp
 800ad5e:	4662      	mov	r2, ip
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d075      	beq.n	800ae50 <forward_dense+0x3dc>
 800ad64:	ed91 7a00 	vldr	s14, [r1]
 800ad68:	edd2 7a00 	vldr	s15, [r2]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad72:	d06d      	beq.n	800ae50 <forward_dense+0x3dc>
 800ad74:	ed91 7a01 	vldr	s14, [r1, #4]
 800ad78:	edd2 7a01 	vldr	s15, [r2, #4]
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad82:	d065      	beq.n	800ae50 <forward_dense+0x3dc>
 800ad84:	ed91 7a02 	vldr	s14, [r1, #8]
 800ad88:	edd2 7a02 	vldr	s15, [r2, #8]
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad92:	d05d      	beq.n	800ae50 <forward_dense+0x3dc>
 800ad94:	ed91 7a03 	vldr	s14, [r1, #12]
 800ad98:	edd2 7a03 	vldr	s15, [r2, #12]
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ada2:	d055      	beq.n	800ae50 <forward_dense+0x3dc>
 800ada4:	ed91 7a04 	vldr	s14, [r1, #16]
 800ada8:	edd2 7a04 	vldr	s15, [r2, #16]
 800adac:	2b05      	cmp	r3, #5
 800adae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800adb2:	d04d      	beq.n	800ae50 <forward_dense+0x3dc>
 800adb4:	ed91 7a05 	vldr	s14, [r1, #20]
 800adb8:	edd2 7a05 	vldr	s15, [r2, #20]
 800adbc:	2b06      	cmp	r3, #6
 800adbe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800adc2:	d045      	beq.n	800ae50 <forward_dense+0x3dc>
 800adc4:	ed91 7a06 	vldr	s14, [r1, #24]
 800adc8:	edd2 7a06 	vldr	s15, [r2, #24]
 800adcc:	2b07      	cmp	r3, #7
 800adce:	eee7 6a27 	vfma.f32	s13, s14, s15
 800add2:	d03d      	beq.n	800ae50 <forward_dense+0x3dc>
 800add4:	ed91 7a07 	vldr	s14, [r1, #28]
 800add8:	edd2 7a07 	vldr	s15, [r2, #28]
 800addc:	2b08      	cmp	r3, #8
 800adde:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ade2:	d035      	beq.n	800ae50 <forward_dense+0x3dc>
 800ade4:	ed91 7a08 	vldr	s14, [r1, #32]
 800ade8:	edd2 7a08 	vldr	s15, [r2, #32]
 800adec:	2b09      	cmp	r3, #9
 800adee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800adf2:	d02d      	beq.n	800ae50 <forward_dense+0x3dc>
 800adf4:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800adf8:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800adfc:	2b0a      	cmp	r3, #10
 800adfe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae02:	d025      	beq.n	800ae50 <forward_dense+0x3dc>
 800ae04:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800ae08:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800ae0c:	2b0b      	cmp	r3, #11
 800ae0e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae12:	d01d      	beq.n	800ae50 <forward_dense+0x3dc>
 800ae14:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800ae18:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800ae1c:	2b0c      	cmp	r3, #12
 800ae1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae22:	d015      	beq.n	800ae50 <forward_dense+0x3dc>
 800ae24:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800ae28:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800ae2c:	2b0d      	cmp	r3, #13
 800ae2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae32:	d00d      	beq.n	800ae50 <forward_dense+0x3dc>
 800ae34:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800ae38:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ae3c:	2b0e      	cmp	r3, #14
 800ae3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae42:	d005      	beq.n	800ae50 <forward_dense+0x3dc>
 800ae44:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800ae48:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ae4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae50:	444d      	add	r5, r9
 800ae52:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800ae56:	ece0 6a01 	vstmia	r0!, {s13}
 800ae5a:	42b0      	cmp	r0, r6
 800ae5c:	f4bf aeaa 	bcs.w	800abb4 <forward_dense+0x140>
 800ae60:	2c00      	cmp	r4, #0
 800ae62:	f47f af01 	bne.w	800ac68 <forward_dense+0x1f4>
 800ae66:	f1b8 0f0f 	cmp.w	r8, #15
 800ae6a:	eef0 fa6a 	vmov.f32	s31, s21
 800ae6e:	eddf 6a05 	vldr	s13, [pc, #20]	; 800ae84 <forward_dense+0x410>
 800ae72:	f63f af03 	bhi.w	800ac7c <forward_dense+0x208>
 800ae76:	4643      	mov	r3, r8
 800ae78:	4629      	mov	r1, r5
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	e770      	b.n	800ad60 <forward_dense+0x2ec>
 800ae7e:	461c      	mov	r4, r3
 800ae80:	e670      	b.n	800ab64 <forward_dense+0xf0>
 800ae82:	bf00      	nop
 800ae84:	00000000 	.word	0x00000000
 800ae88:	4634      	mov	r4, r6
 800ae8a:	4646      	mov	r6, r8
 800ae8c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ae90:	9400      	str	r4, [sp, #0]
 800ae92:	463b      	mov	r3, r7
 800ae94:	4629      	mov	r1, r5
 800ae96:	4652      	mov	r2, sl
 800ae98:	4640      	mov	r0, r8
 800ae9a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800ae9e:	f7fd fb03 	bl	80084a8 <ai_dict8_dot_array_f32>
 800aea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aea4:	f84b 3b04 	str.w	r3, [fp], #4
 800aea8:	455e      	cmp	r6, fp
 800aeaa:	444d      	add	r5, r9
 800aeac:	d8f0      	bhi.n	800ae90 <forward_dense+0x41c>
 800aeae:	46a0      	mov	r8, r4
 800aeb0:	e680      	b.n	800abb4 <forward_dense+0x140>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	deff      	udf	#255	; 0xff
 800aeb8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800aebc:	2f00      	cmp	r7, #0
 800aebe:	f43f ae29 	beq.w	800ab14 <forward_dense+0xa0>
 800aec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aec6:	f000 fc4f 	bl	800b768 <ai_array_get_byte_size>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4602      	mov	r2, r0
 800aece:	4651      	mov	r1, sl
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fcc7 	bl	800b864 <memcpy>
 800aed6:	4682      	mov	sl, r0
 800aed8:	e61c      	b.n	800ab14 <forward_dense+0xa0>
 800aeda:	2300      	movs	r3, #0
 800aedc:	9307      	str	r3, [sp, #28]
 800aede:	e5f3      	b.n	800aac8 <forward_dense+0x54>
 800aee0:	9306      	str	r3, [sp, #24]
 800aee2:	e5e4      	b.n	800aaae <forward_dense+0x3a>

0800aee4 <nl_func_relu_array_f32>:
 800aee4:	b410      	push	{r4}
 800aee6:	698c      	ldr	r4, [r1, #24]
 800aee8:	6981      	ldr	r1, [r0, #24]
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	6889      	ldr	r1, [r1, #8]
 800aeee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800aef2:	3a01      	subs	r2, #1
 800aef4:	0092      	lsls	r2, r2, #2
 800aef6:	189b      	adds	r3, r3, r2
 800aef8:	d216      	bcs.n	800af28 <nl_func_relu_array_f32+0x44>
 800aefa:	3204      	adds	r2, #4
 800aefc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800af30 <nl_func_relu_array_f32+0x4c>
 800af00:	4411      	add	r1, r2
 800af02:	3304      	adds	r3, #4
 800af04:	ed53 7a01 	vldr	s15, [r3, #-4]
 800af08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af10:	bfb8      	it	lt
 800af12:	eef0 7a47 	vmovlt.f32	s15, s14
 800af16:	ed61 7a01 	vstmdb	r1!, {s15}
 800af1a:	68a0      	ldr	r0, [r4, #8]
 800af1c:	f1a3 0208 	sub.w	r2, r3, #8
 800af20:	4290      	cmp	r0, r2
 800af22:	f1a3 0304 	sub.w	r3, r3, #4
 800af26:	d9ed      	bls.n	800af04 <nl_func_relu_array_f32+0x20>
 800af28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	00000000 	.word	0x00000000

0800af34 <nl_func_sm_array_f32>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	ed2d 8b04 	vpush	{d8-d9}
 800af3c:	b089      	sub	sp, #36	; 0x24
 800af3e:	698f      	ldr	r7, [r1, #24]
 800af40:	6984      	ldr	r4, [r0, #24]
 800af42:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800af46:	68bd      	ldr	r5, [r7, #8]
 800af48:	9402      	str	r4, [sp, #8]
 800af4a:	4626      	mov	r6, r4
 800af4c:	4696      	mov	lr, r2
 800af4e:	eba2 020c 	sub.w	r2, r2, ip
 800af52:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800af56:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	68b6      	ldr	r6, [r6, #8]
 800af5c:	ebae 0e04 	sub.w	lr, lr, r4
 800af60:	4295      	cmp	r5, r2
 800af62:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800af66:	d354      	bcc.n	800b012 <nl_func_sm_array_f32+0xde>
 800af68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800af6c:	f1cc 0200 	rsb	r2, ip, #0
 800af70:	00a4      	lsls	r4, r4, #2
 800af72:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800af76:	9303      	str	r3, [sp, #12]
 800af78:	9204      	str	r2, [sp, #16]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4262      	negs	r2, r4
 800af7e:	9205      	str	r2, [sp, #20]
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800af86:	9b02      	ldr	r3, [sp, #8]
 800af88:	9a07      	ldr	r2, [sp, #28]
 800af8a:	60bd      	str	r5, [r7, #8]
 800af8c:	609e      	str	r6, [r3, #8]
 800af8e:	9b06      	ldr	r3, [sp, #24]
 800af90:	6992      	ldr	r2, [r2, #24]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	6894      	ldr	r4, [r2, #8]
 800af96:	9a03      	ldr	r2, [sp, #12]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2a01      	cmp	r2, #1
 800af9c:	ed93 8a00 	vldr	s16, [r3]
 800afa0:	d940      	bls.n	800b024 <nl_func_sm_array_f32+0xf0>
 800afa2:	9901      	ldr	r1, [sp, #4]
 800afa4:	1d1a      	adds	r2, r3, #4
 800afa6:	eb03 0b01 	add.w	fp, r3, r1
 800afaa:	ecf2 7a01 	vldmia	r2!, {s15}
 800afae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb6:	bfb8      	it	lt
 800afb8:	eeb0 8a67 	vmovlt.f32	s16, s15
 800afbc:	4593      	cmp	fp, r2
 800afbe:	d1f4      	bne.n	800afaa <nl_func_sm_array_f32+0x76>
 800afc0:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800b030 <nl_func_sm_array_f32+0xfc>
 800afc4:	469a      	mov	sl, r3
 800afc6:	46a1      	mov	r9, r4
 800afc8:	46a0      	mov	r8, r4
 800afca:	ecba 0a01 	vldmia	sl!, {s0}
 800afce:	ee30 0a48 	vsub.f32	s0, s0, s16
 800afd2:	f005 f93d 	bl	8010250 <expf>
 800afd6:	45d3      	cmp	fp, sl
 800afd8:	eca8 0a01 	vstmia	r8!, {s0}
 800afdc:	ee78 8a80 	vadd.f32	s17, s17, s0
 800afe0:	d1f3      	bne.n	800afca <nl_func_sm_array_f32+0x96>
 800afe2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800afe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afea:	d00b      	beq.n	800b004 <nl_func_sm_array_f32+0xd0>
 800afec:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800aff0:	9b01      	ldr	r3, [sp, #4]
 800aff2:	441c      	add	r4, r3
 800aff4:	edd9 7a00 	vldr	s15, [r9]
 800aff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800affc:	ece9 7a01 	vstmia	r9!, {s15}
 800b000:	454c      	cmp	r4, r9
 800b002:	d1f7      	bne.n	800aff4 <nl_func_sm_array_f32+0xc0>
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	441d      	add	r5, r3
 800b00a:	9b05      	ldr	r3, [sp, #20]
 800b00c:	42aa      	cmp	r2, r5
 800b00e:	441e      	add	r6, r3
 800b010:	d9b9      	bls.n	800af86 <nl_func_sm_array_f32+0x52>
 800b012:	60ba      	str	r2, [r7, #8]
 800b014:	9a02      	ldr	r2, [sp, #8]
 800b016:	68d3      	ldr	r3, [r2, #12]
 800b018:	6093      	str	r3, [r2, #8]
 800b01a:	b009      	add	sp, #36	; 0x24
 800b01c:	ecbd 8b04 	vpop	{d8-d9}
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	2a00      	cmp	r2, #0
 800b026:	d0ed      	beq.n	800b004 <nl_func_sm_array_f32+0xd0>
 800b028:	9a01      	ldr	r2, [sp, #4]
 800b02a:	eb03 0b02 	add.w	fp, r3, r2
 800b02e:	e7c7      	b.n	800afc0 <nl_func_sm_array_f32+0x8c>
 800b030:	00000000 	.word	0x00000000

0800b034 <nl_func_relu_generic_array_f32>:
 800b034:	b430      	push	{r4, r5}
 800b036:	6989      	ldr	r1, [r1, #24]
 800b038:	6980      	ldr	r0, [r0, #24]
 800b03a:	edd3 6a02 	vldr	s13, [r3, #8]
 800b03e:	688c      	ldr	r4, [r1, #8]
 800b040:	6880      	ldr	r0, [r0, #8]
 800b042:	ed93 7a00 	vldr	s14, [r3]
 800b046:	ed93 6a01 	vldr	s12, [r3, #4]
 800b04a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b04e:	3a01      	subs	r2, #1
 800b050:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b054:	0092      	lsls	r2, r2, #2
 800b056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b05a:	4410      	add	r0, r2
 800b05c:	4422      	add	r2, r4
 800b05e:	d421      	bmi.n	800b0a4 <nl_func_relu_generic_array_f32+0x70>
 800b060:	4294      	cmp	r4, r2
 800b062:	d83d      	bhi.n	800b0e0 <nl_func_relu_generic_array_f32+0xac>
 800b064:	1d13      	adds	r3, r2, #4
 800b066:	1d02      	adds	r2, r0, #4
 800b068:	e010      	b.n	800b08c <nl_func_relu_generic_array_f32+0x58>
 800b06a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b072:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800b076:	d501      	bpl.n	800b07c <nl_func_relu_generic_array_f32+0x48>
 800b078:	ee65 7a86 	vmul.f32	s15, s11, s12
 800b07c:	ed62 7a01 	vstmdb	r2!, {s15}
 800b080:	6888      	ldr	r0, [r1, #8]
 800b082:	f1a3 0408 	sub.w	r4, r3, #8
 800b086:	4284      	cmp	r4, r0
 800b088:	462b      	mov	r3, r5
 800b08a:	d329      	bcc.n	800b0e0 <nl_func_relu_generic_array_f32+0xac>
 800b08c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b090:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b098:	f1a3 0504 	sub.w	r5, r3, #4
 800b09c:	d4e5      	bmi.n	800b06a <nl_func_relu_generic_array_f32+0x36>
 800b09e:	eef0 7a66 	vmov.f32	s15, s13
 800b0a2:	e7eb      	b.n	800b07c <nl_func_relu_generic_array_f32+0x48>
 800b0a4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ac:	d01a      	beq.n	800b0e4 <nl_func_relu_generic_array_f32+0xb0>
 800b0ae:	4294      	cmp	r4, r2
 800b0b0:	d816      	bhi.n	800b0e0 <nl_func_relu_generic_array_f32+0xac>
 800b0b2:	1d13      	adds	r3, r2, #4
 800b0b4:	1d02      	adds	r2, r0, #4
 800b0b6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b0ba:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b0be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0c2:	f1a3 0408 	sub.w	r4, r3, #8
 800b0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ca:	f1a3 0004 	sub.w	r0, r3, #4
 800b0ce:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	d51e      	bpl.n	800b114 <nl_func_relu_generic_array_f32+0xe0>
 800b0d6:	ed62 6a01 	vstmdb	r2!, {s13}
 800b0da:	688b      	ldr	r3, [r1, #8]
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	d91e      	bls.n	800b11e <nl_func_relu_generic_array_f32+0xea>
 800b0e0:	bc30      	pop	{r4, r5}
 800b0e2:	4770      	bx	lr
 800b0e4:	4294      	cmp	r4, r2
 800b0e6:	d8fb      	bhi.n	800b0e0 <nl_func_relu_generic_array_f32+0xac>
 800b0e8:	1d13      	adds	r3, r2, #4
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	1d02      	adds	r2, r0, #4
 800b0ee:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b0f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0f6:	f1a3 0408 	sub.w	r4, r3, #8
 800b0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fe:	f1a3 0004 	sub.w	r0, r3, #4
 800b102:	4623      	mov	r3, r4
 800b104:	db0d      	blt.n	800b122 <nl_func_relu_generic_array_f32+0xee>
 800b106:	ed62 7a01 	vstmdb	r2!, {s15}
 800b10a:	688b      	ldr	r3, [r1, #8]
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	d8e7      	bhi.n	800b0e0 <nl_func_relu_generic_array_f32+0xac>
 800b110:	4603      	mov	r3, r0
 800b112:	e7ec      	b.n	800b0ee <nl_func_relu_generic_array_f32+0xba>
 800b114:	ed62 7a01 	vstmdb	r2!, {s15}
 800b118:	688c      	ldr	r4, [r1, #8]
 800b11a:	429c      	cmp	r4, r3
 800b11c:	d8e0      	bhi.n	800b0e0 <nl_func_relu_generic_array_f32+0xac>
 800b11e:	4603      	mov	r3, r0
 800b120:	e7c9      	b.n	800b0b6 <nl_func_relu_generic_array_f32+0x82>
 800b122:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b126:	688c      	ldr	r4, [r1, #8]
 800b128:	429c      	cmp	r4, r3
 800b12a:	d8d9      	bhi.n	800b0e0 <nl_func_relu_generic_array_f32+0xac>
 800b12c:	4603      	mov	r3, r0
 800b12e:	e7de      	b.n	800b0ee <nl_func_relu_generic_array_f32+0xba>

0800b130 <forward_relu>:
 800b130:	6982      	ldr	r2, [r0, #24]
 800b132:	8813      	ldrh	r3, [r2, #0]
 800b134:	b333      	cbz	r3, 800b184 <forward_relu+0x54>
 800b136:	6852      	ldr	r2, [r2, #4]
 800b138:	6851      	ldr	r1, [r2, #4]
 800b13a:	b101      	cbz	r1, 800b13e <forward_relu+0xe>
 800b13c:	6809      	ldr	r1, [r1, #0]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d91d      	bls.n	800b17e <forward_relu+0x4e>
 800b142:	b4f0      	push	{r4, r5, r6, r7}
 800b144:	6917      	ldr	r7, [r2, #16]
 800b146:	b107      	cbz	r7, 800b14a <forward_relu+0x1a>
 800b148:	683f      	ldr	r7, [r7, #0]
 800b14a:	688c      	ldr	r4, [r1, #8]
 800b14c:	69c3      	ldr	r3, [r0, #28]
 800b14e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800b152:	2b00      	cmp	r3, #0
 800b154:	d044      	beq.n	800b1e0 <forward_relu+0xb0>
 800b156:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800b15a:	2d01      	cmp	r5, #1
 800b15c:	d014      	beq.n	800b188 <forward_relu+0x58>
 800b15e:	2c00      	cmp	r4, #0
 800b160:	d074      	beq.n	800b24c <forward_relu+0x11c>
 800b162:	68ce      	ldr	r6, [r1, #12]
 800b164:	2201      	movs	r2, #1
 800b166:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b16a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b16e:	42a6      	cmp	r6, r4
 800b170:	fb05 f202 	mul.w	r2, r5, r2
 800b174:	d1f9      	bne.n	800b16a <forward_relu+0x3a>
 800b176:	4638      	mov	r0, r7
 800b178:	bcf0      	pop	{r4, r5, r6, r7}
 800b17a:	f7ff bf5b 	b.w	800b034 <nl_func_relu_generic_array_f32>
 800b17e:	2300      	movs	r3, #0
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	deff      	udf	#255	; 0xff
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	deff      	udf	#255	; 0xff
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	6988      	ldr	r0, [r1, #24]
 800b18c:	6896      	ldr	r6, [r2, #8]
 800b18e:	ed93 7a00 	vldr	s14, [r3]
 800b192:	6882      	ldr	r2, [r0, #8]
 800b194:	b184      	cbz	r4, 800b1b8 <forward_relu+0x88>
 800b196:	68cf      	ldr	r7, [r1, #12]
 800b198:	462b      	mov	r3, r5
 800b19a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800b19e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800b1a2:	42a7      	cmp	r7, r4
 800b1a4:	fb01 f303 	mul.w	r3, r1, r3
 800b1a8:	d1f9      	bne.n	800b19e <forward_relu+0x6e>
 800b1aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	18d2      	adds	r2, r2, r3
 800b1b4:	441e      	add	r6, r3
 800b1b6:	d23f      	bcs.n	800b238 <forward_relu+0x108>
 800b1b8:	1d13      	adds	r3, r2, #4
 800b1ba:	2500      	movs	r5, #0
 800b1bc:	1d32      	adds	r2, r6, #4
 800b1be:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b1c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ca:	f1a3 0104 	sub.w	r1, r3, #4
 800b1ce:	d835      	bhi.n	800b23c <forward_relu+0x10c>
 800b1d0:	ed62 7a01 	vstmdb	r2!, {s15}
 800b1d4:	6884      	ldr	r4, [r0, #8]
 800b1d6:	3b08      	subs	r3, #8
 800b1d8:	429c      	cmp	r4, r3
 800b1da:	d82d      	bhi.n	800b238 <forward_relu+0x108>
 800b1dc:	460b      	mov	r3, r1
 800b1de:	e7ee      	b.n	800b1be <forward_relu+0x8e>
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	698d      	ldr	r5, [r1, #24]
 800b1e4:	6898      	ldr	r0, [r3, #8]
 800b1e6:	68ab      	ldr	r3, [r5, #8]
 800b1e8:	b184      	cbz	r4, 800b20c <forward_relu+0xdc>
 800b1ea:	68ce      	ldr	r6, [r1, #12]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b1f2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800b1f6:	42a6      	cmp	r6, r4
 800b1f8:	fb01 f202 	mul.w	r2, r1, r2
 800b1fc:	d1f9      	bne.n	800b1f2 <forward_relu+0xc2>
 800b1fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b202:	3a01      	subs	r2, #1
 800b204:	0092      	lsls	r2, r2, #2
 800b206:	189b      	adds	r3, r3, r2
 800b208:	4410      	add	r0, r2
 800b20a:	d215      	bcs.n	800b238 <forward_relu+0x108>
 800b20c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b250 <forward_relu+0x120>
 800b210:	3304      	adds	r3, #4
 800b212:	1d01      	adds	r1, r0, #4
 800b214:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b220:	bfb8      	it	lt
 800b222:	eef0 7a47 	vmovlt.f32	s15, s14
 800b226:	ed61 7a01 	vstmdb	r1!, {s15}
 800b22a:	68a8      	ldr	r0, [r5, #8]
 800b22c:	f1a3 0208 	sub.w	r2, r3, #8
 800b230:	4290      	cmp	r0, r2
 800b232:	f1a3 0304 	sub.w	r3, r3, #4
 800b236:	d9ed      	bls.n	800b214 <forward_relu+0xe4>
 800b238:	bcf0      	pop	{r4, r5, r6, r7}
 800b23a:	4770      	bx	lr
 800b23c:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b240:	6884      	ldr	r4, [r0, #8]
 800b242:	3b08      	subs	r3, #8
 800b244:	429c      	cmp	r4, r3
 800b246:	d8f7      	bhi.n	800b238 <forward_relu+0x108>
 800b248:	460b      	mov	r3, r1
 800b24a:	e7b8      	b.n	800b1be <forward_relu+0x8e>
 800b24c:	2201      	movs	r2, #1
 800b24e:	e792      	b.n	800b176 <forward_relu+0x46>
 800b250:	00000000 	.word	0x00000000

0800b254 <forward_sm>:
 800b254:	6982      	ldr	r2, [r0, #24]
 800b256:	8813      	ldrh	r3, [r2, #0]
 800b258:	b32b      	cbz	r3, 800b2a6 <forward_sm+0x52>
 800b25a:	6852      	ldr	r2, [r2, #4]
 800b25c:	6851      	ldr	r1, [r2, #4]
 800b25e:	b101      	cbz	r1, 800b262 <forward_sm+0xe>
 800b260:	6809      	ldr	r1, [r1, #0]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d91c      	bls.n	800b2a0 <forward_sm+0x4c>
 800b266:	6913      	ldr	r3, [r2, #16]
 800b268:	b1c3      	cbz	r3, 800b29c <forward_sm+0x48>
 800b26a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b26c:	6818      	ldr	r0, [r3, #0]
 800b26e:	688c      	ldr	r4, [r1, #8]
 800b270:	68c3      	ldr	r3, [r0, #12]
 800b272:	68ce      	ldr	r6, [r1, #12]
 800b274:	685f      	ldr	r7, [r3, #4]
 800b276:	6873      	ldr	r3, [r6, #4]
 800b278:	0a24      	lsrs	r4, r4, #8
 800b27a:	b083      	sub	sp, #12
 800b27c:	d015      	beq.n	800b2aa <forward_sm+0x56>
 800b27e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b282:	2201      	movs	r2, #1
 800b284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b288:	42a6      	cmp	r6, r4
 800b28a:	fb05 f202 	mul.w	r2, r5, r2
 800b28e:	d1f9      	bne.n	800b284 <forward_sm+0x30>
 800b290:	e9cd 3700 	strd	r3, r7, [sp]
 800b294:	f7ff fe4e 	bl	800af34 <nl_func_sm_array_f32>
 800b298:	b003      	add	sp, #12
 800b29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	deff      	udf	#255	; 0xff
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	deff      	udf	#255	; 0xff
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	deff      	udf	#255	; 0xff
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	e9cd 3700 	strd	r3, r7, [sp]
 800b2b0:	f7ff fe40 	bl	800af34 <nl_func_sm_array_f32>
 800b2b4:	b003      	add	sp, #12
 800b2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2b8 <pool_func_mp_array_f32>:
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	b093      	sub	sp, #76	; 0x4c
 800b2be:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800b2c2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b2c4:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800b2c8:	68a8      	ldr	r0, [r5, #8]
 800b2ca:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800b2ce:	9508      	str	r5, [sp, #32]
 800b2d0:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800b2d4:	9002      	str	r0, [sp, #8]
 800b2d6:	950d      	str	r5, [sp, #52]	; 0x34
 800b2d8:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800b2dc:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800b2e0:	9004      	str	r0, [sp, #16]
 800b2e2:	9506      	str	r5, [sp, #24]
 800b2e4:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800b2e8:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800b2ec:	9009      	str	r0, [sp, #36]	; 0x24
 800b2ee:	950b      	str	r5, [sp, #44]	; 0x2c
 800b2f0:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800b2f4:	9200      	str	r2, [sp, #0]
 800b2f6:	468a      	mov	sl, r1
 800b2f8:	4699      	mov	r9, r3
 800b2fa:	b95c      	cbnz	r4, 800b314 <pool_func_mp_array_f32+0x5c>
 800b2fc:	b950      	cbnz	r0, 800b314 <pool_func_mp_array_f32+0x5c>
 800b2fe:	9b04      	ldr	r3, [sp, #16]
 800b300:	1a5a      	subs	r2, r3, r1
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	9908      	ldr	r1, [sp, #32]
 800b306:	3a01      	subs	r2, #1
 800b308:	3b01      	subs	r3, #1
 800b30a:	fb13 2301 	smlabb	r3, r3, r1, r2
 800b30e:	041a      	lsls	r2, r3, #16
 800b310:	f100 809b 	bmi.w	800b44a <pool_func_mp_array_f32+0x192>
 800b314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 808b 	beq.w	800b432 <pool_func_mp_array_f32+0x17a>
 800b31c:	9b06      	ldr	r3, [sp, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f000 8087 	beq.w	800b432 <pool_func_mp_array_f32+0x17a>
 800b324:	f1b9 0f00 	cmp.w	r9, #0
 800b328:	f000 8083 	beq.w	800b432 <pool_func_mp_array_f32+0x17a>
 800b32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b32e:	1b1c      	subs	r4, r3, r4
 800b330:	9b04      	ldr	r3, [sp, #16]
 800b332:	1a1b      	subs	r3, r3, r0
 800b334:	b29b      	uxth	r3, r3
 800b336:	4240      	negs	r0, r0
 800b338:	2200      	movs	r2, #0
 800b33a:	b2a1      	uxth	r1, r4
 800b33c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b33e:	b283      	uxth	r3, r0
 800b340:	920e      	str	r2, [sp, #56]	; 0x38
 800b342:	910c      	str	r1, [sp, #48]	; 0x30
 800b344:	9310      	str	r3, [sp, #64]	; 0x40
 800b346:	9c06      	ldr	r4, [sp, #24]
 800b348:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34c:	fb02 f204 	mul.w	r2, r2, r4
 800b350:	1acb      	subs	r3, r1, r3
 800b352:	920a      	str	r2, [sp, #40]	; 0x28
 800b354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b356:	9205      	str	r2, [sp, #20]
 800b358:	2000      	movs	r0, #0
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	9007      	str	r0, [sp, #28]
 800b362:	4603      	mov	r3, r0
 800b364:	fa0f f881 	sxth.w	r8, r1
 800b368:	9204      	str	r2, [sp, #16]
 800b36a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b36c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800b370:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800b374:	4413      	add	r3, r2
 800b376:	f04f 0e00 	mov.w	lr, #0
 800b37a:	fb09 f303 	mul.w	r3, r9, r3
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800b384:	4675      	mov	r5, lr
 800b386:	9903      	ldr	r1, [sp, #12]
 800b388:	eddf 7a78 	vldr	s15, [pc, #480]	; 800b56c <pool_func_mp_array_f32+0x2b4>
 800b38c:	4588      	cmp	r8, r1
 800b38e:	dd24      	ble.n	800b3da <pool_func_mp_array_f32+0x122>
 800b390:	4564      	cmp	r4, ip
 800b392:	dd1e      	ble.n	800b3d2 <pool_func_mp_array_f32+0x11a>
 800b394:	2900      	cmp	r1, #0
 800b396:	fb0a f601 	mul.w	r6, sl, r1
 800b39a:	db1a      	blt.n	800b3d2 <pool_func_mp_array_f32+0x11a>
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	4299      	cmp	r1, r3
 800b3a0:	da17      	bge.n	800b3d2 <pool_func_mp_array_f32+0x11a>
 800b3a2:	f1bc 0f00 	cmp.w	ip, #0
 800b3a6:	4663      	mov	r3, ip
 800b3a8:	db46      	blt.n	800b438 <pool_func_mp_array_f32+0x180>
 800b3aa:	18f2      	adds	r2, r6, r3
 800b3ac:	fb09 5202 	mla	r2, r9, r2, r5
 800b3b0:	1c58      	adds	r0, r3, #1
 800b3b2:	459a      	cmp	sl, r3
 800b3b4:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800b3b8:	b203      	sxth	r3, r0
 800b3ba:	dd08      	ble.n	800b3ce <pool_func_mp_array_f32+0x116>
 800b3bc:	ed92 7a00 	vldr	s14, [r2]
 800b3c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c8:	bfb8      	it	lt
 800b3ca:	eef0 7a47 	vmovlt.f32	s15, s14
 800b3ce:	429c      	cmp	r4, r3
 800b3d0:	dceb      	bgt.n	800b3aa <pool_func_mp_array_f32+0xf2>
 800b3d2:	3101      	adds	r1, #1
 800b3d4:	b209      	sxth	r1, r1
 800b3d6:	4588      	cmp	r8, r1
 800b3d8:	dcda      	bgt.n	800b390 <pool_func_mp_array_f32+0xd8>
 800b3da:	9b01      	ldr	r3, [sp, #4]
 800b3dc:	f10e 0e01 	add.w	lr, lr, #1
 800b3e0:	441d      	add	r5, r3
 800b3e2:	9b02      	ldr	r3, [sp, #8]
 800b3e4:	fa0f fe8e 	sxth.w	lr, lr
 800b3e8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b3ec:	45ce      	cmp	lr, r9
 800b3ee:	edc5 7a00 	vstr	s15, [r5]
 800b3f2:	4675      	mov	r5, lr
 800b3f4:	dbc7      	blt.n	800b386 <pool_func_mp_array_f32+0xce>
 800b3f6:	9b07      	ldr	r3, [sp, #28]
 800b3f8:	9808      	ldr	r0, [sp, #32]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	b219      	sxth	r1, r3
 800b3fe:	9b05      	ldr	r3, [sp, #20]
 800b400:	9107      	str	r1, [sp, #28]
 800b402:	461a      	mov	r2, r3
 800b404:	4402      	add	r2, r0
 800b406:	9b04      	ldr	r3, [sp, #16]
 800b408:	b292      	uxth	r2, r2
 800b40a:	9205      	str	r2, [sp, #20]
 800b40c:	9a06      	ldr	r2, [sp, #24]
 800b40e:	4403      	add	r3, r0
 800b410:	b29b      	uxth	r3, r3
 800b412:	428a      	cmp	r2, r1
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	460b      	mov	r3, r1
 800b418:	dca7      	bgt.n	800b36a <pool_func_mp_array_f32+0xb2>
 800b41a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b41c:	3301      	adds	r3, #1
 800b41e:	b21a      	sxth	r2, r3
 800b420:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800b424:	440b      	add	r3, r1
 800b426:	b29b      	uxth	r3, r3
 800b428:	930c      	str	r3, [sp, #48]	; 0x30
 800b42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b42c:	920e      	str	r2, [sp, #56]	; 0x38
 800b42e:	4293      	cmp	r3, r2
 800b430:	dc89      	bgt.n	800b346 <pool_func_mp_array_f32+0x8e>
 800b432:	b013      	add	sp, #76	; 0x4c
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	3301      	adds	r3, #1
 800b43a:	b21b      	sxth	r3, r3
 800b43c:	42bb      	cmp	r3, r7
 800b43e:	dac6      	bge.n	800b3ce <pool_func_mp_array_f32+0x116>
 800b440:	3301      	adds	r3, #1
 800b442:	b21b      	sxth	r3, r3
 800b444:	42bb      	cmp	r3, r7
 800b446:	dbf7      	blt.n	800b438 <pool_func_mp_array_f32+0x180>
 800b448:	e7c1      	b.n	800b3ce <pool_func_mp_array_f32+0x116>
 800b44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44c:	9a00      	ldr	r2, [sp, #0]
 800b44e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b450:	1a9a      	subs	r2, r3, r2
 800b452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b454:	3a01      	subs	r2, #1
 800b456:	3b01      	subs	r3, #1
 800b458:	fb13 2301 	smlabb	r3, r3, r1, r2
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	f57f af59 	bpl.w	800b314 <pool_func_mp_array_f32+0x5c>
 800b462:	fb0a f309 	mul.w	r3, sl, r9
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800b46c:	930e      	str	r3, [sp, #56]	; 0x38
 800b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b470:	9001      	str	r0, [sp, #4]
 800b472:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800b47c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b47e:	429a      	cmp	r2, r3
 800b480:	ddd7      	ble.n	800b432 <pool_func_mp_array_f32+0x17a>
 800b482:	9a00      	ldr	r2, [sp, #0]
 800b484:	9906      	ldr	r1, [sp, #24]
 800b486:	fa0f f882 	sxth.w	r8, r2
 800b48a:	2900      	cmp	r1, #0
 800b48c:	d062      	beq.n	800b554 <pool_func_mp_array_f32+0x29c>
 800b48e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b490:	fb01 f303 	mul.w	r3, r1, r3
 800b494:	1a12      	subs	r2, r2, r0
 800b496:	9305      	str	r3, [sp, #20]
 800b498:	b213      	sxth	r3, r2
 800b49a:	9307      	str	r3, [sp, #28]
 800b49c:	f1b9 0f00 	cmp.w	r9, #0
 800b4a0:	d058      	beq.n	800b554 <pool_func_mp_array_f32+0x29c>
 800b4a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4a4:	fb02 f303 	mul.w	r3, r2, r3
 800b4a8:	2600      	movs	r6, #0
 800b4aa:	930c      	str	r3, [sp, #48]	; 0x30
 800b4ac:	9b04      	ldr	r3, [sp, #16]
 800b4ae:	9303      	str	r3, [sp, #12]
 800b4b0:	4637      	mov	r7, r6
 800b4b2:	46b2      	mov	sl, r6
 800b4b4:	9b05      	ldr	r3, [sp, #20]
 800b4b6:	9611      	str	r6, [sp, #68]	; 0x44
 800b4b8:	eb0a 0b03 	add.w	fp, sl, r3
 800b4bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4be:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800b4c2:	b235      	sxth	r5, r6
 800b4c4:	18eb      	adds	r3, r5, r3
 800b4c6:	f04f 0a00 	mov.w	sl, #0
 800b4ca:	fb09 f303 	mul.w	r3, r9, r3
 800b4ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b4d0:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d2:	fb09 fb0b 	mul.w	fp, r9, fp
 800b4d6:	46d6      	mov	lr, sl
 800b4d8:	9807      	ldr	r0, [sp, #28]
 800b4da:	4580      	cmp	r8, r0
 800b4dc:	dd43      	ble.n	800b566 <pool_func_mp_array_f32+0x2ae>
 800b4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e0:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b56c <pool_func_mp_array_f32+0x2b4>
 800b4e4:	eb0e 0403 	add.w	r4, lr, r3
 800b4e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4ee:	42a9      	cmp	r1, r5
 800b4f0:	dd0f      	ble.n	800b512 <pool_func_mp_array_f32+0x25a>
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	ed92 7a00 	vldr	s14, [r2]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b504:	b21b      	sxth	r3, r3
 800b506:	bfb8      	it	lt
 800b508:	eef0 7a47 	vmovlt.f32	s15, s14
 800b50c:	4299      	cmp	r1, r3
 800b50e:	4462      	add	r2, ip
 800b510:	d1f1      	bne.n	800b4f6 <pool_func_mp_array_f32+0x23e>
 800b512:	3001      	adds	r0, #1
 800b514:	b200      	sxth	r0, r0
 800b516:	4580      	cmp	r8, r0
 800b518:	4434      	add	r4, r6
 800b51a:	d1e8      	bne.n	800b4ee <pool_func_mp_array_f32+0x236>
 800b51c:	f10a 0a01 	add.w	sl, sl, #1
 800b520:	9a02      	ldr	r2, [sp, #8]
 800b522:	eb0b 030e 	add.w	r3, fp, lr
 800b526:	fa0f fa8a 	sxth.w	sl, sl
 800b52a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b52e:	45ca      	cmp	sl, r9
 800b530:	edc3 7a00 	vstr	s15, [r3]
 800b534:	46d6      	mov	lr, sl
 800b536:	dbcf      	blt.n	800b4d8 <pool_func_mp_array_f32+0x220>
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	9a08      	ldr	r2, [sp, #32]
 800b53c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b53e:	4413      	add	r3, r2
 800b540:	b29b      	uxth	r3, r3
 800b542:	3701      	adds	r7, #1
 800b544:	9303      	str	r3, [sp, #12]
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	b23f      	sxth	r7, r7
 800b54a:	4416      	add	r6, r2
 800b54c:	42bb      	cmp	r3, r7
 800b54e:	b2b6      	uxth	r6, r6
 800b550:	46ba      	mov	sl, r7
 800b552:	dcaf      	bgt.n	800b4b4 <pool_func_mp_array_f32+0x1fc>
 800b554:	9b00      	ldr	r3, [sp, #0]
 800b556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b558:	4413      	add	r3, r2
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	3301      	adds	r3, #1
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	e788      	b.n	800b478 <pool_func_mp_array_f32+0x1c0>
 800b566:	eddf 7a01 	vldr	s15, [pc, #4]	; 800b56c <pool_func_mp_array_f32+0x2b4>
 800b56a:	e7d7      	b.n	800b51c <pool_func_mp_array_f32+0x264>
 800b56c:	cf000000 	.word	0xcf000000

0800b570 <ai_check_custom_types>:
 800b570:	4b13      	ldr	r3, [pc, #76]	; (800b5c0 <ai_check_custom_types+0x50>)
 800b572:	b082      	sub	sp, #8
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	b118      	cbz	r0, 800b582 <ai_check_custom_types+0x12>
 800b57a:	7803      	ldrb	r3, [r0, #0]
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d002      	beq.n	800b586 <ai_check_custom_types+0x16>
 800b580:	2000      	movs	r0, #0
 800b582:	b002      	add	sp, #8
 800b584:	4770      	bx	lr
 800b586:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d004      	beq.n	800b598 <ai_check_custom_types+0x28>
 800b58e:	2001      	movs	r0, #1
 800b590:	f080 0001 	eor.w	r0, r0, #1
 800b594:	b002      	add	sp, #8
 800b596:	4770      	bx	lr
 800b598:	7842      	ldrb	r2, [r0, #1]
 800b59a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	f100 0001 	add.w	r0, r0, #1
 800b5a4:	d1f3      	bne.n	800b58e <ai_check_custom_types+0x1e>
 800b5a6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b5aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d1ed      	bne.n	800b58e <ai_check_custom_types+0x1e>
 800b5b2:	7842      	ldrb	r2, [r0, #1]
 800b5b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d1e8      	bne.n	800b58e <ai_check_custom_types+0x1e>
 800b5bc:	2000      	movs	r0, #0
 800b5be:	e7e7      	b.n	800b590 <ai_check_custom_types+0x20>
 800b5c0:	080121e8 	.word	0x080121e8

0800b5c4 <ai_layers_init_all>:
 800b5c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b5c6:	b17a      	cbz	r2, 800b5e8 <ai_layers_init_all+0x24>
 800b5c8:	6913      	ldr	r3, [r2, #16]
 800b5ca:	60d0      	str	r0, [r2, #12]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	f04f 0201 	mov.w	r2, #1
 800b5d2:	d009      	beq.n	800b5e8 <ai_layers_init_all+0x24>
 800b5d4:	b143      	cbz	r3, 800b5e8 <ai_layers_init_all+0x24>
 800b5d6:	6919      	ldr	r1, [r3, #16]
 800b5d8:	60d8      	str	r0, [r3, #12]
 800b5da:	4299      	cmp	r1, r3
 800b5dc:	f102 0201 	add.w	r2, r2, #1
 800b5e0:	d002      	beq.n	800b5e8 <ai_layers_init_all+0x24>
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1f6      	bne.n	800b5d6 <ai_layers_init_all+0x12>
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	4770      	bx	lr

0800b5ec <ai_layers_post_init_all>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b5f0:	b18c      	cbz	r4, 800b616 <ai_layers_post_init_all+0x2a>
 800b5f2:	2500      	movs	r5, #0
 800b5f4:	6863      	ldr	r3, [r4, #4]
 800b5f6:	f013 0f01 	tst.w	r3, #1
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	d003      	beq.n	800b606 <ai_layers_post_init_all+0x1a>
 800b5fe:	6a23      	ldr	r3, [r4, #32]
 800b600:	b10b      	cbz	r3, 800b606 <ai_layers_post_init_all+0x1a>
 800b602:	4798      	blx	r3
 800b604:	3501      	adds	r5, #1
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	42a3      	cmp	r3, r4
 800b60a:	d002      	beq.n	800b612 <ai_layers_post_init_all+0x26>
 800b60c:	461c      	mov	r4, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1f0      	bne.n	800b5f4 <ai_layers_post_init_all+0x8>
 800b612:	4628      	mov	r0, r5
 800b614:	bd38      	pop	{r3, r4, r5, pc}
 800b616:	4625      	mov	r5, r4
 800b618:	e7fb      	b.n	800b612 <ai_layers_post_init_all+0x26>
 800b61a:	bf00      	nop

0800b61c <ai_layers_forward_all>:
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b622:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b624:	4604      	mov	r4, r0
 800b626:	2f00      	cmp	r7, #0
 800b628:	d02c      	beq.n	800b684 <ai_layers_forward_all+0x68>
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	d03f      	beq.n	800b6ae <ai_layers_forward_all+0x92>
 800b62e:	6385      	str	r5, [r0, #56]	; 0x38
 800b630:	4629      	mov	r1, r5
 800b632:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b634:	2001      	movs	r0, #1
 800b636:	47b8      	blx	r7
 800b638:	2600      	movs	r6, #0
 800b63a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b63c:	46b0      	mov	r8, r6
 800b63e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b640:	2002      	movs	r0, #2
 800b642:	47b8      	blx	r7
 800b644:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800b646:	696b      	ldr	r3, [r5, #20]
 800b648:	4628      	mov	r0, r5
 800b64a:	4798      	blx	r3
 800b64c:	692b      	ldr	r3, [r5, #16]
 800b64e:	429d      	cmp	r5, r3
 800b650:	f04f 0003 	mov.w	r0, #3
 800b654:	4619      	mov	r1, r3
 800b656:	d009      	beq.n	800b66c <ai_layers_forward_all+0x50>
 800b658:	63a3      	str	r3, [r4, #56]	; 0x38
 800b65a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b65c:	47b8      	blx	r7
 800b65e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b660:	3601      	adds	r6, #1
 800b662:	2900      	cmp	r1, #0
 800b664:	d1eb      	bne.n	800b63e <ai_layers_forward_all+0x22>
 800b666:	4630      	mov	r0, r6
 800b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66c:	2100      	movs	r1, #0
 800b66e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800b672:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b674:	47b8      	blx	r7
 800b676:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b678:	3601      	adds	r6, #1
 800b67a:	2900      	cmp	r1, #0
 800b67c:	d1df      	bne.n	800b63e <ai_layers_forward_all+0x22>
 800b67e:	4630      	mov	r0, r6
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	b19d      	cbz	r5, 800b6ae <ai_layers_forward_all+0x92>
 800b686:	6385      	str	r5, [r0, #56]	; 0x38
 800b688:	463e      	mov	r6, r7
 800b68a:	696b      	ldr	r3, [r5, #20]
 800b68c:	4628      	mov	r0, r5
 800b68e:	4798      	blx	r3
 800b690:	692b      	ldr	r3, [r5, #16]
 800b692:	42ab      	cmp	r3, r5
 800b694:	f106 0601 	add.w	r6, r6, #1
 800b698:	d004      	beq.n	800b6a4 <ai_layers_forward_all+0x88>
 800b69a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b69c:	461d      	mov	r5, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1f3      	bne.n	800b68a <ai_layers_forward_all+0x6e>
 800b6a2:	e7e0      	b.n	800b666 <ai_layers_forward_all+0x4a>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	63a3      	str	r3, [r4, #56]	; 0x38
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ae:	462e      	mov	r6, r5
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b6:	bf00      	nop

0800b6b8 <ai_array_to_buffer_fmt>:
 800b6b8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d029      	beq.n	800b714 <ai_array_to_buffer_fmt+0x5c>
 800b6c0:	4a22      	ldr	r2, [pc, #136]	; (800b74c <ai_array_to_buffer_fmt+0x94>)
 800b6c2:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d010      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b6ca:	dd13      	ble.n	800b6f4 <ai_array_to_buffer_fmt+0x3c>
 800b6cc:	4a20      	ldr	r2, [pc, #128]	; (800b750 <ai_array_to_buffer_fmt+0x98>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d00c      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b6d2:	dc27      	bgt.n	800b724 <ai_array_to_buffer_fmt+0x6c>
 800b6d4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d007      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b6dc:	3207      	adds	r2, #7
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d004      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b6e2:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d000      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b6ea:	2340      	movs	r3, #64	; 0x40
 800b6ec:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b6f0:	4318      	orrs	r0, r3
 800b6f2:	4770      	bx	lr
 800b6f4:	4a17      	ldr	r2, [pc, #92]	; (800b754 <ai_array_to_buffer_fmt+0x9c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d0f8      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b6fa:	dd1e      	ble.n	800b73a <ai_array_to_buffer_fmt+0x82>
 800b6fc:	4a16      	ldr	r2, [pc, #88]	; (800b758 <ai_array_to_buffer_fmt+0xa0>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d0f4      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b702:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800b706:	4293      	cmp	r3, r2
 800b708:	d0f0      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b70a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800b70e:	4293      	cmp	r3, r2
 800b710:	d1eb      	bne.n	800b6ea <ai_array_to_buffer_fmt+0x32>
 800b712:	e7eb      	b.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b714:	4b11      	ldr	r3, [pc, #68]	; (800b75c <ai_array_to_buffer_fmt+0xa4>)
 800b716:	4003      	ands	r3, r0
 800b718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b71c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b720:	4318      	orrs	r0, r3
 800b722:	4770      	bx	lr
 800b724:	4a0e      	ldr	r2, [pc, #56]	; (800b760 <ai_array_to_buffer_fmt+0xa8>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d0e0      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b72a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800b72e:	4293      	cmp	r3, r2
 800b730:	d0dc      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b732:	4a0c      	ldr	r2, [pc, #48]	; (800b764 <ai_array_to_buffer_fmt+0xac>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d1d8      	bne.n	800b6ea <ai_array_to_buffer_fmt+0x32>
 800b738:	e7d8      	b.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b73a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800b73e:	4293      	cmp	r3, r2
 800b740:	d0d4      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b746:	4293      	cmp	r3, r2
 800b748:	d0d0      	beq.n	800b6ec <ai_array_to_buffer_fmt+0x34>
 800b74a:	e7ce      	b.n	800b6ea <ai_array_to_buffer_fmt+0x32>
 800b74c:	00060440 	.word	0x00060440
 800b750:	00840840 	.word	0x00840840
 800b754:	00040447 	.word	0x00040447
 800b758:	0004084f 	.word	0x0004084f
 800b75c:	00803fff 	.word	0x00803fff
 800b760:	00841040 	.word	0x00841040
 800b764:	0084084f 	.word	0x0084084f

0800b768 <ai_array_get_byte_size>:
 800b768:	b1c1      	cbz	r1, 800b79c <ai_array_get_byte_size+0x34>
 800b76a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800b76e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b772:	4413      	add	r3, r2
 800b774:	fb01 f103 	mul.w	r1, r1, r3
 800b778:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b77c:	3107      	adds	r1, #7
 800b77e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800b782:	f021 0107 	bic.w	r1, r1, #7
 800b786:	2804      	cmp	r0, #4
 800b788:	fa21 f102 	lsr.w	r1, r1, r2
 800b78c:	d008      	beq.n	800b7a0 <ai_array_get_byte_size+0x38>
 800b78e:	2808      	cmp	r0, #8
 800b790:	d101      	bne.n	800b796 <ai_array_get_byte_size+0x2e>
 800b792:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b796:	3107      	adds	r1, #7
 800b798:	08c8      	lsrs	r0, r1, #3
 800b79a:	4770      	bx	lr
 800b79c:	4608      	mov	r0, r1
 800b79e:	4770      	bx	lr
 800b7a0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800b7a4:	3107      	adds	r1, #7
 800b7a6:	08c8      	lsrs	r0, r1, #3
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop

0800b7ac <__assert_func>:
 800b7ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7ae:	4614      	mov	r4, r2
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <__assert_func+0x2c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	68d8      	ldr	r0, [r3, #12]
 800b7ba:	b14c      	cbz	r4, 800b7d0 <__assert_func+0x24>
 800b7bc:	4b07      	ldr	r3, [pc, #28]	; (800b7dc <__assert_func+0x30>)
 800b7be:	9100      	str	r1, [sp, #0]
 800b7c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7c4:	4906      	ldr	r1, [pc, #24]	; (800b7e0 <__assert_func+0x34>)
 800b7c6:	462b      	mov	r3, r5
 800b7c8:	f000 f80e 	bl	800b7e8 <fiprintf>
 800b7cc:	f002 f8c0 	bl	800d950 <abort>
 800b7d0:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <__assert_func+0x38>)
 800b7d2:	461c      	mov	r4, r3
 800b7d4:	e7f3      	b.n	800b7be <__assert_func+0x12>
 800b7d6:	bf00      	nop
 800b7d8:	20000e48 	.word	0x20000e48
 800b7dc:	0805ad44 	.word	0x0805ad44
 800b7e0:	0805ad51 	.word	0x0805ad51
 800b7e4:	08012495 	.word	0x08012495

0800b7e8 <fiprintf>:
 800b7e8:	b40e      	push	{r1, r2, r3}
 800b7ea:	b503      	push	{r0, r1, lr}
 800b7ec:	4601      	mov	r1, r0
 800b7ee:	ab03      	add	r3, sp, #12
 800b7f0:	4805      	ldr	r0, [pc, #20]	; (800b808 <fiprintf+0x20>)
 800b7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f6:	6800      	ldr	r0, [r0, #0]
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	f000 f953 	bl	800baa4 <_vfiprintf_r>
 800b7fe:	b002      	add	sp, #8
 800b800:	f85d eb04 	ldr.w	lr, [sp], #4
 800b804:	b003      	add	sp, #12
 800b806:	4770      	bx	lr
 800b808:	20000e48 	.word	0x20000e48

0800b80c <__libc_init_array>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	4d0d      	ldr	r5, [pc, #52]	; (800b844 <__libc_init_array+0x38>)
 800b810:	4c0d      	ldr	r4, [pc, #52]	; (800b848 <__libc_init_array+0x3c>)
 800b812:	1b64      	subs	r4, r4, r5
 800b814:	10a4      	asrs	r4, r4, #2
 800b816:	2600      	movs	r6, #0
 800b818:	42a6      	cmp	r6, r4
 800b81a:	d109      	bne.n	800b830 <__libc_init_array+0x24>
 800b81c:	4d0b      	ldr	r5, [pc, #44]	; (800b84c <__libc_init_array+0x40>)
 800b81e:	4c0c      	ldr	r4, [pc, #48]	; (800b850 <__libc_init_array+0x44>)
 800b820:	f006 fca0 	bl	8012164 <_init>
 800b824:	1b64      	subs	r4, r4, r5
 800b826:	10a4      	asrs	r4, r4, #2
 800b828:	2600      	movs	r6, #0
 800b82a:	42a6      	cmp	r6, r4
 800b82c:	d105      	bne.n	800b83a <__libc_init_array+0x2e>
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	f855 3b04 	ldr.w	r3, [r5], #4
 800b834:	4798      	blx	r3
 800b836:	3601      	adds	r6, #1
 800b838:	e7ee      	b.n	800b818 <__libc_init_array+0xc>
 800b83a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b83e:	4798      	blx	r3
 800b840:	3601      	adds	r6, #1
 800b842:	e7f2      	b.n	800b82a <__libc_init_array+0x1e>
 800b844:	0805b400 	.word	0x0805b400
 800b848:	0805b400 	.word	0x0805b400
 800b84c:	0805b400 	.word	0x0805b400
 800b850:	0805b404 	.word	0x0805b404

0800b854 <malloc>:
 800b854:	4b02      	ldr	r3, [pc, #8]	; (800b860 <malloc+0xc>)
 800b856:	4601      	mov	r1, r0
 800b858:	6818      	ldr	r0, [r3, #0]
 800b85a:	f000 b885 	b.w	800b968 <_malloc_r>
 800b85e:	bf00      	nop
 800b860:	20000e48 	.word	0x20000e48

0800b864 <memcpy>:
 800b864:	440a      	add	r2, r1
 800b866:	4291      	cmp	r1, r2
 800b868:	f100 33ff 	add.w	r3, r0, #4294967295
 800b86c:	d100      	bne.n	800b870 <memcpy+0xc>
 800b86e:	4770      	bx	lr
 800b870:	b510      	push	{r4, lr}
 800b872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b87a:	4291      	cmp	r1, r2
 800b87c:	d1f9      	bne.n	800b872 <memcpy+0xe>
 800b87e:	bd10      	pop	{r4, pc}

0800b880 <memset>:
 800b880:	4402      	add	r2, r0
 800b882:	4603      	mov	r3, r0
 800b884:	4293      	cmp	r3, r2
 800b886:	d100      	bne.n	800b88a <memset+0xa>
 800b888:	4770      	bx	lr
 800b88a:	f803 1b01 	strb.w	r1, [r3], #1
 800b88e:	e7f9      	b.n	800b884 <memset+0x4>

0800b890 <_free_r>:
 800b890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b892:	2900      	cmp	r1, #0
 800b894:	d044      	beq.n	800b920 <_free_r+0x90>
 800b896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b89a:	9001      	str	r0, [sp, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f1a1 0404 	sub.w	r4, r1, #4
 800b8a2:	bfb8      	it	lt
 800b8a4:	18e4      	addlt	r4, r4, r3
 800b8a6:	f003 fc99 	bl	800f1dc <__malloc_lock>
 800b8aa:	4a1e      	ldr	r2, [pc, #120]	; (800b924 <_free_r+0x94>)
 800b8ac:	9801      	ldr	r0, [sp, #4]
 800b8ae:	6813      	ldr	r3, [r2, #0]
 800b8b0:	b933      	cbnz	r3, 800b8c0 <_free_r+0x30>
 800b8b2:	6063      	str	r3, [r4, #4]
 800b8b4:	6014      	str	r4, [r2, #0]
 800b8b6:	b003      	add	sp, #12
 800b8b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8bc:	f003 bc94 	b.w	800f1e8 <__malloc_unlock>
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	d908      	bls.n	800b8d6 <_free_r+0x46>
 800b8c4:	6825      	ldr	r5, [r4, #0]
 800b8c6:	1961      	adds	r1, r4, r5
 800b8c8:	428b      	cmp	r3, r1
 800b8ca:	bf01      	itttt	eq
 800b8cc:	6819      	ldreq	r1, [r3, #0]
 800b8ce:	685b      	ldreq	r3, [r3, #4]
 800b8d0:	1949      	addeq	r1, r1, r5
 800b8d2:	6021      	streq	r1, [r4, #0]
 800b8d4:	e7ed      	b.n	800b8b2 <_free_r+0x22>
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	b10b      	cbz	r3, 800b8e0 <_free_r+0x50>
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	d9fa      	bls.n	800b8d6 <_free_r+0x46>
 800b8e0:	6811      	ldr	r1, [r2, #0]
 800b8e2:	1855      	adds	r5, r2, r1
 800b8e4:	42a5      	cmp	r5, r4
 800b8e6:	d10b      	bne.n	800b900 <_free_r+0x70>
 800b8e8:	6824      	ldr	r4, [r4, #0]
 800b8ea:	4421      	add	r1, r4
 800b8ec:	1854      	adds	r4, r2, r1
 800b8ee:	42a3      	cmp	r3, r4
 800b8f0:	6011      	str	r1, [r2, #0]
 800b8f2:	d1e0      	bne.n	800b8b6 <_free_r+0x26>
 800b8f4:	681c      	ldr	r4, [r3, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	6053      	str	r3, [r2, #4]
 800b8fa:	4421      	add	r1, r4
 800b8fc:	6011      	str	r1, [r2, #0]
 800b8fe:	e7da      	b.n	800b8b6 <_free_r+0x26>
 800b900:	d902      	bls.n	800b908 <_free_r+0x78>
 800b902:	230c      	movs	r3, #12
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	e7d6      	b.n	800b8b6 <_free_r+0x26>
 800b908:	6825      	ldr	r5, [r4, #0]
 800b90a:	1961      	adds	r1, r4, r5
 800b90c:	428b      	cmp	r3, r1
 800b90e:	bf04      	itt	eq
 800b910:	6819      	ldreq	r1, [r3, #0]
 800b912:	685b      	ldreq	r3, [r3, #4]
 800b914:	6063      	str	r3, [r4, #4]
 800b916:	bf04      	itt	eq
 800b918:	1949      	addeq	r1, r1, r5
 800b91a:	6021      	streq	r1, [r4, #0]
 800b91c:	6054      	str	r4, [r2, #4]
 800b91e:	e7ca      	b.n	800b8b6 <_free_r+0x26>
 800b920:	b003      	add	sp, #12
 800b922:	bd30      	pop	{r4, r5, pc}
 800b924:	20013c24 	.word	0x20013c24

0800b928 <sbrk_aligned>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	4e0e      	ldr	r6, [pc, #56]	; (800b964 <sbrk_aligned+0x3c>)
 800b92c:	460c      	mov	r4, r1
 800b92e:	6831      	ldr	r1, [r6, #0]
 800b930:	4605      	mov	r5, r0
 800b932:	b911      	cbnz	r1, 800b93a <sbrk_aligned+0x12>
 800b934:	f001 f860 	bl	800c9f8 <_sbrk_r>
 800b938:	6030      	str	r0, [r6, #0]
 800b93a:	4621      	mov	r1, r4
 800b93c:	4628      	mov	r0, r5
 800b93e:	f001 f85b 	bl	800c9f8 <_sbrk_r>
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	d00a      	beq.n	800b95c <sbrk_aligned+0x34>
 800b946:	1cc4      	adds	r4, r0, #3
 800b948:	f024 0403 	bic.w	r4, r4, #3
 800b94c:	42a0      	cmp	r0, r4
 800b94e:	d007      	beq.n	800b960 <sbrk_aligned+0x38>
 800b950:	1a21      	subs	r1, r4, r0
 800b952:	4628      	mov	r0, r5
 800b954:	f001 f850 	bl	800c9f8 <_sbrk_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	d101      	bne.n	800b960 <sbrk_aligned+0x38>
 800b95c:	f04f 34ff 	mov.w	r4, #4294967295
 800b960:	4620      	mov	r0, r4
 800b962:	bd70      	pop	{r4, r5, r6, pc}
 800b964:	20013c28 	.word	0x20013c28

0800b968 <_malloc_r>:
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	1ccd      	adds	r5, r1, #3
 800b96e:	f025 0503 	bic.w	r5, r5, #3
 800b972:	3508      	adds	r5, #8
 800b974:	2d0c      	cmp	r5, #12
 800b976:	bf38      	it	cc
 800b978:	250c      	movcc	r5, #12
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	4607      	mov	r7, r0
 800b97e:	db01      	blt.n	800b984 <_malloc_r+0x1c>
 800b980:	42a9      	cmp	r1, r5
 800b982:	d905      	bls.n	800b990 <_malloc_r+0x28>
 800b984:	230c      	movs	r3, #12
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	2600      	movs	r6, #0
 800b98a:	4630      	mov	r0, r6
 800b98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b990:	4e2e      	ldr	r6, [pc, #184]	; (800ba4c <_malloc_r+0xe4>)
 800b992:	f003 fc23 	bl	800f1dc <__malloc_lock>
 800b996:	6833      	ldr	r3, [r6, #0]
 800b998:	461c      	mov	r4, r3
 800b99a:	bb34      	cbnz	r4, 800b9ea <_malloc_r+0x82>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4638      	mov	r0, r7
 800b9a0:	f7ff ffc2 	bl	800b928 <sbrk_aligned>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	d14d      	bne.n	800ba46 <_malloc_r+0xde>
 800b9aa:	6834      	ldr	r4, [r6, #0]
 800b9ac:	4626      	mov	r6, r4
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	d140      	bne.n	800ba34 <_malloc_r+0xcc>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	4631      	mov	r1, r6
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	eb04 0803 	add.w	r8, r4, r3
 800b9bc:	f001 f81c 	bl	800c9f8 <_sbrk_r>
 800b9c0:	4580      	cmp	r8, r0
 800b9c2:	d13a      	bne.n	800ba3a <_malloc_r+0xd2>
 800b9c4:	6821      	ldr	r1, [r4, #0]
 800b9c6:	3503      	adds	r5, #3
 800b9c8:	1a6d      	subs	r5, r5, r1
 800b9ca:	f025 0503 	bic.w	r5, r5, #3
 800b9ce:	3508      	adds	r5, #8
 800b9d0:	2d0c      	cmp	r5, #12
 800b9d2:	bf38      	it	cc
 800b9d4:	250c      	movcc	r5, #12
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4638      	mov	r0, r7
 800b9da:	f7ff ffa5 	bl	800b928 <sbrk_aligned>
 800b9de:	3001      	adds	r0, #1
 800b9e0:	d02b      	beq.n	800ba3a <_malloc_r+0xd2>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	442b      	add	r3, r5
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	e00e      	b.n	800ba08 <_malloc_r+0xa0>
 800b9ea:	6822      	ldr	r2, [r4, #0]
 800b9ec:	1b52      	subs	r2, r2, r5
 800b9ee:	d41e      	bmi.n	800ba2e <_malloc_r+0xc6>
 800b9f0:	2a0b      	cmp	r2, #11
 800b9f2:	d916      	bls.n	800ba22 <_malloc_r+0xba>
 800b9f4:	1961      	adds	r1, r4, r5
 800b9f6:	42a3      	cmp	r3, r4
 800b9f8:	6025      	str	r5, [r4, #0]
 800b9fa:	bf18      	it	ne
 800b9fc:	6059      	strne	r1, [r3, #4]
 800b9fe:	6863      	ldr	r3, [r4, #4]
 800ba00:	bf08      	it	eq
 800ba02:	6031      	streq	r1, [r6, #0]
 800ba04:	5162      	str	r2, [r4, r5]
 800ba06:	604b      	str	r3, [r1, #4]
 800ba08:	4638      	mov	r0, r7
 800ba0a:	f104 060b 	add.w	r6, r4, #11
 800ba0e:	f003 fbeb 	bl	800f1e8 <__malloc_unlock>
 800ba12:	f026 0607 	bic.w	r6, r6, #7
 800ba16:	1d23      	adds	r3, r4, #4
 800ba18:	1af2      	subs	r2, r6, r3
 800ba1a:	d0b6      	beq.n	800b98a <_malloc_r+0x22>
 800ba1c:	1b9b      	subs	r3, r3, r6
 800ba1e:	50a3      	str	r3, [r4, r2]
 800ba20:	e7b3      	b.n	800b98a <_malloc_r+0x22>
 800ba22:	6862      	ldr	r2, [r4, #4]
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	bf0c      	ite	eq
 800ba28:	6032      	streq	r2, [r6, #0]
 800ba2a:	605a      	strne	r2, [r3, #4]
 800ba2c:	e7ec      	b.n	800ba08 <_malloc_r+0xa0>
 800ba2e:	4623      	mov	r3, r4
 800ba30:	6864      	ldr	r4, [r4, #4]
 800ba32:	e7b2      	b.n	800b99a <_malloc_r+0x32>
 800ba34:	4634      	mov	r4, r6
 800ba36:	6876      	ldr	r6, [r6, #4]
 800ba38:	e7b9      	b.n	800b9ae <_malloc_r+0x46>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	603b      	str	r3, [r7, #0]
 800ba3e:	4638      	mov	r0, r7
 800ba40:	f003 fbd2 	bl	800f1e8 <__malloc_unlock>
 800ba44:	e7a1      	b.n	800b98a <_malloc_r+0x22>
 800ba46:	6025      	str	r5, [r4, #0]
 800ba48:	e7de      	b.n	800ba08 <_malloc_r+0xa0>
 800ba4a:	bf00      	nop
 800ba4c:	20013c24 	.word	0x20013c24

0800ba50 <__sfputc_r>:
 800ba50:	6893      	ldr	r3, [r2, #8]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	b410      	push	{r4}
 800ba58:	6093      	str	r3, [r2, #8]
 800ba5a:	da08      	bge.n	800ba6e <__sfputc_r+0x1e>
 800ba5c:	6994      	ldr	r4, [r2, #24]
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	db01      	blt.n	800ba66 <__sfputc_r+0x16>
 800ba62:	290a      	cmp	r1, #10
 800ba64:	d103      	bne.n	800ba6e <__sfputc_r+0x1e>
 800ba66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba6a:	f001 beb1 	b.w	800d7d0 <__swbuf_r>
 800ba6e:	6813      	ldr	r3, [r2, #0]
 800ba70:	1c58      	adds	r0, r3, #1
 800ba72:	6010      	str	r0, [r2, #0]
 800ba74:	7019      	strb	r1, [r3, #0]
 800ba76:	4608      	mov	r0, r1
 800ba78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <__sfputs_r>:
 800ba7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba80:	4606      	mov	r6, r0
 800ba82:	460f      	mov	r7, r1
 800ba84:	4614      	mov	r4, r2
 800ba86:	18d5      	adds	r5, r2, r3
 800ba88:	42ac      	cmp	r4, r5
 800ba8a:	d101      	bne.n	800ba90 <__sfputs_r+0x12>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e007      	b.n	800baa0 <__sfputs_r+0x22>
 800ba90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba94:	463a      	mov	r2, r7
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7ff ffda 	bl	800ba50 <__sfputc_r>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d1f3      	bne.n	800ba88 <__sfputs_r+0xa>
 800baa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800baa4 <_vfiprintf_r>:
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	460d      	mov	r5, r1
 800baaa:	b09d      	sub	sp, #116	; 0x74
 800baac:	4614      	mov	r4, r2
 800baae:	4698      	mov	r8, r3
 800bab0:	4606      	mov	r6, r0
 800bab2:	b118      	cbz	r0, 800babc <_vfiprintf_r+0x18>
 800bab4:	6983      	ldr	r3, [r0, #24]
 800bab6:	b90b      	cbnz	r3, 800babc <_vfiprintf_r+0x18>
 800bab8:	f002 feec 	bl	800e894 <__sinit>
 800babc:	4b89      	ldr	r3, [pc, #548]	; (800bce4 <_vfiprintf_r+0x240>)
 800babe:	429d      	cmp	r5, r3
 800bac0:	d11b      	bne.n	800bafa <_vfiprintf_r+0x56>
 800bac2:	6875      	ldr	r5, [r6, #4]
 800bac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac6:	07d9      	lsls	r1, r3, #31
 800bac8:	d405      	bmi.n	800bad6 <_vfiprintf_r+0x32>
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	059a      	lsls	r2, r3, #22
 800bace:	d402      	bmi.n	800bad6 <_vfiprintf_r+0x32>
 800bad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bad2:	f003 faf0 	bl	800f0b6 <__retarget_lock_acquire_recursive>
 800bad6:	89ab      	ldrh	r3, [r5, #12]
 800bad8:	071b      	lsls	r3, r3, #28
 800bada:	d501      	bpl.n	800bae0 <_vfiprintf_r+0x3c>
 800badc:	692b      	ldr	r3, [r5, #16]
 800bade:	b9eb      	cbnz	r3, 800bb1c <_vfiprintf_r+0x78>
 800bae0:	4629      	mov	r1, r5
 800bae2:	4630      	mov	r0, r6
 800bae4:	f001 fec6 	bl	800d874 <__swsetup_r>
 800bae8:	b1c0      	cbz	r0, 800bb1c <_vfiprintf_r+0x78>
 800baea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baec:	07dc      	lsls	r4, r3, #31
 800baee:	d50e      	bpl.n	800bb0e <_vfiprintf_r+0x6a>
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295
 800baf4:	b01d      	add	sp, #116	; 0x74
 800baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafa:	4b7b      	ldr	r3, [pc, #492]	; (800bce8 <_vfiprintf_r+0x244>)
 800bafc:	429d      	cmp	r5, r3
 800bafe:	d101      	bne.n	800bb04 <_vfiprintf_r+0x60>
 800bb00:	68b5      	ldr	r5, [r6, #8]
 800bb02:	e7df      	b.n	800bac4 <_vfiprintf_r+0x20>
 800bb04:	4b79      	ldr	r3, [pc, #484]	; (800bcec <_vfiprintf_r+0x248>)
 800bb06:	429d      	cmp	r5, r3
 800bb08:	bf08      	it	eq
 800bb0a:	68f5      	ldreq	r5, [r6, #12]
 800bb0c:	e7da      	b.n	800bac4 <_vfiprintf_r+0x20>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	0598      	lsls	r0, r3, #22
 800bb12:	d4ed      	bmi.n	800baf0 <_vfiprintf_r+0x4c>
 800bb14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb16:	f003 facf 	bl	800f0b8 <__retarget_lock_release_recursive>
 800bb1a:	e7e9      	b.n	800baf0 <_vfiprintf_r+0x4c>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb20:	2320      	movs	r3, #32
 800bb22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb26:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb2a:	2330      	movs	r3, #48	; 0x30
 800bb2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bcf0 <_vfiprintf_r+0x24c>
 800bb30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb34:	f04f 0901 	mov.w	r9, #1
 800bb38:	4623      	mov	r3, r4
 800bb3a:	469a      	mov	sl, r3
 800bb3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb40:	b10a      	cbz	r2, 800bb46 <_vfiprintf_r+0xa2>
 800bb42:	2a25      	cmp	r2, #37	; 0x25
 800bb44:	d1f9      	bne.n	800bb3a <_vfiprintf_r+0x96>
 800bb46:	ebba 0b04 	subs.w	fp, sl, r4
 800bb4a:	d00b      	beq.n	800bb64 <_vfiprintf_r+0xc0>
 800bb4c:	465b      	mov	r3, fp
 800bb4e:	4622      	mov	r2, r4
 800bb50:	4629      	mov	r1, r5
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7ff ff93 	bl	800ba7e <__sfputs_r>
 800bb58:	3001      	adds	r0, #1
 800bb5a:	f000 80aa 	beq.w	800bcb2 <_vfiprintf_r+0x20e>
 800bb5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb60:	445a      	add	r2, fp
 800bb62:	9209      	str	r2, [sp, #36]	; 0x24
 800bb64:	f89a 3000 	ldrb.w	r3, [sl]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 80a2 	beq.w	800bcb2 <_vfiprintf_r+0x20e>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f04f 32ff 	mov.w	r2, #4294967295
 800bb74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb78:	f10a 0a01 	add.w	sl, sl, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	9307      	str	r3, [sp, #28]
 800bb80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb84:	931a      	str	r3, [sp, #104]	; 0x68
 800bb86:	4654      	mov	r4, sl
 800bb88:	2205      	movs	r2, #5
 800bb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8e:	4858      	ldr	r0, [pc, #352]	; (800bcf0 <_vfiprintf_r+0x24c>)
 800bb90:	f7f4 fb36 	bl	8000200 <memchr>
 800bb94:	9a04      	ldr	r2, [sp, #16]
 800bb96:	b9d8      	cbnz	r0, 800bbd0 <_vfiprintf_r+0x12c>
 800bb98:	06d1      	lsls	r1, r2, #27
 800bb9a:	bf44      	itt	mi
 800bb9c:	2320      	movmi	r3, #32
 800bb9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba2:	0713      	lsls	r3, r2, #28
 800bba4:	bf44      	itt	mi
 800bba6:	232b      	movmi	r3, #43	; 0x2b
 800bba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbac:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb0:	2b2a      	cmp	r3, #42	; 0x2a
 800bbb2:	d015      	beq.n	800bbe0 <_vfiprintf_r+0x13c>
 800bbb4:	9a07      	ldr	r2, [sp, #28]
 800bbb6:	4654      	mov	r4, sl
 800bbb8:	2000      	movs	r0, #0
 800bbba:	f04f 0c0a 	mov.w	ip, #10
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbc4:	3b30      	subs	r3, #48	; 0x30
 800bbc6:	2b09      	cmp	r3, #9
 800bbc8:	d94e      	bls.n	800bc68 <_vfiprintf_r+0x1c4>
 800bbca:	b1b0      	cbz	r0, 800bbfa <_vfiprintf_r+0x156>
 800bbcc:	9207      	str	r2, [sp, #28]
 800bbce:	e014      	b.n	800bbfa <_vfiprintf_r+0x156>
 800bbd0:	eba0 0308 	sub.w	r3, r0, r8
 800bbd4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	46a2      	mov	sl, r4
 800bbde:	e7d2      	b.n	800bb86 <_vfiprintf_r+0xe2>
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	1d19      	adds	r1, r3, #4
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	9103      	str	r1, [sp, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	bfbb      	ittet	lt
 800bbec:	425b      	neglt	r3, r3
 800bbee:	f042 0202 	orrlt.w	r2, r2, #2
 800bbf2:	9307      	strge	r3, [sp, #28]
 800bbf4:	9307      	strlt	r3, [sp, #28]
 800bbf6:	bfb8      	it	lt
 800bbf8:	9204      	strlt	r2, [sp, #16]
 800bbfa:	7823      	ldrb	r3, [r4, #0]
 800bbfc:	2b2e      	cmp	r3, #46	; 0x2e
 800bbfe:	d10c      	bne.n	800bc1a <_vfiprintf_r+0x176>
 800bc00:	7863      	ldrb	r3, [r4, #1]
 800bc02:	2b2a      	cmp	r3, #42	; 0x2a
 800bc04:	d135      	bne.n	800bc72 <_vfiprintf_r+0x1ce>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	1d1a      	adds	r2, r3, #4
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	9203      	str	r2, [sp, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	bfb8      	it	lt
 800bc12:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc16:	3402      	adds	r4, #2
 800bc18:	9305      	str	r3, [sp, #20]
 800bc1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd00 <_vfiprintf_r+0x25c>
 800bc1e:	7821      	ldrb	r1, [r4, #0]
 800bc20:	2203      	movs	r2, #3
 800bc22:	4650      	mov	r0, sl
 800bc24:	f7f4 faec 	bl	8000200 <memchr>
 800bc28:	b140      	cbz	r0, 800bc3c <_vfiprintf_r+0x198>
 800bc2a:	2340      	movs	r3, #64	; 0x40
 800bc2c:	eba0 000a 	sub.w	r0, r0, sl
 800bc30:	fa03 f000 	lsl.w	r0, r3, r0
 800bc34:	9b04      	ldr	r3, [sp, #16]
 800bc36:	4303      	orrs	r3, r0
 800bc38:	3401      	adds	r4, #1
 800bc3a:	9304      	str	r3, [sp, #16]
 800bc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc40:	482c      	ldr	r0, [pc, #176]	; (800bcf4 <_vfiprintf_r+0x250>)
 800bc42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc46:	2206      	movs	r2, #6
 800bc48:	f7f4 fada 	bl	8000200 <memchr>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d03f      	beq.n	800bcd0 <_vfiprintf_r+0x22c>
 800bc50:	4b29      	ldr	r3, [pc, #164]	; (800bcf8 <_vfiprintf_r+0x254>)
 800bc52:	bb1b      	cbnz	r3, 800bc9c <_vfiprintf_r+0x1f8>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	3307      	adds	r3, #7
 800bc58:	f023 0307 	bic.w	r3, r3, #7
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	9303      	str	r3, [sp, #12]
 800bc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc62:	443b      	add	r3, r7
 800bc64:	9309      	str	r3, [sp, #36]	; 0x24
 800bc66:	e767      	b.n	800bb38 <_vfiprintf_r+0x94>
 800bc68:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	2001      	movs	r0, #1
 800bc70:	e7a5      	b.n	800bbbe <_vfiprintf_r+0x11a>
 800bc72:	2300      	movs	r3, #0
 800bc74:	3401      	adds	r4, #1
 800bc76:	9305      	str	r3, [sp, #20]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	f04f 0c0a 	mov.w	ip, #10
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc84:	3a30      	subs	r2, #48	; 0x30
 800bc86:	2a09      	cmp	r2, #9
 800bc88:	d903      	bls.n	800bc92 <_vfiprintf_r+0x1ee>
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0c5      	beq.n	800bc1a <_vfiprintf_r+0x176>
 800bc8e:	9105      	str	r1, [sp, #20]
 800bc90:	e7c3      	b.n	800bc1a <_vfiprintf_r+0x176>
 800bc92:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc96:	4604      	mov	r4, r0
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e7f0      	b.n	800bc7e <_vfiprintf_r+0x1da>
 800bc9c:	ab03      	add	r3, sp, #12
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	462a      	mov	r2, r5
 800bca2:	4b16      	ldr	r3, [pc, #88]	; (800bcfc <_vfiprintf_r+0x258>)
 800bca4:	a904      	add	r1, sp, #16
 800bca6:	4630      	mov	r0, r6
 800bca8:	f000 f8cc 	bl	800be44 <_printf_float>
 800bcac:	4607      	mov	r7, r0
 800bcae:	1c78      	adds	r0, r7, #1
 800bcb0:	d1d6      	bne.n	800bc60 <_vfiprintf_r+0x1bc>
 800bcb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcb4:	07d9      	lsls	r1, r3, #31
 800bcb6:	d405      	bmi.n	800bcc4 <_vfiprintf_r+0x220>
 800bcb8:	89ab      	ldrh	r3, [r5, #12]
 800bcba:	059a      	lsls	r2, r3, #22
 800bcbc:	d402      	bmi.n	800bcc4 <_vfiprintf_r+0x220>
 800bcbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcc0:	f003 f9fa 	bl	800f0b8 <__retarget_lock_release_recursive>
 800bcc4:	89ab      	ldrh	r3, [r5, #12]
 800bcc6:	065b      	lsls	r3, r3, #25
 800bcc8:	f53f af12 	bmi.w	800baf0 <_vfiprintf_r+0x4c>
 800bccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcce:	e711      	b.n	800baf4 <_vfiprintf_r+0x50>
 800bcd0:	ab03      	add	r3, sp, #12
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	462a      	mov	r2, r5
 800bcd6:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <_vfiprintf_r+0x258>)
 800bcd8:	a904      	add	r1, sp, #16
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 fb56 	bl	800c38c <_printf_i>
 800bce0:	e7e4      	b.n	800bcac <_vfiprintf_r+0x208>
 800bce2:	bf00      	nop
 800bce4:	0805afd4 	.word	0x0805afd4
 800bce8:	0805aff4 	.word	0x0805aff4
 800bcec:	0805afb4 	.word	0x0805afb4
 800bcf0:	0805ad84 	.word	0x0805ad84
 800bcf4:	0805ad8e 	.word	0x0805ad8e
 800bcf8:	0800be45 	.word	0x0800be45
 800bcfc:	0800ba7f 	.word	0x0800ba7f
 800bd00:	0805ad8a 	.word	0x0805ad8a

0800bd04 <__cvt>:
 800bd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd08:	ec55 4b10 	vmov	r4, r5, d0
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	460e      	mov	r6, r1
 800bd10:	4619      	mov	r1, r3
 800bd12:	462b      	mov	r3, r5
 800bd14:	bfbb      	ittet	lt
 800bd16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd1a:	461d      	movlt	r5, r3
 800bd1c:	2300      	movge	r3, #0
 800bd1e:	232d      	movlt	r3, #45	; 0x2d
 800bd20:	700b      	strb	r3, [r1, #0]
 800bd22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd28:	4691      	mov	r9, r2
 800bd2a:	f023 0820 	bic.w	r8, r3, #32
 800bd2e:	bfbc      	itt	lt
 800bd30:	4622      	movlt	r2, r4
 800bd32:	4614      	movlt	r4, r2
 800bd34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd38:	d005      	beq.n	800bd46 <__cvt+0x42>
 800bd3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd3e:	d100      	bne.n	800bd42 <__cvt+0x3e>
 800bd40:	3601      	adds	r6, #1
 800bd42:	2102      	movs	r1, #2
 800bd44:	e000      	b.n	800bd48 <__cvt+0x44>
 800bd46:	2103      	movs	r1, #3
 800bd48:	ab03      	add	r3, sp, #12
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	ab02      	add	r3, sp, #8
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	4653      	mov	r3, sl
 800bd56:	4632      	mov	r2, r6
 800bd58:	f001 fe8e 	bl	800da78 <_dtoa_r>
 800bd5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd60:	4607      	mov	r7, r0
 800bd62:	d102      	bne.n	800bd6a <__cvt+0x66>
 800bd64:	f019 0f01 	tst.w	r9, #1
 800bd68:	d022      	beq.n	800bdb0 <__cvt+0xac>
 800bd6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd6e:	eb07 0906 	add.w	r9, r7, r6
 800bd72:	d110      	bne.n	800bd96 <__cvt+0x92>
 800bd74:	783b      	ldrb	r3, [r7, #0]
 800bd76:	2b30      	cmp	r3, #48	; 0x30
 800bd78:	d10a      	bne.n	800bd90 <__cvt+0x8c>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd86:	b918      	cbnz	r0, 800bd90 <__cvt+0x8c>
 800bd88:	f1c6 0601 	rsb	r6, r6, #1
 800bd8c:	f8ca 6000 	str.w	r6, [sl]
 800bd90:	f8da 3000 	ldr.w	r3, [sl]
 800bd94:	4499      	add	r9, r3
 800bd96:	2200      	movs	r2, #0
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f7f4 fea3 	bl	8000ae8 <__aeabi_dcmpeq>
 800bda2:	b108      	cbz	r0, 800bda8 <__cvt+0xa4>
 800bda4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bda8:	2230      	movs	r2, #48	; 0x30
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	454b      	cmp	r3, r9
 800bdae:	d307      	bcc.n	800bdc0 <__cvt+0xbc>
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdb4:	1bdb      	subs	r3, r3, r7
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	b004      	add	sp, #16
 800bdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc0:	1c59      	adds	r1, r3, #1
 800bdc2:	9103      	str	r1, [sp, #12]
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	e7f0      	b.n	800bdaa <__cvt+0xa6>

0800bdc8 <__exponent>:
 800bdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	bfb8      	it	lt
 800bdd0:	4249      	neglt	r1, r1
 800bdd2:	f803 2b02 	strb.w	r2, [r3], #2
 800bdd6:	bfb4      	ite	lt
 800bdd8:	222d      	movlt	r2, #45	; 0x2d
 800bdda:	222b      	movge	r2, #43	; 0x2b
 800bddc:	2909      	cmp	r1, #9
 800bdde:	7042      	strb	r2, [r0, #1]
 800bde0:	dd2a      	ble.n	800be38 <__exponent+0x70>
 800bde2:	f10d 0407 	add.w	r4, sp, #7
 800bde6:	46a4      	mov	ip, r4
 800bde8:	270a      	movs	r7, #10
 800bdea:	46a6      	mov	lr, r4
 800bdec:	460a      	mov	r2, r1
 800bdee:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdf2:	fb07 1516 	mls	r5, r7, r6, r1
 800bdf6:	3530      	adds	r5, #48	; 0x30
 800bdf8:	2a63      	cmp	r2, #99	; 0x63
 800bdfa:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be02:	4631      	mov	r1, r6
 800be04:	dcf1      	bgt.n	800bdea <__exponent+0x22>
 800be06:	3130      	adds	r1, #48	; 0x30
 800be08:	f1ae 0502 	sub.w	r5, lr, #2
 800be0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be10:	1c44      	adds	r4, r0, #1
 800be12:	4629      	mov	r1, r5
 800be14:	4561      	cmp	r1, ip
 800be16:	d30a      	bcc.n	800be2e <__exponent+0x66>
 800be18:	f10d 0209 	add.w	r2, sp, #9
 800be1c:	eba2 020e 	sub.w	r2, r2, lr
 800be20:	4565      	cmp	r5, ip
 800be22:	bf88      	it	hi
 800be24:	2200      	movhi	r2, #0
 800be26:	4413      	add	r3, r2
 800be28:	1a18      	subs	r0, r3, r0
 800be2a:	b003      	add	sp, #12
 800be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be36:	e7ed      	b.n	800be14 <__exponent+0x4c>
 800be38:	2330      	movs	r3, #48	; 0x30
 800be3a:	3130      	adds	r1, #48	; 0x30
 800be3c:	7083      	strb	r3, [r0, #2]
 800be3e:	70c1      	strb	r1, [r0, #3]
 800be40:	1d03      	adds	r3, r0, #4
 800be42:	e7f1      	b.n	800be28 <__exponent+0x60>

0800be44 <_printf_float>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	ed2d 8b02 	vpush	{d8}
 800be4c:	b08d      	sub	sp, #52	; 0x34
 800be4e:	460c      	mov	r4, r1
 800be50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be54:	4616      	mov	r6, r2
 800be56:	461f      	mov	r7, r3
 800be58:	4605      	mov	r5, r0
 800be5a:	f003 f927 	bl	800f0ac <_localeconv_r>
 800be5e:	f8d0 a000 	ldr.w	sl, [r0]
 800be62:	4650      	mov	r0, sl
 800be64:	f7f4 f9be 	bl	80001e4 <strlen>
 800be68:	2300      	movs	r3, #0
 800be6a:	930a      	str	r3, [sp, #40]	; 0x28
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	9305      	str	r3, [sp, #20]
 800be70:	f8d8 3000 	ldr.w	r3, [r8]
 800be74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be78:	3307      	adds	r3, #7
 800be7a:	f023 0307 	bic.w	r3, r3, #7
 800be7e:	f103 0208 	add.w	r2, r3, #8
 800be82:	f8c8 2000 	str.w	r2, [r8]
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be96:	9307      	str	r3, [sp, #28]
 800be98:	f8cd 8018 	str.w	r8, [sp, #24]
 800be9c:	ee08 0a10 	vmov	s16, r0
 800bea0:	4b9f      	ldr	r3, [pc, #636]	; (800c120 <_printf_float+0x2dc>)
 800bea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295
 800beaa:	f7f4 fe4f 	bl	8000b4c <__aeabi_dcmpun>
 800beae:	bb88      	cbnz	r0, 800bf14 <_printf_float+0xd0>
 800beb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beb4:	4b9a      	ldr	r3, [pc, #616]	; (800c120 <_printf_float+0x2dc>)
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	f7f4 fe29 	bl	8000b10 <__aeabi_dcmple>
 800bebe:	bb48      	cbnz	r0, 800bf14 <_printf_float+0xd0>
 800bec0:	2200      	movs	r2, #0
 800bec2:	2300      	movs	r3, #0
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 fe18 	bl	8000afc <__aeabi_dcmplt>
 800becc:	b110      	cbz	r0, 800bed4 <_printf_float+0x90>
 800bece:	232d      	movs	r3, #45	; 0x2d
 800bed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed4:	4b93      	ldr	r3, [pc, #588]	; (800c124 <_printf_float+0x2e0>)
 800bed6:	4894      	ldr	r0, [pc, #592]	; (800c128 <_printf_float+0x2e4>)
 800bed8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bedc:	bf94      	ite	ls
 800bede:	4698      	movls	r8, r3
 800bee0:	4680      	movhi	r8, r0
 800bee2:	2303      	movs	r3, #3
 800bee4:	6123      	str	r3, [r4, #16]
 800bee6:	9b05      	ldr	r3, [sp, #20]
 800bee8:	f023 0204 	bic.w	r2, r3, #4
 800beec:	6022      	str	r2, [r4, #0]
 800beee:	f04f 0900 	mov.w	r9, #0
 800bef2:	9700      	str	r7, [sp, #0]
 800bef4:	4633      	mov	r3, r6
 800bef6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bef8:	4621      	mov	r1, r4
 800befa:	4628      	mov	r0, r5
 800befc:	f000 f9d8 	bl	800c2b0 <_printf_common>
 800bf00:	3001      	adds	r0, #1
 800bf02:	f040 8090 	bne.w	800c026 <_printf_float+0x1e2>
 800bf06:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0a:	b00d      	add	sp, #52	; 0x34
 800bf0c:	ecbd 8b02 	vpop	{d8}
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf14:	4642      	mov	r2, r8
 800bf16:	464b      	mov	r3, r9
 800bf18:	4640      	mov	r0, r8
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	f7f4 fe16 	bl	8000b4c <__aeabi_dcmpun>
 800bf20:	b140      	cbz	r0, 800bf34 <_printf_float+0xf0>
 800bf22:	464b      	mov	r3, r9
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	bfbc      	itt	lt
 800bf28:	232d      	movlt	r3, #45	; 0x2d
 800bf2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf2e:	487f      	ldr	r0, [pc, #508]	; (800c12c <_printf_float+0x2e8>)
 800bf30:	4b7f      	ldr	r3, [pc, #508]	; (800c130 <_printf_float+0x2ec>)
 800bf32:	e7d1      	b.n	800bed8 <_printf_float+0x94>
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf3a:	9206      	str	r2, [sp, #24]
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	d13f      	bne.n	800bfc0 <_printf_float+0x17c>
 800bf40:	2306      	movs	r3, #6
 800bf42:	6063      	str	r3, [r4, #4]
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	6861      	ldr	r1, [r4, #4]
 800bf48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	ab0a      	add	r3, sp, #40	; 0x28
 800bf52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf56:	ab09      	add	r3, sp, #36	; 0x24
 800bf58:	ec49 8b10 	vmov	d0, r8, r9
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf64:	4628      	mov	r0, r5
 800bf66:	f7ff fecd 	bl	800bd04 <__cvt>
 800bf6a:	9b06      	ldr	r3, [sp, #24]
 800bf6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf6e:	2b47      	cmp	r3, #71	; 0x47
 800bf70:	4680      	mov	r8, r0
 800bf72:	d108      	bne.n	800bf86 <_printf_float+0x142>
 800bf74:	1cc8      	adds	r0, r1, #3
 800bf76:	db02      	blt.n	800bf7e <_printf_float+0x13a>
 800bf78:	6863      	ldr	r3, [r4, #4]
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	dd41      	ble.n	800c002 <_printf_float+0x1be>
 800bf7e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf82:	fa5f fb8b 	uxtb.w	fp, fp
 800bf86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf8a:	d820      	bhi.n	800bfce <_printf_float+0x18a>
 800bf8c:	3901      	subs	r1, #1
 800bf8e:	465a      	mov	r2, fp
 800bf90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf94:	9109      	str	r1, [sp, #36]	; 0x24
 800bf96:	f7ff ff17 	bl	800bdc8 <__exponent>
 800bf9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf9c:	1813      	adds	r3, r2, r0
 800bf9e:	2a01      	cmp	r2, #1
 800bfa0:	4681      	mov	r9, r0
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	dc02      	bgt.n	800bfac <_printf_float+0x168>
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	07d2      	lsls	r2, r2, #31
 800bfaa:	d501      	bpl.n	800bfb0 <_printf_float+0x16c>
 800bfac:	3301      	adds	r3, #1
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d09c      	beq.n	800bef2 <_printf_float+0xae>
 800bfb8:	232d      	movs	r3, #45	; 0x2d
 800bfba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfbe:	e798      	b.n	800bef2 <_printf_float+0xae>
 800bfc0:	9a06      	ldr	r2, [sp, #24]
 800bfc2:	2a47      	cmp	r2, #71	; 0x47
 800bfc4:	d1be      	bne.n	800bf44 <_printf_float+0x100>
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1bc      	bne.n	800bf44 <_printf_float+0x100>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e7b9      	b.n	800bf42 <_printf_float+0xfe>
 800bfce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfd2:	d118      	bne.n	800c006 <_printf_float+0x1c2>
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	dd0b      	ble.n	800bff2 <_printf_float+0x1ae>
 800bfda:	6121      	str	r1, [r4, #16]
 800bfdc:	b913      	cbnz	r3, 800bfe4 <_printf_float+0x1a0>
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	07d0      	lsls	r0, r2, #31
 800bfe2:	d502      	bpl.n	800bfea <_printf_float+0x1a6>
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	440b      	add	r3, r1
 800bfe8:	6123      	str	r3, [r4, #16]
 800bfea:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfec:	f04f 0900 	mov.w	r9, #0
 800bff0:	e7de      	b.n	800bfb0 <_printf_float+0x16c>
 800bff2:	b913      	cbnz	r3, 800bffa <_printf_float+0x1b6>
 800bff4:	6822      	ldr	r2, [r4, #0]
 800bff6:	07d2      	lsls	r2, r2, #31
 800bff8:	d501      	bpl.n	800bffe <_printf_float+0x1ba>
 800bffa:	3302      	adds	r3, #2
 800bffc:	e7f4      	b.n	800bfe8 <_printf_float+0x1a4>
 800bffe:	2301      	movs	r3, #1
 800c000:	e7f2      	b.n	800bfe8 <_printf_float+0x1a4>
 800c002:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c008:	4299      	cmp	r1, r3
 800c00a:	db05      	blt.n	800c018 <_printf_float+0x1d4>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	6121      	str	r1, [r4, #16]
 800c010:	07d8      	lsls	r0, r3, #31
 800c012:	d5ea      	bpl.n	800bfea <_printf_float+0x1a6>
 800c014:	1c4b      	adds	r3, r1, #1
 800c016:	e7e7      	b.n	800bfe8 <_printf_float+0x1a4>
 800c018:	2900      	cmp	r1, #0
 800c01a:	bfd4      	ite	le
 800c01c:	f1c1 0202 	rsble	r2, r1, #2
 800c020:	2201      	movgt	r2, #1
 800c022:	4413      	add	r3, r2
 800c024:	e7e0      	b.n	800bfe8 <_printf_float+0x1a4>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	055a      	lsls	r2, r3, #21
 800c02a:	d407      	bmi.n	800c03c <_printf_float+0x1f8>
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	4642      	mov	r2, r8
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	d12c      	bne.n	800c094 <_printf_float+0x250>
 800c03a:	e764      	b.n	800bf06 <_printf_float+0xc2>
 800c03c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c040:	f240 80e0 	bls.w	800c204 <_printf_float+0x3c0>
 800c044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f7f4 fd4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c050:	2800      	cmp	r0, #0
 800c052:	d034      	beq.n	800c0be <_printf_float+0x27a>
 800c054:	4a37      	ldr	r2, [pc, #220]	; (800c134 <_printf_float+0x2f0>)
 800c056:	2301      	movs	r3, #1
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	f43f af51 	beq.w	800bf06 <_printf_float+0xc2>
 800c064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c068:	429a      	cmp	r2, r3
 800c06a:	db02      	blt.n	800c072 <_printf_float+0x22e>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	07d8      	lsls	r0, r3, #31
 800c070:	d510      	bpl.n	800c094 <_printf_float+0x250>
 800c072:	ee18 3a10 	vmov	r3, s16
 800c076:	4652      	mov	r2, sl
 800c078:	4631      	mov	r1, r6
 800c07a:	4628      	mov	r0, r5
 800c07c:	47b8      	blx	r7
 800c07e:	3001      	adds	r0, #1
 800c080:	f43f af41 	beq.w	800bf06 <_printf_float+0xc2>
 800c084:	f04f 0800 	mov.w	r8, #0
 800c088:	f104 091a 	add.w	r9, r4, #26
 800c08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08e:	3b01      	subs	r3, #1
 800c090:	4543      	cmp	r3, r8
 800c092:	dc09      	bgt.n	800c0a8 <_printf_float+0x264>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	079b      	lsls	r3, r3, #30
 800c098:	f100 8105 	bmi.w	800c2a6 <_printf_float+0x462>
 800c09c:	68e0      	ldr	r0, [r4, #12]
 800c09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a0:	4298      	cmp	r0, r3
 800c0a2:	bfb8      	it	lt
 800c0a4:	4618      	movlt	r0, r3
 800c0a6:	e730      	b.n	800bf0a <_printf_float+0xc6>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	464a      	mov	r2, r9
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b8      	blx	r7
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	f43f af27 	beq.w	800bf06 <_printf_float+0xc2>
 800c0b8:	f108 0801 	add.w	r8, r8, #1
 800c0bc:	e7e6      	b.n	800c08c <_printf_float+0x248>
 800c0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dc39      	bgt.n	800c138 <_printf_float+0x2f4>
 800c0c4:	4a1b      	ldr	r2, [pc, #108]	; (800c134 <_printf_float+0x2f0>)
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b8      	blx	r7
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	f43f af19 	beq.w	800bf06 <_printf_float+0xc2>
 800c0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	d102      	bne.n	800c0e2 <_printf_float+0x29e>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	07d9      	lsls	r1, r3, #31
 800c0e0:	d5d8      	bpl.n	800c094 <_printf_float+0x250>
 800c0e2:	ee18 3a10 	vmov	r3, s16
 800c0e6:	4652      	mov	r2, sl
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	47b8      	blx	r7
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	f43f af09 	beq.w	800bf06 <_printf_float+0xc2>
 800c0f4:	f04f 0900 	mov.w	r9, #0
 800c0f8:	f104 0a1a 	add.w	sl, r4, #26
 800c0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fe:	425b      	negs	r3, r3
 800c100:	454b      	cmp	r3, r9
 800c102:	dc01      	bgt.n	800c108 <_printf_float+0x2c4>
 800c104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c106:	e792      	b.n	800c02e <_printf_float+0x1ea>
 800c108:	2301      	movs	r3, #1
 800c10a:	4652      	mov	r2, sl
 800c10c:	4631      	mov	r1, r6
 800c10e:	4628      	mov	r0, r5
 800c110:	47b8      	blx	r7
 800c112:	3001      	adds	r0, #1
 800c114:	f43f aef7 	beq.w	800bf06 <_printf_float+0xc2>
 800c118:	f109 0901 	add.w	r9, r9, #1
 800c11c:	e7ee      	b.n	800c0fc <_printf_float+0x2b8>
 800c11e:	bf00      	nop
 800c120:	7fefffff 	.word	0x7fefffff
 800c124:	0805ad95 	.word	0x0805ad95
 800c128:	0805ad99 	.word	0x0805ad99
 800c12c:	0805ada1 	.word	0x0805ada1
 800c130:	0805ad9d 	.word	0x0805ad9d
 800c134:	0805ada5 	.word	0x0805ada5
 800c138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c13a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c13c:	429a      	cmp	r2, r3
 800c13e:	bfa8      	it	ge
 800c140:	461a      	movge	r2, r3
 800c142:	2a00      	cmp	r2, #0
 800c144:	4691      	mov	r9, r2
 800c146:	dc37      	bgt.n	800c1b8 <_printf_float+0x374>
 800c148:	f04f 0b00 	mov.w	fp, #0
 800c14c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c150:	f104 021a 	add.w	r2, r4, #26
 800c154:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c156:	9305      	str	r3, [sp, #20]
 800c158:	eba3 0309 	sub.w	r3, r3, r9
 800c15c:	455b      	cmp	r3, fp
 800c15e:	dc33      	bgt.n	800c1c8 <_printf_float+0x384>
 800c160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c164:	429a      	cmp	r2, r3
 800c166:	db3b      	blt.n	800c1e0 <_printf_float+0x39c>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	07da      	lsls	r2, r3, #31
 800c16c:	d438      	bmi.n	800c1e0 <_printf_float+0x39c>
 800c16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c170:	9a05      	ldr	r2, [sp, #20]
 800c172:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c174:	1a9a      	subs	r2, r3, r2
 800c176:	eba3 0901 	sub.w	r9, r3, r1
 800c17a:	4591      	cmp	r9, r2
 800c17c:	bfa8      	it	ge
 800c17e:	4691      	movge	r9, r2
 800c180:	f1b9 0f00 	cmp.w	r9, #0
 800c184:	dc35      	bgt.n	800c1f2 <_printf_float+0x3ae>
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c18e:	f104 0a1a 	add.w	sl, r4, #26
 800c192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c196:	1a9b      	subs	r3, r3, r2
 800c198:	eba3 0309 	sub.w	r3, r3, r9
 800c19c:	4543      	cmp	r3, r8
 800c19e:	f77f af79 	ble.w	800c094 <_printf_float+0x250>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	4631      	mov	r1, r6
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	47b8      	blx	r7
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	f43f aeaa 	beq.w	800bf06 <_printf_float+0xc2>
 800c1b2:	f108 0801 	add.w	r8, r8, #1
 800c1b6:	e7ec      	b.n	800c192 <_printf_float+0x34e>
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	4642      	mov	r2, r8
 800c1be:	4628      	mov	r0, r5
 800c1c0:	47b8      	blx	r7
 800c1c2:	3001      	adds	r0, #1
 800c1c4:	d1c0      	bne.n	800c148 <_printf_float+0x304>
 800c1c6:	e69e      	b.n	800bf06 <_printf_float+0xc2>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	9205      	str	r2, [sp, #20]
 800c1d0:	47b8      	blx	r7
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	f43f ae97 	beq.w	800bf06 <_printf_float+0xc2>
 800c1d8:	9a05      	ldr	r2, [sp, #20]
 800c1da:	f10b 0b01 	add.w	fp, fp, #1
 800c1de:	e7b9      	b.n	800c154 <_printf_float+0x310>
 800c1e0:	ee18 3a10 	vmov	r3, s16
 800c1e4:	4652      	mov	r2, sl
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b8      	blx	r7
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	d1be      	bne.n	800c16e <_printf_float+0x32a>
 800c1f0:	e689      	b.n	800bf06 <_printf_float+0xc2>
 800c1f2:	9a05      	ldr	r2, [sp, #20]
 800c1f4:	464b      	mov	r3, r9
 800c1f6:	4442      	add	r2, r8
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	47b8      	blx	r7
 800c1fe:	3001      	adds	r0, #1
 800c200:	d1c1      	bne.n	800c186 <_printf_float+0x342>
 800c202:	e680      	b.n	800bf06 <_printf_float+0xc2>
 800c204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c206:	2a01      	cmp	r2, #1
 800c208:	dc01      	bgt.n	800c20e <_printf_float+0x3ca>
 800c20a:	07db      	lsls	r3, r3, #31
 800c20c:	d538      	bpl.n	800c280 <_printf_float+0x43c>
 800c20e:	2301      	movs	r3, #1
 800c210:	4642      	mov	r2, r8
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	f43f ae74 	beq.w	800bf06 <_printf_float+0xc2>
 800c21e:	ee18 3a10 	vmov	r3, s16
 800c222:	4652      	mov	r2, sl
 800c224:	4631      	mov	r1, r6
 800c226:	4628      	mov	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	3001      	adds	r0, #1
 800c22c:	f43f ae6b 	beq.w	800bf06 <_printf_float+0xc2>
 800c230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c234:	2200      	movs	r2, #0
 800c236:	2300      	movs	r3, #0
 800c238:	f7f4 fc56 	bl	8000ae8 <__aeabi_dcmpeq>
 800c23c:	b9d8      	cbnz	r0, 800c276 <_printf_float+0x432>
 800c23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c240:	f108 0201 	add.w	r2, r8, #1
 800c244:	3b01      	subs	r3, #1
 800c246:	4631      	mov	r1, r6
 800c248:	4628      	mov	r0, r5
 800c24a:	47b8      	blx	r7
 800c24c:	3001      	adds	r0, #1
 800c24e:	d10e      	bne.n	800c26e <_printf_float+0x42a>
 800c250:	e659      	b.n	800bf06 <_printf_float+0xc2>
 800c252:	2301      	movs	r3, #1
 800c254:	4652      	mov	r2, sl
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	47b8      	blx	r7
 800c25c:	3001      	adds	r0, #1
 800c25e:	f43f ae52 	beq.w	800bf06 <_printf_float+0xc2>
 800c262:	f108 0801 	add.w	r8, r8, #1
 800c266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c268:	3b01      	subs	r3, #1
 800c26a:	4543      	cmp	r3, r8
 800c26c:	dcf1      	bgt.n	800c252 <_printf_float+0x40e>
 800c26e:	464b      	mov	r3, r9
 800c270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c274:	e6dc      	b.n	800c030 <_printf_float+0x1ec>
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	f104 0a1a 	add.w	sl, r4, #26
 800c27e:	e7f2      	b.n	800c266 <_printf_float+0x422>
 800c280:	2301      	movs	r3, #1
 800c282:	4642      	mov	r2, r8
 800c284:	e7df      	b.n	800c246 <_printf_float+0x402>
 800c286:	2301      	movs	r3, #1
 800c288:	464a      	mov	r2, r9
 800c28a:	4631      	mov	r1, r6
 800c28c:	4628      	mov	r0, r5
 800c28e:	47b8      	blx	r7
 800c290:	3001      	adds	r0, #1
 800c292:	f43f ae38 	beq.w	800bf06 <_printf_float+0xc2>
 800c296:	f108 0801 	add.w	r8, r8, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	4543      	cmp	r3, r8
 800c2a2:	dcf0      	bgt.n	800c286 <_printf_float+0x442>
 800c2a4:	e6fa      	b.n	800c09c <_printf_float+0x258>
 800c2a6:	f04f 0800 	mov.w	r8, #0
 800c2aa:	f104 0919 	add.w	r9, r4, #25
 800c2ae:	e7f4      	b.n	800c29a <_printf_float+0x456>

0800c2b0 <_printf_common>:
 800c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	4699      	mov	r9, r3
 800c2b8:	688a      	ldr	r2, [r1, #8]
 800c2ba:	690b      	ldr	r3, [r1, #16]
 800c2bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	bfb8      	it	lt
 800c2c4:	4613      	movlt	r3, r2
 800c2c6:	6033      	str	r3, [r6, #0]
 800c2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	b10a      	cbz	r2, 800c2d6 <_printf_common+0x26>
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	6033      	str	r3, [r6, #0]
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	0699      	lsls	r1, r3, #26
 800c2da:	bf42      	ittt	mi
 800c2dc:	6833      	ldrmi	r3, [r6, #0]
 800c2de:	3302      	addmi	r3, #2
 800c2e0:	6033      	strmi	r3, [r6, #0]
 800c2e2:	6825      	ldr	r5, [r4, #0]
 800c2e4:	f015 0506 	ands.w	r5, r5, #6
 800c2e8:	d106      	bne.n	800c2f8 <_printf_common+0x48>
 800c2ea:	f104 0a19 	add.w	sl, r4, #25
 800c2ee:	68e3      	ldr	r3, [r4, #12]
 800c2f0:	6832      	ldr	r2, [r6, #0]
 800c2f2:	1a9b      	subs	r3, r3, r2
 800c2f4:	42ab      	cmp	r3, r5
 800c2f6:	dc26      	bgt.n	800c346 <_printf_common+0x96>
 800c2f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2fc:	1e13      	subs	r3, r2, #0
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	bf18      	it	ne
 800c302:	2301      	movne	r3, #1
 800c304:	0692      	lsls	r2, r2, #26
 800c306:	d42b      	bmi.n	800c360 <_printf_common+0xb0>
 800c308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c30c:	4649      	mov	r1, r9
 800c30e:	4638      	mov	r0, r7
 800c310:	47c0      	blx	r8
 800c312:	3001      	adds	r0, #1
 800c314:	d01e      	beq.n	800c354 <_printf_common+0xa4>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	68e5      	ldr	r5, [r4, #12]
 800c31a:	6832      	ldr	r2, [r6, #0]
 800c31c:	f003 0306 	and.w	r3, r3, #6
 800c320:	2b04      	cmp	r3, #4
 800c322:	bf08      	it	eq
 800c324:	1aad      	subeq	r5, r5, r2
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	bf0c      	ite	eq
 800c32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c330:	2500      	movne	r5, #0
 800c332:	4293      	cmp	r3, r2
 800c334:	bfc4      	itt	gt
 800c336:	1a9b      	subgt	r3, r3, r2
 800c338:	18ed      	addgt	r5, r5, r3
 800c33a:	2600      	movs	r6, #0
 800c33c:	341a      	adds	r4, #26
 800c33e:	42b5      	cmp	r5, r6
 800c340:	d11a      	bne.n	800c378 <_printf_common+0xc8>
 800c342:	2000      	movs	r0, #0
 800c344:	e008      	b.n	800c358 <_printf_common+0xa8>
 800c346:	2301      	movs	r3, #1
 800c348:	4652      	mov	r2, sl
 800c34a:	4649      	mov	r1, r9
 800c34c:	4638      	mov	r0, r7
 800c34e:	47c0      	blx	r8
 800c350:	3001      	adds	r0, #1
 800c352:	d103      	bne.n	800c35c <_printf_common+0xac>
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35c:	3501      	adds	r5, #1
 800c35e:	e7c6      	b.n	800c2ee <_printf_common+0x3e>
 800c360:	18e1      	adds	r1, r4, r3
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	2030      	movs	r0, #48	; 0x30
 800c366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c36a:	4422      	add	r2, r4
 800c36c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c374:	3302      	adds	r3, #2
 800c376:	e7c7      	b.n	800c308 <_printf_common+0x58>
 800c378:	2301      	movs	r3, #1
 800c37a:	4622      	mov	r2, r4
 800c37c:	4649      	mov	r1, r9
 800c37e:	4638      	mov	r0, r7
 800c380:	47c0      	blx	r8
 800c382:	3001      	adds	r0, #1
 800c384:	d0e6      	beq.n	800c354 <_printf_common+0xa4>
 800c386:	3601      	adds	r6, #1
 800c388:	e7d9      	b.n	800c33e <_printf_common+0x8e>
	...

0800c38c <_printf_i>:
 800c38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	7e0f      	ldrb	r7, [r1, #24]
 800c392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c394:	2f78      	cmp	r7, #120	; 0x78
 800c396:	4691      	mov	r9, r2
 800c398:	4680      	mov	r8, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	469a      	mov	sl, r3
 800c39e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3a2:	d807      	bhi.n	800c3b4 <_printf_i+0x28>
 800c3a4:	2f62      	cmp	r7, #98	; 0x62
 800c3a6:	d80a      	bhi.n	800c3be <_printf_i+0x32>
 800c3a8:	2f00      	cmp	r7, #0
 800c3aa:	f000 80d8 	beq.w	800c55e <_printf_i+0x1d2>
 800c3ae:	2f58      	cmp	r7, #88	; 0x58
 800c3b0:	f000 80a3 	beq.w	800c4fa <_printf_i+0x16e>
 800c3b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3bc:	e03a      	b.n	800c434 <_printf_i+0xa8>
 800c3be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3c2:	2b15      	cmp	r3, #21
 800c3c4:	d8f6      	bhi.n	800c3b4 <_printf_i+0x28>
 800c3c6:	a101      	add	r1, pc, #4	; (adr r1, 800c3cc <_printf_i+0x40>)
 800c3c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3cc:	0800c425 	.word	0x0800c425
 800c3d0:	0800c439 	.word	0x0800c439
 800c3d4:	0800c3b5 	.word	0x0800c3b5
 800c3d8:	0800c3b5 	.word	0x0800c3b5
 800c3dc:	0800c3b5 	.word	0x0800c3b5
 800c3e0:	0800c3b5 	.word	0x0800c3b5
 800c3e4:	0800c439 	.word	0x0800c439
 800c3e8:	0800c3b5 	.word	0x0800c3b5
 800c3ec:	0800c3b5 	.word	0x0800c3b5
 800c3f0:	0800c3b5 	.word	0x0800c3b5
 800c3f4:	0800c3b5 	.word	0x0800c3b5
 800c3f8:	0800c545 	.word	0x0800c545
 800c3fc:	0800c469 	.word	0x0800c469
 800c400:	0800c527 	.word	0x0800c527
 800c404:	0800c3b5 	.word	0x0800c3b5
 800c408:	0800c3b5 	.word	0x0800c3b5
 800c40c:	0800c567 	.word	0x0800c567
 800c410:	0800c3b5 	.word	0x0800c3b5
 800c414:	0800c469 	.word	0x0800c469
 800c418:	0800c3b5 	.word	0x0800c3b5
 800c41c:	0800c3b5 	.word	0x0800c3b5
 800c420:	0800c52f 	.word	0x0800c52f
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	1d1a      	adds	r2, r3, #4
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	602a      	str	r2, [r5, #0]
 800c42c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c434:	2301      	movs	r3, #1
 800c436:	e0a3      	b.n	800c580 <_printf_i+0x1f4>
 800c438:	6820      	ldr	r0, [r4, #0]
 800c43a:	6829      	ldr	r1, [r5, #0]
 800c43c:	0606      	lsls	r6, r0, #24
 800c43e:	f101 0304 	add.w	r3, r1, #4
 800c442:	d50a      	bpl.n	800c45a <_printf_i+0xce>
 800c444:	680e      	ldr	r6, [r1, #0]
 800c446:	602b      	str	r3, [r5, #0]
 800c448:	2e00      	cmp	r6, #0
 800c44a:	da03      	bge.n	800c454 <_printf_i+0xc8>
 800c44c:	232d      	movs	r3, #45	; 0x2d
 800c44e:	4276      	negs	r6, r6
 800c450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c454:	485e      	ldr	r0, [pc, #376]	; (800c5d0 <_printf_i+0x244>)
 800c456:	230a      	movs	r3, #10
 800c458:	e019      	b.n	800c48e <_printf_i+0x102>
 800c45a:	680e      	ldr	r6, [r1, #0]
 800c45c:	602b      	str	r3, [r5, #0]
 800c45e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c462:	bf18      	it	ne
 800c464:	b236      	sxthne	r6, r6
 800c466:	e7ef      	b.n	800c448 <_printf_i+0xbc>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	6820      	ldr	r0, [r4, #0]
 800c46c:	1d19      	adds	r1, r3, #4
 800c46e:	6029      	str	r1, [r5, #0]
 800c470:	0601      	lsls	r1, r0, #24
 800c472:	d501      	bpl.n	800c478 <_printf_i+0xec>
 800c474:	681e      	ldr	r6, [r3, #0]
 800c476:	e002      	b.n	800c47e <_printf_i+0xf2>
 800c478:	0646      	lsls	r6, r0, #25
 800c47a:	d5fb      	bpl.n	800c474 <_printf_i+0xe8>
 800c47c:	881e      	ldrh	r6, [r3, #0]
 800c47e:	4854      	ldr	r0, [pc, #336]	; (800c5d0 <_printf_i+0x244>)
 800c480:	2f6f      	cmp	r7, #111	; 0x6f
 800c482:	bf0c      	ite	eq
 800c484:	2308      	moveq	r3, #8
 800c486:	230a      	movne	r3, #10
 800c488:	2100      	movs	r1, #0
 800c48a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c48e:	6865      	ldr	r5, [r4, #4]
 800c490:	60a5      	str	r5, [r4, #8]
 800c492:	2d00      	cmp	r5, #0
 800c494:	bfa2      	ittt	ge
 800c496:	6821      	ldrge	r1, [r4, #0]
 800c498:	f021 0104 	bicge.w	r1, r1, #4
 800c49c:	6021      	strge	r1, [r4, #0]
 800c49e:	b90e      	cbnz	r6, 800c4a4 <_printf_i+0x118>
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	d04d      	beq.n	800c540 <_printf_i+0x1b4>
 800c4a4:	4615      	mov	r5, r2
 800c4a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4aa:	fb03 6711 	mls	r7, r3, r1, r6
 800c4ae:	5dc7      	ldrb	r7, [r0, r7]
 800c4b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4b4:	4637      	mov	r7, r6
 800c4b6:	42bb      	cmp	r3, r7
 800c4b8:	460e      	mov	r6, r1
 800c4ba:	d9f4      	bls.n	800c4a6 <_printf_i+0x11a>
 800c4bc:	2b08      	cmp	r3, #8
 800c4be:	d10b      	bne.n	800c4d8 <_printf_i+0x14c>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	07de      	lsls	r6, r3, #31
 800c4c4:	d508      	bpl.n	800c4d8 <_printf_i+0x14c>
 800c4c6:	6923      	ldr	r3, [r4, #16]
 800c4c8:	6861      	ldr	r1, [r4, #4]
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	bfde      	ittt	le
 800c4ce:	2330      	movle	r3, #48	; 0x30
 800c4d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4d8:	1b52      	subs	r2, r2, r5
 800c4da:	6122      	str	r2, [r4, #16]
 800c4dc:	f8cd a000 	str.w	sl, [sp]
 800c4e0:	464b      	mov	r3, r9
 800c4e2:	aa03      	add	r2, sp, #12
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	f7ff fee2 	bl	800c2b0 <_printf_common>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d14c      	bne.n	800c58a <_printf_i+0x1fe>
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	b004      	add	sp, #16
 800c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fa:	4835      	ldr	r0, [pc, #212]	; (800c5d0 <_printf_i+0x244>)
 800c4fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c500:	6829      	ldr	r1, [r5, #0]
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	f851 6b04 	ldr.w	r6, [r1], #4
 800c508:	6029      	str	r1, [r5, #0]
 800c50a:	061d      	lsls	r5, r3, #24
 800c50c:	d514      	bpl.n	800c538 <_printf_i+0x1ac>
 800c50e:	07df      	lsls	r7, r3, #31
 800c510:	bf44      	itt	mi
 800c512:	f043 0320 	orrmi.w	r3, r3, #32
 800c516:	6023      	strmi	r3, [r4, #0]
 800c518:	b91e      	cbnz	r6, 800c522 <_printf_i+0x196>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	f023 0320 	bic.w	r3, r3, #32
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	2310      	movs	r3, #16
 800c524:	e7b0      	b.n	800c488 <_printf_i+0xfc>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	f043 0320 	orr.w	r3, r3, #32
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	2378      	movs	r3, #120	; 0x78
 800c530:	4828      	ldr	r0, [pc, #160]	; (800c5d4 <_printf_i+0x248>)
 800c532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c536:	e7e3      	b.n	800c500 <_printf_i+0x174>
 800c538:	0659      	lsls	r1, r3, #25
 800c53a:	bf48      	it	mi
 800c53c:	b2b6      	uxthmi	r6, r6
 800c53e:	e7e6      	b.n	800c50e <_printf_i+0x182>
 800c540:	4615      	mov	r5, r2
 800c542:	e7bb      	b.n	800c4bc <_printf_i+0x130>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	6826      	ldr	r6, [r4, #0]
 800c548:	6961      	ldr	r1, [r4, #20]
 800c54a:	1d18      	adds	r0, r3, #4
 800c54c:	6028      	str	r0, [r5, #0]
 800c54e:	0635      	lsls	r5, r6, #24
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	d501      	bpl.n	800c558 <_printf_i+0x1cc>
 800c554:	6019      	str	r1, [r3, #0]
 800c556:	e002      	b.n	800c55e <_printf_i+0x1d2>
 800c558:	0670      	lsls	r0, r6, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0x1c8>
 800c55c:	8019      	strh	r1, [r3, #0]
 800c55e:	2300      	movs	r3, #0
 800c560:	6123      	str	r3, [r4, #16]
 800c562:	4615      	mov	r5, r2
 800c564:	e7ba      	b.n	800c4dc <_printf_i+0x150>
 800c566:	682b      	ldr	r3, [r5, #0]
 800c568:	1d1a      	adds	r2, r3, #4
 800c56a:	602a      	str	r2, [r5, #0]
 800c56c:	681d      	ldr	r5, [r3, #0]
 800c56e:	6862      	ldr	r2, [r4, #4]
 800c570:	2100      	movs	r1, #0
 800c572:	4628      	mov	r0, r5
 800c574:	f7f3 fe44 	bl	8000200 <memchr>
 800c578:	b108      	cbz	r0, 800c57e <_printf_i+0x1f2>
 800c57a:	1b40      	subs	r0, r0, r5
 800c57c:	6060      	str	r0, [r4, #4]
 800c57e:	6863      	ldr	r3, [r4, #4]
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	2300      	movs	r3, #0
 800c584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c588:	e7a8      	b.n	800c4dc <_printf_i+0x150>
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	462a      	mov	r2, r5
 800c58e:	4649      	mov	r1, r9
 800c590:	4640      	mov	r0, r8
 800c592:	47d0      	blx	sl
 800c594:	3001      	adds	r0, #1
 800c596:	d0ab      	beq.n	800c4f0 <_printf_i+0x164>
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	079b      	lsls	r3, r3, #30
 800c59c:	d413      	bmi.n	800c5c6 <_printf_i+0x23a>
 800c59e:	68e0      	ldr	r0, [r4, #12]
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	4298      	cmp	r0, r3
 800c5a4:	bfb8      	it	lt
 800c5a6:	4618      	movlt	r0, r3
 800c5a8:	e7a4      	b.n	800c4f4 <_printf_i+0x168>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	47d0      	blx	sl
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d09b      	beq.n	800c4f0 <_printf_i+0x164>
 800c5b8:	3501      	adds	r5, #1
 800c5ba:	68e3      	ldr	r3, [r4, #12]
 800c5bc:	9903      	ldr	r1, [sp, #12]
 800c5be:	1a5b      	subs	r3, r3, r1
 800c5c0:	42ab      	cmp	r3, r5
 800c5c2:	dcf2      	bgt.n	800c5aa <_printf_i+0x21e>
 800c5c4:	e7eb      	b.n	800c59e <_printf_i+0x212>
 800c5c6:	2500      	movs	r5, #0
 800c5c8:	f104 0619 	add.w	r6, r4, #25
 800c5cc:	e7f5      	b.n	800c5ba <_printf_i+0x22e>
 800c5ce:	bf00      	nop
 800c5d0:	0805ada7 	.word	0x0805ada7
 800c5d4:	0805adb8 	.word	0x0805adb8

0800c5d8 <_scanf_float>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	b087      	sub	sp, #28
 800c5de:	4617      	mov	r7, r2
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	688b      	ldr	r3, [r1, #8]
 800c5e4:	1e5a      	subs	r2, r3, #1
 800c5e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c5ea:	bf83      	ittte	hi
 800c5ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c5f0:	195b      	addhi	r3, r3, r5
 800c5f2:	9302      	strhi	r3, [sp, #8]
 800c5f4:	2300      	movls	r3, #0
 800c5f6:	bf86      	itte	hi
 800c5f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c5fc:	608b      	strhi	r3, [r1, #8]
 800c5fe:	9302      	strls	r3, [sp, #8]
 800c600:	680b      	ldr	r3, [r1, #0]
 800c602:	468b      	mov	fp, r1
 800c604:	2500      	movs	r5, #0
 800c606:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c60a:	f84b 3b1c 	str.w	r3, [fp], #28
 800c60e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c612:	4680      	mov	r8, r0
 800c614:	460c      	mov	r4, r1
 800c616:	465e      	mov	r6, fp
 800c618:	46aa      	mov	sl, r5
 800c61a:	46a9      	mov	r9, r5
 800c61c:	9501      	str	r5, [sp, #4]
 800c61e:	68a2      	ldr	r2, [r4, #8]
 800c620:	b152      	cbz	r2, 800c638 <_scanf_float+0x60>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	2b4e      	cmp	r3, #78	; 0x4e
 800c628:	d864      	bhi.n	800c6f4 <_scanf_float+0x11c>
 800c62a:	2b40      	cmp	r3, #64	; 0x40
 800c62c:	d83c      	bhi.n	800c6a8 <_scanf_float+0xd0>
 800c62e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c632:	b2c8      	uxtb	r0, r1
 800c634:	280e      	cmp	r0, #14
 800c636:	d93a      	bls.n	800c6ae <_scanf_float+0xd6>
 800c638:	f1b9 0f00 	cmp.w	r9, #0
 800c63c:	d003      	beq.n	800c646 <_scanf_float+0x6e>
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c64a:	f1ba 0f01 	cmp.w	sl, #1
 800c64e:	f200 8113 	bhi.w	800c878 <_scanf_float+0x2a0>
 800c652:	455e      	cmp	r6, fp
 800c654:	f200 8105 	bhi.w	800c862 <_scanf_float+0x28a>
 800c658:	2501      	movs	r5, #1
 800c65a:	4628      	mov	r0, r5
 800c65c:	b007      	add	sp, #28
 800c65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c662:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c666:	2a0d      	cmp	r2, #13
 800c668:	d8e6      	bhi.n	800c638 <_scanf_float+0x60>
 800c66a:	a101      	add	r1, pc, #4	; (adr r1, 800c670 <_scanf_float+0x98>)
 800c66c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c670:	0800c7af 	.word	0x0800c7af
 800c674:	0800c639 	.word	0x0800c639
 800c678:	0800c639 	.word	0x0800c639
 800c67c:	0800c639 	.word	0x0800c639
 800c680:	0800c80f 	.word	0x0800c80f
 800c684:	0800c7e7 	.word	0x0800c7e7
 800c688:	0800c639 	.word	0x0800c639
 800c68c:	0800c639 	.word	0x0800c639
 800c690:	0800c7bd 	.word	0x0800c7bd
 800c694:	0800c639 	.word	0x0800c639
 800c698:	0800c639 	.word	0x0800c639
 800c69c:	0800c639 	.word	0x0800c639
 800c6a0:	0800c639 	.word	0x0800c639
 800c6a4:	0800c775 	.word	0x0800c775
 800c6a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c6ac:	e7db      	b.n	800c666 <_scanf_float+0x8e>
 800c6ae:	290e      	cmp	r1, #14
 800c6b0:	d8c2      	bhi.n	800c638 <_scanf_float+0x60>
 800c6b2:	a001      	add	r0, pc, #4	; (adr r0, 800c6b8 <_scanf_float+0xe0>)
 800c6b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c6b8:	0800c767 	.word	0x0800c767
 800c6bc:	0800c639 	.word	0x0800c639
 800c6c0:	0800c767 	.word	0x0800c767
 800c6c4:	0800c7fb 	.word	0x0800c7fb
 800c6c8:	0800c639 	.word	0x0800c639
 800c6cc:	0800c715 	.word	0x0800c715
 800c6d0:	0800c751 	.word	0x0800c751
 800c6d4:	0800c751 	.word	0x0800c751
 800c6d8:	0800c751 	.word	0x0800c751
 800c6dc:	0800c751 	.word	0x0800c751
 800c6e0:	0800c751 	.word	0x0800c751
 800c6e4:	0800c751 	.word	0x0800c751
 800c6e8:	0800c751 	.word	0x0800c751
 800c6ec:	0800c751 	.word	0x0800c751
 800c6f0:	0800c751 	.word	0x0800c751
 800c6f4:	2b6e      	cmp	r3, #110	; 0x6e
 800c6f6:	d809      	bhi.n	800c70c <_scanf_float+0x134>
 800c6f8:	2b60      	cmp	r3, #96	; 0x60
 800c6fa:	d8b2      	bhi.n	800c662 <_scanf_float+0x8a>
 800c6fc:	2b54      	cmp	r3, #84	; 0x54
 800c6fe:	d077      	beq.n	800c7f0 <_scanf_float+0x218>
 800c700:	2b59      	cmp	r3, #89	; 0x59
 800c702:	d199      	bne.n	800c638 <_scanf_float+0x60>
 800c704:	2d07      	cmp	r5, #7
 800c706:	d197      	bne.n	800c638 <_scanf_float+0x60>
 800c708:	2508      	movs	r5, #8
 800c70a:	e029      	b.n	800c760 <_scanf_float+0x188>
 800c70c:	2b74      	cmp	r3, #116	; 0x74
 800c70e:	d06f      	beq.n	800c7f0 <_scanf_float+0x218>
 800c710:	2b79      	cmp	r3, #121	; 0x79
 800c712:	e7f6      	b.n	800c702 <_scanf_float+0x12a>
 800c714:	6821      	ldr	r1, [r4, #0]
 800c716:	05c8      	lsls	r0, r1, #23
 800c718:	d51a      	bpl.n	800c750 <_scanf_float+0x178>
 800c71a:	9b02      	ldr	r3, [sp, #8]
 800c71c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c720:	6021      	str	r1, [r4, #0]
 800c722:	f109 0901 	add.w	r9, r9, #1
 800c726:	b11b      	cbz	r3, 800c730 <_scanf_float+0x158>
 800c728:	3b01      	subs	r3, #1
 800c72a:	3201      	adds	r2, #1
 800c72c:	9302      	str	r3, [sp, #8]
 800c72e:	60a2      	str	r2, [r4, #8]
 800c730:	68a3      	ldr	r3, [r4, #8]
 800c732:	3b01      	subs	r3, #1
 800c734:	60a3      	str	r3, [r4, #8]
 800c736:	6923      	ldr	r3, [r4, #16]
 800c738:	3301      	adds	r3, #1
 800c73a:	6123      	str	r3, [r4, #16]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3b01      	subs	r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	607b      	str	r3, [r7, #4]
 800c744:	f340 8084 	ble.w	800c850 <_scanf_float+0x278>
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	3301      	adds	r3, #1
 800c74c:	603b      	str	r3, [r7, #0]
 800c74e:	e766      	b.n	800c61e <_scanf_float+0x46>
 800c750:	eb1a 0f05 	cmn.w	sl, r5
 800c754:	f47f af70 	bne.w	800c638 <_scanf_float+0x60>
 800c758:	6822      	ldr	r2, [r4, #0]
 800c75a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c75e:	6022      	str	r2, [r4, #0]
 800c760:	f806 3b01 	strb.w	r3, [r6], #1
 800c764:	e7e4      	b.n	800c730 <_scanf_float+0x158>
 800c766:	6822      	ldr	r2, [r4, #0]
 800c768:	0610      	lsls	r0, r2, #24
 800c76a:	f57f af65 	bpl.w	800c638 <_scanf_float+0x60>
 800c76e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c772:	e7f4      	b.n	800c75e <_scanf_float+0x186>
 800c774:	f1ba 0f00 	cmp.w	sl, #0
 800c778:	d10e      	bne.n	800c798 <_scanf_float+0x1c0>
 800c77a:	f1b9 0f00 	cmp.w	r9, #0
 800c77e:	d10e      	bne.n	800c79e <_scanf_float+0x1c6>
 800c780:	6822      	ldr	r2, [r4, #0]
 800c782:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c786:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c78a:	d108      	bne.n	800c79e <_scanf_float+0x1c6>
 800c78c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c790:	6022      	str	r2, [r4, #0]
 800c792:	f04f 0a01 	mov.w	sl, #1
 800c796:	e7e3      	b.n	800c760 <_scanf_float+0x188>
 800c798:	f1ba 0f02 	cmp.w	sl, #2
 800c79c:	d055      	beq.n	800c84a <_scanf_float+0x272>
 800c79e:	2d01      	cmp	r5, #1
 800c7a0:	d002      	beq.n	800c7a8 <_scanf_float+0x1d0>
 800c7a2:	2d04      	cmp	r5, #4
 800c7a4:	f47f af48 	bne.w	800c638 <_scanf_float+0x60>
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	b2ed      	uxtb	r5, r5
 800c7ac:	e7d8      	b.n	800c760 <_scanf_float+0x188>
 800c7ae:	f1ba 0f01 	cmp.w	sl, #1
 800c7b2:	f47f af41 	bne.w	800c638 <_scanf_float+0x60>
 800c7b6:	f04f 0a02 	mov.w	sl, #2
 800c7ba:	e7d1      	b.n	800c760 <_scanf_float+0x188>
 800c7bc:	b97d      	cbnz	r5, 800c7de <_scanf_float+0x206>
 800c7be:	f1b9 0f00 	cmp.w	r9, #0
 800c7c2:	f47f af3c 	bne.w	800c63e <_scanf_float+0x66>
 800c7c6:	6822      	ldr	r2, [r4, #0]
 800c7c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c7cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c7d0:	f47f af39 	bne.w	800c646 <_scanf_float+0x6e>
 800c7d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c7d8:	6022      	str	r2, [r4, #0]
 800c7da:	2501      	movs	r5, #1
 800c7dc:	e7c0      	b.n	800c760 <_scanf_float+0x188>
 800c7de:	2d03      	cmp	r5, #3
 800c7e0:	d0e2      	beq.n	800c7a8 <_scanf_float+0x1d0>
 800c7e2:	2d05      	cmp	r5, #5
 800c7e4:	e7de      	b.n	800c7a4 <_scanf_float+0x1cc>
 800c7e6:	2d02      	cmp	r5, #2
 800c7e8:	f47f af26 	bne.w	800c638 <_scanf_float+0x60>
 800c7ec:	2503      	movs	r5, #3
 800c7ee:	e7b7      	b.n	800c760 <_scanf_float+0x188>
 800c7f0:	2d06      	cmp	r5, #6
 800c7f2:	f47f af21 	bne.w	800c638 <_scanf_float+0x60>
 800c7f6:	2507      	movs	r5, #7
 800c7f8:	e7b2      	b.n	800c760 <_scanf_float+0x188>
 800c7fa:	6822      	ldr	r2, [r4, #0]
 800c7fc:	0591      	lsls	r1, r2, #22
 800c7fe:	f57f af1b 	bpl.w	800c638 <_scanf_float+0x60>
 800c802:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c806:	6022      	str	r2, [r4, #0]
 800c808:	f8cd 9004 	str.w	r9, [sp, #4]
 800c80c:	e7a8      	b.n	800c760 <_scanf_float+0x188>
 800c80e:	6822      	ldr	r2, [r4, #0]
 800c810:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c814:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c818:	d006      	beq.n	800c828 <_scanf_float+0x250>
 800c81a:	0550      	lsls	r0, r2, #21
 800c81c:	f57f af0c 	bpl.w	800c638 <_scanf_float+0x60>
 800c820:	f1b9 0f00 	cmp.w	r9, #0
 800c824:	f43f af0f 	beq.w	800c646 <_scanf_float+0x6e>
 800c828:	0591      	lsls	r1, r2, #22
 800c82a:	bf58      	it	pl
 800c82c:	9901      	ldrpl	r1, [sp, #4]
 800c82e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c832:	bf58      	it	pl
 800c834:	eba9 0101 	subpl.w	r1, r9, r1
 800c838:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c83c:	bf58      	it	pl
 800c83e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c842:	6022      	str	r2, [r4, #0]
 800c844:	f04f 0900 	mov.w	r9, #0
 800c848:	e78a      	b.n	800c760 <_scanf_float+0x188>
 800c84a:	f04f 0a03 	mov.w	sl, #3
 800c84e:	e787      	b.n	800c760 <_scanf_float+0x188>
 800c850:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c854:	4639      	mov	r1, r7
 800c856:	4640      	mov	r0, r8
 800c858:	4798      	blx	r3
 800c85a:	2800      	cmp	r0, #0
 800c85c:	f43f aedf 	beq.w	800c61e <_scanf_float+0x46>
 800c860:	e6ea      	b.n	800c638 <_scanf_float+0x60>
 800c862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c86a:	463a      	mov	r2, r7
 800c86c:	4640      	mov	r0, r8
 800c86e:	4798      	blx	r3
 800c870:	6923      	ldr	r3, [r4, #16]
 800c872:	3b01      	subs	r3, #1
 800c874:	6123      	str	r3, [r4, #16]
 800c876:	e6ec      	b.n	800c652 <_scanf_float+0x7a>
 800c878:	1e6b      	subs	r3, r5, #1
 800c87a:	2b06      	cmp	r3, #6
 800c87c:	d825      	bhi.n	800c8ca <_scanf_float+0x2f2>
 800c87e:	2d02      	cmp	r5, #2
 800c880:	d836      	bhi.n	800c8f0 <_scanf_float+0x318>
 800c882:	455e      	cmp	r6, fp
 800c884:	f67f aee8 	bls.w	800c658 <_scanf_float+0x80>
 800c888:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c88c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c890:	463a      	mov	r2, r7
 800c892:	4640      	mov	r0, r8
 800c894:	4798      	blx	r3
 800c896:	6923      	ldr	r3, [r4, #16]
 800c898:	3b01      	subs	r3, #1
 800c89a:	6123      	str	r3, [r4, #16]
 800c89c:	e7f1      	b.n	800c882 <_scanf_float+0x2aa>
 800c89e:	9802      	ldr	r0, [sp, #8]
 800c8a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c8a8:	9002      	str	r0, [sp, #8]
 800c8aa:	463a      	mov	r2, r7
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	4798      	blx	r3
 800c8b0:	6923      	ldr	r3, [r4, #16]
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	6123      	str	r3, [r4, #16]
 800c8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8ba:	fa5f fa8a 	uxtb.w	sl, sl
 800c8be:	f1ba 0f02 	cmp.w	sl, #2
 800c8c2:	d1ec      	bne.n	800c89e <_scanf_float+0x2c6>
 800c8c4:	3d03      	subs	r5, #3
 800c8c6:	b2ed      	uxtb	r5, r5
 800c8c8:	1b76      	subs	r6, r6, r5
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	05da      	lsls	r2, r3, #23
 800c8ce:	d52f      	bpl.n	800c930 <_scanf_float+0x358>
 800c8d0:	055b      	lsls	r3, r3, #21
 800c8d2:	d510      	bpl.n	800c8f6 <_scanf_float+0x31e>
 800c8d4:	455e      	cmp	r6, fp
 800c8d6:	f67f aebf 	bls.w	800c658 <_scanf_float+0x80>
 800c8da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8e2:	463a      	mov	r2, r7
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	4798      	blx	r3
 800c8e8:	6923      	ldr	r3, [r4, #16]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	6123      	str	r3, [r4, #16]
 800c8ee:	e7f1      	b.n	800c8d4 <_scanf_float+0x2fc>
 800c8f0:	46aa      	mov	sl, r5
 800c8f2:	9602      	str	r6, [sp, #8]
 800c8f4:	e7df      	b.n	800c8b6 <_scanf_float+0x2de>
 800c8f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c8fa:	6923      	ldr	r3, [r4, #16]
 800c8fc:	2965      	cmp	r1, #101	; 0x65
 800c8fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800c902:	f106 35ff 	add.w	r5, r6, #4294967295
 800c906:	6123      	str	r3, [r4, #16]
 800c908:	d00c      	beq.n	800c924 <_scanf_float+0x34c>
 800c90a:	2945      	cmp	r1, #69	; 0x45
 800c90c:	d00a      	beq.n	800c924 <_scanf_float+0x34c>
 800c90e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c912:	463a      	mov	r2, r7
 800c914:	4640      	mov	r0, r8
 800c916:	4798      	blx	r3
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c91e:	3b01      	subs	r3, #1
 800c920:	1eb5      	subs	r5, r6, #2
 800c922:	6123      	str	r3, [r4, #16]
 800c924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c928:	463a      	mov	r2, r7
 800c92a:	4640      	mov	r0, r8
 800c92c:	4798      	blx	r3
 800c92e:	462e      	mov	r6, r5
 800c930:	6825      	ldr	r5, [r4, #0]
 800c932:	f015 0510 	ands.w	r5, r5, #16
 800c936:	d159      	bne.n	800c9ec <_scanf_float+0x414>
 800c938:	7035      	strb	r5, [r6, #0]
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c944:	d11b      	bne.n	800c97e <_scanf_float+0x3a6>
 800c946:	9b01      	ldr	r3, [sp, #4]
 800c948:	454b      	cmp	r3, r9
 800c94a:	eba3 0209 	sub.w	r2, r3, r9
 800c94e:	d123      	bne.n	800c998 <_scanf_float+0x3c0>
 800c950:	2200      	movs	r2, #0
 800c952:	4659      	mov	r1, fp
 800c954:	4640      	mov	r0, r8
 800c956:	f000 feb1 	bl	800d6bc <_strtod_r>
 800c95a:	6822      	ldr	r2, [r4, #0]
 800c95c:	9b03      	ldr	r3, [sp, #12]
 800c95e:	f012 0f02 	tst.w	r2, #2
 800c962:	ec57 6b10 	vmov	r6, r7, d0
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	d021      	beq.n	800c9ae <_scanf_float+0x3d6>
 800c96a:	9903      	ldr	r1, [sp, #12]
 800c96c:	1d1a      	adds	r2, r3, #4
 800c96e:	600a      	str	r2, [r1, #0]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	e9c3 6700 	strd	r6, r7, [r3]
 800c976:	68e3      	ldr	r3, [r4, #12]
 800c978:	3301      	adds	r3, #1
 800c97a:	60e3      	str	r3, [r4, #12]
 800c97c:	e66d      	b.n	800c65a <_scanf_float+0x82>
 800c97e:	9b04      	ldr	r3, [sp, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d0e5      	beq.n	800c950 <_scanf_float+0x378>
 800c984:	9905      	ldr	r1, [sp, #20]
 800c986:	230a      	movs	r3, #10
 800c988:	462a      	mov	r2, r5
 800c98a:	3101      	adds	r1, #1
 800c98c:	4640      	mov	r0, r8
 800c98e:	f000 ff1d 	bl	800d7cc <_strtol_r>
 800c992:	9b04      	ldr	r3, [sp, #16]
 800c994:	9e05      	ldr	r6, [sp, #20]
 800c996:	1ac2      	subs	r2, r0, r3
 800c998:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c99c:	429e      	cmp	r6, r3
 800c99e:	bf28      	it	cs
 800c9a0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c9a4:	4912      	ldr	r1, [pc, #72]	; (800c9f0 <_scanf_float+0x418>)
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f000 f83c 	bl	800ca24 <siprintf>
 800c9ac:	e7d0      	b.n	800c950 <_scanf_float+0x378>
 800c9ae:	9903      	ldr	r1, [sp, #12]
 800c9b0:	f012 0f04 	tst.w	r2, #4
 800c9b4:	f103 0204 	add.w	r2, r3, #4
 800c9b8:	600a      	str	r2, [r1, #0]
 800c9ba:	d1d9      	bne.n	800c970 <_scanf_float+0x398>
 800c9bc:	f8d3 8000 	ldr.w	r8, [r3]
 800c9c0:	ee10 2a10 	vmov	r2, s0
 800c9c4:	ee10 0a10 	vmov	r0, s0
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	f7f4 f8be 	bl	8000b4c <__aeabi_dcmpun>
 800c9d0:	b128      	cbz	r0, 800c9de <_scanf_float+0x406>
 800c9d2:	4808      	ldr	r0, [pc, #32]	; (800c9f4 <_scanf_float+0x41c>)
 800c9d4:	f000 f820 	bl	800ca18 <nanf>
 800c9d8:	ed88 0a00 	vstr	s0, [r8]
 800c9dc:	e7cb      	b.n	800c976 <_scanf_float+0x39e>
 800c9de:	4630      	mov	r0, r6
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f4 f911 	bl	8000c08 <__aeabi_d2f>
 800c9e6:	f8c8 0000 	str.w	r0, [r8]
 800c9ea:	e7c4      	b.n	800c976 <_scanf_float+0x39e>
 800c9ec:	2500      	movs	r5, #0
 800c9ee:	e634      	b.n	800c65a <_scanf_float+0x82>
 800c9f0:	0805adc9 	.word	0x0805adc9
 800c9f4:	08012495 	.word	0x08012495

0800c9f8 <_sbrk_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d06      	ldr	r5, [pc, #24]	; (800ca14 <_sbrk_r+0x1c>)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4604      	mov	r4, r0
 800ca00:	4608      	mov	r0, r1
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	f005 fb96 	bl	8012134 <_sbrk>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_sbrk_r+0x1a>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_sbrk_r+0x1a>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	20013c30 	.word	0x20013c30

0800ca18 <nanf>:
 800ca18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca20 <nanf+0x8>
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	7fc00000 	.word	0x7fc00000

0800ca24 <siprintf>:
 800ca24:	b40e      	push	{r1, r2, r3}
 800ca26:	b500      	push	{lr}
 800ca28:	b09c      	sub	sp, #112	; 0x70
 800ca2a:	ab1d      	add	r3, sp, #116	; 0x74
 800ca2c:	9002      	str	r0, [sp, #8]
 800ca2e:	9006      	str	r0, [sp, #24]
 800ca30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca34:	4809      	ldr	r0, [pc, #36]	; (800ca5c <siprintf+0x38>)
 800ca36:	9107      	str	r1, [sp, #28]
 800ca38:	9104      	str	r1, [sp, #16]
 800ca3a:	4909      	ldr	r1, [pc, #36]	; (800ca60 <siprintf+0x3c>)
 800ca3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca40:	9105      	str	r1, [sp, #20]
 800ca42:	6800      	ldr	r0, [r0, #0]
 800ca44:	9301      	str	r3, [sp, #4]
 800ca46:	a902      	add	r1, sp, #8
 800ca48:	f003 f936 	bl	800fcb8 <_svfiprintf_r>
 800ca4c:	9b02      	ldr	r3, [sp, #8]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	b01c      	add	sp, #112	; 0x70
 800ca54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca58:	b003      	add	sp, #12
 800ca5a:	4770      	bx	lr
 800ca5c:	20000e48 	.word	0x20000e48
 800ca60:	ffff0208 	.word	0xffff0208

0800ca64 <strcpy>:
 800ca64:	4603      	mov	r3, r0
 800ca66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca6a:	f803 2b01 	strb.w	r2, [r3], #1
 800ca6e:	2a00      	cmp	r2, #0
 800ca70:	d1f9      	bne.n	800ca66 <strcpy+0x2>
 800ca72:	4770      	bx	lr

0800ca74 <sulp>:
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	4604      	mov	r4, r0
 800ca78:	460d      	mov	r5, r1
 800ca7a:	ec45 4b10 	vmov	d0, r4, r5
 800ca7e:	4616      	mov	r6, r2
 800ca80:	f002 ff2a 	bl	800f8d8 <__ulp>
 800ca84:	ec51 0b10 	vmov	r0, r1, d0
 800ca88:	b17e      	cbz	r6, 800caaa <sulp+0x36>
 800ca8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dd09      	ble.n	800caaa <sulp+0x36>
 800ca96:	051b      	lsls	r3, r3, #20
 800ca98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ca9c:	2400      	movs	r4, #0
 800ca9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800caa2:	4622      	mov	r2, r4
 800caa4:	462b      	mov	r3, r5
 800caa6:	f7f3 fdb7 	bl	8000618 <__aeabi_dmul>
 800caaa:	bd70      	pop	{r4, r5, r6, pc}
 800caac:	0000      	movs	r0, r0
	...

0800cab0 <_strtod_l>:
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	ed2d 8b02 	vpush	{d8}
 800cab8:	b09d      	sub	sp, #116	; 0x74
 800caba:	461f      	mov	r7, r3
 800cabc:	2300      	movs	r3, #0
 800cabe:	9318      	str	r3, [sp, #96]	; 0x60
 800cac0:	4ba2      	ldr	r3, [pc, #648]	; (800cd4c <_strtod_l+0x29c>)
 800cac2:	9213      	str	r2, [sp, #76]	; 0x4c
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	9305      	str	r3, [sp, #20]
 800cac8:	4604      	mov	r4, r0
 800caca:	4618      	mov	r0, r3
 800cacc:	4688      	mov	r8, r1
 800cace:	f7f3 fb89 	bl	80001e4 <strlen>
 800cad2:	f04f 0a00 	mov.w	sl, #0
 800cad6:	4605      	mov	r5, r0
 800cad8:	f04f 0b00 	mov.w	fp, #0
 800cadc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cae2:	781a      	ldrb	r2, [r3, #0]
 800cae4:	2a2b      	cmp	r2, #43	; 0x2b
 800cae6:	d04e      	beq.n	800cb86 <_strtod_l+0xd6>
 800cae8:	d83b      	bhi.n	800cb62 <_strtod_l+0xb2>
 800caea:	2a0d      	cmp	r2, #13
 800caec:	d834      	bhi.n	800cb58 <_strtod_l+0xa8>
 800caee:	2a08      	cmp	r2, #8
 800caf0:	d834      	bhi.n	800cb5c <_strtod_l+0xac>
 800caf2:	2a00      	cmp	r2, #0
 800caf4:	d03e      	beq.n	800cb74 <_strtod_l+0xc4>
 800caf6:	2300      	movs	r3, #0
 800caf8:	930a      	str	r3, [sp, #40]	; 0x28
 800cafa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cafc:	7833      	ldrb	r3, [r6, #0]
 800cafe:	2b30      	cmp	r3, #48	; 0x30
 800cb00:	f040 80b0 	bne.w	800cc64 <_strtod_l+0x1b4>
 800cb04:	7873      	ldrb	r3, [r6, #1]
 800cb06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb0a:	2b58      	cmp	r3, #88	; 0x58
 800cb0c:	d168      	bne.n	800cbe0 <_strtod_l+0x130>
 800cb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	ab18      	add	r3, sp, #96	; 0x60
 800cb14:	9702      	str	r7, [sp, #8]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	4a8d      	ldr	r2, [pc, #564]	; (800cd50 <_strtod_l+0x2a0>)
 800cb1a:	ab19      	add	r3, sp, #100	; 0x64
 800cb1c:	a917      	add	r1, sp, #92	; 0x5c
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f001 ffbc 	bl	800ea9c <__gethex>
 800cb24:	f010 0707 	ands.w	r7, r0, #7
 800cb28:	4605      	mov	r5, r0
 800cb2a:	d005      	beq.n	800cb38 <_strtod_l+0x88>
 800cb2c:	2f06      	cmp	r7, #6
 800cb2e:	d12c      	bne.n	800cb8a <_strtod_l+0xda>
 800cb30:	3601      	adds	r6, #1
 800cb32:	2300      	movs	r3, #0
 800cb34:	9617      	str	r6, [sp, #92]	; 0x5c
 800cb36:	930a      	str	r3, [sp, #40]	; 0x28
 800cb38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f040 8590 	bne.w	800d660 <_strtod_l+0xbb0>
 800cb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb42:	b1eb      	cbz	r3, 800cb80 <_strtod_l+0xd0>
 800cb44:	4652      	mov	r2, sl
 800cb46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cb4a:	ec43 2b10 	vmov	d0, r2, r3
 800cb4e:	b01d      	add	sp, #116	; 0x74
 800cb50:	ecbd 8b02 	vpop	{d8}
 800cb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb58:	2a20      	cmp	r2, #32
 800cb5a:	d1cc      	bne.n	800caf6 <_strtod_l+0x46>
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb60:	e7be      	b.n	800cae0 <_strtod_l+0x30>
 800cb62:	2a2d      	cmp	r2, #45	; 0x2d
 800cb64:	d1c7      	bne.n	800caf6 <_strtod_l+0x46>
 800cb66:	2201      	movs	r2, #1
 800cb68:	920a      	str	r2, [sp, #40]	; 0x28
 800cb6a:	1c5a      	adds	r2, r3, #1
 800cb6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb6e:	785b      	ldrb	r3, [r3, #1]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1c2      	bne.n	800cafa <_strtod_l+0x4a>
 800cb74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f040 856e 	bne.w	800d65c <_strtod_l+0xbac>
 800cb80:	4652      	mov	r2, sl
 800cb82:	465b      	mov	r3, fp
 800cb84:	e7e1      	b.n	800cb4a <_strtod_l+0x9a>
 800cb86:	2200      	movs	r2, #0
 800cb88:	e7ee      	b.n	800cb68 <_strtod_l+0xb8>
 800cb8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb8c:	b13a      	cbz	r2, 800cb9e <_strtod_l+0xee>
 800cb8e:	2135      	movs	r1, #53	; 0x35
 800cb90:	a81a      	add	r0, sp, #104	; 0x68
 800cb92:	f002 ffac 	bl	800faee <__copybits>
 800cb96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f002 fb6b 	bl	800f274 <_Bfree>
 800cb9e:	3f01      	subs	r7, #1
 800cba0:	2f04      	cmp	r7, #4
 800cba2:	d806      	bhi.n	800cbb2 <_strtod_l+0x102>
 800cba4:	e8df f007 	tbb	[pc, r7]
 800cba8:	1714030a 	.word	0x1714030a
 800cbac:	0a          	.byte	0x0a
 800cbad:	00          	.byte	0x00
 800cbae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cbb2:	0728      	lsls	r0, r5, #28
 800cbb4:	d5c0      	bpl.n	800cb38 <_strtod_l+0x88>
 800cbb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cbba:	e7bd      	b.n	800cb38 <_strtod_l+0x88>
 800cbbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cbc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cbc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cbc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cbca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbce:	e7f0      	b.n	800cbb2 <_strtod_l+0x102>
 800cbd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cd54 <_strtod_l+0x2a4>
 800cbd4:	e7ed      	b.n	800cbb2 <_strtod_l+0x102>
 800cbd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cbda:	f04f 3aff 	mov.w	sl, #4294967295
 800cbde:	e7e8      	b.n	800cbb2 <_strtod_l+0x102>
 800cbe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbe6:	785b      	ldrb	r3, [r3, #1]
 800cbe8:	2b30      	cmp	r3, #48	; 0x30
 800cbea:	d0f9      	beq.n	800cbe0 <_strtod_l+0x130>
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d0a3      	beq.n	800cb38 <_strtod_l+0x88>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	f04f 0900 	mov.w	r9, #0
 800cbf6:	9304      	str	r3, [sp, #16]
 800cbf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbfa:	9308      	str	r3, [sp, #32]
 800cbfc:	f8cd 901c 	str.w	r9, [sp, #28]
 800cc00:	464f      	mov	r7, r9
 800cc02:	220a      	movs	r2, #10
 800cc04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc06:	7806      	ldrb	r6, [r0, #0]
 800cc08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cc0c:	b2d9      	uxtb	r1, r3
 800cc0e:	2909      	cmp	r1, #9
 800cc10:	d92a      	bls.n	800cc68 <_strtod_l+0x1b8>
 800cc12:	9905      	ldr	r1, [sp, #20]
 800cc14:	462a      	mov	r2, r5
 800cc16:	f003 f9de 	bl	800ffd6 <strncmp>
 800cc1a:	b398      	cbz	r0, 800cc84 <_strtod_l+0x1d4>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	4632      	mov	r2, r6
 800cc20:	463d      	mov	r5, r7
 800cc22:	9005      	str	r0, [sp, #20]
 800cc24:	4603      	mov	r3, r0
 800cc26:	2a65      	cmp	r2, #101	; 0x65
 800cc28:	d001      	beq.n	800cc2e <_strtod_l+0x17e>
 800cc2a:	2a45      	cmp	r2, #69	; 0x45
 800cc2c:	d118      	bne.n	800cc60 <_strtod_l+0x1b0>
 800cc2e:	b91d      	cbnz	r5, 800cc38 <_strtod_l+0x188>
 800cc30:	9a04      	ldr	r2, [sp, #16]
 800cc32:	4302      	orrs	r2, r0
 800cc34:	d09e      	beq.n	800cb74 <_strtod_l+0xc4>
 800cc36:	2500      	movs	r5, #0
 800cc38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cc3c:	f108 0201 	add.w	r2, r8, #1
 800cc40:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc42:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cc46:	2a2b      	cmp	r2, #43	; 0x2b
 800cc48:	d075      	beq.n	800cd36 <_strtod_l+0x286>
 800cc4a:	2a2d      	cmp	r2, #45	; 0x2d
 800cc4c:	d07b      	beq.n	800cd46 <_strtod_l+0x296>
 800cc4e:	f04f 0c00 	mov.w	ip, #0
 800cc52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cc56:	2909      	cmp	r1, #9
 800cc58:	f240 8082 	bls.w	800cd60 <_strtod_l+0x2b0>
 800cc5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cc60:	2600      	movs	r6, #0
 800cc62:	e09d      	b.n	800cda0 <_strtod_l+0x2f0>
 800cc64:	2300      	movs	r3, #0
 800cc66:	e7c4      	b.n	800cbf2 <_strtod_l+0x142>
 800cc68:	2f08      	cmp	r7, #8
 800cc6a:	bfd8      	it	le
 800cc6c:	9907      	ldrle	r1, [sp, #28]
 800cc6e:	f100 0001 	add.w	r0, r0, #1
 800cc72:	bfda      	itte	le
 800cc74:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc78:	9307      	strle	r3, [sp, #28]
 800cc7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cc7e:	3701      	adds	r7, #1
 800cc80:	9017      	str	r0, [sp, #92]	; 0x5c
 800cc82:	e7bf      	b.n	800cc04 <_strtod_l+0x154>
 800cc84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc86:	195a      	adds	r2, r3, r5
 800cc88:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc8a:	5d5a      	ldrb	r2, [r3, r5]
 800cc8c:	2f00      	cmp	r7, #0
 800cc8e:	d037      	beq.n	800cd00 <_strtod_l+0x250>
 800cc90:	9005      	str	r0, [sp, #20]
 800cc92:	463d      	mov	r5, r7
 800cc94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cc98:	2b09      	cmp	r3, #9
 800cc9a:	d912      	bls.n	800ccc2 <_strtod_l+0x212>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e7c2      	b.n	800cc26 <_strtod_l+0x176>
 800cca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cca6:	785a      	ldrb	r2, [r3, #1]
 800cca8:	3001      	adds	r0, #1
 800ccaa:	2a30      	cmp	r2, #48	; 0x30
 800ccac:	d0f8      	beq.n	800cca0 <_strtod_l+0x1f0>
 800ccae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ccb2:	2b08      	cmp	r3, #8
 800ccb4:	f200 84d9 	bhi.w	800d66a <_strtod_l+0xbba>
 800ccb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccba:	9005      	str	r0, [sp, #20]
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	9308      	str	r3, [sp, #32]
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	3a30      	subs	r2, #48	; 0x30
 800ccc4:	f100 0301 	add.w	r3, r0, #1
 800ccc8:	d014      	beq.n	800ccf4 <_strtod_l+0x244>
 800ccca:	9905      	ldr	r1, [sp, #20]
 800cccc:	4419      	add	r1, r3
 800ccce:	9105      	str	r1, [sp, #20]
 800ccd0:	462b      	mov	r3, r5
 800ccd2:	eb00 0e05 	add.w	lr, r0, r5
 800ccd6:	210a      	movs	r1, #10
 800ccd8:	4573      	cmp	r3, lr
 800ccda:	d113      	bne.n	800cd04 <_strtod_l+0x254>
 800ccdc:	182b      	adds	r3, r5, r0
 800ccde:	2b08      	cmp	r3, #8
 800cce0:	f105 0501 	add.w	r5, r5, #1
 800cce4:	4405      	add	r5, r0
 800cce6:	dc1c      	bgt.n	800cd22 <_strtod_l+0x272>
 800cce8:	9907      	ldr	r1, [sp, #28]
 800ccea:	230a      	movs	r3, #10
 800ccec:	fb03 2301 	mla	r3, r3, r1, r2
 800ccf0:	9307      	str	r3, [sp, #28]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccf6:	1c51      	adds	r1, r2, #1
 800ccf8:	9117      	str	r1, [sp, #92]	; 0x5c
 800ccfa:	7852      	ldrb	r2, [r2, #1]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	e7c9      	b.n	800cc94 <_strtod_l+0x1e4>
 800cd00:	4638      	mov	r0, r7
 800cd02:	e7d2      	b.n	800ccaa <_strtod_l+0x1fa>
 800cd04:	2b08      	cmp	r3, #8
 800cd06:	dc04      	bgt.n	800cd12 <_strtod_l+0x262>
 800cd08:	9e07      	ldr	r6, [sp, #28]
 800cd0a:	434e      	muls	r6, r1
 800cd0c:	9607      	str	r6, [sp, #28]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	e7e2      	b.n	800ccd8 <_strtod_l+0x228>
 800cd12:	f103 0c01 	add.w	ip, r3, #1
 800cd16:	f1bc 0f10 	cmp.w	ip, #16
 800cd1a:	bfd8      	it	le
 800cd1c:	fb01 f909 	mulle.w	r9, r1, r9
 800cd20:	e7f5      	b.n	800cd0e <_strtod_l+0x25e>
 800cd22:	2d10      	cmp	r5, #16
 800cd24:	bfdc      	itt	le
 800cd26:	230a      	movle	r3, #10
 800cd28:	fb03 2909 	mlale	r9, r3, r9, r2
 800cd2c:	e7e1      	b.n	800ccf2 <_strtod_l+0x242>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9305      	str	r3, [sp, #20]
 800cd32:	2301      	movs	r3, #1
 800cd34:	e77c      	b.n	800cc30 <_strtod_l+0x180>
 800cd36:	f04f 0c00 	mov.w	ip, #0
 800cd3a:	f108 0202 	add.w	r2, r8, #2
 800cd3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cd44:	e785      	b.n	800cc52 <_strtod_l+0x1a2>
 800cd46:	f04f 0c01 	mov.w	ip, #1
 800cd4a:	e7f6      	b.n	800cd3a <_strtod_l+0x28a>
 800cd4c:	0805b07c 	.word	0x0805b07c
 800cd50:	0805add0 	.word	0x0805add0
 800cd54:	7ff00000 	.word	0x7ff00000
 800cd58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd5a:	1c51      	adds	r1, r2, #1
 800cd5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd5e:	7852      	ldrb	r2, [r2, #1]
 800cd60:	2a30      	cmp	r2, #48	; 0x30
 800cd62:	d0f9      	beq.n	800cd58 <_strtod_l+0x2a8>
 800cd64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cd68:	2908      	cmp	r1, #8
 800cd6a:	f63f af79 	bhi.w	800cc60 <_strtod_l+0x1b0>
 800cd6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cd72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd74:	9206      	str	r2, [sp, #24]
 800cd76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd78:	1c51      	adds	r1, r2, #1
 800cd7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd7c:	7852      	ldrb	r2, [r2, #1]
 800cd7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cd82:	2e09      	cmp	r6, #9
 800cd84:	d937      	bls.n	800cdf6 <_strtod_l+0x346>
 800cd86:	9e06      	ldr	r6, [sp, #24]
 800cd88:	1b89      	subs	r1, r1, r6
 800cd8a:	2908      	cmp	r1, #8
 800cd8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cd90:	dc02      	bgt.n	800cd98 <_strtod_l+0x2e8>
 800cd92:	4576      	cmp	r6, lr
 800cd94:	bfa8      	it	ge
 800cd96:	4676      	movge	r6, lr
 800cd98:	f1bc 0f00 	cmp.w	ip, #0
 800cd9c:	d000      	beq.n	800cda0 <_strtod_l+0x2f0>
 800cd9e:	4276      	negs	r6, r6
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	d14d      	bne.n	800ce40 <_strtod_l+0x390>
 800cda4:	9904      	ldr	r1, [sp, #16]
 800cda6:	4301      	orrs	r1, r0
 800cda8:	f47f aec6 	bne.w	800cb38 <_strtod_l+0x88>
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f47f aee1 	bne.w	800cb74 <_strtod_l+0xc4>
 800cdb2:	2a69      	cmp	r2, #105	; 0x69
 800cdb4:	d027      	beq.n	800ce06 <_strtod_l+0x356>
 800cdb6:	dc24      	bgt.n	800ce02 <_strtod_l+0x352>
 800cdb8:	2a49      	cmp	r2, #73	; 0x49
 800cdba:	d024      	beq.n	800ce06 <_strtod_l+0x356>
 800cdbc:	2a4e      	cmp	r2, #78	; 0x4e
 800cdbe:	f47f aed9 	bne.w	800cb74 <_strtod_l+0xc4>
 800cdc2:	499f      	ldr	r1, [pc, #636]	; (800d040 <_strtod_l+0x590>)
 800cdc4:	a817      	add	r0, sp, #92	; 0x5c
 800cdc6:	f002 f8c1 	bl	800ef4c <__match>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	f43f aed2 	beq.w	800cb74 <_strtod_l+0xc4>
 800cdd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b28      	cmp	r3, #40	; 0x28
 800cdd6:	d12d      	bne.n	800ce34 <_strtod_l+0x384>
 800cdd8:	499a      	ldr	r1, [pc, #616]	; (800d044 <_strtod_l+0x594>)
 800cdda:	aa1a      	add	r2, sp, #104	; 0x68
 800cddc:	a817      	add	r0, sp, #92	; 0x5c
 800cdde:	f002 f8c9 	bl	800ef74 <__hexnan>
 800cde2:	2805      	cmp	r0, #5
 800cde4:	d126      	bne.n	800ce34 <_strtod_l+0x384>
 800cde6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cde8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cdec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cdf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cdf4:	e6a0      	b.n	800cb38 <_strtod_l+0x88>
 800cdf6:	210a      	movs	r1, #10
 800cdf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cdfc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ce00:	e7b9      	b.n	800cd76 <_strtod_l+0x2c6>
 800ce02:	2a6e      	cmp	r2, #110	; 0x6e
 800ce04:	e7db      	b.n	800cdbe <_strtod_l+0x30e>
 800ce06:	4990      	ldr	r1, [pc, #576]	; (800d048 <_strtod_l+0x598>)
 800ce08:	a817      	add	r0, sp, #92	; 0x5c
 800ce0a:	f002 f89f 	bl	800ef4c <__match>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	f43f aeb0 	beq.w	800cb74 <_strtod_l+0xc4>
 800ce14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce16:	498d      	ldr	r1, [pc, #564]	; (800d04c <_strtod_l+0x59c>)
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	a817      	add	r0, sp, #92	; 0x5c
 800ce1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce1e:	f002 f895 	bl	800ef4c <__match>
 800ce22:	b910      	cbnz	r0, 800ce2a <_strtod_l+0x37a>
 800ce24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce26:	3301      	adds	r3, #1
 800ce28:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d05c <_strtod_l+0x5ac>
 800ce2e:	f04f 0a00 	mov.w	sl, #0
 800ce32:	e681      	b.n	800cb38 <_strtod_l+0x88>
 800ce34:	4886      	ldr	r0, [pc, #536]	; (800d050 <_strtod_l+0x5a0>)
 800ce36:	f003 f83f 	bl	800feb8 <nan>
 800ce3a:	ec5b ab10 	vmov	sl, fp, d0
 800ce3e:	e67b      	b.n	800cb38 <_strtod_l+0x88>
 800ce40:	9b05      	ldr	r3, [sp, #20]
 800ce42:	9807      	ldr	r0, [sp, #28]
 800ce44:	1af3      	subs	r3, r6, r3
 800ce46:	2f00      	cmp	r7, #0
 800ce48:	bf08      	it	eq
 800ce4a:	462f      	moveq	r7, r5
 800ce4c:	2d10      	cmp	r5, #16
 800ce4e:	9306      	str	r3, [sp, #24]
 800ce50:	46a8      	mov	r8, r5
 800ce52:	bfa8      	it	ge
 800ce54:	f04f 0810 	movge.w	r8, #16
 800ce58:	f7f3 fb64 	bl	8000524 <__aeabi_ui2d>
 800ce5c:	2d09      	cmp	r5, #9
 800ce5e:	4682      	mov	sl, r0
 800ce60:	468b      	mov	fp, r1
 800ce62:	dd13      	ble.n	800ce8c <_strtod_l+0x3dc>
 800ce64:	4b7b      	ldr	r3, [pc, #492]	; (800d054 <_strtod_l+0x5a4>)
 800ce66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ce6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ce6e:	f7f3 fbd3 	bl	8000618 <__aeabi_dmul>
 800ce72:	4682      	mov	sl, r0
 800ce74:	4648      	mov	r0, r9
 800ce76:	468b      	mov	fp, r1
 800ce78:	f7f3 fb54 	bl	8000524 <__aeabi_ui2d>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	4650      	mov	r0, sl
 800ce82:	4659      	mov	r1, fp
 800ce84:	f7f3 fa12 	bl	80002ac <__adddf3>
 800ce88:	4682      	mov	sl, r0
 800ce8a:	468b      	mov	fp, r1
 800ce8c:	2d0f      	cmp	r5, #15
 800ce8e:	dc38      	bgt.n	800cf02 <_strtod_l+0x452>
 800ce90:	9b06      	ldr	r3, [sp, #24]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f43f ae50 	beq.w	800cb38 <_strtod_l+0x88>
 800ce98:	dd24      	ble.n	800cee4 <_strtod_l+0x434>
 800ce9a:	2b16      	cmp	r3, #22
 800ce9c:	dc0b      	bgt.n	800ceb6 <_strtod_l+0x406>
 800ce9e:	496d      	ldr	r1, [pc, #436]	; (800d054 <_strtod_l+0x5a4>)
 800cea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cea8:	4652      	mov	r2, sl
 800ceaa:	465b      	mov	r3, fp
 800ceac:	f7f3 fbb4 	bl	8000618 <__aeabi_dmul>
 800ceb0:	4682      	mov	sl, r0
 800ceb2:	468b      	mov	fp, r1
 800ceb4:	e640      	b.n	800cb38 <_strtod_l+0x88>
 800ceb6:	9a06      	ldr	r2, [sp, #24]
 800ceb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cebc:	4293      	cmp	r3, r2
 800cebe:	db20      	blt.n	800cf02 <_strtod_l+0x452>
 800cec0:	4c64      	ldr	r4, [pc, #400]	; (800d054 <_strtod_l+0x5a4>)
 800cec2:	f1c5 050f 	rsb	r5, r5, #15
 800cec6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ceca:	4652      	mov	r2, sl
 800cecc:	465b      	mov	r3, fp
 800cece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced2:	f7f3 fba1 	bl	8000618 <__aeabi_dmul>
 800ced6:	9b06      	ldr	r3, [sp, #24]
 800ced8:	1b5d      	subs	r5, r3, r5
 800ceda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cede:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cee2:	e7e3      	b.n	800ceac <_strtod_l+0x3fc>
 800cee4:	9b06      	ldr	r3, [sp, #24]
 800cee6:	3316      	adds	r3, #22
 800cee8:	db0b      	blt.n	800cf02 <_strtod_l+0x452>
 800ceea:	9b05      	ldr	r3, [sp, #20]
 800ceec:	1b9e      	subs	r6, r3, r6
 800ceee:	4b59      	ldr	r3, [pc, #356]	; (800d054 <_strtod_l+0x5a4>)
 800cef0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cef4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cef8:	4650      	mov	r0, sl
 800cefa:	4659      	mov	r1, fp
 800cefc:	f7f3 fcb6 	bl	800086c <__aeabi_ddiv>
 800cf00:	e7d6      	b.n	800ceb0 <_strtod_l+0x400>
 800cf02:	9b06      	ldr	r3, [sp, #24]
 800cf04:	eba5 0808 	sub.w	r8, r5, r8
 800cf08:	4498      	add	r8, r3
 800cf0a:	f1b8 0f00 	cmp.w	r8, #0
 800cf0e:	dd74      	ble.n	800cffa <_strtod_l+0x54a>
 800cf10:	f018 030f 	ands.w	r3, r8, #15
 800cf14:	d00a      	beq.n	800cf2c <_strtod_l+0x47c>
 800cf16:	494f      	ldr	r1, [pc, #316]	; (800d054 <_strtod_l+0x5a4>)
 800cf18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf1c:	4652      	mov	r2, sl
 800cf1e:	465b      	mov	r3, fp
 800cf20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf24:	f7f3 fb78 	bl	8000618 <__aeabi_dmul>
 800cf28:	4682      	mov	sl, r0
 800cf2a:	468b      	mov	fp, r1
 800cf2c:	f038 080f 	bics.w	r8, r8, #15
 800cf30:	d04f      	beq.n	800cfd2 <_strtod_l+0x522>
 800cf32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cf36:	dd22      	ble.n	800cf7e <_strtod_l+0x4ce>
 800cf38:	2500      	movs	r5, #0
 800cf3a:	462e      	mov	r6, r5
 800cf3c:	9507      	str	r5, [sp, #28]
 800cf3e:	9505      	str	r5, [sp, #20]
 800cf40:	2322      	movs	r3, #34	; 0x22
 800cf42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d05c <_strtod_l+0x5ac>
 800cf46:	6023      	str	r3, [r4, #0]
 800cf48:	f04f 0a00 	mov.w	sl, #0
 800cf4c:	9b07      	ldr	r3, [sp, #28]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f43f adf2 	beq.w	800cb38 <_strtod_l+0x88>
 800cf54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf56:	4620      	mov	r0, r4
 800cf58:	f002 f98c 	bl	800f274 <_Bfree>
 800cf5c:	9905      	ldr	r1, [sp, #20]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f002 f988 	bl	800f274 <_Bfree>
 800cf64:	4631      	mov	r1, r6
 800cf66:	4620      	mov	r0, r4
 800cf68:	f002 f984 	bl	800f274 <_Bfree>
 800cf6c:	9907      	ldr	r1, [sp, #28]
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f002 f980 	bl	800f274 <_Bfree>
 800cf74:	4629      	mov	r1, r5
 800cf76:	4620      	mov	r0, r4
 800cf78:	f002 f97c 	bl	800f274 <_Bfree>
 800cf7c:	e5dc      	b.n	800cb38 <_strtod_l+0x88>
 800cf7e:	4b36      	ldr	r3, [pc, #216]	; (800d058 <_strtod_l+0x5a8>)
 800cf80:	9304      	str	r3, [sp, #16]
 800cf82:	2300      	movs	r3, #0
 800cf84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cf88:	4650      	mov	r0, sl
 800cf8a:	4659      	mov	r1, fp
 800cf8c:	4699      	mov	r9, r3
 800cf8e:	f1b8 0f01 	cmp.w	r8, #1
 800cf92:	dc21      	bgt.n	800cfd8 <_strtod_l+0x528>
 800cf94:	b10b      	cbz	r3, 800cf9a <_strtod_l+0x4ea>
 800cf96:	4682      	mov	sl, r0
 800cf98:	468b      	mov	fp, r1
 800cf9a:	4b2f      	ldr	r3, [pc, #188]	; (800d058 <_strtod_l+0x5a8>)
 800cf9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cfa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cfa4:	4652      	mov	r2, sl
 800cfa6:	465b      	mov	r3, fp
 800cfa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cfac:	f7f3 fb34 	bl	8000618 <__aeabi_dmul>
 800cfb0:	4b2a      	ldr	r3, [pc, #168]	; (800d05c <_strtod_l+0x5ac>)
 800cfb2:	460a      	mov	r2, r1
 800cfb4:	400b      	ands	r3, r1
 800cfb6:	492a      	ldr	r1, [pc, #168]	; (800d060 <_strtod_l+0x5b0>)
 800cfb8:	428b      	cmp	r3, r1
 800cfba:	4682      	mov	sl, r0
 800cfbc:	d8bc      	bhi.n	800cf38 <_strtod_l+0x488>
 800cfbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cfc2:	428b      	cmp	r3, r1
 800cfc4:	bf86      	itte	hi
 800cfc6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d064 <_strtod_l+0x5b4>
 800cfca:	f04f 3aff 	movhi.w	sl, #4294967295
 800cfce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	e084      	b.n	800d0e2 <_strtod_l+0x632>
 800cfd8:	f018 0f01 	tst.w	r8, #1
 800cfdc:	d005      	beq.n	800cfea <_strtod_l+0x53a>
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	f7f3 fb18 	bl	8000618 <__aeabi_dmul>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	9a04      	ldr	r2, [sp, #16]
 800cfec:	3208      	adds	r2, #8
 800cfee:	f109 0901 	add.w	r9, r9, #1
 800cff2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cff6:	9204      	str	r2, [sp, #16]
 800cff8:	e7c9      	b.n	800cf8e <_strtod_l+0x4de>
 800cffa:	d0ea      	beq.n	800cfd2 <_strtod_l+0x522>
 800cffc:	f1c8 0800 	rsb	r8, r8, #0
 800d000:	f018 020f 	ands.w	r2, r8, #15
 800d004:	d00a      	beq.n	800d01c <_strtod_l+0x56c>
 800d006:	4b13      	ldr	r3, [pc, #76]	; (800d054 <_strtod_l+0x5a4>)
 800d008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d00c:	4650      	mov	r0, sl
 800d00e:	4659      	mov	r1, fp
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	f7f3 fc2a 	bl	800086c <__aeabi_ddiv>
 800d018:	4682      	mov	sl, r0
 800d01a:	468b      	mov	fp, r1
 800d01c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d020:	d0d7      	beq.n	800cfd2 <_strtod_l+0x522>
 800d022:	f1b8 0f1f 	cmp.w	r8, #31
 800d026:	dd1f      	ble.n	800d068 <_strtod_l+0x5b8>
 800d028:	2500      	movs	r5, #0
 800d02a:	462e      	mov	r6, r5
 800d02c:	9507      	str	r5, [sp, #28]
 800d02e:	9505      	str	r5, [sp, #20]
 800d030:	2322      	movs	r3, #34	; 0x22
 800d032:	f04f 0a00 	mov.w	sl, #0
 800d036:	f04f 0b00 	mov.w	fp, #0
 800d03a:	6023      	str	r3, [r4, #0]
 800d03c:	e786      	b.n	800cf4c <_strtod_l+0x49c>
 800d03e:	bf00      	nop
 800d040:	0805ada2 	.word	0x0805ada2
 800d044:	0805ade4 	.word	0x0805ade4
 800d048:	0805ad9a 	.word	0x0805ad9a
 800d04c:	0805af24 	.word	0x0805af24
 800d050:	08012495 	.word	0x08012495
 800d054:	0805b118 	.word	0x0805b118
 800d058:	0805b0f0 	.word	0x0805b0f0
 800d05c:	7ff00000 	.word	0x7ff00000
 800d060:	7ca00000 	.word	0x7ca00000
 800d064:	7fefffff 	.word	0x7fefffff
 800d068:	f018 0310 	ands.w	r3, r8, #16
 800d06c:	bf18      	it	ne
 800d06e:	236a      	movne	r3, #106	; 0x6a
 800d070:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d420 <_strtod_l+0x970>
 800d074:	9304      	str	r3, [sp, #16]
 800d076:	4650      	mov	r0, sl
 800d078:	4659      	mov	r1, fp
 800d07a:	2300      	movs	r3, #0
 800d07c:	f018 0f01 	tst.w	r8, #1
 800d080:	d004      	beq.n	800d08c <_strtod_l+0x5dc>
 800d082:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d086:	f7f3 fac7 	bl	8000618 <__aeabi_dmul>
 800d08a:	2301      	movs	r3, #1
 800d08c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d090:	f109 0908 	add.w	r9, r9, #8
 800d094:	d1f2      	bne.n	800d07c <_strtod_l+0x5cc>
 800d096:	b10b      	cbz	r3, 800d09c <_strtod_l+0x5ec>
 800d098:	4682      	mov	sl, r0
 800d09a:	468b      	mov	fp, r1
 800d09c:	9b04      	ldr	r3, [sp, #16]
 800d09e:	b1c3      	cbz	r3, 800d0d2 <_strtod_l+0x622>
 800d0a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d0a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	4659      	mov	r1, fp
 800d0ac:	dd11      	ble.n	800d0d2 <_strtod_l+0x622>
 800d0ae:	2b1f      	cmp	r3, #31
 800d0b0:	f340 8124 	ble.w	800d2fc <_strtod_l+0x84c>
 800d0b4:	2b34      	cmp	r3, #52	; 0x34
 800d0b6:	bfde      	ittt	le
 800d0b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d0bc:	f04f 33ff 	movle.w	r3, #4294967295
 800d0c0:	fa03 f202 	lslle.w	r2, r3, r2
 800d0c4:	f04f 0a00 	mov.w	sl, #0
 800d0c8:	bfcc      	ite	gt
 800d0ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d0ce:	ea02 0b01 	andle.w	fp, r2, r1
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	4659      	mov	r1, fp
 800d0da:	f7f3 fd05 	bl	8000ae8 <__aeabi_dcmpeq>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	d1a2      	bne.n	800d028 <_strtod_l+0x578>
 800d0e2:	9b07      	ldr	r3, [sp, #28]
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	9908      	ldr	r1, [sp, #32]
 800d0e8:	462b      	mov	r3, r5
 800d0ea:	463a      	mov	r2, r7
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f002 f929 	bl	800f344 <__s2b>
 800d0f2:	9007      	str	r0, [sp, #28]
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	f43f af1f 	beq.w	800cf38 <_strtod_l+0x488>
 800d0fa:	9b05      	ldr	r3, [sp, #20]
 800d0fc:	1b9e      	subs	r6, r3, r6
 800d0fe:	9b06      	ldr	r3, [sp, #24]
 800d100:	2b00      	cmp	r3, #0
 800d102:	bfb4      	ite	lt
 800d104:	4633      	movlt	r3, r6
 800d106:	2300      	movge	r3, #0
 800d108:	930c      	str	r3, [sp, #48]	; 0x30
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	2500      	movs	r5, #0
 800d10e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d112:	9312      	str	r3, [sp, #72]	; 0x48
 800d114:	462e      	mov	r6, r5
 800d116:	9b07      	ldr	r3, [sp, #28]
 800d118:	4620      	mov	r0, r4
 800d11a:	6859      	ldr	r1, [r3, #4]
 800d11c:	f002 f86a 	bl	800f1f4 <_Balloc>
 800d120:	9005      	str	r0, [sp, #20]
 800d122:	2800      	cmp	r0, #0
 800d124:	f43f af0c 	beq.w	800cf40 <_strtod_l+0x490>
 800d128:	9b07      	ldr	r3, [sp, #28]
 800d12a:	691a      	ldr	r2, [r3, #16]
 800d12c:	3202      	adds	r2, #2
 800d12e:	f103 010c 	add.w	r1, r3, #12
 800d132:	0092      	lsls	r2, r2, #2
 800d134:	300c      	adds	r0, #12
 800d136:	f7fe fb95 	bl	800b864 <memcpy>
 800d13a:	ec4b ab10 	vmov	d0, sl, fp
 800d13e:	aa1a      	add	r2, sp, #104	; 0x68
 800d140:	a919      	add	r1, sp, #100	; 0x64
 800d142:	4620      	mov	r0, r4
 800d144:	f002 fc44 	bl	800f9d0 <__d2b>
 800d148:	ec4b ab18 	vmov	d8, sl, fp
 800d14c:	9018      	str	r0, [sp, #96]	; 0x60
 800d14e:	2800      	cmp	r0, #0
 800d150:	f43f aef6 	beq.w	800cf40 <_strtod_l+0x490>
 800d154:	2101      	movs	r1, #1
 800d156:	4620      	mov	r0, r4
 800d158:	f002 f98e 	bl	800f478 <__i2b>
 800d15c:	4606      	mov	r6, r0
 800d15e:	2800      	cmp	r0, #0
 800d160:	f43f aeee 	beq.w	800cf40 <_strtod_l+0x490>
 800d164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d166:	9904      	ldr	r1, [sp, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	bfab      	itete	ge
 800d16c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d16e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d170:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d172:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d176:	bfac      	ite	ge
 800d178:	eb03 0902 	addge.w	r9, r3, r2
 800d17c:	1ad7      	sublt	r7, r2, r3
 800d17e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d180:	eba3 0801 	sub.w	r8, r3, r1
 800d184:	4490      	add	r8, r2
 800d186:	4ba1      	ldr	r3, [pc, #644]	; (800d40c <_strtod_l+0x95c>)
 800d188:	f108 38ff 	add.w	r8, r8, #4294967295
 800d18c:	4598      	cmp	r8, r3
 800d18e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d192:	f280 80c7 	bge.w	800d324 <_strtod_l+0x874>
 800d196:	eba3 0308 	sub.w	r3, r3, r8
 800d19a:	2b1f      	cmp	r3, #31
 800d19c:	eba2 0203 	sub.w	r2, r2, r3
 800d1a0:	f04f 0101 	mov.w	r1, #1
 800d1a4:	f300 80b1 	bgt.w	800d30a <_strtod_l+0x85a>
 800d1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ac:	930d      	str	r3, [sp, #52]	; 0x34
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	9308      	str	r3, [sp, #32]
 800d1b2:	eb09 0802 	add.w	r8, r9, r2
 800d1b6:	9b04      	ldr	r3, [sp, #16]
 800d1b8:	45c1      	cmp	r9, r8
 800d1ba:	4417      	add	r7, r2
 800d1bc:	441f      	add	r7, r3
 800d1be:	464b      	mov	r3, r9
 800d1c0:	bfa8      	it	ge
 800d1c2:	4643      	movge	r3, r8
 800d1c4:	42bb      	cmp	r3, r7
 800d1c6:	bfa8      	it	ge
 800d1c8:	463b      	movge	r3, r7
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	bfc2      	ittt	gt
 800d1ce:	eba8 0803 	subgt.w	r8, r8, r3
 800d1d2:	1aff      	subgt	r7, r7, r3
 800d1d4:	eba9 0903 	subgt.w	r9, r9, r3
 800d1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dd17      	ble.n	800d20e <_strtod_l+0x75e>
 800d1de:	4631      	mov	r1, r6
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f002 fa08 	bl	800f5f8 <__pow5mult>
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	f43f aea8 	beq.w	800cf40 <_strtod_l+0x490>
 800d1f0:	4601      	mov	r1, r0
 800d1f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f002 f955 	bl	800f4a4 <__multiply>
 800d1fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	f43f ae9f 	beq.w	800cf40 <_strtod_l+0x490>
 800d202:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d204:	4620      	mov	r0, r4
 800d206:	f002 f835 	bl	800f274 <_Bfree>
 800d20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d20c:	9318      	str	r3, [sp, #96]	; 0x60
 800d20e:	f1b8 0f00 	cmp.w	r8, #0
 800d212:	f300 808c 	bgt.w	800d32e <_strtod_l+0x87e>
 800d216:	9b06      	ldr	r3, [sp, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	dd08      	ble.n	800d22e <_strtod_l+0x77e>
 800d21c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d21e:	9905      	ldr	r1, [sp, #20]
 800d220:	4620      	mov	r0, r4
 800d222:	f002 f9e9 	bl	800f5f8 <__pow5mult>
 800d226:	9005      	str	r0, [sp, #20]
 800d228:	2800      	cmp	r0, #0
 800d22a:	f43f ae89 	beq.w	800cf40 <_strtod_l+0x490>
 800d22e:	2f00      	cmp	r7, #0
 800d230:	dd08      	ble.n	800d244 <_strtod_l+0x794>
 800d232:	9905      	ldr	r1, [sp, #20]
 800d234:	463a      	mov	r2, r7
 800d236:	4620      	mov	r0, r4
 800d238:	f002 fa38 	bl	800f6ac <__lshift>
 800d23c:	9005      	str	r0, [sp, #20]
 800d23e:	2800      	cmp	r0, #0
 800d240:	f43f ae7e 	beq.w	800cf40 <_strtod_l+0x490>
 800d244:	f1b9 0f00 	cmp.w	r9, #0
 800d248:	dd08      	ble.n	800d25c <_strtod_l+0x7ac>
 800d24a:	4631      	mov	r1, r6
 800d24c:	464a      	mov	r2, r9
 800d24e:	4620      	mov	r0, r4
 800d250:	f002 fa2c 	bl	800f6ac <__lshift>
 800d254:	4606      	mov	r6, r0
 800d256:	2800      	cmp	r0, #0
 800d258:	f43f ae72 	beq.w	800cf40 <_strtod_l+0x490>
 800d25c:	9a05      	ldr	r2, [sp, #20]
 800d25e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d260:	4620      	mov	r0, r4
 800d262:	f002 faaf 	bl	800f7c4 <__mdiff>
 800d266:	4605      	mov	r5, r0
 800d268:	2800      	cmp	r0, #0
 800d26a:	f43f ae69 	beq.w	800cf40 <_strtod_l+0x490>
 800d26e:	68c3      	ldr	r3, [r0, #12]
 800d270:	930b      	str	r3, [sp, #44]	; 0x2c
 800d272:	2300      	movs	r3, #0
 800d274:	60c3      	str	r3, [r0, #12]
 800d276:	4631      	mov	r1, r6
 800d278:	f002 fa88 	bl	800f78c <__mcmp>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	da60      	bge.n	800d342 <_strtod_l+0x892>
 800d280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d282:	ea53 030a 	orrs.w	r3, r3, sl
 800d286:	f040 8082 	bne.w	800d38e <_strtod_l+0x8de>
 800d28a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d17d      	bne.n	800d38e <_strtod_l+0x8de>
 800d292:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d296:	0d1b      	lsrs	r3, r3, #20
 800d298:	051b      	lsls	r3, r3, #20
 800d29a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d29e:	d976      	bls.n	800d38e <_strtod_l+0x8de>
 800d2a0:	696b      	ldr	r3, [r5, #20]
 800d2a2:	b913      	cbnz	r3, 800d2aa <_strtod_l+0x7fa>
 800d2a4:	692b      	ldr	r3, [r5, #16]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	dd71      	ble.n	800d38e <_strtod_l+0x8de>
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f002 f9fc 	bl	800f6ac <__lshift>
 800d2b4:	4631      	mov	r1, r6
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	f002 fa68 	bl	800f78c <__mcmp>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	dd66      	ble.n	800d38e <_strtod_l+0x8de>
 800d2c0:	9904      	ldr	r1, [sp, #16]
 800d2c2:	4a53      	ldr	r2, [pc, #332]	; (800d410 <_strtod_l+0x960>)
 800d2c4:	465b      	mov	r3, fp
 800d2c6:	2900      	cmp	r1, #0
 800d2c8:	f000 8081 	beq.w	800d3ce <_strtod_l+0x91e>
 800d2cc:	ea02 010b 	and.w	r1, r2, fp
 800d2d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d2d4:	dc7b      	bgt.n	800d3ce <_strtod_l+0x91e>
 800d2d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d2da:	f77f aea9 	ble.w	800d030 <_strtod_l+0x580>
 800d2de:	4b4d      	ldr	r3, [pc, #308]	; (800d414 <_strtod_l+0x964>)
 800d2e0:	4650      	mov	r0, sl
 800d2e2:	4659      	mov	r1, fp
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f7f3 f997 	bl	8000618 <__aeabi_dmul>
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4303      	orrs	r3, r0
 800d2ee:	bf08      	it	eq
 800d2f0:	2322      	moveq	r3, #34	; 0x22
 800d2f2:	4682      	mov	sl, r0
 800d2f4:	468b      	mov	fp, r1
 800d2f6:	bf08      	it	eq
 800d2f8:	6023      	streq	r3, [r4, #0]
 800d2fa:	e62b      	b.n	800cf54 <_strtod_l+0x4a4>
 800d2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d300:	fa02 f303 	lsl.w	r3, r2, r3
 800d304:	ea03 0a0a 	and.w	sl, r3, sl
 800d308:	e6e3      	b.n	800d0d2 <_strtod_l+0x622>
 800d30a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d30e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d312:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d316:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d31a:	fa01 f308 	lsl.w	r3, r1, r8
 800d31e:	9308      	str	r3, [sp, #32]
 800d320:	910d      	str	r1, [sp, #52]	; 0x34
 800d322:	e746      	b.n	800d1b2 <_strtod_l+0x702>
 800d324:	2300      	movs	r3, #0
 800d326:	9308      	str	r3, [sp, #32]
 800d328:	2301      	movs	r3, #1
 800d32a:	930d      	str	r3, [sp, #52]	; 0x34
 800d32c:	e741      	b.n	800d1b2 <_strtod_l+0x702>
 800d32e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d330:	4642      	mov	r2, r8
 800d332:	4620      	mov	r0, r4
 800d334:	f002 f9ba 	bl	800f6ac <__lshift>
 800d338:	9018      	str	r0, [sp, #96]	; 0x60
 800d33a:	2800      	cmp	r0, #0
 800d33c:	f47f af6b 	bne.w	800d216 <_strtod_l+0x766>
 800d340:	e5fe      	b.n	800cf40 <_strtod_l+0x490>
 800d342:	465f      	mov	r7, fp
 800d344:	d16e      	bne.n	800d424 <_strtod_l+0x974>
 800d346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d348:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d34c:	b342      	cbz	r2, 800d3a0 <_strtod_l+0x8f0>
 800d34e:	4a32      	ldr	r2, [pc, #200]	; (800d418 <_strtod_l+0x968>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d128      	bne.n	800d3a6 <_strtod_l+0x8f6>
 800d354:	9b04      	ldr	r3, [sp, #16]
 800d356:	4651      	mov	r1, sl
 800d358:	b1eb      	cbz	r3, 800d396 <_strtod_l+0x8e6>
 800d35a:	4b2d      	ldr	r3, [pc, #180]	; (800d410 <_strtod_l+0x960>)
 800d35c:	403b      	ands	r3, r7
 800d35e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d362:	f04f 32ff 	mov.w	r2, #4294967295
 800d366:	d819      	bhi.n	800d39c <_strtod_l+0x8ec>
 800d368:	0d1b      	lsrs	r3, r3, #20
 800d36a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d36e:	fa02 f303 	lsl.w	r3, r2, r3
 800d372:	4299      	cmp	r1, r3
 800d374:	d117      	bne.n	800d3a6 <_strtod_l+0x8f6>
 800d376:	4b29      	ldr	r3, [pc, #164]	; (800d41c <_strtod_l+0x96c>)
 800d378:	429f      	cmp	r7, r3
 800d37a:	d102      	bne.n	800d382 <_strtod_l+0x8d2>
 800d37c:	3101      	adds	r1, #1
 800d37e:	f43f addf 	beq.w	800cf40 <_strtod_l+0x490>
 800d382:	4b23      	ldr	r3, [pc, #140]	; (800d410 <_strtod_l+0x960>)
 800d384:	403b      	ands	r3, r7
 800d386:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d38a:	f04f 0a00 	mov.w	sl, #0
 800d38e:	9b04      	ldr	r3, [sp, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1a4      	bne.n	800d2de <_strtod_l+0x82e>
 800d394:	e5de      	b.n	800cf54 <_strtod_l+0x4a4>
 800d396:	f04f 33ff 	mov.w	r3, #4294967295
 800d39a:	e7ea      	b.n	800d372 <_strtod_l+0x8c2>
 800d39c:	4613      	mov	r3, r2
 800d39e:	e7e8      	b.n	800d372 <_strtod_l+0x8c2>
 800d3a0:	ea53 030a 	orrs.w	r3, r3, sl
 800d3a4:	d08c      	beq.n	800d2c0 <_strtod_l+0x810>
 800d3a6:	9b08      	ldr	r3, [sp, #32]
 800d3a8:	b1db      	cbz	r3, 800d3e2 <_strtod_l+0x932>
 800d3aa:	423b      	tst	r3, r7
 800d3ac:	d0ef      	beq.n	800d38e <_strtod_l+0x8de>
 800d3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3b0:	9a04      	ldr	r2, [sp, #16]
 800d3b2:	4650      	mov	r0, sl
 800d3b4:	4659      	mov	r1, fp
 800d3b6:	b1c3      	cbz	r3, 800d3ea <_strtod_l+0x93a>
 800d3b8:	f7ff fb5c 	bl	800ca74 <sulp>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	ec51 0b18 	vmov	r0, r1, d8
 800d3c4:	f7f2 ff72 	bl	80002ac <__adddf3>
 800d3c8:	4682      	mov	sl, r0
 800d3ca:	468b      	mov	fp, r1
 800d3cc:	e7df      	b.n	800d38e <_strtod_l+0x8de>
 800d3ce:	4013      	ands	r3, r2
 800d3d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d3d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d3d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d3dc:	f04f 3aff 	mov.w	sl, #4294967295
 800d3e0:	e7d5      	b.n	800d38e <_strtod_l+0x8de>
 800d3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3e4:	ea13 0f0a 	tst.w	r3, sl
 800d3e8:	e7e0      	b.n	800d3ac <_strtod_l+0x8fc>
 800d3ea:	f7ff fb43 	bl	800ca74 <sulp>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	ec51 0b18 	vmov	r0, r1, d8
 800d3f6:	f7f2 ff57 	bl	80002a8 <__aeabi_dsub>
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4682      	mov	sl, r0
 800d400:	468b      	mov	fp, r1
 800d402:	f7f3 fb71 	bl	8000ae8 <__aeabi_dcmpeq>
 800d406:	2800      	cmp	r0, #0
 800d408:	d0c1      	beq.n	800d38e <_strtod_l+0x8de>
 800d40a:	e611      	b.n	800d030 <_strtod_l+0x580>
 800d40c:	fffffc02 	.word	0xfffffc02
 800d410:	7ff00000 	.word	0x7ff00000
 800d414:	39500000 	.word	0x39500000
 800d418:	000fffff 	.word	0x000fffff
 800d41c:	7fefffff 	.word	0x7fefffff
 800d420:	0805adf8 	.word	0x0805adf8
 800d424:	4631      	mov	r1, r6
 800d426:	4628      	mov	r0, r5
 800d428:	f002 fb2e 	bl	800fa88 <__ratio>
 800d42c:	ec59 8b10 	vmov	r8, r9, d0
 800d430:	ee10 0a10 	vmov	r0, s0
 800d434:	2200      	movs	r2, #0
 800d436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d43a:	4649      	mov	r1, r9
 800d43c:	f7f3 fb68 	bl	8000b10 <__aeabi_dcmple>
 800d440:	2800      	cmp	r0, #0
 800d442:	d07a      	beq.n	800d53a <_strtod_l+0xa8a>
 800d444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d04a      	beq.n	800d4e0 <_strtod_l+0xa30>
 800d44a:	4b95      	ldr	r3, [pc, #596]	; (800d6a0 <_strtod_l+0xbf0>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d452:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d6a0 <_strtod_l+0xbf0>
 800d456:	f04f 0800 	mov.w	r8, #0
 800d45a:	4b92      	ldr	r3, [pc, #584]	; (800d6a4 <_strtod_l+0xbf4>)
 800d45c:	403b      	ands	r3, r7
 800d45e:	930d      	str	r3, [sp, #52]	; 0x34
 800d460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d462:	4b91      	ldr	r3, [pc, #580]	; (800d6a8 <_strtod_l+0xbf8>)
 800d464:	429a      	cmp	r2, r3
 800d466:	f040 80b0 	bne.w	800d5ca <_strtod_l+0xb1a>
 800d46a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d46e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d472:	ec4b ab10 	vmov	d0, sl, fp
 800d476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d47a:	f002 fa2d 	bl	800f8d8 <__ulp>
 800d47e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d482:	ec53 2b10 	vmov	r2, r3, d0
 800d486:	f7f3 f8c7 	bl	8000618 <__aeabi_dmul>
 800d48a:	4652      	mov	r2, sl
 800d48c:	465b      	mov	r3, fp
 800d48e:	f7f2 ff0d 	bl	80002ac <__adddf3>
 800d492:	460b      	mov	r3, r1
 800d494:	4983      	ldr	r1, [pc, #524]	; (800d6a4 <_strtod_l+0xbf4>)
 800d496:	4a85      	ldr	r2, [pc, #532]	; (800d6ac <_strtod_l+0xbfc>)
 800d498:	4019      	ands	r1, r3
 800d49a:	4291      	cmp	r1, r2
 800d49c:	4682      	mov	sl, r0
 800d49e:	d960      	bls.n	800d562 <_strtod_l+0xab2>
 800d4a0:	ee18 3a90 	vmov	r3, s17
 800d4a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d104      	bne.n	800d4b6 <_strtod_l+0xa06>
 800d4ac:	ee18 3a10 	vmov	r3, s16
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	f43f ad45 	beq.w	800cf40 <_strtod_l+0x490>
 800d4b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d6b8 <_strtod_l+0xc08>
 800d4ba:	f04f 3aff 	mov.w	sl, #4294967295
 800d4be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f001 fed7 	bl	800f274 <_Bfree>
 800d4c6:	9905      	ldr	r1, [sp, #20]
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f001 fed3 	bl	800f274 <_Bfree>
 800d4ce:	4631      	mov	r1, r6
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f001 fecf 	bl	800f274 <_Bfree>
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f001 fecb 	bl	800f274 <_Bfree>
 800d4de:	e61a      	b.n	800d116 <_strtod_l+0x666>
 800d4e0:	f1ba 0f00 	cmp.w	sl, #0
 800d4e4:	d11b      	bne.n	800d51e <_strtod_l+0xa6e>
 800d4e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4ea:	b9f3      	cbnz	r3, 800d52a <_strtod_l+0xa7a>
 800d4ec:	4b6c      	ldr	r3, [pc, #432]	; (800d6a0 <_strtod_l+0xbf0>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	f7f3 fb02 	bl	8000afc <__aeabi_dcmplt>
 800d4f8:	b9d0      	cbnz	r0, 800d530 <_strtod_l+0xa80>
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	4649      	mov	r1, r9
 800d4fe:	4b6c      	ldr	r3, [pc, #432]	; (800d6b0 <_strtod_l+0xc00>)
 800d500:	2200      	movs	r2, #0
 800d502:	f7f3 f889 	bl	8000618 <__aeabi_dmul>
 800d506:	4680      	mov	r8, r0
 800d508:	4689      	mov	r9, r1
 800d50a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d50e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d512:	9315      	str	r3, [sp, #84]	; 0x54
 800d514:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d518:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d51c:	e79d      	b.n	800d45a <_strtod_l+0x9aa>
 800d51e:	f1ba 0f01 	cmp.w	sl, #1
 800d522:	d102      	bne.n	800d52a <_strtod_l+0xa7a>
 800d524:	2f00      	cmp	r7, #0
 800d526:	f43f ad83 	beq.w	800d030 <_strtod_l+0x580>
 800d52a:	4b62      	ldr	r3, [pc, #392]	; (800d6b4 <_strtod_l+0xc04>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	e78e      	b.n	800d44e <_strtod_l+0x99e>
 800d530:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d6b0 <_strtod_l+0xc00>
 800d534:	f04f 0800 	mov.w	r8, #0
 800d538:	e7e7      	b.n	800d50a <_strtod_l+0xa5a>
 800d53a:	4b5d      	ldr	r3, [pc, #372]	; (800d6b0 <_strtod_l+0xc00>)
 800d53c:	4640      	mov	r0, r8
 800d53e:	4649      	mov	r1, r9
 800d540:	2200      	movs	r2, #0
 800d542:	f7f3 f869 	bl	8000618 <__aeabi_dmul>
 800d546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d548:	4680      	mov	r8, r0
 800d54a:	4689      	mov	r9, r1
 800d54c:	b933      	cbnz	r3, 800d55c <_strtod_l+0xaac>
 800d54e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d552:	900e      	str	r0, [sp, #56]	; 0x38
 800d554:	930f      	str	r3, [sp, #60]	; 0x3c
 800d556:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d55a:	e7dd      	b.n	800d518 <_strtod_l+0xa68>
 800d55c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d560:	e7f9      	b.n	800d556 <_strtod_l+0xaa6>
 800d562:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d566:	9b04      	ldr	r3, [sp, #16]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1a8      	bne.n	800d4be <_strtod_l+0xa0e>
 800d56c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d572:	0d1b      	lsrs	r3, r3, #20
 800d574:	051b      	lsls	r3, r3, #20
 800d576:	429a      	cmp	r2, r3
 800d578:	d1a1      	bne.n	800d4be <_strtod_l+0xa0e>
 800d57a:	4640      	mov	r0, r8
 800d57c:	4649      	mov	r1, r9
 800d57e:	f7f3 fbab 	bl	8000cd8 <__aeabi_d2lz>
 800d582:	f7f3 f81b 	bl	80005bc <__aeabi_l2d>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4640      	mov	r0, r8
 800d58c:	4649      	mov	r1, r9
 800d58e:	f7f2 fe8b 	bl	80002a8 <__aeabi_dsub>
 800d592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d598:	ea43 030a 	orr.w	r3, r3, sl
 800d59c:	4313      	orrs	r3, r2
 800d59e:	4680      	mov	r8, r0
 800d5a0:	4689      	mov	r9, r1
 800d5a2:	d055      	beq.n	800d650 <_strtod_l+0xba0>
 800d5a4:	a336      	add	r3, pc, #216	; (adr r3, 800d680 <_strtod_l+0xbd0>)
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	f7f3 faa7 	bl	8000afc <__aeabi_dcmplt>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	f47f acd0 	bne.w	800cf54 <_strtod_l+0x4a4>
 800d5b4:	a334      	add	r3, pc, #208	; (adr r3, 800d688 <_strtod_l+0xbd8>)
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f3 fabb 	bl	8000b38 <__aeabi_dcmpgt>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	f43f af7b 	beq.w	800d4be <_strtod_l+0xa0e>
 800d5c8:	e4c4      	b.n	800cf54 <_strtod_l+0x4a4>
 800d5ca:	9b04      	ldr	r3, [sp, #16]
 800d5cc:	b333      	cbz	r3, 800d61c <_strtod_l+0xb6c>
 800d5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d5d4:	d822      	bhi.n	800d61c <_strtod_l+0xb6c>
 800d5d6:	a32e      	add	r3, pc, #184	; (adr r3, 800d690 <_strtod_l+0xbe0>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	4640      	mov	r0, r8
 800d5de:	4649      	mov	r1, r9
 800d5e0:	f7f3 fa96 	bl	8000b10 <__aeabi_dcmple>
 800d5e4:	b1a0      	cbz	r0, 800d610 <_strtod_l+0xb60>
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	4640      	mov	r0, r8
 800d5ea:	f7f3 faed 	bl	8000bc8 <__aeabi_d2uiz>
 800d5ee:	2801      	cmp	r0, #1
 800d5f0:	bf38      	it	cc
 800d5f2:	2001      	movcc	r0, #1
 800d5f4:	f7f2 ff96 	bl	8000524 <__aeabi_ui2d>
 800d5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	4689      	mov	r9, r1
 800d5fe:	bb23      	cbnz	r3, 800d64a <_strtod_l+0xb9a>
 800d600:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d604:	9010      	str	r0, [sp, #64]	; 0x40
 800d606:	9311      	str	r3, [sp, #68]	; 0x44
 800d608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d60c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d614:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d618:	1a9b      	subs	r3, r3, r2
 800d61a:	9309      	str	r3, [sp, #36]	; 0x24
 800d61c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d620:	eeb0 0a48 	vmov.f32	s0, s16
 800d624:	eef0 0a68 	vmov.f32	s1, s17
 800d628:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d62c:	f002 f954 	bl	800f8d8 <__ulp>
 800d630:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d634:	ec53 2b10 	vmov	r2, r3, d0
 800d638:	f7f2 ffee 	bl	8000618 <__aeabi_dmul>
 800d63c:	ec53 2b18 	vmov	r2, r3, d8
 800d640:	f7f2 fe34 	bl	80002ac <__adddf3>
 800d644:	4682      	mov	sl, r0
 800d646:	468b      	mov	fp, r1
 800d648:	e78d      	b.n	800d566 <_strtod_l+0xab6>
 800d64a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d64e:	e7db      	b.n	800d608 <_strtod_l+0xb58>
 800d650:	a311      	add	r3, pc, #68	; (adr r3, 800d698 <_strtod_l+0xbe8>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	f7f3 fa51 	bl	8000afc <__aeabi_dcmplt>
 800d65a:	e7b2      	b.n	800d5c2 <_strtod_l+0xb12>
 800d65c:	2300      	movs	r3, #0
 800d65e:	930a      	str	r3, [sp, #40]	; 0x28
 800d660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	f7ff ba6b 	b.w	800cb40 <_strtod_l+0x90>
 800d66a:	2a65      	cmp	r2, #101	; 0x65
 800d66c:	f43f ab5f 	beq.w	800cd2e <_strtod_l+0x27e>
 800d670:	2a45      	cmp	r2, #69	; 0x45
 800d672:	f43f ab5c 	beq.w	800cd2e <_strtod_l+0x27e>
 800d676:	2301      	movs	r3, #1
 800d678:	f7ff bb94 	b.w	800cda4 <_strtod_l+0x2f4>
 800d67c:	f3af 8000 	nop.w
 800d680:	94a03595 	.word	0x94a03595
 800d684:	3fdfffff 	.word	0x3fdfffff
 800d688:	35afe535 	.word	0x35afe535
 800d68c:	3fe00000 	.word	0x3fe00000
 800d690:	ffc00000 	.word	0xffc00000
 800d694:	41dfffff 	.word	0x41dfffff
 800d698:	94a03595 	.word	0x94a03595
 800d69c:	3fcfffff 	.word	0x3fcfffff
 800d6a0:	3ff00000 	.word	0x3ff00000
 800d6a4:	7ff00000 	.word	0x7ff00000
 800d6a8:	7fe00000 	.word	0x7fe00000
 800d6ac:	7c9fffff 	.word	0x7c9fffff
 800d6b0:	3fe00000 	.word	0x3fe00000
 800d6b4:	bff00000 	.word	0xbff00000
 800d6b8:	7fefffff 	.word	0x7fefffff

0800d6bc <_strtod_r>:
 800d6bc:	4b01      	ldr	r3, [pc, #4]	; (800d6c4 <_strtod_r+0x8>)
 800d6be:	f7ff b9f7 	b.w	800cab0 <_strtod_l>
 800d6c2:	bf00      	nop
 800d6c4:	20000eb0 	.word	0x20000eb0

0800d6c8 <_strtol_l.constprop.0>:
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ce:	d001      	beq.n	800d6d4 <_strtol_l.constprop.0+0xc>
 800d6d0:	2b24      	cmp	r3, #36	; 0x24
 800d6d2:	d906      	bls.n	800d6e2 <_strtol_l.constprop.0+0x1a>
 800d6d4:	f000 ffbe 	bl	800e654 <__errno>
 800d6d8:	2316      	movs	r3, #22
 800d6da:	6003      	str	r3, [r0, #0]
 800d6dc:	2000      	movs	r0, #0
 800d6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d7c8 <_strtol_l.constprop.0+0x100>
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	462e      	mov	r6, r5
 800d6ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d6f2:	f017 0708 	ands.w	r7, r7, #8
 800d6f6:	d1f7      	bne.n	800d6e8 <_strtol_l.constprop.0+0x20>
 800d6f8:	2c2d      	cmp	r4, #45	; 0x2d
 800d6fa:	d132      	bne.n	800d762 <_strtol_l.constprop.0+0x9a>
 800d6fc:	782c      	ldrb	r4, [r5, #0]
 800d6fe:	2701      	movs	r7, #1
 800d700:	1cb5      	adds	r5, r6, #2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d05b      	beq.n	800d7be <_strtol_l.constprop.0+0xf6>
 800d706:	2b10      	cmp	r3, #16
 800d708:	d109      	bne.n	800d71e <_strtol_l.constprop.0+0x56>
 800d70a:	2c30      	cmp	r4, #48	; 0x30
 800d70c:	d107      	bne.n	800d71e <_strtol_l.constprop.0+0x56>
 800d70e:	782c      	ldrb	r4, [r5, #0]
 800d710:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d714:	2c58      	cmp	r4, #88	; 0x58
 800d716:	d14d      	bne.n	800d7b4 <_strtol_l.constprop.0+0xec>
 800d718:	786c      	ldrb	r4, [r5, #1]
 800d71a:	2310      	movs	r3, #16
 800d71c:	3502      	adds	r5, #2
 800d71e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d722:	f108 38ff 	add.w	r8, r8, #4294967295
 800d726:	f04f 0c00 	mov.w	ip, #0
 800d72a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d72e:	4666      	mov	r6, ip
 800d730:	fb03 8a19 	mls	sl, r3, r9, r8
 800d734:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d738:	f1be 0f09 	cmp.w	lr, #9
 800d73c:	d816      	bhi.n	800d76c <_strtol_l.constprop.0+0xa4>
 800d73e:	4674      	mov	r4, lr
 800d740:	42a3      	cmp	r3, r4
 800d742:	dd24      	ble.n	800d78e <_strtol_l.constprop.0+0xc6>
 800d744:	f1bc 0f00 	cmp.w	ip, #0
 800d748:	db1e      	blt.n	800d788 <_strtol_l.constprop.0+0xc0>
 800d74a:	45b1      	cmp	r9, r6
 800d74c:	d31c      	bcc.n	800d788 <_strtol_l.constprop.0+0xc0>
 800d74e:	d101      	bne.n	800d754 <_strtol_l.constprop.0+0x8c>
 800d750:	45a2      	cmp	sl, r4
 800d752:	db19      	blt.n	800d788 <_strtol_l.constprop.0+0xc0>
 800d754:	fb06 4603 	mla	r6, r6, r3, r4
 800d758:	f04f 0c01 	mov.w	ip, #1
 800d75c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d760:	e7e8      	b.n	800d734 <_strtol_l.constprop.0+0x6c>
 800d762:	2c2b      	cmp	r4, #43	; 0x2b
 800d764:	bf04      	itt	eq
 800d766:	782c      	ldrbeq	r4, [r5, #0]
 800d768:	1cb5      	addeq	r5, r6, #2
 800d76a:	e7ca      	b.n	800d702 <_strtol_l.constprop.0+0x3a>
 800d76c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d770:	f1be 0f19 	cmp.w	lr, #25
 800d774:	d801      	bhi.n	800d77a <_strtol_l.constprop.0+0xb2>
 800d776:	3c37      	subs	r4, #55	; 0x37
 800d778:	e7e2      	b.n	800d740 <_strtol_l.constprop.0+0x78>
 800d77a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d77e:	f1be 0f19 	cmp.w	lr, #25
 800d782:	d804      	bhi.n	800d78e <_strtol_l.constprop.0+0xc6>
 800d784:	3c57      	subs	r4, #87	; 0x57
 800d786:	e7db      	b.n	800d740 <_strtol_l.constprop.0+0x78>
 800d788:	f04f 3cff 	mov.w	ip, #4294967295
 800d78c:	e7e6      	b.n	800d75c <_strtol_l.constprop.0+0x94>
 800d78e:	f1bc 0f00 	cmp.w	ip, #0
 800d792:	da05      	bge.n	800d7a0 <_strtol_l.constprop.0+0xd8>
 800d794:	2322      	movs	r3, #34	; 0x22
 800d796:	6003      	str	r3, [r0, #0]
 800d798:	4646      	mov	r6, r8
 800d79a:	b942      	cbnz	r2, 800d7ae <_strtol_l.constprop.0+0xe6>
 800d79c:	4630      	mov	r0, r6
 800d79e:	e79e      	b.n	800d6de <_strtol_l.constprop.0+0x16>
 800d7a0:	b107      	cbz	r7, 800d7a4 <_strtol_l.constprop.0+0xdc>
 800d7a2:	4276      	negs	r6, r6
 800d7a4:	2a00      	cmp	r2, #0
 800d7a6:	d0f9      	beq.n	800d79c <_strtol_l.constprop.0+0xd4>
 800d7a8:	f1bc 0f00 	cmp.w	ip, #0
 800d7ac:	d000      	beq.n	800d7b0 <_strtol_l.constprop.0+0xe8>
 800d7ae:	1e69      	subs	r1, r5, #1
 800d7b0:	6011      	str	r1, [r2, #0]
 800d7b2:	e7f3      	b.n	800d79c <_strtol_l.constprop.0+0xd4>
 800d7b4:	2430      	movs	r4, #48	; 0x30
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1b1      	bne.n	800d71e <_strtol_l.constprop.0+0x56>
 800d7ba:	2308      	movs	r3, #8
 800d7bc:	e7af      	b.n	800d71e <_strtol_l.constprop.0+0x56>
 800d7be:	2c30      	cmp	r4, #48	; 0x30
 800d7c0:	d0a5      	beq.n	800d70e <_strtol_l.constprop.0+0x46>
 800d7c2:	230a      	movs	r3, #10
 800d7c4:	e7ab      	b.n	800d71e <_strtol_l.constprop.0+0x56>
 800d7c6:	bf00      	nop
 800d7c8:	0805ae21 	.word	0x0805ae21

0800d7cc <_strtol_r>:
 800d7cc:	f7ff bf7c 	b.w	800d6c8 <_strtol_l.constprop.0>

0800d7d0 <__swbuf_r>:
 800d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d2:	460e      	mov	r6, r1
 800d7d4:	4614      	mov	r4, r2
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	b118      	cbz	r0, 800d7e2 <__swbuf_r+0x12>
 800d7da:	6983      	ldr	r3, [r0, #24]
 800d7dc:	b90b      	cbnz	r3, 800d7e2 <__swbuf_r+0x12>
 800d7de:	f001 f859 	bl	800e894 <__sinit>
 800d7e2:	4b21      	ldr	r3, [pc, #132]	; (800d868 <__swbuf_r+0x98>)
 800d7e4:	429c      	cmp	r4, r3
 800d7e6:	d12b      	bne.n	800d840 <__swbuf_r+0x70>
 800d7e8:	686c      	ldr	r4, [r5, #4]
 800d7ea:	69a3      	ldr	r3, [r4, #24]
 800d7ec:	60a3      	str	r3, [r4, #8]
 800d7ee:	89a3      	ldrh	r3, [r4, #12]
 800d7f0:	071a      	lsls	r2, r3, #28
 800d7f2:	d52f      	bpl.n	800d854 <__swbuf_r+0x84>
 800d7f4:	6923      	ldr	r3, [r4, #16]
 800d7f6:	b36b      	cbz	r3, 800d854 <__swbuf_r+0x84>
 800d7f8:	6923      	ldr	r3, [r4, #16]
 800d7fa:	6820      	ldr	r0, [r4, #0]
 800d7fc:	1ac0      	subs	r0, r0, r3
 800d7fe:	6963      	ldr	r3, [r4, #20]
 800d800:	b2f6      	uxtb	r6, r6
 800d802:	4283      	cmp	r3, r0
 800d804:	4637      	mov	r7, r6
 800d806:	dc04      	bgt.n	800d812 <__swbuf_r+0x42>
 800d808:	4621      	mov	r1, r4
 800d80a:	4628      	mov	r0, r5
 800d80c:	f000 ffae 	bl	800e76c <_fflush_r>
 800d810:	bb30      	cbnz	r0, 800d860 <__swbuf_r+0x90>
 800d812:	68a3      	ldr	r3, [r4, #8]
 800d814:	3b01      	subs	r3, #1
 800d816:	60a3      	str	r3, [r4, #8]
 800d818:	6823      	ldr	r3, [r4, #0]
 800d81a:	1c5a      	adds	r2, r3, #1
 800d81c:	6022      	str	r2, [r4, #0]
 800d81e:	701e      	strb	r6, [r3, #0]
 800d820:	6963      	ldr	r3, [r4, #20]
 800d822:	3001      	adds	r0, #1
 800d824:	4283      	cmp	r3, r0
 800d826:	d004      	beq.n	800d832 <__swbuf_r+0x62>
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	07db      	lsls	r3, r3, #31
 800d82c:	d506      	bpl.n	800d83c <__swbuf_r+0x6c>
 800d82e:	2e0a      	cmp	r6, #10
 800d830:	d104      	bne.n	800d83c <__swbuf_r+0x6c>
 800d832:	4621      	mov	r1, r4
 800d834:	4628      	mov	r0, r5
 800d836:	f000 ff99 	bl	800e76c <_fflush_r>
 800d83a:	b988      	cbnz	r0, 800d860 <__swbuf_r+0x90>
 800d83c:	4638      	mov	r0, r7
 800d83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d840:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <__swbuf_r+0x9c>)
 800d842:	429c      	cmp	r4, r3
 800d844:	d101      	bne.n	800d84a <__swbuf_r+0x7a>
 800d846:	68ac      	ldr	r4, [r5, #8]
 800d848:	e7cf      	b.n	800d7ea <__swbuf_r+0x1a>
 800d84a:	4b09      	ldr	r3, [pc, #36]	; (800d870 <__swbuf_r+0xa0>)
 800d84c:	429c      	cmp	r4, r3
 800d84e:	bf08      	it	eq
 800d850:	68ec      	ldreq	r4, [r5, #12]
 800d852:	e7ca      	b.n	800d7ea <__swbuf_r+0x1a>
 800d854:	4621      	mov	r1, r4
 800d856:	4628      	mov	r0, r5
 800d858:	f000 f80c 	bl	800d874 <__swsetup_r>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d0cb      	beq.n	800d7f8 <__swbuf_r+0x28>
 800d860:	f04f 37ff 	mov.w	r7, #4294967295
 800d864:	e7ea      	b.n	800d83c <__swbuf_r+0x6c>
 800d866:	bf00      	nop
 800d868:	0805afd4 	.word	0x0805afd4
 800d86c:	0805aff4 	.word	0x0805aff4
 800d870:	0805afb4 	.word	0x0805afb4

0800d874 <__swsetup_r>:
 800d874:	4b32      	ldr	r3, [pc, #200]	; (800d940 <__swsetup_r+0xcc>)
 800d876:	b570      	push	{r4, r5, r6, lr}
 800d878:	681d      	ldr	r5, [r3, #0]
 800d87a:	4606      	mov	r6, r0
 800d87c:	460c      	mov	r4, r1
 800d87e:	b125      	cbz	r5, 800d88a <__swsetup_r+0x16>
 800d880:	69ab      	ldr	r3, [r5, #24]
 800d882:	b913      	cbnz	r3, 800d88a <__swsetup_r+0x16>
 800d884:	4628      	mov	r0, r5
 800d886:	f001 f805 	bl	800e894 <__sinit>
 800d88a:	4b2e      	ldr	r3, [pc, #184]	; (800d944 <__swsetup_r+0xd0>)
 800d88c:	429c      	cmp	r4, r3
 800d88e:	d10f      	bne.n	800d8b0 <__swsetup_r+0x3c>
 800d890:	686c      	ldr	r4, [r5, #4]
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d898:	0719      	lsls	r1, r3, #28
 800d89a:	d42c      	bmi.n	800d8f6 <__swsetup_r+0x82>
 800d89c:	06dd      	lsls	r5, r3, #27
 800d89e:	d411      	bmi.n	800d8c4 <__swsetup_r+0x50>
 800d8a0:	2309      	movs	r3, #9
 800d8a2:	6033      	str	r3, [r6, #0]
 800d8a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8a8:	81a3      	strh	r3, [r4, #12]
 800d8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ae:	e03e      	b.n	800d92e <__swsetup_r+0xba>
 800d8b0:	4b25      	ldr	r3, [pc, #148]	; (800d948 <__swsetup_r+0xd4>)
 800d8b2:	429c      	cmp	r4, r3
 800d8b4:	d101      	bne.n	800d8ba <__swsetup_r+0x46>
 800d8b6:	68ac      	ldr	r4, [r5, #8]
 800d8b8:	e7eb      	b.n	800d892 <__swsetup_r+0x1e>
 800d8ba:	4b24      	ldr	r3, [pc, #144]	; (800d94c <__swsetup_r+0xd8>)
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	bf08      	it	eq
 800d8c0:	68ec      	ldreq	r4, [r5, #12]
 800d8c2:	e7e6      	b.n	800d892 <__swsetup_r+0x1e>
 800d8c4:	0758      	lsls	r0, r3, #29
 800d8c6:	d512      	bpl.n	800d8ee <__swsetup_r+0x7a>
 800d8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8ca:	b141      	cbz	r1, 800d8de <__swsetup_r+0x6a>
 800d8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8d0:	4299      	cmp	r1, r3
 800d8d2:	d002      	beq.n	800d8da <__swsetup_r+0x66>
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f7fd ffdb 	bl	800b890 <_free_r>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6363      	str	r3, [r4, #52]	; 0x34
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	6063      	str	r3, [r4, #4]
 800d8ea:	6923      	ldr	r3, [r4, #16]
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	89a3      	ldrh	r3, [r4, #12]
 800d8f0:	f043 0308 	orr.w	r3, r3, #8
 800d8f4:	81a3      	strh	r3, [r4, #12]
 800d8f6:	6923      	ldr	r3, [r4, #16]
 800d8f8:	b94b      	cbnz	r3, 800d90e <__swsetup_r+0x9a>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d904:	d003      	beq.n	800d90e <__swsetup_r+0x9a>
 800d906:	4621      	mov	r1, r4
 800d908:	4630      	mov	r0, r6
 800d90a:	f001 fbfb 	bl	800f104 <__smakebuf_r>
 800d90e:	89a0      	ldrh	r0, [r4, #12]
 800d910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d914:	f010 0301 	ands.w	r3, r0, #1
 800d918:	d00a      	beq.n	800d930 <__swsetup_r+0xbc>
 800d91a:	2300      	movs	r3, #0
 800d91c:	60a3      	str	r3, [r4, #8]
 800d91e:	6963      	ldr	r3, [r4, #20]
 800d920:	425b      	negs	r3, r3
 800d922:	61a3      	str	r3, [r4, #24]
 800d924:	6923      	ldr	r3, [r4, #16]
 800d926:	b943      	cbnz	r3, 800d93a <__swsetup_r+0xc6>
 800d928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d92c:	d1ba      	bne.n	800d8a4 <__swsetup_r+0x30>
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	0781      	lsls	r1, r0, #30
 800d932:	bf58      	it	pl
 800d934:	6963      	ldrpl	r3, [r4, #20]
 800d936:	60a3      	str	r3, [r4, #8]
 800d938:	e7f4      	b.n	800d924 <__swsetup_r+0xb0>
 800d93a:	2000      	movs	r0, #0
 800d93c:	e7f7      	b.n	800d92e <__swsetup_r+0xba>
 800d93e:	bf00      	nop
 800d940:	20000e48 	.word	0x20000e48
 800d944:	0805afd4 	.word	0x0805afd4
 800d948:	0805aff4 	.word	0x0805aff4
 800d94c:	0805afb4 	.word	0x0805afb4

0800d950 <abort>:
 800d950:	b508      	push	{r3, lr}
 800d952:	2006      	movs	r0, #6
 800d954:	f002 fae0 	bl	800ff18 <raise>
 800d958:	2001      	movs	r0, #1
 800d95a:	f004 fc01 	bl	8012160 <_exit>

0800d95e <quorem>:
 800d95e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d962:	6903      	ldr	r3, [r0, #16]
 800d964:	690c      	ldr	r4, [r1, #16]
 800d966:	42a3      	cmp	r3, r4
 800d968:	4607      	mov	r7, r0
 800d96a:	f2c0 8081 	blt.w	800da70 <quorem+0x112>
 800d96e:	3c01      	subs	r4, #1
 800d970:	f101 0814 	add.w	r8, r1, #20
 800d974:	f100 0514 	add.w	r5, r0, #20
 800d978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d986:	3301      	adds	r3, #1
 800d988:	429a      	cmp	r2, r3
 800d98a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d98e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d992:	fbb2 f6f3 	udiv	r6, r2, r3
 800d996:	d331      	bcc.n	800d9fc <quorem+0x9e>
 800d998:	f04f 0e00 	mov.w	lr, #0
 800d99c:	4640      	mov	r0, r8
 800d99e:	46ac      	mov	ip, r5
 800d9a0:	46f2      	mov	sl, lr
 800d9a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9a6:	b293      	uxth	r3, r2
 800d9a8:	fb06 e303 	mla	r3, r6, r3, lr
 800d9ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	ebaa 0303 	sub.w	r3, sl, r3
 800d9b6:	f8dc a000 	ldr.w	sl, [ip]
 800d9ba:	0c12      	lsrs	r2, r2, #16
 800d9bc:	fa13 f38a 	uxtah	r3, r3, sl
 800d9c0:	fb06 e202 	mla	r2, r6, r2, lr
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	9b00      	ldr	r3, [sp, #0]
 800d9c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9cc:	b292      	uxth	r2, r2
 800d9ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d9d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9d6:	f8bd 3000 	ldrh.w	r3, [sp]
 800d9da:	4581      	cmp	r9, r0
 800d9dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9e0:	f84c 3b04 	str.w	r3, [ip], #4
 800d9e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9e8:	d2db      	bcs.n	800d9a2 <quorem+0x44>
 800d9ea:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9ee:	b92b      	cbnz	r3, 800d9fc <quorem+0x9e>
 800d9f0:	9b01      	ldr	r3, [sp, #4]
 800d9f2:	3b04      	subs	r3, #4
 800d9f4:	429d      	cmp	r5, r3
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	d32e      	bcc.n	800da58 <quorem+0xfa>
 800d9fa:	613c      	str	r4, [r7, #16]
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	f001 fec5 	bl	800f78c <__mcmp>
 800da02:	2800      	cmp	r0, #0
 800da04:	db24      	blt.n	800da50 <quorem+0xf2>
 800da06:	3601      	adds	r6, #1
 800da08:	4628      	mov	r0, r5
 800da0a:	f04f 0c00 	mov.w	ip, #0
 800da0e:	f858 2b04 	ldr.w	r2, [r8], #4
 800da12:	f8d0 e000 	ldr.w	lr, [r0]
 800da16:	b293      	uxth	r3, r2
 800da18:	ebac 0303 	sub.w	r3, ip, r3
 800da1c:	0c12      	lsrs	r2, r2, #16
 800da1e:	fa13 f38e 	uxtah	r3, r3, lr
 800da22:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da30:	45c1      	cmp	r9, r8
 800da32:	f840 3b04 	str.w	r3, [r0], #4
 800da36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da3a:	d2e8      	bcs.n	800da0e <quorem+0xb0>
 800da3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da44:	b922      	cbnz	r2, 800da50 <quorem+0xf2>
 800da46:	3b04      	subs	r3, #4
 800da48:	429d      	cmp	r5, r3
 800da4a:	461a      	mov	r2, r3
 800da4c:	d30a      	bcc.n	800da64 <quorem+0x106>
 800da4e:	613c      	str	r4, [r7, #16]
 800da50:	4630      	mov	r0, r6
 800da52:	b003      	add	sp, #12
 800da54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da58:	6812      	ldr	r2, [r2, #0]
 800da5a:	3b04      	subs	r3, #4
 800da5c:	2a00      	cmp	r2, #0
 800da5e:	d1cc      	bne.n	800d9fa <quorem+0x9c>
 800da60:	3c01      	subs	r4, #1
 800da62:	e7c7      	b.n	800d9f4 <quorem+0x96>
 800da64:	6812      	ldr	r2, [r2, #0]
 800da66:	3b04      	subs	r3, #4
 800da68:	2a00      	cmp	r2, #0
 800da6a:	d1f0      	bne.n	800da4e <quorem+0xf0>
 800da6c:	3c01      	subs	r4, #1
 800da6e:	e7eb      	b.n	800da48 <quorem+0xea>
 800da70:	2000      	movs	r0, #0
 800da72:	e7ee      	b.n	800da52 <quorem+0xf4>
 800da74:	0000      	movs	r0, r0
	...

0800da78 <_dtoa_r>:
 800da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7c:	ed2d 8b04 	vpush	{d8-d9}
 800da80:	ec57 6b10 	vmov	r6, r7, d0
 800da84:	b093      	sub	sp, #76	; 0x4c
 800da86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da8c:	9106      	str	r1, [sp, #24]
 800da8e:	ee10 aa10 	vmov	sl, s0
 800da92:	4604      	mov	r4, r0
 800da94:	9209      	str	r2, [sp, #36]	; 0x24
 800da96:	930c      	str	r3, [sp, #48]	; 0x30
 800da98:	46bb      	mov	fp, r7
 800da9a:	b975      	cbnz	r5, 800daba <_dtoa_r+0x42>
 800da9c:	2010      	movs	r0, #16
 800da9e:	f7fd fed9 	bl	800b854 <malloc>
 800daa2:	4602      	mov	r2, r0
 800daa4:	6260      	str	r0, [r4, #36]	; 0x24
 800daa6:	b920      	cbnz	r0, 800dab2 <_dtoa_r+0x3a>
 800daa8:	4ba7      	ldr	r3, [pc, #668]	; (800dd48 <_dtoa_r+0x2d0>)
 800daaa:	21ea      	movs	r1, #234	; 0xea
 800daac:	48a7      	ldr	r0, [pc, #668]	; (800dd4c <_dtoa_r+0x2d4>)
 800daae:	f7fd fe7d 	bl	800b7ac <__assert_func>
 800dab2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dab6:	6005      	str	r5, [r0, #0]
 800dab8:	60c5      	str	r5, [r0, #12]
 800daba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dabc:	6819      	ldr	r1, [r3, #0]
 800dabe:	b151      	cbz	r1, 800dad6 <_dtoa_r+0x5e>
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	604a      	str	r2, [r1, #4]
 800dac4:	2301      	movs	r3, #1
 800dac6:	4093      	lsls	r3, r2
 800dac8:	608b      	str	r3, [r1, #8]
 800daca:	4620      	mov	r0, r4
 800dacc:	f001 fbd2 	bl	800f274 <_Bfree>
 800dad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dad2:	2200      	movs	r2, #0
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	1e3b      	subs	r3, r7, #0
 800dad8:	bfaa      	itet	ge
 800dada:	2300      	movge	r3, #0
 800dadc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dae0:	f8c8 3000 	strge.w	r3, [r8]
 800dae4:	4b9a      	ldr	r3, [pc, #616]	; (800dd50 <_dtoa_r+0x2d8>)
 800dae6:	bfbc      	itt	lt
 800dae8:	2201      	movlt	r2, #1
 800daea:	f8c8 2000 	strlt.w	r2, [r8]
 800daee:	ea33 030b 	bics.w	r3, r3, fp
 800daf2:	d11b      	bne.n	800db2c <_dtoa_r+0xb4>
 800daf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800dafa:	6013      	str	r3, [r2, #0]
 800dafc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db00:	4333      	orrs	r3, r6
 800db02:	f000 8592 	beq.w	800e62a <_dtoa_r+0xbb2>
 800db06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db08:	b963      	cbnz	r3, 800db24 <_dtoa_r+0xac>
 800db0a:	4b92      	ldr	r3, [pc, #584]	; (800dd54 <_dtoa_r+0x2dc>)
 800db0c:	e022      	b.n	800db54 <_dtoa_r+0xdc>
 800db0e:	4b92      	ldr	r3, [pc, #584]	; (800dd58 <_dtoa_r+0x2e0>)
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	3308      	adds	r3, #8
 800db14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db16:	6013      	str	r3, [r2, #0]
 800db18:	9801      	ldr	r0, [sp, #4]
 800db1a:	b013      	add	sp, #76	; 0x4c
 800db1c:	ecbd 8b04 	vpop	{d8-d9}
 800db20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db24:	4b8b      	ldr	r3, [pc, #556]	; (800dd54 <_dtoa_r+0x2dc>)
 800db26:	9301      	str	r3, [sp, #4]
 800db28:	3303      	adds	r3, #3
 800db2a:	e7f3      	b.n	800db14 <_dtoa_r+0x9c>
 800db2c:	2200      	movs	r2, #0
 800db2e:	2300      	movs	r3, #0
 800db30:	4650      	mov	r0, sl
 800db32:	4659      	mov	r1, fp
 800db34:	f7f2 ffd8 	bl	8000ae8 <__aeabi_dcmpeq>
 800db38:	ec4b ab19 	vmov	d9, sl, fp
 800db3c:	4680      	mov	r8, r0
 800db3e:	b158      	cbz	r0, 800db58 <_dtoa_r+0xe0>
 800db40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db42:	2301      	movs	r3, #1
 800db44:	6013      	str	r3, [r2, #0]
 800db46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f000 856b 	beq.w	800e624 <_dtoa_r+0xbac>
 800db4e:	4883      	ldr	r0, [pc, #524]	; (800dd5c <_dtoa_r+0x2e4>)
 800db50:	6018      	str	r0, [r3, #0]
 800db52:	1e43      	subs	r3, r0, #1
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	e7df      	b.n	800db18 <_dtoa_r+0xa0>
 800db58:	ec4b ab10 	vmov	d0, sl, fp
 800db5c:	aa10      	add	r2, sp, #64	; 0x40
 800db5e:	a911      	add	r1, sp, #68	; 0x44
 800db60:	4620      	mov	r0, r4
 800db62:	f001 ff35 	bl	800f9d0 <__d2b>
 800db66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800db6a:	ee08 0a10 	vmov	s16, r0
 800db6e:	2d00      	cmp	r5, #0
 800db70:	f000 8084 	beq.w	800dc7c <_dtoa_r+0x204>
 800db74:	ee19 3a90 	vmov	r3, s19
 800db78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800db80:	4656      	mov	r6, sl
 800db82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800db86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800db8e:	4b74      	ldr	r3, [pc, #464]	; (800dd60 <_dtoa_r+0x2e8>)
 800db90:	2200      	movs	r2, #0
 800db92:	4630      	mov	r0, r6
 800db94:	4639      	mov	r1, r7
 800db96:	f7f2 fb87 	bl	80002a8 <__aeabi_dsub>
 800db9a:	a365      	add	r3, pc, #404	; (adr r3, 800dd30 <_dtoa_r+0x2b8>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	f7f2 fd3a 	bl	8000618 <__aeabi_dmul>
 800dba4:	a364      	add	r3, pc, #400	; (adr r3, 800dd38 <_dtoa_r+0x2c0>)
 800dba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbaa:	f7f2 fb7f 	bl	80002ac <__adddf3>
 800dbae:	4606      	mov	r6, r0
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	460f      	mov	r7, r1
 800dbb4:	f7f2 fcc6 	bl	8000544 <__aeabi_i2d>
 800dbb8:	a361      	add	r3, pc, #388	; (adr r3, 800dd40 <_dtoa_r+0x2c8>)
 800dbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbe:	f7f2 fd2b 	bl	8000618 <__aeabi_dmul>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	4639      	mov	r1, r7
 800dbca:	f7f2 fb6f 	bl	80002ac <__adddf3>
 800dbce:	4606      	mov	r6, r0
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	f7f2 ffd1 	bl	8000b78 <__aeabi_d2iz>
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	9000      	str	r0, [sp, #0]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4630      	mov	r0, r6
 800dbde:	4639      	mov	r1, r7
 800dbe0:	f7f2 ff8c 	bl	8000afc <__aeabi_dcmplt>
 800dbe4:	b150      	cbz	r0, 800dbfc <_dtoa_r+0x184>
 800dbe6:	9800      	ldr	r0, [sp, #0]
 800dbe8:	f7f2 fcac 	bl	8000544 <__aeabi_i2d>
 800dbec:	4632      	mov	r2, r6
 800dbee:	463b      	mov	r3, r7
 800dbf0:	f7f2 ff7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbf4:	b910      	cbnz	r0, 800dbfc <_dtoa_r+0x184>
 800dbf6:	9b00      	ldr	r3, [sp, #0]
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	9b00      	ldr	r3, [sp, #0]
 800dbfe:	2b16      	cmp	r3, #22
 800dc00:	d85a      	bhi.n	800dcb8 <_dtoa_r+0x240>
 800dc02:	9a00      	ldr	r2, [sp, #0]
 800dc04:	4b57      	ldr	r3, [pc, #348]	; (800dd64 <_dtoa_r+0x2ec>)
 800dc06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	ec51 0b19 	vmov	r0, r1, d9
 800dc12:	f7f2 ff73 	bl	8000afc <__aeabi_dcmplt>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d050      	beq.n	800dcbc <_dtoa_r+0x244>
 800dc1a:	9b00      	ldr	r3, [sp, #0]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	2300      	movs	r3, #0
 800dc22:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc26:	1b5d      	subs	r5, r3, r5
 800dc28:	1e6b      	subs	r3, r5, #1
 800dc2a:	9305      	str	r3, [sp, #20]
 800dc2c:	bf45      	ittet	mi
 800dc2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800dc32:	9304      	strmi	r3, [sp, #16]
 800dc34:	2300      	movpl	r3, #0
 800dc36:	2300      	movmi	r3, #0
 800dc38:	bf4c      	ite	mi
 800dc3a:	9305      	strmi	r3, [sp, #20]
 800dc3c:	9304      	strpl	r3, [sp, #16]
 800dc3e:	9b00      	ldr	r3, [sp, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	db3d      	blt.n	800dcc0 <_dtoa_r+0x248>
 800dc44:	9b05      	ldr	r3, [sp, #20]
 800dc46:	9a00      	ldr	r2, [sp, #0]
 800dc48:	920a      	str	r2, [sp, #40]	; 0x28
 800dc4a:	4413      	add	r3, r2
 800dc4c:	9305      	str	r3, [sp, #20]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	9307      	str	r3, [sp, #28]
 800dc52:	9b06      	ldr	r3, [sp, #24]
 800dc54:	2b09      	cmp	r3, #9
 800dc56:	f200 8089 	bhi.w	800dd6c <_dtoa_r+0x2f4>
 800dc5a:	2b05      	cmp	r3, #5
 800dc5c:	bfc4      	itt	gt
 800dc5e:	3b04      	subgt	r3, #4
 800dc60:	9306      	strgt	r3, [sp, #24]
 800dc62:	9b06      	ldr	r3, [sp, #24]
 800dc64:	f1a3 0302 	sub.w	r3, r3, #2
 800dc68:	bfcc      	ite	gt
 800dc6a:	2500      	movgt	r5, #0
 800dc6c:	2501      	movle	r5, #1
 800dc6e:	2b03      	cmp	r3, #3
 800dc70:	f200 8087 	bhi.w	800dd82 <_dtoa_r+0x30a>
 800dc74:	e8df f003 	tbb	[pc, r3]
 800dc78:	59383a2d 	.word	0x59383a2d
 800dc7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc80:	441d      	add	r5, r3
 800dc82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc86:	2b20      	cmp	r3, #32
 800dc88:	bfc1      	itttt	gt
 800dc8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dc92:	fa0b f303 	lslgt.w	r3, fp, r3
 800dc96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dc9a:	bfda      	itte	le
 800dc9c:	f1c3 0320 	rsble	r3, r3, #32
 800dca0:	fa06 f003 	lslle.w	r0, r6, r3
 800dca4:	4318      	orrgt	r0, r3
 800dca6:	f7f2 fc3d 	bl	8000524 <__aeabi_ui2d>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	4606      	mov	r6, r0
 800dcae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dcb2:	3d01      	subs	r5, #1
 800dcb4:	930e      	str	r3, [sp, #56]	; 0x38
 800dcb6:	e76a      	b.n	800db8e <_dtoa_r+0x116>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e7b2      	b.n	800dc22 <_dtoa_r+0x1aa>
 800dcbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcbe:	e7b1      	b.n	800dc24 <_dtoa_r+0x1ac>
 800dcc0:	9b04      	ldr	r3, [sp, #16]
 800dcc2:	9a00      	ldr	r2, [sp, #0]
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	9304      	str	r3, [sp, #16]
 800dcc8:	4253      	negs	r3, r2
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	2300      	movs	r3, #0
 800dcce:	930a      	str	r3, [sp, #40]	; 0x28
 800dcd0:	e7bf      	b.n	800dc52 <_dtoa_r+0x1da>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9308      	str	r3, [sp, #32]
 800dcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	dc55      	bgt.n	800dd88 <_dtoa_r+0x310>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dce2:	461a      	mov	r2, r3
 800dce4:	9209      	str	r2, [sp, #36]	; 0x24
 800dce6:	e00c      	b.n	800dd02 <_dtoa_r+0x28a>
 800dce8:	2301      	movs	r3, #1
 800dcea:	e7f3      	b.n	800dcd4 <_dtoa_r+0x25c>
 800dcec:	2300      	movs	r3, #0
 800dcee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcf0:	9308      	str	r3, [sp, #32]
 800dcf2:	9b00      	ldr	r3, [sp, #0]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	9302      	str	r3, [sp, #8]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	9303      	str	r3, [sp, #12]
 800dcfe:	bfb8      	it	lt
 800dd00:	2301      	movlt	r3, #1
 800dd02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dd04:	2200      	movs	r2, #0
 800dd06:	6042      	str	r2, [r0, #4]
 800dd08:	2204      	movs	r2, #4
 800dd0a:	f102 0614 	add.w	r6, r2, #20
 800dd0e:	429e      	cmp	r6, r3
 800dd10:	6841      	ldr	r1, [r0, #4]
 800dd12:	d93d      	bls.n	800dd90 <_dtoa_r+0x318>
 800dd14:	4620      	mov	r0, r4
 800dd16:	f001 fa6d 	bl	800f1f4 <_Balloc>
 800dd1a:	9001      	str	r0, [sp, #4]
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d13b      	bne.n	800dd98 <_dtoa_r+0x320>
 800dd20:	4b11      	ldr	r3, [pc, #68]	; (800dd68 <_dtoa_r+0x2f0>)
 800dd22:	4602      	mov	r2, r0
 800dd24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd28:	e6c0      	b.n	800daac <_dtoa_r+0x34>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e7df      	b.n	800dcee <_dtoa_r+0x276>
 800dd2e:	bf00      	nop
 800dd30:	636f4361 	.word	0x636f4361
 800dd34:	3fd287a7 	.word	0x3fd287a7
 800dd38:	8b60c8b3 	.word	0x8b60c8b3
 800dd3c:	3fc68a28 	.word	0x3fc68a28
 800dd40:	509f79fb 	.word	0x509f79fb
 800dd44:	3fd34413 	.word	0x3fd34413
 800dd48:	0805af2e 	.word	0x0805af2e
 800dd4c:	0805af45 	.word	0x0805af45
 800dd50:	7ff00000 	.word	0x7ff00000
 800dd54:	0805af2a 	.word	0x0805af2a
 800dd58:	0805af21 	.word	0x0805af21
 800dd5c:	0805ada6 	.word	0x0805ada6
 800dd60:	3ff80000 	.word	0x3ff80000
 800dd64:	0805b118 	.word	0x0805b118
 800dd68:	0805afa0 	.word	0x0805afa0
 800dd6c:	2501      	movs	r5, #1
 800dd6e:	2300      	movs	r3, #0
 800dd70:	9306      	str	r3, [sp, #24]
 800dd72:	9508      	str	r5, [sp, #32]
 800dd74:	f04f 33ff 	mov.w	r3, #4294967295
 800dd78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	2312      	movs	r3, #18
 800dd80:	e7b0      	b.n	800dce4 <_dtoa_r+0x26c>
 800dd82:	2301      	movs	r3, #1
 800dd84:	9308      	str	r3, [sp, #32]
 800dd86:	e7f5      	b.n	800dd74 <_dtoa_r+0x2fc>
 800dd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd8e:	e7b8      	b.n	800dd02 <_dtoa_r+0x28a>
 800dd90:	3101      	adds	r1, #1
 800dd92:	6041      	str	r1, [r0, #4]
 800dd94:	0052      	lsls	r2, r2, #1
 800dd96:	e7b8      	b.n	800dd0a <_dtoa_r+0x292>
 800dd98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd9a:	9a01      	ldr	r2, [sp, #4]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	2b0e      	cmp	r3, #14
 800dda2:	f200 809d 	bhi.w	800dee0 <_dtoa_r+0x468>
 800dda6:	2d00      	cmp	r5, #0
 800dda8:	f000 809a 	beq.w	800dee0 <_dtoa_r+0x468>
 800ddac:	9b00      	ldr	r3, [sp, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	dd32      	ble.n	800de18 <_dtoa_r+0x3a0>
 800ddb2:	4ab7      	ldr	r2, [pc, #732]	; (800e090 <_dtoa_r+0x618>)
 800ddb4:	f003 030f 	and.w	r3, r3, #15
 800ddb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ddbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddc0:	9b00      	ldr	r3, [sp, #0]
 800ddc2:	05d8      	lsls	r0, r3, #23
 800ddc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ddc8:	d516      	bpl.n	800ddf8 <_dtoa_r+0x380>
 800ddca:	4bb2      	ldr	r3, [pc, #712]	; (800e094 <_dtoa_r+0x61c>)
 800ddcc:	ec51 0b19 	vmov	r0, r1, d9
 800ddd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddd4:	f7f2 fd4a 	bl	800086c <__aeabi_ddiv>
 800ddd8:	f007 070f 	and.w	r7, r7, #15
 800dddc:	4682      	mov	sl, r0
 800ddde:	468b      	mov	fp, r1
 800dde0:	2503      	movs	r5, #3
 800dde2:	4eac      	ldr	r6, [pc, #688]	; (800e094 <_dtoa_r+0x61c>)
 800dde4:	b957      	cbnz	r7, 800ddfc <_dtoa_r+0x384>
 800dde6:	4642      	mov	r2, r8
 800dde8:	464b      	mov	r3, r9
 800ddea:	4650      	mov	r0, sl
 800ddec:	4659      	mov	r1, fp
 800ddee:	f7f2 fd3d 	bl	800086c <__aeabi_ddiv>
 800ddf2:	4682      	mov	sl, r0
 800ddf4:	468b      	mov	fp, r1
 800ddf6:	e028      	b.n	800de4a <_dtoa_r+0x3d2>
 800ddf8:	2502      	movs	r5, #2
 800ddfa:	e7f2      	b.n	800dde2 <_dtoa_r+0x36a>
 800ddfc:	07f9      	lsls	r1, r7, #31
 800ddfe:	d508      	bpl.n	800de12 <_dtoa_r+0x39a>
 800de00:	4640      	mov	r0, r8
 800de02:	4649      	mov	r1, r9
 800de04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de08:	f7f2 fc06 	bl	8000618 <__aeabi_dmul>
 800de0c:	3501      	adds	r5, #1
 800de0e:	4680      	mov	r8, r0
 800de10:	4689      	mov	r9, r1
 800de12:	107f      	asrs	r7, r7, #1
 800de14:	3608      	adds	r6, #8
 800de16:	e7e5      	b.n	800dde4 <_dtoa_r+0x36c>
 800de18:	f000 809b 	beq.w	800df52 <_dtoa_r+0x4da>
 800de1c:	9b00      	ldr	r3, [sp, #0]
 800de1e:	4f9d      	ldr	r7, [pc, #628]	; (800e094 <_dtoa_r+0x61c>)
 800de20:	425e      	negs	r6, r3
 800de22:	4b9b      	ldr	r3, [pc, #620]	; (800e090 <_dtoa_r+0x618>)
 800de24:	f006 020f 	and.w	r2, r6, #15
 800de28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	ec51 0b19 	vmov	r0, r1, d9
 800de34:	f7f2 fbf0 	bl	8000618 <__aeabi_dmul>
 800de38:	1136      	asrs	r6, r6, #4
 800de3a:	4682      	mov	sl, r0
 800de3c:	468b      	mov	fp, r1
 800de3e:	2300      	movs	r3, #0
 800de40:	2502      	movs	r5, #2
 800de42:	2e00      	cmp	r6, #0
 800de44:	d17a      	bne.n	800df3c <_dtoa_r+0x4c4>
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1d3      	bne.n	800ddf2 <_dtoa_r+0x37a>
 800de4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f000 8082 	beq.w	800df56 <_dtoa_r+0x4de>
 800de52:	4b91      	ldr	r3, [pc, #580]	; (800e098 <_dtoa_r+0x620>)
 800de54:	2200      	movs	r2, #0
 800de56:	4650      	mov	r0, sl
 800de58:	4659      	mov	r1, fp
 800de5a:	f7f2 fe4f 	bl	8000afc <__aeabi_dcmplt>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d079      	beq.n	800df56 <_dtoa_r+0x4de>
 800de62:	9b03      	ldr	r3, [sp, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d076      	beq.n	800df56 <_dtoa_r+0x4de>
 800de68:	9b02      	ldr	r3, [sp, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	dd36      	ble.n	800dedc <_dtoa_r+0x464>
 800de6e:	9b00      	ldr	r3, [sp, #0]
 800de70:	4650      	mov	r0, sl
 800de72:	4659      	mov	r1, fp
 800de74:	1e5f      	subs	r7, r3, #1
 800de76:	2200      	movs	r2, #0
 800de78:	4b88      	ldr	r3, [pc, #544]	; (800e09c <_dtoa_r+0x624>)
 800de7a:	f7f2 fbcd 	bl	8000618 <__aeabi_dmul>
 800de7e:	9e02      	ldr	r6, [sp, #8]
 800de80:	4682      	mov	sl, r0
 800de82:	468b      	mov	fp, r1
 800de84:	3501      	adds	r5, #1
 800de86:	4628      	mov	r0, r5
 800de88:	f7f2 fb5c 	bl	8000544 <__aeabi_i2d>
 800de8c:	4652      	mov	r2, sl
 800de8e:	465b      	mov	r3, fp
 800de90:	f7f2 fbc2 	bl	8000618 <__aeabi_dmul>
 800de94:	4b82      	ldr	r3, [pc, #520]	; (800e0a0 <_dtoa_r+0x628>)
 800de96:	2200      	movs	r2, #0
 800de98:	f7f2 fa08 	bl	80002ac <__adddf3>
 800de9c:	46d0      	mov	r8, sl
 800de9e:	46d9      	mov	r9, fp
 800dea0:	4682      	mov	sl, r0
 800dea2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dea6:	2e00      	cmp	r6, #0
 800dea8:	d158      	bne.n	800df5c <_dtoa_r+0x4e4>
 800deaa:	4b7e      	ldr	r3, [pc, #504]	; (800e0a4 <_dtoa_r+0x62c>)
 800deac:	2200      	movs	r2, #0
 800deae:	4640      	mov	r0, r8
 800deb0:	4649      	mov	r1, r9
 800deb2:	f7f2 f9f9 	bl	80002a8 <__aeabi_dsub>
 800deb6:	4652      	mov	r2, sl
 800deb8:	465b      	mov	r3, fp
 800deba:	4680      	mov	r8, r0
 800debc:	4689      	mov	r9, r1
 800debe:	f7f2 fe3b 	bl	8000b38 <__aeabi_dcmpgt>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	f040 8295 	bne.w	800e3f2 <_dtoa_r+0x97a>
 800dec8:	4652      	mov	r2, sl
 800deca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dece:	4640      	mov	r0, r8
 800ded0:	4649      	mov	r1, r9
 800ded2:	f7f2 fe13 	bl	8000afc <__aeabi_dcmplt>
 800ded6:	2800      	cmp	r0, #0
 800ded8:	f040 8289 	bne.w	800e3ee <_dtoa_r+0x976>
 800dedc:	ec5b ab19 	vmov	sl, fp, d9
 800dee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f2c0 8148 	blt.w	800e178 <_dtoa_r+0x700>
 800dee8:	9a00      	ldr	r2, [sp, #0]
 800deea:	2a0e      	cmp	r2, #14
 800deec:	f300 8144 	bgt.w	800e178 <_dtoa_r+0x700>
 800def0:	4b67      	ldr	r3, [pc, #412]	; (800e090 <_dtoa_r+0x618>)
 800def2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800def6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800defa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defc:	2b00      	cmp	r3, #0
 800defe:	f280 80d5 	bge.w	800e0ac <_dtoa_r+0x634>
 800df02:	9b03      	ldr	r3, [sp, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f300 80d1 	bgt.w	800e0ac <_dtoa_r+0x634>
 800df0a:	f040 826f 	bne.w	800e3ec <_dtoa_r+0x974>
 800df0e:	4b65      	ldr	r3, [pc, #404]	; (800e0a4 <_dtoa_r+0x62c>)
 800df10:	2200      	movs	r2, #0
 800df12:	4640      	mov	r0, r8
 800df14:	4649      	mov	r1, r9
 800df16:	f7f2 fb7f 	bl	8000618 <__aeabi_dmul>
 800df1a:	4652      	mov	r2, sl
 800df1c:	465b      	mov	r3, fp
 800df1e:	f7f2 fe01 	bl	8000b24 <__aeabi_dcmpge>
 800df22:	9e03      	ldr	r6, [sp, #12]
 800df24:	4637      	mov	r7, r6
 800df26:	2800      	cmp	r0, #0
 800df28:	f040 8245 	bne.w	800e3b6 <_dtoa_r+0x93e>
 800df2c:	9d01      	ldr	r5, [sp, #4]
 800df2e:	2331      	movs	r3, #49	; 0x31
 800df30:	f805 3b01 	strb.w	r3, [r5], #1
 800df34:	9b00      	ldr	r3, [sp, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	e240      	b.n	800e3be <_dtoa_r+0x946>
 800df3c:	07f2      	lsls	r2, r6, #31
 800df3e:	d505      	bpl.n	800df4c <_dtoa_r+0x4d4>
 800df40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df44:	f7f2 fb68 	bl	8000618 <__aeabi_dmul>
 800df48:	3501      	adds	r5, #1
 800df4a:	2301      	movs	r3, #1
 800df4c:	1076      	asrs	r6, r6, #1
 800df4e:	3708      	adds	r7, #8
 800df50:	e777      	b.n	800de42 <_dtoa_r+0x3ca>
 800df52:	2502      	movs	r5, #2
 800df54:	e779      	b.n	800de4a <_dtoa_r+0x3d2>
 800df56:	9f00      	ldr	r7, [sp, #0]
 800df58:	9e03      	ldr	r6, [sp, #12]
 800df5a:	e794      	b.n	800de86 <_dtoa_r+0x40e>
 800df5c:	9901      	ldr	r1, [sp, #4]
 800df5e:	4b4c      	ldr	r3, [pc, #304]	; (800e090 <_dtoa_r+0x618>)
 800df60:	4431      	add	r1, r6
 800df62:	910d      	str	r1, [sp, #52]	; 0x34
 800df64:	9908      	ldr	r1, [sp, #32]
 800df66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df6e:	2900      	cmp	r1, #0
 800df70:	d043      	beq.n	800dffa <_dtoa_r+0x582>
 800df72:	494d      	ldr	r1, [pc, #308]	; (800e0a8 <_dtoa_r+0x630>)
 800df74:	2000      	movs	r0, #0
 800df76:	f7f2 fc79 	bl	800086c <__aeabi_ddiv>
 800df7a:	4652      	mov	r2, sl
 800df7c:	465b      	mov	r3, fp
 800df7e:	f7f2 f993 	bl	80002a8 <__aeabi_dsub>
 800df82:	9d01      	ldr	r5, [sp, #4]
 800df84:	4682      	mov	sl, r0
 800df86:	468b      	mov	fp, r1
 800df88:	4649      	mov	r1, r9
 800df8a:	4640      	mov	r0, r8
 800df8c:	f7f2 fdf4 	bl	8000b78 <__aeabi_d2iz>
 800df90:	4606      	mov	r6, r0
 800df92:	f7f2 fad7 	bl	8000544 <__aeabi_i2d>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4640      	mov	r0, r8
 800df9c:	4649      	mov	r1, r9
 800df9e:	f7f2 f983 	bl	80002a8 <__aeabi_dsub>
 800dfa2:	3630      	adds	r6, #48	; 0x30
 800dfa4:	f805 6b01 	strb.w	r6, [r5], #1
 800dfa8:	4652      	mov	r2, sl
 800dfaa:	465b      	mov	r3, fp
 800dfac:	4680      	mov	r8, r0
 800dfae:	4689      	mov	r9, r1
 800dfb0:	f7f2 fda4 	bl	8000afc <__aeabi_dcmplt>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d163      	bne.n	800e080 <_dtoa_r+0x608>
 800dfb8:	4642      	mov	r2, r8
 800dfba:	464b      	mov	r3, r9
 800dfbc:	4936      	ldr	r1, [pc, #216]	; (800e098 <_dtoa_r+0x620>)
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	f7f2 f972 	bl	80002a8 <__aeabi_dsub>
 800dfc4:	4652      	mov	r2, sl
 800dfc6:	465b      	mov	r3, fp
 800dfc8:	f7f2 fd98 	bl	8000afc <__aeabi_dcmplt>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	f040 80b5 	bne.w	800e13c <_dtoa_r+0x6c4>
 800dfd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfd4:	429d      	cmp	r5, r3
 800dfd6:	d081      	beq.n	800dedc <_dtoa_r+0x464>
 800dfd8:	4b30      	ldr	r3, [pc, #192]	; (800e09c <_dtoa_r+0x624>)
 800dfda:	2200      	movs	r2, #0
 800dfdc:	4650      	mov	r0, sl
 800dfde:	4659      	mov	r1, fp
 800dfe0:	f7f2 fb1a 	bl	8000618 <__aeabi_dmul>
 800dfe4:	4b2d      	ldr	r3, [pc, #180]	; (800e09c <_dtoa_r+0x624>)
 800dfe6:	4682      	mov	sl, r0
 800dfe8:	468b      	mov	fp, r1
 800dfea:	4640      	mov	r0, r8
 800dfec:	4649      	mov	r1, r9
 800dfee:	2200      	movs	r2, #0
 800dff0:	f7f2 fb12 	bl	8000618 <__aeabi_dmul>
 800dff4:	4680      	mov	r8, r0
 800dff6:	4689      	mov	r9, r1
 800dff8:	e7c6      	b.n	800df88 <_dtoa_r+0x510>
 800dffa:	4650      	mov	r0, sl
 800dffc:	4659      	mov	r1, fp
 800dffe:	f7f2 fb0b 	bl	8000618 <__aeabi_dmul>
 800e002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e004:	9d01      	ldr	r5, [sp, #4]
 800e006:	930f      	str	r3, [sp, #60]	; 0x3c
 800e008:	4682      	mov	sl, r0
 800e00a:	468b      	mov	fp, r1
 800e00c:	4649      	mov	r1, r9
 800e00e:	4640      	mov	r0, r8
 800e010:	f7f2 fdb2 	bl	8000b78 <__aeabi_d2iz>
 800e014:	4606      	mov	r6, r0
 800e016:	f7f2 fa95 	bl	8000544 <__aeabi_i2d>
 800e01a:	3630      	adds	r6, #48	; 0x30
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4640      	mov	r0, r8
 800e022:	4649      	mov	r1, r9
 800e024:	f7f2 f940 	bl	80002a8 <__aeabi_dsub>
 800e028:	f805 6b01 	strb.w	r6, [r5], #1
 800e02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e02e:	429d      	cmp	r5, r3
 800e030:	4680      	mov	r8, r0
 800e032:	4689      	mov	r9, r1
 800e034:	f04f 0200 	mov.w	r2, #0
 800e038:	d124      	bne.n	800e084 <_dtoa_r+0x60c>
 800e03a:	4b1b      	ldr	r3, [pc, #108]	; (800e0a8 <_dtoa_r+0x630>)
 800e03c:	4650      	mov	r0, sl
 800e03e:	4659      	mov	r1, fp
 800e040:	f7f2 f934 	bl	80002ac <__adddf3>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	4640      	mov	r0, r8
 800e04a:	4649      	mov	r1, r9
 800e04c:	f7f2 fd74 	bl	8000b38 <__aeabi_dcmpgt>
 800e050:	2800      	cmp	r0, #0
 800e052:	d173      	bne.n	800e13c <_dtoa_r+0x6c4>
 800e054:	4652      	mov	r2, sl
 800e056:	465b      	mov	r3, fp
 800e058:	4913      	ldr	r1, [pc, #76]	; (800e0a8 <_dtoa_r+0x630>)
 800e05a:	2000      	movs	r0, #0
 800e05c:	f7f2 f924 	bl	80002a8 <__aeabi_dsub>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	4640      	mov	r0, r8
 800e066:	4649      	mov	r1, r9
 800e068:	f7f2 fd48 	bl	8000afc <__aeabi_dcmplt>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	f43f af35 	beq.w	800dedc <_dtoa_r+0x464>
 800e072:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e074:	1e6b      	subs	r3, r5, #1
 800e076:	930f      	str	r3, [sp, #60]	; 0x3c
 800e078:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e07c:	2b30      	cmp	r3, #48	; 0x30
 800e07e:	d0f8      	beq.n	800e072 <_dtoa_r+0x5fa>
 800e080:	9700      	str	r7, [sp, #0]
 800e082:	e049      	b.n	800e118 <_dtoa_r+0x6a0>
 800e084:	4b05      	ldr	r3, [pc, #20]	; (800e09c <_dtoa_r+0x624>)
 800e086:	f7f2 fac7 	bl	8000618 <__aeabi_dmul>
 800e08a:	4680      	mov	r8, r0
 800e08c:	4689      	mov	r9, r1
 800e08e:	e7bd      	b.n	800e00c <_dtoa_r+0x594>
 800e090:	0805b118 	.word	0x0805b118
 800e094:	0805b0f0 	.word	0x0805b0f0
 800e098:	3ff00000 	.word	0x3ff00000
 800e09c:	40240000 	.word	0x40240000
 800e0a0:	401c0000 	.word	0x401c0000
 800e0a4:	40140000 	.word	0x40140000
 800e0a8:	3fe00000 	.word	0x3fe00000
 800e0ac:	9d01      	ldr	r5, [sp, #4]
 800e0ae:	4656      	mov	r6, sl
 800e0b0:	465f      	mov	r7, fp
 800e0b2:	4642      	mov	r2, r8
 800e0b4:	464b      	mov	r3, r9
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	4639      	mov	r1, r7
 800e0ba:	f7f2 fbd7 	bl	800086c <__aeabi_ddiv>
 800e0be:	f7f2 fd5b 	bl	8000b78 <__aeabi_d2iz>
 800e0c2:	4682      	mov	sl, r0
 800e0c4:	f7f2 fa3e 	bl	8000544 <__aeabi_i2d>
 800e0c8:	4642      	mov	r2, r8
 800e0ca:	464b      	mov	r3, r9
 800e0cc:	f7f2 faa4 	bl	8000618 <__aeabi_dmul>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	4630      	mov	r0, r6
 800e0d6:	4639      	mov	r1, r7
 800e0d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e0dc:	f7f2 f8e4 	bl	80002a8 <__aeabi_dsub>
 800e0e0:	f805 6b01 	strb.w	r6, [r5], #1
 800e0e4:	9e01      	ldr	r6, [sp, #4]
 800e0e6:	9f03      	ldr	r7, [sp, #12]
 800e0e8:	1bae      	subs	r6, r5, r6
 800e0ea:	42b7      	cmp	r7, r6
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	d135      	bne.n	800e15e <_dtoa_r+0x6e6>
 800e0f2:	f7f2 f8db 	bl	80002ac <__adddf3>
 800e0f6:	4642      	mov	r2, r8
 800e0f8:	464b      	mov	r3, r9
 800e0fa:	4606      	mov	r6, r0
 800e0fc:	460f      	mov	r7, r1
 800e0fe:	f7f2 fd1b 	bl	8000b38 <__aeabi_dcmpgt>
 800e102:	b9d0      	cbnz	r0, 800e13a <_dtoa_r+0x6c2>
 800e104:	4642      	mov	r2, r8
 800e106:	464b      	mov	r3, r9
 800e108:	4630      	mov	r0, r6
 800e10a:	4639      	mov	r1, r7
 800e10c:	f7f2 fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 800e110:	b110      	cbz	r0, 800e118 <_dtoa_r+0x6a0>
 800e112:	f01a 0f01 	tst.w	sl, #1
 800e116:	d110      	bne.n	800e13a <_dtoa_r+0x6c2>
 800e118:	4620      	mov	r0, r4
 800e11a:	ee18 1a10 	vmov	r1, s16
 800e11e:	f001 f8a9 	bl	800f274 <_Bfree>
 800e122:	2300      	movs	r3, #0
 800e124:	9800      	ldr	r0, [sp, #0]
 800e126:	702b      	strb	r3, [r5, #0]
 800e128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e12a:	3001      	adds	r0, #1
 800e12c:	6018      	str	r0, [r3, #0]
 800e12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e130:	2b00      	cmp	r3, #0
 800e132:	f43f acf1 	beq.w	800db18 <_dtoa_r+0xa0>
 800e136:	601d      	str	r5, [r3, #0]
 800e138:	e4ee      	b.n	800db18 <_dtoa_r+0xa0>
 800e13a:	9f00      	ldr	r7, [sp, #0]
 800e13c:	462b      	mov	r3, r5
 800e13e:	461d      	mov	r5, r3
 800e140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e144:	2a39      	cmp	r2, #57	; 0x39
 800e146:	d106      	bne.n	800e156 <_dtoa_r+0x6de>
 800e148:	9a01      	ldr	r2, [sp, #4]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d1f7      	bne.n	800e13e <_dtoa_r+0x6c6>
 800e14e:	9901      	ldr	r1, [sp, #4]
 800e150:	2230      	movs	r2, #48	; 0x30
 800e152:	3701      	adds	r7, #1
 800e154:	700a      	strb	r2, [r1, #0]
 800e156:	781a      	ldrb	r2, [r3, #0]
 800e158:	3201      	adds	r2, #1
 800e15a:	701a      	strb	r2, [r3, #0]
 800e15c:	e790      	b.n	800e080 <_dtoa_r+0x608>
 800e15e:	4ba6      	ldr	r3, [pc, #664]	; (800e3f8 <_dtoa_r+0x980>)
 800e160:	2200      	movs	r2, #0
 800e162:	f7f2 fa59 	bl	8000618 <__aeabi_dmul>
 800e166:	2200      	movs	r2, #0
 800e168:	2300      	movs	r3, #0
 800e16a:	4606      	mov	r6, r0
 800e16c:	460f      	mov	r7, r1
 800e16e:	f7f2 fcbb 	bl	8000ae8 <__aeabi_dcmpeq>
 800e172:	2800      	cmp	r0, #0
 800e174:	d09d      	beq.n	800e0b2 <_dtoa_r+0x63a>
 800e176:	e7cf      	b.n	800e118 <_dtoa_r+0x6a0>
 800e178:	9a08      	ldr	r2, [sp, #32]
 800e17a:	2a00      	cmp	r2, #0
 800e17c:	f000 80d7 	beq.w	800e32e <_dtoa_r+0x8b6>
 800e180:	9a06      	ldr	r2, [sp, #24]
 800e182:	2a01      	cmp	r2, #1
 800e184:	f300 80ba 	bgt.w	800e2fc <_dtoa_r+0x884>
 800e188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e18a:	2a00      	cmp	r2, #0
 800e18c:	f000 80b2 	beq.w	800e2f4 <_dtoa_r+0x87c>
 800e190:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e194:	9e07      	ldr	r6, [sp, #28]
 800e196:	9d04      	ldr	r5, [sp, #16]
 800e198:	9a04      	ldr	r2, [sp, #16]
 800e19a:	441a      	add	r2, r3
 800e19c:	9204      	str	r2, [sp, #16]
 800e19e:	9a05      	ldr	r2, [sp, #20]
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	441a      	add	r2, r3
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	9205      	str	r2, [sp, #20]
 800e1a8:	f001 f966 	bl	800f478 <__i2b>
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	2d00      	cmp	r5, #0
 800e1b0:	dd0c      	ble.n	800e1cc <_dtoa_r+0x754>
 800e1b2:	9b05      	ldr	r3, [sp, #20]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	dd09      	ble.n	800e1cc <_dtoa_r+0x754>
 800e1b8:	42ab      	cmp	r3, r5
 800e1ba:	9a04      	ldr	r2, [sp, #16]
 800e1bc:	bfa8      	it	ge
 800e1be:	462b      	movge	r3, r5
 800e1c0:	1ad2      	subs	r2, r2, r3
 800e1c2:	9204      	str	r2, [sp, #16]
 800e1c4:	9a05      	ldr	r2, [sp, #20]
 800e1c6:	1aed      	subs	r5, r5, r3
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	9305      	str	r3, [sp, #20]
 800e1cc:	9b07      	ldr	r3, [sp, #28]
 800e1ce:	b31b      	cbz	r3, 800e218 <_dtoa_r+0x7a0>
 800e1d0:	9b08      	ldr	r3, [sp, #32]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f000 80af 	beq.w	800e336 <_dtoa_r+0x8be>
 800e1d8:	2e00      	cmp	r6, #0
 800e1da:	dd13      	ble.n	800e204 <_dtoa_r+0x78c>
 800e1dc:	4639      	mov	r1, r7
 800e1de:	4632      	mov	r2, r6
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f001 fa09 	bl	800f5f8 <__pow5mult>
 800e1e6:	ee18 2a10 	vmov	r2, s16
 800e1ea:	4601      	mov	r1, r0
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f001 f958 	bl	800f4a4 <__multiply>
 800e1f4:	ee18 1a10 	vmov	r1, s16
 800e1f8:	4680      	mov	r8, r0
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f001 f83a 	bl	800f274 <_Bfree>
 800e200:	ee08 8a10 	vmov	s16, r8
 800e204:	9b07      	ldr	r3, [sp, #28]
 800e206:	1b9a      	subs	r2, r3, r6
 800e208:	d006      	beq.n	800e218 <_dtoa_r+0x7a0>
 800e20a:	ee18 1a10 	vmov	r1, s16
 800e20e:	4620      	mov	r0, r4
 800e210:	f001 f9f2 	bl	800f5f8 <__pow5mult>
 800e214:	ee08 0a10 	vmov	s16, r0
 800e218:	2101      	movs	r1, #1
 800e21a:	4620      	mov	r0, r4
 800e21c:	f001 f92c 	bl	800f478 <__i2b>
 800e220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e222:	2b00      	cmp	r3, #0
 800e224:	4606      	mov	r6, r0
 800e226:	f340 8088 	ble.w	800e33a <_dtoa_r+0x8c2>
 800e22a:	461a      	mov	r2, r3
 800e22c:	4601      	mov	r1, r0
 800e22e:	4620      	mov	r0, r4
 800e230:	f001 f9e2 	bl	800f5f8 <__pow5mult>
 800e234:	9b06      	ldr	r3, [sp, #24]
 800e236:	2b01      	cmp	r3, #1
 800e238:	4606      	mov	r6, r0
 800e23a:	f340 8081 	ble.w	800e340 <_dtoa_r+0x8c8>
 800e23e:	f04f 0800 	mov.w	r8, #0
 800e242:	6933      	ldr	r3, [r6, #16]
 800e244:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e248:	6918      	ldr	r0, [r3, #16]
 800e24a:	f001 f8c5 	bl	800f3d8 <__hi0bits>
 800e24e:	f1c0 0020 	rsb	r0, r0, #32
 800e252:	9b05      	ldr	r3, [sp, #20]
 800e254:	4418      	add	r0, r3
 800e256:	f010 001f 	ands.w	r0, r0, #31
 800e25a:	f000 8092 	beq.w	800e382 <_dtoa_r+0x90a>
 800e25e:	f1c0 0320 	rsb	r3, r0, #32
 800e262:	2b04      	cmp	r3, #4
 800e264:	f340 808a 	ble.w	800e37c <_dtoa_r+0x904>
 800e268:	f1c0 001c 	rsb	r0, r0, #28
 800e26c:	9b04      	ldr	r3, [sp, #16]
 800e26e:	4403      	add	r3, r0
 800e270:	9304      	str	r3, [sp, #16]
 800e272:	9b05      	ldr	r3, [sp, #20]
 800e274:	4403      	add	r3, r0
 800e276:	4405      	add	r5, r0
 800e278:	9305      	str	r3, [sp, #20]
 800e27a:	9b04      	ldr	r3, [sp, #16]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	dd07      	ble.n	800e290 <_dtoa_r+0x818>
 800e280:	ee18 1a10 	vmov	r1, s16
 800e284:	461a      	mov	r2, r3
 800e286:	4620      	mov	r0, r4
 800e288:	f001 fa10 	bl	800f6ac <__lshift>
 800e28c:	ee08 0a10 	vmov	s16, r0
 800e290:	9b05      	ldr	r3, [sp, #20]
 800e292:	2b00      	cmp	r3, #0
 800e294:	dd05      	ble.n	800e2a2 <_dtoa_r+0x82a>
 800e296:	4631      	mov	r1, r6
 800e298:	461a      	mov	r2, r3
 800e29a:	4620      	mov	r0, r4
 800e29c:	f001 fa06 	bl	800f6ac <__lshift>
 800e2a0:	4606      	mov	r6, r0
 800e2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d06e      	beq.n	800e386 <_dtoa_r+0x90e>
 800e2a8:	ee18 0a10 	vmov	r0, s16
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	f001 fa6d 	bl	800f78c <__mcmp>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	da67      	bge.n	800e386 <_dtoa_r+0x90e>
 800e2b6:	9b00      	ldr	r3, [sp, #0]
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	ee18 1a10 	vmov	r1, s16
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	220a      	movs	r2, #10
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 fff7 	bl	800f2b8 <__multadd>
 800e2ca:	9b08      	ldr	r3, [sp, #32]
 800e2cc:	ee08 0a10 	vmov	s16, r0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 81b1 	beq.w	800e638 <_dtoa_r+0xbc0>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	4639      	mov	r1, r7
 800e2da:	220a      	movs	r2, #10
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f000 ffeb 	bl	800f2b8 <__multadd>
 800e2e2:	9b02      	ldr	r3, [sp, #8]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	f300 808e 	bgt.w	800e408 <_dtoa_r+0x990>
 800e2ec:	9b06      	ldr	r3, [sp, #24]
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	dc51      	bgt.n	800e396 <_dtoa_r+0x91e>
 800e2f2:	e089      	b.n	800e408 <_dtoa_r+0x990>
 800e2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2fa:	e74b      	b.n	800e194 <_dtoa_r+0x71c>
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	1e5e      	subs	r6, r3, #1
 800e300:	9b07      	ldr	r3, [sp, #28]
 800e302:	42b3      	cmp	r3, r6
 800e304:	bfbf      	itttt	lt
 800e306:	9b07      	ldrlt	r3, [sp, #28]
 800e308:	9607      	strlt	r6, [sp, #28]
 800e30a:	1af2      	sublt	r2, r6, r3
 800e30c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e30e:	bfb6      	itet	lt
 800e310:	189b      	addlt	r3, r3, r2
 800e312:	1b9e      	subge	r6, r3, r6
 800e314:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e316:	9b03      	ldr	r3, [sp, #12]
 800e318:	bfb8      	it	lt
 800e31a:	2600      	movlt	r6, #0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	bfb7      	itett	lt
 800e320:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e324:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e328:	1a9d      	sublt	r5, r3, r2
 800e32a:	2300      	movlt	r3, #0
 800e32c:	e734      	b.n	800e198 <_dtoa_r+0x720>
 800e32e:	9e07      	ldr	r6, [sp, #28]
 800e330:	9d04      	ldr	r5, [sp, #16]
 800e332:	9f08      	ldr	r7, [sp, #32]
 800e334:	e73b      	b.n	800e1ae <_dtoa_r+0x736>
 800e336:	9a07      	ldr	r2, [sp, #28]
 800e338:	e767      	b.n	800e20a <_dtoa_r+0x792>
 800e33a:	9b06      	ldr	r3, [sp, #24]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	dc18      	bgt.n	800e372 <_dtoa_r+0x8fa>
 800e340:	f1ba 0f00 	cmp.w	sl, #0
 800e344:	d115      	bne.n	800e372 <_dtoa_r+0x8fa>
 800e346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e34a:	b993      	cbnz	r3, 800e372 <_dtoa_r+0x8fa>
 800e34c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e350:	0d1b      	lsrs	r3, r3, #20
 800e352:	051b      	lsls	r3, r3, #20
 800e354:	b183      	cbz	r3, 800e378 <_dtoa_r+0x900>
 800e356:	9b04      	ldr	r3, [sp, #16]
 800e358:	3301      	adds	r3, #1
 800e35a:	9304      	str	r3, [sp, #16]
 800e35c:	9b05      	ldr	r3, [sp, #20]
 800e35e:	3301      	adds	r3, #1
 800e360:	9305      	str	r3, [sp, #20]
 800e362:	f04f 0801 	mov.w	r8, #1
 800e366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f47f af6a 	bne.w	800e242 <_dtoa_r+0x7ca>
 800e36e:	2001      	movs	r0, #1
 800e370:	e76f      	b.n	800e252 <_dtoa_r+0x7da>
 800e372:	f04f 0800 	mov.w	r8, #0
 800e376:	e7f6      	b.n	800e366 <_dtoa_r+0x8ee>
 800e378:	4698      	mov	r8, r3
 800e37a:	e7f4      	b.n	800e366 <_dtoa_r+0x8ee>
 800e37c:	f43f af7d 	beq.w	800e27a <_dtoa_r+0x802>
 800e380:	4618      	mov	r0, r3
 800e382:	301c      	adds	r0, #28
 800e384:	e772      	b.n	800e26c <_dtoa_r+0x7f4>
 800e386:	9b03      	ldr	r3, [sp, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	dc37      	bgt.n	800e3fc <_dtoa_r+0x984>
 800e38c:	9b06      	ldr	r3, [sp, #24]
 800e38e:	2b02      	cmp	r3, #2
 800e390:	dd34      	ble.n	800e3fc <_dtoa_r+0x984>
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	9302      	str	r3, [sp, #8]
 800e396:	9b02      	ldr	r3, [sp, #8]
 800e398:	b96b      	cbnz	r3, 800e3b6 <_dtoa_r+0x93e>
 800e39a:	4631      	mov	r1, r6
 800e39c:	2205      	movs	r2, #5
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f000 ff8a 	bl	800f2b8 <__multadd>
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	ee18 0a10 	vmov	r0, s16
 800e3ac:	f001 f9ee 	bl	800f78c <__mcmp>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	f73f adbb 	bgt.w	800df2c <_dtoa_r+0x4b4>
 800e3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b8:	9d01      	ldr	r5, [sp, #4]
 800e3ba:	43db      	mvns	r3, r3
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	f04f 0800 	mov.w	r8, #0
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 ff55 	bl	800f274 <_Bfree>
 800e3ca:	2f00      	cmp	r7, #0
 800e3cc:	f43f aea4 	beq.w	800e118 <_dtoa_r+0x6a0>
 800e3d0:	f1b8 0f00 	cmp.w	r8, #0
 800e3d4:	d005      	beq.n	800e3e2 <_dtoa_r+0x96a>
 800e3d6:	45b8      	cmp	r8, r7
 800e3d8:	d003      	beq.n	800e3e2 <_dtoa_r+0x96a>
 800e3da:	4641      	mov	r1, r8
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f000 ff49 	bl	800f274 <_Bfree>
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f000 ff45 	bl	800f274 <_Bfree>
 800e3ea:	e695      	b.n	800e118 <_dtoa_r+0x6a0>
 800e3ec:	2600      	movs	r6, #0
 800e3ee:	4637      	mov	r7, r6
 800e3f0:	e7e1      	b.n	800e3b6 <_dtoa_r+0x93e>
 800e3f2:	9700      	str	r7, [sp, #0]
 800e3f4:	4637      	mov	r7, r6
 800e3f6:	e599      	b.n	800df2c <_dtoa_r+0x4b4>
 800e3f8:	40240000 	.word	0x40240000
 800e3fc:	9b08      	ldr	r3, [sp, #32]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 80ca 	beq.w	800e598 <_dtoa_r+0xb20>
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	9302      	str	r3, [sp, #8]
 800e408:	2d00      	cmp	r5, #0
 800e40a:	dd05      	ble.n	800e418 <_dtoa_r+0x9a0>
 800e40c:	4639      	mov	r1, r7
 800e40e:	462a      	mov	r2, r5
 800e410:	4620      	mov	r0, r4
 800e412:	f001 f94b 	bl	800f6ac <__lshift>
 800e416:	4607      	mov	r7, r0
 800e418:	f1b8 0f00 	cmp.w	r8, #0
 800e41c:	d05b      	beq.n	800e4d6 <_dtoa_r+0xa5e>
 800e41e:	6879      	ldr	r1, [r7, #4]
 800e420:	4620      	mov	r0, r4
 800e422:	f000 fee7 	bl	800f1f4 <_Balloc>
 800e426:	4605      	mov	r5, r0
 800e428:	b928      	cbnz	r0, 800e436 <_dtoa_r+0x9be>
 800e42a:	4b87      	ldr	r3, [pc, #540]	; (800e648 <_dtoa_r+0xbd0>)
 800e42c:	4602      	mov	r2, r0
 800e42e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e432:	f7ff bb3b 	b.w	800daac <_dtoa_r+0x34>
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	3202      	adds	r2, #2
 800e43a:	0092      	lsls	r2, r2, #2
 800e43c:	f107 010c 	add.w	r1, r7, #12
 800e440:	300c      	adds	r0, #12
 800e442:	f7fd fa0f 	bl	800b864 <memcpy>
 800e446:	2201      	movs	r2, #1
 800e448:	4629      	mov	r1, r5
 800e44a:	4620      	mov	r0, r4
 800e44c:	f001 f92e 	bl	800f6ac <__lshift>
 800e450:	9b01      	ldr	r3, [sp, #4]
 800e452:	f103 0901 	add.w	r9, r3, #1
 800e456:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e45a:	4413      	add	r3, r2
 800e45c:	9305      	str	r3, [sp, #20]
 800e45e:	f00a 0301 	and.w	r3, sl, #1
 800e462:	46b8      	mov	r8, r7
 800e464:	9304      	str	r3, [sp, #16]
 800e466:	4607      	mov	r7, r0
 800e468:	4631      	mov	r1, r6
 800e46a:	ee18 0a10 	vmov	r0, s16
 800e46e:	f7ff fa76 	bl	800d95e <quorem>
 800e472:	4641      	mov	r1, r8
 800e474:	9002      	str	r0, [sp, #8]
 800e476:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e47a:	ee18 0a10 	vmov	r0, s16
 800e47e:	f001 f985 	bl	800f78c <__mcmp>
 800e482:	463a      	mov	r2, r7
 800e484:	9003      	str	r0, [sp, #12]
 800e486:	4631      	mov	r1, r6
 800e488:	4620      	mov	r0, r4
 800e48a:	f001 f99b 	bl	800f7c4 <__mdiff>
 800e48e:	68c2      	ldr	r2, [r0, #12]
 800e490:	f109 3bff 	add.w	fp, r9, #4294967295
 800e494:	4605      	mov	r5, r0
 800e496:	bb02      	cbnz	r2, 800e4da <_dtoa_r+0xa62>
 800e498:	4601      	mov	r1, r0
 800e49a:	ee18 0a10 	vmov	r0, s16
 800e49e:	f001 f975 	bl	800f78c <__mcmp>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	9207      	str	r2, [sp, #28]
 800e4aa:	f000 fee3 	bl	800f274 <_Bfree>
 800e4ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e4b2:	ea43 0102 	orr.w	r1, r3, r2
 800e4b6:	9b04      	ldr	r3, [sp, #16]
 800e4b8:	430b      	orrs	r3, r1
 800e4ba:	464d      	mov	r5, r9
 800e4bc:	d10f      	bne.n	800e4de <_dtoa_r+0xa66>
 800e4be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e4c2:	d02a      	beq.n	800e51a <_dtoa_r+0xaa2>
 800e4c4:	9b03      	ldr	r3, [sp, #12]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	dd02      	ble.n	800e4d0 <_dtoa_r+0xa58>
 800e4ca:	9b02      	ldr	r3, [sp, #8]
 800e4cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e4d0:	f88b a000 	strb.w	sl, [fp]
 800e4d4:	e775      	b.n	800e3c2 <_dtoa_r+0x94a>
 800e4d6:	4638      	mov	r0, r7
 800e4d8:	e7ba      	b.n	800e450 <_dtoa_r+0x9d8>
 800e4da:	2201      	movs	r2, #1
 800e4dc:	e7e2      	b.n	800e4a4 <_dtoa_r+0xa2c>
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	db04      	blt.n	800e4ee <_dtoa_r+0xa76>
 800e4e4:	9906      	ldr	r1, [sp, #24]
 800e4e6:	430b      	orrs	r3, r1
 800e4e8:	9904      	ldr	r1, [sp, #16]
 800e4ea:	430b      	orrs	r3, r1
 800e4ec:	d122      	bne.n	800e534 <_dtoa_r+0xabc>
 800e4ee:	2a00      	cmp	r2, #0
 800e4f0:	ddee      	ble.n	800e4d0 <_dtoa_r+0xa58>
 800e4f2:	ee18 1a10 	vmov	r1, s16
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f001 f8d7 	bl	800f6ac <__lshift>
 800e4fe:	4631      	mov	r1, r6
 800e500:	ee08 0a10 	vmov	s16, r0
 800e504:	f001 f942 	bl	800f78c <__mcmp>
 800e508:	2800      	cmp	r0, #0
 800e50a:	dc03      	bgt.n	800e514 <_dtoa_r+0xa9c>
 800e50c:	d1e0      	bne.n	800e4d0 <_dtoa_r+0xa58>
 800e50e:	f01a 0f01 	tst.w	sl, #1
 800e512:	d0dd      	beq.n	800e4d0 <_dtoa_r+0xa58>
 800e514:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e518:	d1d7      	bne.n	800e4ca <_dtoa_r+0xa52>
 800e51a:	2339      	movs	r3, #57	; 0x39
 800e51c:	f88b 3000 	strb.w	r3, [fp]
 800e520:	462b      	mov	r3, r5
 800e522:	461d      	mov	r5, r3
 800e524:	3b01      	subs	r3, #1
 800e526:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e52a:	2a39      	cmp	r2, #57	; 0x39
 800e52c:	d071      	beq.n	800e612 <_dtoa_r+0xb9a>
 800e52e:	3201      	adds	r2, #1
 800e530:	701a      	strb	r2, [r3, #0]
 800e532:	e746      	b.n	800e3c2 <_dtoa_r+0x94a>
 800e534:	2a00      	cmp	r2, #0
 800e536:	dd07      	ble.n	800e548 <_dtoa_r+0xad0>
 800e538:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e53c:	d0ed      	beq.n	800e51a <_dtoa_r+0xaa2>
 800e53e:	f10a 0301 	add.w	r3, sl, #1
 800e542:	f88b 3000 	strb.w	r3, [fp]
 800e546:	e73c      	b.n	800e3c2 <_dtoa_r+0x94a>
 800e548:	9b05      	ldr	r3, [sp, #20]
 800e54a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e54e:	4599      	cmp	r9, r3
 800e550:	d047      	beq.n	800e5e2 <_dtoa_r+0xb6a>
 800e552:	ee18 1a10 	vmov	r1, s16
 800e556:	2300      	movs	r3, #0
 800e558:	220a      	movs	r2, #10
 800e55a:	4620      	mov	r0, r4
 800e55c:	f000 feac 	bl	800f2b8 <__multadd>
 800e560:	45b8      	cmp	r8, r7
 800e562:	ee08 0a10 	vmov	s16, r0
 800e566:	f04f 0300 	mov.w	r3, #0
 800e56a:	f04f 020a 	mov.w	r2, #10
 800e56e:	4641      	mov	r1, r8
 800e570:	4620      	mov	r0, r4
 800e572:	d106      	bne.n	800e582 <_dtoa_r+0xb0a>
 800e574:	f000 fea0 	bl	800f2b8 <__multadd>
 800e578:	4680      	mov	r8, r0
 800e57a:	4607      	mov	r7, r0
 800e57c:	f109 0901 	add.w	r9, r9, #1
 800e580:	e772      	b.n	800e468 <_dtoa_r+0x9f0>
 800e582:	f000 fe99 	bl	800f2b8 <__multadd>
 800e586:	4639      	mov	r1, r7
 800e588:	4680      	mov	r8, r0
 800e58a:	2300      	movs	r3, #0
 800e58c:	220a      	movs	r2, #10
 800e58e:	4620      	mov	r0, r4
 800e590:	f000 fe92 	bl	800f2b8 <__multadd>
 800e594:	4607      	mov	r7, r0
 800e596:	e7f1      	b.n	800e57c <_dtoa_r+0xb04>
 800e598:	9b03      	ldr	r3, [sp, #12]
 800e59a:	9302      	str	r3, [sp, #8]
 800e59c:	9d01      	ldr	r5, [sp, #4]
 800e59e:	ee18 0a10 	vmov	r0, s16
 800e5a2:	4631      	mov	r1, r6
 800e5a4:	f7ff f9db 	bl	800d95e <quorem>
 800e5a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e5ac:	9b01      	ldr	r3, [sp, #4]
 800e5ae:	f805 ab01 	strb.w	sl, [r5], #1
 800e5b2:	1aea      	subs	r2, r5, r3
 800e5b4:	9b02      	ldr	r3, [sp, #8]
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	dd09      	ble.n	800e5ce <_dtoa_r+0xb56>
 800e5ba:	ee18 1a10 	vmov	r1, s16
 800e5be:	2300      	movs	r3, #0
 800e5c0:	220a      	movs	r2, #10
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f000 fe78 	bl	800f2b8 <__multadd>
 800e5c8:	ee08 0a10 	vmov	s16, r0
 800e5cc:	e7e7      	b.n	800e59e <_dtoa_r+0xb26>
 800e5ce:	9b02      	ldr	r3, [sp, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	bfc8      	it	gt
 800e5d4:	461d      	movgt	r5, r3
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	bfd8      	it	le
 800e5da:	2501      	movle	r5, #1
 800e5dc:	441d      	add	r5, r3
 800e5de:	f04f 0800 	mov.w	r8, #0
 800e5e2:	ee18 1a10 	vmov	r1, s16
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f001 f85f 	bl	800f6ac <__lshift>
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	ee08 0a10 	vmov	s16, r0
 800e5f4:	f001 f8ca 	bl	800f78c <__mcmp>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	dc91      	bgt.n	800e520 <_dtoa_r+0xaa8>
 800e5fc:	d102      	bne.n	800e604 <_dtoa_r+0xb8c>
 800e5fe:	f01a 0f01 	tst.w	sl, #1
 800e602:	d18d      	bne.n	800e520 <_dtoa_r+0xaa8>
 800e604:	462b      	mov	r3, r5
 800e606:	461d      	mov	r5, r3
 800e608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e60c:	2a30      	cmp	r2, #48	; 0x30
 800e60e:	d0fa      	beq.n	800e606 <_dtoa_r+0xb8e>
 800e610:	e6d7      	b.n	800e3c2 <_dtoa_r+0x94a>
 800e612:	9a01      	ldr	r2, [sp, #4]
 800e614:	429a      	cmp	r2, r3
 800e616:	d184      	bne.n	800e522 <_dtoa_r+0xaaa>
 800e618:	9b00      	ldr	r3, [sp, #0]
 800e61a:	3301      	adds	r3, #1
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	2331      	movs	r3, #49	; 0x31
 800e620:	7013      	strb	r3, [r2, #0]
 800e622:	e6ce      	b.n	800e3c2 <_dtoa_r+0x94a>
 800e624:	4b09      	ldr	r3, [pc, #36]	; (800e64c <_dtoa_r+0xbd4>)
 800e626:	f7ff ba95 	b.w	800db54 <_dtoa_r+0xdc>
 800e62a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f47f aa6e 	bne.w	800db0e <_dtoa_r+0x96>
 800e632:	4b07      	ldr	r3, [pc, #28]	; (800e650 <_dtoa_r+0xbd8>)
 800e634:	f7ff ba8e 	b.w	800db54 <_dtoa_r+0xdc>
 800e638:	9b02      	ldr	r3, [sp, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	dcae      	bgt.n	800e59c <_dtoa_r+0xb24>
 800e63e:	9b06      	ldr	r3, [sp, #24]
 800e640:	2b02      	cmp	r3, #2
 800e642:	f73f aea8 	bgt.w	800e396 <_dtoa_r+0x91e>
 800e646:	e7a9      	b.n	800e59c <_dtoa_r+0xb24>
 800e648:	0805afa0 	.word	0x0805afa0
 800e64c:	0805ada5 	.word	0x0805ada5
 800e650:	0805af21 	.word	0x0805af21

0800e654 <__errno>:
 800e654:	4b01      	ldr	r3, [pc, #4]	; (800e65c <__errno+0x8>)
 800e656:	6818      	ldr	r0, [r3, #0]
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	20000e48 	.word	0x20000e48

0800e660 <__sflush_r>:
 800e660:	898a      	ldrh	r2, [r1, #12]
 800e662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e666:	4605      	mov	r5, r0
 800e668:	0710      	lsls	r0, r2, #28
 800e66a:	460c      	mov	r4, r1
 800e66c:	d458      	bmi.n	800e720 <__sflush_r+0xc0>
 800e66e:	684b      	ldr	r3, [r1, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dc05      	bgt.n	800e680 <__sflush_r+0x20>
 800e674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e676:	2b00      	cmp	r3, #0
 800e678:	dc02      	bgt.n	800e680 <__sflush_r+0x20>
 800e67a:	2000      	movs	r0, #0
 800e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e682:	2e00      	cmp	r6, #0
 800e684:	d0f9      	beq.n	800e67a <__sflush_r+0x1a>
 800e686:	2300      	movs	r3, #0
 800e688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e68c:	682f      	ldr	r7, [r5, #0]
 800e68e:	602b      	str	r3, [r5, #0]
 800e690:	d032      	beq.n	800e6f8 <__sflush_r+0x98>
 800e692:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	075a      	lsls	r2, r3, #29
 800e698:	d505      	bpl.n	800e6a6 <__sflush_r+0x46>
 800e69a:	6863      	ldr	r3, [r4, #4]
 800e69c:	1ac0      	subs	r0, r0, r3
 800e69e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6a0:	b10b      	cbz	r3, 800e6a6 <__sflush_r+0x46>
 800e6a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6a4:	1ac0      	subs	r0, r0, r3
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6ac:	6a21      	ldr	r1, [r4, #32]
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	47b0      	blx	r6
 800e6b2:	1c43      	adds	r3, r0, #1
 800e6b4:	89a3      	ldrh	r3, [r4, #12]
 800e6b6:	d106      	bne.n	800e6c6 <__sflush_r+0x66>
 800e6b8:	6829      	ldr	r1, [r5, #0]
 800e6ba:	291d      	cmp	r1, #29
 800e6bc:	d82c      	bhi.n	800e718 <__sflush_r+0xb8>
 800e6be:	4a2a      	ldr	r2, [pc, #168]	; (800e768 <__sflush_r+0x108>)
 800e6c0:	40ca      	lsrs	r2, r1
 800e6c2:	07d6      	lsls	r6, r2, #31
 800e6c4:	d528      	bpl.n	800e718 <__sflush_r+0xb8>
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	6062      	str	r2, [r4, #4]
 800e6ca:	04d9      	lsls	r1, r3, #19
 800e6cc:	6922      	ldr	r2, [r4, #16]
 800e6ce:	6022      	str	r2, [r4, #0]
 800e6d0:	d504      	bpl.n	800e6dc <__sflush_r+0x7c>
 800e6d2:	1c42      	adds	r2, r0, #1
 800e6d4:	d101      	bne.n	800e6da <__sflush_r+0x7a>
 800e6d6:	682b      	ldr	r3, [r5, #0]
 800e6d8:	b903      	cbnz	r3, 800e6dc <__sflush_r+0x7c>
 800e6da:	6560      	str	r0, [r4, #84]	; 0x54
 800e6dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6de:	602f      	str	r7, [r5, #0]
 800e6e0:	2900      	cmp	r1, #0
 800e6e2:	d0ca      	beq.n	800e67a <__sflush_r+0x1a>
 800e6e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6e8:	4299      	cmp	r1, r3
 800e6ea:	d002      	beq.n	800e6f2 <__sflush_r+0x92>
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f7fd f8cf 	bl	800b890 <_free_r>
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e6f6:	e7c1      	b.n	800e67c <__sflush_r+0x1c>
 800e6f8:	6a21      	ldr	r1, [r4, #32]
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b0      	blx	r6
 800e700:	1c41      	adds	r1, r0, #1
 800e702:	d1c7      	bne.n	800e694 <__sflush_r+0x34>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0c4      	beq.n	800e694 <__sflush_r+0x34>
 800e70a:	2b1d      	cmp	r3, #29
 800e70c:	d001      	beq.n	800e712 <__sflush_r+0xb2>
 800e70e:	2b16      	cmp	r3, #22
 800e710:	d101      	bne.n	800e716 <__sflush_r+0xb6>
 800e712:	602f      	str	r7, [r5, #0]
 800e714:	e7b1      	b.n	800e67a <__sflush_r+0x1a>
 800e716:	89a3      	ldrh	r3, [r4, #12]
 800e718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	e7ad      	b.n	800e67c <__sflush_r+0x1c>
 800e720:	690f      	ldr	r7, [r1, #16]
 800e722:	2f00      	cmp	r7, #0
 800e724:	d0a9      	beq.n	800e67a <__sflush_r+0x1a>
 800e726:	0793      	lsls	r3, r2, #30
 800e728:	680e      	ldr	r6, [r1, #0]
 800e72a:	bf08      	it	eq
 800e72c:	694b      	ldreq	r3, [r1, #20]
 800e72e:	600f      	str	r7, [r1, #0]
 800e730:	bf18      	it	ne
 800e732:	2300      	movne	r3, #0
 800e734:	eba6 0807 	sub.w	r8, r6, r7
 800e738:	608b      	str	r3, [r1, #8]
 800e73a:	f1b8 0f00 	cmp.w	r8, #0
 800e73e:	dd9c      	ble.n	800e67a <__sflush_r+0x1a>
 800e740:	6a21      	ldr	r1, [r4, #32]
 800e742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e744:	4643      	mov	r3, r8
 800e746:	463a      	mov	r2, r7
 800e748:	4628      	mov	r0, r5
 800e74a:	47b0      	blx	r6
 800e74c:	2800      	cmp	r0, #0
 800e74e:	dc06      	bgt.n	800e75e <__sflush_r+0xfe>
 800e750:	89a3      	ldrh	r3, [r4, #12]
 800e752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e756:	81a3      	strh	r3, [r4, #12]
 800e758:	f04f 30ff 	mov.w	r0, #4294967295
 800e75c:	e78e      	b.n	800e67c <__sflush_r+0x1c>
 800e75e:	4407      	add	r7, r0
 800e760:	eba8 0800 	sub.w	r8, r8, r0
 800e764:	e7e9      	b.n	800e73a <__sflush_r+0xda>
 800e766:	bf00      	nop
 800e768:	20400001 	.word	0x20400001

0800e76c <_fflush_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	690b      	ldr	r3, [r1, #16]
 800e770:	4605      	mov	r5, r0
 800e772:	460c      	mov	r4, r1
 800e774:	b913      	cbnz	r3, 800e77c <_fflush_r+0x10>
 800e776:	2500      	movs	r5, #0
 800e778:	4628      	mov	r0, r5
 800e77a:	bd38      	pop	{r3, r4, r5, pc}
 800e77c:	b118      	cbz	r0, 800e786 <_fflush_r+0x1a>
 800e77e:	6983      	ldr	r3, [r0, #24]
 800e780:	b90b      	cbnz	r3, 800e786 <_fflush_r+0x1a>
 800e782:	f000 f887 	bl	800e894 <__sinit>
 800e786:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <_fflush_r+0x6c>)
 800e788:	429c      	cmp	r4, r3
 800e78a:	d11b      	bne.n	800e7c4 <_fflush_r+0x58>
 800e78c:	686c      	ldr	r4, [r5, #4]
 800e78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d0ef      	beq.n	800e776 <_fflush_r+0xa>
 800e796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e798:	07d0      	lsls	r0, r2, #31
 800e79a:	d404      	bmi.n	800e7a6 <_fflush_r+0x3a>
 800e79c:	0599      	lsls	r1, r3, #22
 800e79e:	d402      	bmi.n	800e7a6 <_fflush_r+0x3a>
 800e7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7a2:	f000 fc88 	bl	800f0b6 <__retarget_lock_acquire_recursive>
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	4621      	mov	r1, r4
 800e7aa:	f7ff ff59 	bl	800e660 <__sflush_r>
 800e7ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7b0:	07da      	lsls	r2, r3, #31
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	d4e0      	bmi.n	800e778 <_fflush_r+0xc>
 800e7b6:	89a3      	ldrh	r3, [r4, #12]
 800e7b8:	059b      	lsls	r3, r3, #22
 800e7ba:	d4dd      	bmi.n	800e778 <_fflush_r+0xc>
 800e7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7be:	f000 fc7b 	bl	800f0b8 <__retarget_lock_release_recursive>
 800e7c2:	e7d9      	b.n	800e778 <_fflush_r+0xc>
 800e7c4:	4b05      	ldr	r3, [pc, #20]	; (800e7dc <_fflush_r+0x70>)
 800e7c6:	429c      	cmp	r4, r3
 800e7c8:	d101      	bne.n	800e7ce <_fflush_r+0x62>
 800e7ca:	68ac      	ldr	r4, [r5, #8]
 800e7cc:	e7df      	b.n	800e78e <_fflush_r+0x22>
 800e7ce:	4b04      	ldr	r3, [pc, #16]	; (800e7e0 <_fflush_r+0x74>)
 800e7d0:	429c      	cmp	r4, r3
 800e7d2:	bf08      	it	eq
 800e7d4:	68ec      	ldreq	r4, [r5, #12]
 800e7d6:	e7da      	b.n	800e78e <_fflush_r+0x22>
 800e7d8:	0805afd4 	.word	0x0805afd4
 800e7dc:	0805aff4 	.word	0x0805aff4
 800e7e0:	0805afb4 	.word	0x0805afb4

0800e7e4 <std>:
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	b510      	push	{r4, lr}
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7f2:	6083      	str	r3, [r0, #8]
 800e7f4:	8181      	strh	r1, [r0, #12]
 800e7f6:	6643      	str	r3, [r0, #100]	; 0x64
 800e7f8:	81c2      	strh	r2, [r0, #14]
 800e7fa:	6183      	str	r3, [r0, #24]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	2208      	movs	r2, #8
 800e800:	305c      	adds	r0, #92	; 0x5c
 800e802:	f7fd f83d 	bl	800b880 <memset>
 800e806:	4b05      	ldr	r3, [pc, #20]	; (800e81c <std+0x38>)
 800e808:	6263      	str	r3, [r4, #36]	; 0x24
 800e80a:	4b05      	ldr	r3, [pc, #20]	; (800e820 <std+0x3c>)
 800e80c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e80e:	4b05      	ldr	r3, [pc, #20]	; (800e824 <std+0x40>)
 800e810:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e812:	4b05      	ldr	r3, [pc, #20]	; (800e828 <std+0x44>)
 800e814:	6224      	str	r4, [r4, #32]
 800e816:	6323      	str	r3, [r4, #48]	; 0x30
 800e818:	bd10      	pop	{r4, pc}
 800e81a:	bf00      	nop
 800e81c:	0800ff51 	.word	0x0800ff51
 800e820:	0800ff73 	.word	0x0800ff73
 800e824:	0800ffab 	.word	0x0800ffab
 800e828:	0800ffcf 	.word	0x0800ffcf

0800e82c <_cleanup_r>:
 800e82c:	4901      	ldr	r1, [pc, #4]	; (800e834 <_cleanup_r+0x8>)
 800e82e:	f000 b8af 	b.w	800e990 <_fwalk_reent>
 800e832:	bf00      	nop
 800e834:	0800e76d 	.word	0x0800e76d

0800e838 <__sfmoreglue>:
 800e838:	b570      	push	{r4, r5, r6, lr}
 800e83a:	2268      	movs	r2, #104	; 0x68
 800e83c:	1e4d      	subs	r5, r1, #1
 800e83e:	4355      	muls	r5, r2
 800e840:	460e      	mov	r6, r1
 800e842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e846:	f7fd f88f 	bl	800b968 <_malloc_r>
 800e84a:	4604      	mov	r4, r0
 800e84c:	b140      	cbz	r0, 800e860 <__sfmoreglue+0x28>
 800e84e:	2100      	movs	r1, #0
 800e850:	e9c0 1600 	strd	r1, r6, [r0]
 800e854:	300c      	adds	r0, #12
 800e856:	60a0      	str	r0, [r4, #8]
 800e858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e85c:	f7fd f810 	bl	800b880 <memset>
 800e860:	4620      	mov	r0, r4
 800e862:	bd70      	pop	{r4, r5, r6, pc}

0800e864 <__sfp_lock_acquire>:
 800e864:	4801      	ldr	r0, [pc, #4]	; (800e86c <__sfp_lock_acquire+0x8>)
 800e866:	f000 bc26 	b.w	800f0b6 <__retarget_lock_acquire_recursive>
 800e86a:	bf00      	nop
 800e86c:	20013c2d 	.word	0x20013c2d

0800e870 <__sfp_lock_release>:
 800e870:	4801      	ldr	r0, [pc, #4]	; (800e878 <__sfp_lock_release+0x8>)
 800e872:	f000 bc21 	b.w	800f0b8 <__retarget_lock_release_recursive>
 800e876:	bf00      	nop
 800e878:	20013c2d 	.word	0x20013c2d

0800e87c <__sinit_lock_acquire>:
 800e87c:	4801      	ldr	r0, [pc, #4]	; (800e884 <__sinit_lock_acquire+0x8>)
 800e87e:	f000 bc1a 	b.w	800f0b6 <__retarget_lock_acquire_recursive>
 800e882:	bf00      	nop
 800e884:	20013c2e 	.word	0x20013c2e

0800e888 <__sinit_lock_release>:
 800e888:	4801      	ldr	r0, [pc, #4]	; (800e890 <__sinit_lock_release+0x8>)
 800e88a:	f000 bc15 	b.w	800f0b8 <__retarget_lock_release_recursive>
 800e88e:	bf00      	nop
 800e890:	20013c2e 	.word	0x20013c2e

0800e894 <__sinit>:
 800e894:	b510      	push	{r4, lr}
 800e896:	4604      	mov	r4, r0
 800e898:	f7ff fff0 	bl	800e87c <__sinit_lock_acquire>
 800e89c:	69a3      	ldr	r3, [r4, #24]
 800e89e:	b11b      	cbz	r3, 800e8a8 <__sinit+0x14>
 800e8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a4:	f7ff bff0 	b.w	800e888 <__sinit_lock_release>
 800e8a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e8ac:	6523      	str	r3, [r4, #80]	; 0x50
 800e8ae:	4b13      	ldr	r3, [pc, #76]	; (800e8fc <__sinit+0x68>)
 800e8b0:	4a13      	ldr	r2, [pc, #76]	; (800e900 <__sinit+0x6c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e8b6:	42a3      	cmp	r3, r4
 800e8b8:	bf04      	itt	eq
 800e8ba:	2301      	moveq	r3, #1
 800e8bc:	61a3      	streq	r3, [r4, #24]
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f000 f820 	bl	800e904 <__sfp>
 800e8c4:	6060      	str	r0, [r4, #4]
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 f81c 	bl	800e904 <__sfp>
 800e8cc:	60a0      	str	r0, [r4, #8]
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f000 f818 	bl	800e904 <__sfp>
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	60e0      	str	r0, [r4, #12]
 800e8d8:	2104      	movs	r1, #4
 800e8da:	6860      	ldr	r0, [r4, #4]
 800e8dc:	f7ff ff82 	bl	800e7e4 <std>
 800e8e0:	68a0      	ldr	r0, [r4, #8]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	2109      	movs	r1, #9
 800e8e6:	f7ff ff7d 	bl	800e7e4 <std>
 800e8ea:	68e0      	ldr	r0, [r4, #12]
 800e8ec:	2202      	movs	r2, #2
 800e8ee:	2112      	movs	r1, #18
 800e8f0:	f7ff ff78 	bl	800e7e4 <std>
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	61a3      	str	r3, [r4, #24]
 800e8f8:	e7d2      	b.n	800e8a0 <__sinit+0xc>
 800e8fa:	bf00      	nop
 800e8fc:	0805ad80 	.word	0x0805ad80
 800e900:	0800e82d 	.word	0x0800e82d

0800e904 <__sfp>:
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e906:	4607      	mov	r7, r0
 800e908:	f7ff ffac 	bl	800e864 <__sfp_lock_acquire>
 800e90c:	4b1e      	ldr	r3, [pc, #120]	; (800e988 <__sfp+0x84>)
 800e90e:	681e      	ldr	r6, [r3, #0]
 800e910:	69b3      	ldr	r3, [r6, #24]
 800e912:	b913      	cbnz	r3, 800e91a <__sfp+0x16>
 800e914:	4630      	mov	r0, r6
 800e916:	f7ff ffbd 	bl	800e894 <__sinit>
 800e91a:	3648      	adds	r6, #72	; 0x48
 800e91c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e920:	3b01      	subs	r3, #1
 800e922:	d503      	bpl.n	800e92c <__sfp+0x28>
 800e924:	6833      	ldr	r3, [r6, #0]
 800e926:	b30b      	cbz	r3, 800e96c <__sfp+0x68>
 800e928:	6836      	ldr	r6, [r6, #0]
 800e92a:	e7f7      	b.n	800e91c <__sfp+0x18>
 800e92c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e930:	b9d5      	cbnz	r5, 800e968 <__sfp+0x64>
 800e932:	4b16      	ldr	r3, [pc, #88]	; (800e98c <__sfp+0x88>)
 800e934:	60e3      	str	r3, [r4, #12]
 800e936:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e93a:	6665      	str	r5, [r4, #100]	; 0x64
 800e93c:	f000 fbba 	bl	800f0b4 <__retarget_lock_init_recursive>
 800e940:	f7ff ff96 	bl	800e870 <__sfp_lock_release>
 800e944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e94c:	6025      	str	r5, [r4, #0]
 800e94e:	61a5      	str	r5, [r4, #24]
 800e950:	2208      	movs	r2, #8
 800e952:	4629      	mov	r1, r5
 800e954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e958:	f7fc ff92 	bl	800b880 <memset>
 800e95c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e964:	4620      	mov	r0, r4
 800e966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e968:	3468      	adds	r4, #104	; 0x68
 800e96a:	e7d9      	b.n	800e920 <__sfp+0x1c>
 800e96c:	2104      	movs	r1, #4
 800e96e:	4638      	mov	r0, r7
 800e970:	f7ff ff62 	bl	800e838 <__sfmoreglue>
 800e974:	4604      	mov	r4, r0
 800e976:	6030      	str	r0, [r6, #0]
 800e978:	2800      	cmp	r0, #0
 800e97a:	d1d5      	bne.n	800e928 <__sfp+0x24>
 800e97c:	f7ff ff78 	bl	800e870 <__sfp_lock_release>
 800e980:	230c      	movs	r3, #12
 800e982:	603b      	str	r3, [r7, #0]
 800e984:	e7ee      	b.n	800e964 <__sfp+0x60>
 800e986:	bf00      	nop
 800e988:	0805ad80 	.word	0x0805ad80
 800e98c:	ffff0001 	.word	0xffff0001

0800e990 <_fwalk_reent>:
 800e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e994:	4606      	mov	r6, r0
 800e996:	4688      	mov	r8, r1
 800e998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e99c:	2700      	movs	r7, #0
 800e99e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e9a2:	f1b9 0901 	subs.w	r9, r9, #1
 800e9a6:	d505      	bpl.n	800e9b4 <_fwalk_reent+0x24>
 800e9a8:	6824      	ldr	r4, [r4, #0]
 800e9aa:	2c00      	cmp	r4, #0
 800e9ac:	d1f7      	bne.n	800e99e <_fwalk_reent+0xe>
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9b4:	89ab      	ldrh	r3, [r5, #12]
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d907      	bls.n	800e9ca <_fwalk_reent+0x3a>
 800e9ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	d003      	beq.n	800e9ca <_fwalk_reent+0x3a>
 800e9c2:	4629      	mov	r1, r5
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	47c0      	blx	r8
 800e9c8:	4307      	orrs	r7, r0
 800e9ca:	3568      	adds	r5, #104	; 0x68
 800e9cc:	e7e9      	b.n	800e9a2 <_fwalk_reent+0x12>

0800e9ce <rshift>:
 800e9ce:	6903      	ldr	r3, [r0, #16]
 800e9d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e9dc:	f100 0414 	add.w	r4, r0, #20
 800e9e0:	dd45      	ble.n	800ea6e <rshift+0xa0>
 800e9e2:	f011 011f 	ands.w	r1, r1, #31
 800e9e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e9ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e9ee:	d10c      	bne.n	800ea0a <rshift+0x3c>
 800e9f0:	f100 0710 	add.w	r7, r0, #16
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	42b1      	cmp	r1, r6
 800e9f8:	d334      	bcc.n	800ea64 <rshift+0x96>
 800e9fa:	1a9b      	subs	r3, r3, r2
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	1eea      	subs	r2, r5, #3
 800ea00:	4296      	cmp	r6, r2
 800ea02:	bf38      	it	cc
 800ea04:	2300      	movcc	r3, #0
 800ea06:	4423      	add	r3, r4
 800ea08:	e015      	b.n	800ea36 <rshift+0x68>
 800ea0a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea0e:	f1c1 0820 	rsb	r8, r1, #32
 800ea12:	40cf      	lsrs	r7, r1
 800ea14:	f105 0e04 	add.w	lr, r5, #4
 800ea18:	46a1      	mov	r9, r4
 800ea1a:	4576      	cmp	r6, lr
 800ea1c:	46f4      	mov	ip, lr
 800ea1e:	d815      	bhi.n	800ea4c <rshift+0x7e>
 800ea20:	1a9a      	subs	r2, r3, r2
 800ea22:	0092      	lsls	r2, r2, #2
 800ea24:	3a04      	subs	r2, #4
 800ea26:	3501      	adds	r5, #1
 800ea28:	42ae      	cmp	r6, r5
 800ea2a:	bf38      	it	cc
 800ea2c:	2200      	movcc	r2, #0
 800ea2e:	18a3      	adds	r3, r4, r2
 800ea30:	50a7      	str	r7, [r4, r2]
 800ea32:	b107      	cbz	r7, 800ea36 <rshift+0x68>
 800ea34:	3304      	adds	r3, #4
 800ea36:	1b1a      	subs	r2, r3, r4
 800ea38:	42a3      	cmp	r3, r4
 800ea3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea3e:	bf08      	it	eq
 800ea40:	2300      	moveq	r3, #0
 800ea42:	6102      	str	r2, [r0, #16]
 800ea44:	bf08      	it	eq
 800ea46:	6143      	streq	r3, [r0, #20]
 800ea48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea4c:	f8dc c000 	ldr.w	ip, [ip]
 800ea50:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea54:	ea4c 0707 	orr.w	r7, ip, r7
 800ea58:	f849 7b04 	str.w	r7, [r9], #4
 800ea5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea60:	40cf      	lsrs	r7, r1
 800ea62:	e7da      	b.n	800ea1a <rshift+0x4c>
 800ea64:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea68:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea6c:	e7c3      	b.n	800e9f6 <rshift+0x28>
 800ea6e:	4623      	mov	r3, r4
 800ea70:	e7e1      	b.n	800ea36 <rshift+0x68>

0800ea72 <__hexdig_fun>:
 800ea72:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ea76:	2b09      	cmp	r3, #9
 800ea78:	d802      	bhi.n	800ea80 <__hexdig_fun+0xe>
 800ea7a:	3820      	subs	r0, #32
 800ea7c:	b2c0      	uxtb	r0, r0
 800ea7e:	4770      	bx	lr
 800ea80:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ea84:	2b05      	cmp	r3, #5
 800ea86:	d801      	bhi.n	800ea8c <__hexdig_fun+0x1a>
 800ea88:	3847      	subs	r0, #71	; 0x47
 800ea8a:	e7f7      	b.n	800ea7c <__hexdig_fun+0xa>
 800ea8c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea90:	2b05      	cmp	r3, #5
 800ea92:	d801      	bhi.n	800ea98 <__hexdig_fun+0x26>
 800ea94:	3827      	subs	r0, #39	; 0x27
 800ea96:	e7f1      	b.n	800ea7c <__hexdig_fun+0xa>
 800ea98:	2000      	movs	r0, #0
 800ea9a:	4770      	bx	lr

0800ea9c <__gethex>:
 800ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	ed2d 8b02 	vpush	{d8}
 800eaa4:	b089      	sub	sp, #36	; 0x24
 800eaa6:	ee08 0a10 	vmov	s16, r0
 800eaaa:	9304      	str	r3, [sp, #16]
 800eaac:	4bb4      	ldr	r3, [pc, #720]	; (800ed80 <__gethex+0x2e4>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	4618      	mov	r0, r3
 800eab4:	468b      	mov	fp, r1
 800eab6:	4690      	mov	r8, r2
 800eab8:	f7f1 fb94 	bl	80001e4 <strlen>
 800eabc:	9b01      	ldr	r3, [sp, #4]
 800eabe:	f8db 2000 	ldr.w	r2, [fp]
 800eac2:	4403      	add	r3, r0
 800eac4:	4682      	mov	sl, r0
 800eac6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eaca:	9305      	str	r3, [sp, #20]
 800eacc:	1c93      	adds	r3, r2, #2
 800eace:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ead2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ead6:	32fe      	adds	r2, #254	; 0xfe
 800ead8:	18d1      	adds	r1, r2, r3
 800eada:	461f      	mov	r7, r3
 800eadc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eae0:	9100      	str	r1, [sp, #0]
 800eae2:	2830      	cmp	r0, #48	; 0x30
 800eae4:	d0f8      	beq.n	800ead8 <__gethex+0x3c>
 800eae6:	f7ff ffc4 	bl	800ea72 <__hexdig_fun>
 800eaea:	4604      	mov	r4, r0
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d13a      	bne.n	800eb66 <__gethex+0xca>
 800eaf0:	9901      	ldr	r1, [sp, #4]
 800eaf2:	4652      	mov	r2, sl
 800eaf4:	4638      	mov	r0, r7
 800eaf6:	f001 fa6e 	bl	800ffd6 <strncmp>
 800eafa:	4605      	mov	r5, r0
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d168      	bne.n	800ebd2 <__gethex+0x136>
 800eb00:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eb04:	eb07 060a 	add.w	r6, r7, sl
 800eb08:	f7ff ffb3 	bl	800ea72 <__hexdig_fun>
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d062      	beq.n	800ebd6 <__gethex+0x13a>
 800eb10:	4633      	mov	r3, r6
 800eb12:	7818      	ldrb	r0, [r3, #0]
 800eb14:	2830      	cmp	r0, #48	; 0x30
 800eb16:	461f      	mov	r7, r3
 800eb18:	f103 0301 	add.w	r3, r3, #1
 800eb1c:	d0f9      	beq.n	800eb12 <__gethex+0x76>
 800eb1e:	f7ff ffa8 	bl	800ea72 <__hexdig_fun>
 800eb22:	2301      	movs	r3, #1
 800eb24:	fab0 f480 	clz	r4, r0
 800eb28:	0964      	lsrs	r4, r4, #5
 800eb2a:	4635      	mov	r5, r6
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	463a      	mov	r2, r7
 800eb30:	4616      	mov	r6, r2
 800eb32:	3201      	adds	r2, #1
 800eb34:	7830      	ldrb	r0, [r6, #0]
 800eb36:	f7ff ff9c 	bl	800ea72 <__hexdig_fun>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d1f8      	bne.n	800eb30 <__gethex+0x94>
 800eb3e:	9901      	ldr	r1, [sp, #4]
 800eb40:	4652      	mov	r2, sl
 800eb42:	4630      	mov	r0, r6
 800eb44:	f001 fa47 	bl	800ffd6 <strncmp>
 800eb48:	b980      	cbnz	r0, 800eb6c <__gethex+0xd0>
 800eb4a:	b94d      	cbnz	r5, 800eb60 <__gethex+0xc4>
 800eb4c:	eb06 050a 	add.w	r5, r6, sl
 800eb50:	462a      	mov	r2, r5
 800eb52:	4616      	mov	r6, r2
 800eb54:	3201      	adds	r2, #1
 800eb56:	7830      	ldrb	r0, [r6, #0]
 800eb58:	f7ff ff8b 	bl	800ea72 <__hexdig_fun>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d1f8      	bne.n	800eb52 <__gethex+0xb6>
 800eb60:	1bad      	subs	r5, r5, r6
 800eb62:	00ad      	lsls	r5, r5, #2
 800eb64:	e004      	b.n	800eb70 <__gethex+0xd4>
 800eb66:	2400      	movs	r4, #0
 800eb68:	4625      	mov	r5, r4
 800eb6a:	e7e0      	b.n	800eb2e <__gethex+0x92>
 800eb6c:	2d00      	cmp	r5, #0
 800eb6e:	d1f7      	bne.n	800eb60 <__gethex+0xc4>
 800eb70:	7833      	ldrb	r3, [r6, #0]
 800eb72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eb76:	2b50      	cmp	r3, #80	; 0x50
 800eb78:	d13b      	bne.n	800ebf2 <__gethex+0x156>
 800eb7a:	7873      	ldrb	r3, [r6, #1]
 800eb7c:	2b2b      	cmp	r3, #43	; 0x2b
 800eb7e:	d02c      	beq.n	800ebda <__gethex+0x13e>
 800eb80:	2b2d      	cmp	r3, #45	; 0x2d
 800eb82:	d02e      	beq.n	800ebe2 <__gethex+0x146>
 800eb84:	1c71      	adds	r1, r6, #1
 800eb86:	f04f 0900 	mov.w	r9, #0
 800eb8a:	7808      	ldrb	r0, [r1, #0]
 800eb8c:	f7ff ff71 	bl	800ea72 <__hexdig_fun>
 800eb90:	1e43      	subs	r3, r0, #1
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	2b18      	cmp	r3, #24
 800eb96:	d82c      	bhi.n	800ebf2 <__gethex+0x156>
 800eb98:	f1a0 0210 	sub.w	r2, r0, #16
 800eb9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eba0:	f7ff ff67 	bl	800ea72 <__hexdig_fun>
 800eba4:	1e43      	subs	r3, r0, #1
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b18      	cmp	r3, #24
 800ebaa:	d91d      	bls.n	800ebe8 <__gethex+0x14c>
 800ebac:	f1b9 0f00 	cmp.w	r9, #0
 800ebb0:	d000      	beq.n	800ebb4 <__gethex+0x118>
 800ebb2:	4252      	negs	r2, r2
 800ebb4:	4415      	add	r5, r2
 800ebb6:	f8cb 1000 	str.w	r1, [fp]
 800ebba:	b1e4      	cbz	r4, 800ebf6 <__gethex+0x15a>
 800ebbc:	9b00      	ldr	r3, [sp, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	bf14      	ite	ne
 800ebc2:	2700      	movne	r7, #0
 800ebc4:	2706      	moveq	r7, #6
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	b009      	add	sp, #36	; 0x24
 800ebca:	ecbd 8b02 	vpop	{d8}
 800ebce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd2:	463e      	mov	r6, r7
 800ebd4:	4625      	mov	r5, r4
 800ebd6:	2401      	movs	r4, #1
 800ebd8:	e7ca      	b.n	800eb70 <__gethex+0xd4>
 800ebda:	f04f 0900 	mov.w	r9, #0
 800ebde:	1cb1      	adds	r1, r6, #2
 800ebe0:	e7d3      	b.n	800eb8a <__gethex+0xee>
 800ebe2:	f04f 0901 	mov.w	r9, #1
 800ebe6:	e7fa      	b.n	800ebde <__gethex+0x142>
 800ebe8:	230a      	movs	r3, #10
 800ebea:	fb03 0202 	mla	r2, r3, r2, r0
 800ebee:	3a10      	subs	r2, #16
 800ebf0:	e7d4      	b.n	800eb9c <__gethex+0x100>
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	e7df      	b.n	800ebb6 <__gethex+0x11a>
 800ebf6:	1bf3      	subs	r3, r6, r7
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	2b07      	cmp	r3, #7
 800ebfe:	dc0b      	bgt.n	800ec18 <__gethex+0x17c>
 800ec00:	ee18 0a10 	vmov	r0, s16
 800ec04:	f000 faf6 	bl	800f1f4 <_Balloc>
 800ec08:	4604      	mov	r4, r0
 800ec0a:	b940      	cbnz	r0, 800ec1e <__gethex+0x182>
 800ec0c:	4b5d      	ldr	r3, [pc, #372]	; (800ed84 <__gethex+0x2e8>)
 800ec0e:	4602      	mov	r2, r0
 800ec10:	21de      	movs	r1, #222	; 0xde
 800ec12:	485d      	ldr	r0, [pc, #372]	; (800ed88 <__gethex+0x2ec>)
 800ec14:	f7fc fdca 	bl	800b7ac <__assert_func>
 800ec18:	3101      	adds	r1, #1
 800ec1a:	105b      	asrs	r3, r3, #1
 800ec1c:	e7ee      	b.n	800ebfc <__gethex+0x160>
 800ec1e:	f100 0914 	add.w	r9, r0, #20
 800ec22:	f04f 0b00 	mov.w	fp, #0
 800ec26:	f1ca 0301 	rsb	r3, sl, #1
 800ec2a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec2e:	f8cd b000 	str.w	fp, [sp]
 800ec32:	9306      	str	r3, [sp, #24]
 800ec34:	42b7      	cmp	r7, r6
 800ec36:	d340      	bcc.n	800ecba <__gethex+0x21e>
 800ec38:	9802      	ldr	r0, [sp, #8]
 800ec3a:	9b00      	ldr	r3, [sp, #0]
 800ec3c:	f840 3b04 	str.w	r3, [r0], #4
 800ec40:	eba0 0009 	sub.w	r0, r0, r9
 800ec44:	1080      	asrs	r0, r0, #2
 800ec46:	0146      	lsls	r6, r0, #5
 800ec48:	6120      	str	r0, [r4, #16]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f000 fbc4 	bl	800f3d8 <__hi0bits>
 800ec50:	1a30      	subs	r0, r6, r0
 800ec52:	f8d8 6000 	ldr.w	r6, [r8]
 800ec56:	42b0      	cmp	r0, r6
 800ec58:	dd63      	ble.n	800ed22 <__gethex+0x286>
 800ec5a:	1b87      	subs	r7, r0, r6
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 ff68 	bl	800fb34 <__any_on>
 800ec64:	4682      	mov	sl, r0
 800ec66:	b1a8      	cbz	r0, 800ec94 <__gethex+0x1f8>
 800ec68:	1e7b      	subs	r3, r7, #1
 800ec6a:	1159      	asrs	r1, r3, #5
 800ec6c:	f003 021f 	and.w	r2, r3, #31
 800ec70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ec74:	f04f 0a01 	mov.w	sl, #1
 800ec78:	fa0a f202 	lsl.w	r2, sl, r2
 800ec7c:	420a      	tst	r2, r1
 800ec7e:	d009      	beq.n	800ec94 <__gethex+0x1f8>
 800ec80:	4553      	cmp	r3, sl
 800ec82:	dd05      	ble.n	800ec90 <__gethex+0x1f4>
 800ec84:	1eb9      	subs	r1, r7, #2
 800ec86:	4620      	mov	r0, r4
 800ec88:	f000 ff54 	bl	800fb34 <__any_on>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d145      	bne.n	800ed1c <__gethex+0x280>
 800ec90:	f04f 0a02 	mov.w	sl, #2
 800ec94:	4639      	mov	r1, r7
 800ec96:	4620      	mov	r0, r4
 800ec98:	f7ff fe99 	bl	800e9ce <rshift>
 800ec9c:	443d      	add	r5, r7
 800ec9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eca2:	42ab      	cmp	r3, r5
 800eca4:	da4c      	bge.n	800ed40 <__gethex+0x2a4>
 800eca6:	ee18 0a10 	vmov	r0, s16
 800ecaa:	4621      	mov	r1, r4
 800ecac:	f000 fae2 	bl	800f274 <_Bfree>
 800ecb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	6013      	str	r3, [r2, #0]
 800ecb6:	27a3      	movs	r7, #163	; 0xa3
 800ecb8:	e785      	b.n	800ebc6 <__gethex+0x12a>
 800ecba:	1e73      	subs	r3, r6, #1
 800ecbc:	9a05      	ldr	r2, [sp, #20]
 800ecbe:	9303      	str	r3, [sp, #12]
 800ecc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d019      	beq.n	800ecfc <__gethex+0x260>
 800ecc8:	f1bb 0f20 	cmp.w	fp, #32
 800eccc:	d107      	bne.n	800ecde <__gethex+0x242>
 800ecce:	9b02      	ldr	r3, [sp, #8]
 800ecd0:	9a00      	ldr	r2, [sp, #0]
 800ecd2:	f843 2b04 	str.w	r2, [r3], #4
 800ecd6:	9302      	str	r3, [sp, #8]
 800ecd8:	2300      	movs	r3, #0
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	469b      	mov	fp, r3
 800ecde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ece2:	f7ff fec6 	bl	800ea72 <__hexdig_fun>
 800ece6:	9b00      	ldr	r3, [sp, #0]
 800ece8:	f000 000f 	and.w	r0, r0, #15
 800ecec:	fa00 f00b 	lsl.w	r0, r0, fp
 800ecf0:	4303      	orrs	r3, r0
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	f10b 0b04 	add.w	fp, fp, #4
 800ecf8:	9b03      	ldr	r3, [sp, #12]
 800ecfa:	e00d      	b.n	800ed18 <__gethex+0x27c>
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	9a06      	ldr	r2, [sp, #24]
 800ed00:	4413      	add	r3, r2
 800ed02:	42bb      	cmp	r3, r7
 800ed04:	d3e0      	bcc.n	800ecc8 <__gethex+0x22c>
 800ed06:	4618      	mov	r0, r3
 800ed08:	9901      	ldr	r1, [sp, #4]
 800ed0a:	9307      	str	r3, [sp, #28]
 800ed0c:	4652      	mov	r2, sl
 800ed0e:	f001 f962 	bl	800ffd6 <strncmp>
 800ed12:	9b07      	ldr	r3, [sp, #28]
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d1d7      	bne.n	800ecc8 <__gethex+0x22c>
 800ed18:	461e      	mov	r6, r3
 800ed1a:	e78b      	b.n	800ec34 <__gethex+0x198>
 800ed1c:	f04f 0a03 	mov.w	sl, #3
 800ed20:	e7b8      	b.n	800ec94 <__gethex+0x1f8>
 800ed22:	da0a      	bge.n	800ed3a <__gethex+0x29e>
 800ed24:	1a37      	subs	r7, r6, r0
 800ed26:	4621      	mov	r1, r4
 800ed28:	ee18 0a10 	vmov	r0, s16
 800ed2c:	463a      	mov	r2, r7
 800ed2e:	f000 fcbd 	bl	800f6ac <__lshift>
 800ed32:	1bed      	subs	r5, r5, r7
 800ed34:	4604      	mov	r4, r0
 800ed36:	f100 0914 	add.w	r9, r0, #20
 800ed3a:	f04f 0a00 	mov.w	sl, #0
 800ed3e:	e7ae      	b.n	800ec9e <__gethex+0x202>
 800ed40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ed44:	42a8      	cmp	r0, r5
 800ed46:	dd72      	ble.n	800ee2e <__gethex+0x392>
 800ed48:	1b45      	subs	r5, r0, r5
 800ed4a:	42ae      	cmp	r6, r5
 800ed4c:	dc36      	bgt.n	800edbc <__gethex+0x320>
 800ed4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d02a      	beq.n	800edac <__gethex+0x310>
 800ed56:	2b03      	cmp	r3, #3
 800ed58:	d02c      	beq.n	800edb4 <__gethex+0x318>
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d11c      	bne.n	800ed98 <__gethex+0x2fc>
 800ed5e:	42ae      	cmp	r6, r5
 800ed60:	d11a      	bne.n	800ed98 <__gethex+0x2fc>
 800ed62:	2e01      	cmp	r6, #1
 800ed64:	d112      	bne.n	800ed8c <__gethex+0x2f0>
 800ed66:	9a04      	ldr	r2, [sp, #16]
 800ed68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed6c:	6013      	str	r3, [r2, #0]
 800ed6e:	2301      	movs	r3, #1
 800ed70:	6123      	str	r3, [r4, #16]
 800ed72:	f8c9 3000 	str.w	r3, [r9]
 800ed76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed78:	2762      	movs	r7, #98	; 0x62
 800ed7a:	601c      	str	r4, [r3, #0]
 800ed7c:	e723      	b.n	800ebc6 <__gethex+0x12a>
 800ed7e:	bf00      	nop
 800ed80:	0805b07c 	.word	0x0805b07c
 800ed84:	0805afa0 	.word	0x0805afa0
 800ed88:	0805b014 	.word	0x0805b014
 800ed8c:	1e71      	subs	r1, r6, #1
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f000 fed0 	bl	800fb34 <__any_on>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d1e6      	bne.n	800ed66 <__gethex+0x2ca>
 800ed98:	ee18 0a10 	vmov	r0, s16
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	f000 fa69 	bl	800f274 <_Bfree>
 800eda2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eda4:	2300      	movs	r3, #0
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	2750      	movs	r7, #80	; 0x50
 800edaa:	e70c      	b.n	800ebc6 <__gethex+0x12a>
 800edac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1f2      	bne.n	800ed98 <__gethex+0x2fc>
 800edb2:	e7d8      	b.n	800ed66 <__gethex+0x2ca>
 800edb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1d5      	bne.n	800ed66 <__gethex+0x2ca>
 800edba:	e7ed      	b.n	800ed98 <__gethex+0x2fc>
 800edbc:	1e6f      	subs	r7, r5, #1
 800edbe:	f1ba 0f00 	cmp.w	sl, #0
 800edc2:	d131      	bne.n	800ee28 <__gethex+0x38c>
 800edc4:	b127      	cbz	r7, 800edd0 <__gethex+0x334>
 800edc6:	4639      	mov	r1, r7
 800edc8:	4620      	mov	r0, r4
 800edca:	f000 feb3 	bl	800fb34 <__any_on>
 800edce:	4682      	mov	sl, r0
 800edd0:	117b      	asrs	r3, r7, #5
 800edd2:	2101      	movs	r1, #1
 800edd4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800edd8:	f007 071f 	and.w	r7, r7, #31
 800eddc:	fa01 f707 	lsl.w	r7, r1, r7
 800ede0:	421f      	tst	r7, r3
 800ede2:	4629      	mov	r1, r5
 800ede4:	4620      	mov	r0, r4
 800ede6:	bf18      	it	ne
 800ede8:	f04a 0a02 	orrne.w	sl, sl, #2
 800edec:	1b76      	subs	r6, r6, r5
 800edee:	f7ff fdee 	bl	800e9ce <rshift>
 800edf2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800edf6:	2702      	movs	r7, #2
 800edf8:	f1ba 0f00 	cmp.w	sl, #0
 800edfc:	d048      	beq.n	800ee90 <__gethex+0x3f4>
 800edfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d015      	beq.n	800ee32 <__gethex+0x396>
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d017      	beq.n	800ee3a <__gethex+0x39e>
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d109      	bne.n	800ee22 <__gethex+0x386>
 800ee0e:	f01a 0f02 	tst.w	sl, #2
 800ee12:	d006      	beq.n	800ee22 <__gethex+0x386>
 800ee14:	f8d9 0000 	ldr.w	r0, [r9]
 800ee18:	ea4a 0a00 	orr.w	sl, sl, r0
 800ee1c:	f01a 0f01 	tst.w	sl, #1
 800ee20:	d10e      	bne.n	800ee40 <__gethex+0x3a4>
 800ee22:	f047 0710 	orr.w	r7, r7, #16
 800ee26:	e033      	b.n	800ee90 <__gethex+0x3f4>
 800ee28:	f04f 0a01 	mov.w	sl, #1
 800ee2c:	e7d0      	b.n	800edd0 <__gethex+0x334>
 800ee2e:	2701      	movs	r7, #1
 800ee30:	e7e2      	b.n	800edf8 <__gethex+0x35c>
 800ee32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee34:	f1c3 0301 	rsb	r3, r3, #1
 800ee38:	9315      	str	r3, [sp, #84]	; 0x54
 800ee3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d0f0      	beq.n	800ee22 <__gethex+0x386>
 800ee40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee44:	f104 0314 	add.w	r3, r4, #20
 800ee48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee50:	f04f 0c00 	mov.w	ip, #0
 800ee54:	4618      	mov	r0, r3
 800ee56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee5e:	d01c      	beq.n	800ee9a <__gethex+0x3fe>
 800ee60:	3201      	adds	r2, #1
 800ee62:	6002      	str	r2, [r0, #0]
 800ee64:	2f02      	cmp	r7, #2
 800ee66:	f104 0314 	add.w	r3, r4, #20
 800ee6a:	d13f      	bne.n	800eeec <__gethex+0x450>
 800ee6c:	f8d8 2000 	ldr.w	r2, [r8]
 800ee70:	3a01      	subs	r2, #1
 800ee72:	42b2      	cmp	r2, r6
 800ee74:	d10a      	bne.n	800ee8c <__gethex+0x3f0>
 800ee76:	1171      	asrs	r1, r6, #5
 800ee78:	2201      	movs	r2, #1
 800ee7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee7e:	f006 061f 	and.w	r6, r6, #31
 800ee82:	fa02 f606 	lsl.w	r6, r2, r6
 800ee86:	421e      	tst	r6, r3
 800ee88:	bf18      	it	ne
 800ee8a:	4617      	movne	r7, r2
 800ee8c:	f047 0720 	orr.w	r7, r7, #32
 800ee90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee92:	601c      	str	r4, [r3, #0]
 800ee94:	9b04      	ldr	r3, [sp, #16]
 800ee96:	601d      	str	r5, [r3, #0]
 800ee98:	e695      	b.n	800ebc6 <__gethex+0x12a>
 800ee9a:	4299      	cmp	r1, r3
 800ee9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800eea0:	d8d8      	bhi.n	800ee54 <__gethex+0x3b8>
 800eea2:	68a3      	ldr	r3, [r4, #8]
 800eea4:	459b      	cmp	fp, r3
 800eea6:	db19      	blt.n	800eedc <__gethex+0x440>
 800eea8:	6861      	ldr	r1, [r4, #4]
 800eeaa:	ee18 0a10 	vmov	r0, s16
 800eeae:	3101      	adds	r1, #1
 800eeb0:	f000 f9a0 	bl	800f1f4 <_Balloc>
 800eeb4:	4681      	mov	r9, r0
 800eeb6:	b918      	cbnz	r0, 800eec0 <__gethex+0x424>
 800eeb8:	4b1a      	ldr	r3, [pc, #104]	; (800ef24 <__gethex+0x488>)
 800eeba:	4602      	mov	r2, r0
 800eebc:	2184      	movs	r1, #132	; 0x84
 800eebe:	e6a8      	b.n	800ec12 <__gethex+0x176>
 800eec0:	6922      	ldr	r2, [r4, #16]
 800eec2:	3202      	adds	r2, #2
 800eec4:	f104 010c 	add.w	r1, r4, #12
 800eec8:	0092      	lsls	r2, r2, #2
 800eeca:	300c      	adds	r0, #12
 800eecc:	f7fc fcca 	bl	800b864 <memcpy>
 800eed0:	4621      	mov	r1, r4
 800eed2:	ee18 0a10 	vmov	r0, s16
 800eed6:	f000 f9cd 	bl	800f274 <_Bfree>
 800eeda:	464c      	mov	r4, r9
 800eedc:	6923      	ldr	r3, [r4, #16]
 800eede:	1c5a      	adds	r2, r3, #1
 800eee0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eee4:	6122      	str	r2, [r4, #16]
 800eee6:	2201      	movs	r2, #1
 800eee8:	615a      	str	r2, [r3, #20]
 800eeea:	e7bb      	b.n	800ee64 <__gethex+0x3c8>
 800eeec:	6922      	ldr	r2, [r4, #16]
 800eeee:	455a      	cmp	r2, fp
 800eef0:	dd0b      	ble.n	800ef0a <__gethex+0x46e>
 800eef2:	2101      	movs	r1, #1
 800eef4:	4620      	mov	r0, r4
 800eef6:	f7ff fd6a 	bl	800e9ce <rshift>
 800eefa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eefe:	3501      	adds	r5, #1
 800ef00:	42ab      	cmp	r3, r5
 800ef02:	f6ff aed0 	blt.w	800eca6 <__gethex+0x20a>
 800ef06:	2701      	movs	r7, #1
 800ef08:	e7c0      	b.n	800ee8c <__gethex+0x3f0>
 800ef0a:	f016 061f 	ands.w	r6, r6, #31
 800ef0e:	d0fa      	beq.n	800ef06 <__gethex+0x46a>
 800ef10:	4453      	add	r3, sl
 800ef12:	f1c6 0620 	rsb	r6, r6, #32
 800ef16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ef1a:	f000 fa5d 	bl	800f3d8 <__hi0bits>
 800ef1e:	42b0      	cmp	r0, r6
 800ef20:	dbe7      	blt.n	800eef2 <__gethex+0x456>
 800ef22:	e7f0      	b.n	800ef06 <__gethex+0x46a>
 800ef24:	0805afa0 	.word	0x0805afa0

0800ef28 <L_shift>:
 800ef28:	f1c2 0208 	rsb	r2, r2, #8
 800ef2c:	0092      	lsls	r2, r2, #2
 800ef2e:	b570      	push	{r4, r5, r6, lr}
 800ef30:	f1c2 0620 	rsb	r6, r2, #32
 800ef34:	6843      	ldr	r3, [r0, #4]
 800ef36:	6804      	ldr	r4, [r0, #0]
 800ef38:	fa03 f506 	lsl.w	r5, r3, r6
 800ef3c:	432c      	orrs	r4, r5
 800ef3e:	40d3      	lsrs	r3, r2
 800ef40:	6004      	str	r4, [r0, #0]
 800ef42:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef46:	4288      	cmp	r0, r1
 800ef48:	d3f4      	bcc.n	800ef34 <L_shift+0xc>
 800ef4a:	bd70      	pop	{r4, r5, r6, pc}

0800ef4c <__match>:
 800ef4c:	b530      	push	{r4, r5, lr}
 800ef4e:	6803      	ldr	r3, [r0, #0]
 800ef50:	3301      	adds	r3, #1
 800ef52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef56:	b914      	cbnz	r4, 800ef5e <__match+0x12>
 800ef58:	6003      	str	r3, [r0, #0]
 800ef5a:	2001      	movs	r0, #1
 800ef5c:	bd30      	pop	{r4, r5, pc}
 800ef5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ef66:	2d19      	cmp	r5, #25
 800ef68:	bf98      	it	ls
 800ef6a:	3220      	addls	r2, #32
 800ef6c:	42a2      	cmp	r2, r4
 800ef6e:	d0f0      	beq.n	800ef52 <__match+0x6>
 800ef70:	2000      	movs	r0, #0
 800ef72:	e7f3      	b.n	800ef5c <__match+0x10>

0800ef74 <__hexnan>:
 800ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef78:	680b      	ldr	r3, [r1, #0]
 800ef7a:	115e      	asrs	r6, r3, #5
 800ef7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef80:	f013 031f 	ands.w	r3, r3, #31
 800ef84:	b087      	sub	sp, #28
 800ef86:	bf18      	it	ne
 800ef88:	3604      	addne	r6, #4
 800ef8a:	2500      	movs	r5, #0
 800ef8c:	1f37      	subs	r7, r6, #4
 800ef8e:	4690      	mov	r8, r2
 800ef90:	6802      	ldr	r2, [r0, #0]
 800ef92:	9301      	str	r3, [sp, #4]
 800ef94:	4682      	mov	sl, r0
 800ef96:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef9a:	46b9      	mov	r9, r7
 800ef9c:	463c      	mov	r4, r7
 800ef9e:	9502      	str	r5, [sp, #8]
 800efa0:	46ab      	mov	fp, r5
 800efa2:	7851      	ldrb	r1, [r2, #1]
 800efa4:	1c53      	adds	r3, r2, #1
 800efa6:	9303      	str	r3, [sp, #12]
 800efa8:	b341      	cbz	r1, 800effc <__hexnan+0x88>
 800efaa:	4608      	mov	r0, r1
 800efac:	9205      	str	r2, [sp, #20]
 800efae:	9104      	str	r1, [sp, #16]
 800efb0:	f7ff fd5f 	bl	800ea72 <__hexdig_fun>
 800efb4:	2800      	cmp	r0, #0
 800efb6:	d14f      	bne.n	800f058 <__hexnan+0xe4>
 800efb8:	9904      	ldr	r1, [sp, #16]
 800efba:	9a05      	ldr	r2, [sp, #20]
 800efbc:	2920      	cmp	r1, #32
 800efbe:	d818      	bhi.n	800eff2 <__hexnan+0x7e>
 800efc0:	9b02      	ldr	r3, [sp, #8]
 800efc2:	459b      	cmp	fp, r3
 800efc4:	dd13      	ble.n	800efee <__hexnan+0x7a>
 800efc6:	454c      	cmp	r4, r9
 800efc8:	d206      	bcs.n	800efd8 <__hexnan+0x64>
 800efca:	2d07      	cmp	r5, #7
 800efcc:	dc04      	bgt.n	800efd8 <__hexnan+0x64>
 800efce:	462a      	mov	r2, r5
 800efd0:	4649      	mov	r1, r9
 800efd2:	4620      	mov	r0, r4
 800efd4:	f7ff ffa8 	bl	800ef28 <L_shift>
 800efd8:	4544      	cmp	r4, r8
 800efda:	d950      	bls.n	800f07e <__hexnan+0x10a>
 800efdc:	2300      	movs	r3, #0
 800efde:	f1a4 0904 	sub.w	r9, r4, #4
 800efe2:	f844 3c04 	str.w	r3, [r4, #-4]
 800efe6:	f8cd b008 	str.w	fp, [sp, #8]
 800efea:	464c      	mov	r4, r9
 800efec:	461d      	mov	r5, r3
 800efee:	9a03      	ldr	r2, [sp, #12]
 800eff0:	e7d7      	b.n	800efa2 <__hexnan+0x2e>
 800eff2:	2929      	cmp	r1, #41	; 0x29
 800eff4:	d156      	bne.n	800f0a4 <__hexnan+0x130>
 800eff6:	3202      	adds	r2, #2
 800eff8:	f8ca 2000 	str.w	r2, [sl]
 800effc:	f1bb 0f00 	cmp.w	fp, #0
 800f000:	d050      	beq.n	800f0a4 <__hexnan+0x130>
 800f002:	454c      	cmp	r4, r9
 800f004:	d206      	bcs.n	800f014 <__hexnan+0xa0>
 800f006:	2d07      	cmp	r5, #7
 800f008:	dc04      	bgt.n	800f014 <__hexnan+0xa0>
 800f00a:	462a      	mov	r2, r5
 800f00c:	4649      	mov	r1, r9
 800f00e:	4620      	mov	r0, r4
 800f010:	f7ff ff8a 	bl	800ef28 <L_shift>
 800f014:	4544      	cmp	r4, r8
 800f016:	d934      	bls.n	800f082 <__hexnan+0x10e>
 800f018:	f1a8 0204 	sub.w	r2, r8, #4
 800f01c:	4623      	mov	r3, r4
 800f01e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f022:	f842 1f04 	str.w	r1, [r2, #4]!
 800f026:	429f      	cmp	r7, r3
 800f028:	d2f9      	bcs.n	800f01e <__hexnan+0xaa>
 800f02a:	1b3b      	subs	r3, r7, r4
 800f02c:	f023 0303 	bic.w	r3, r3, #3
 800f030:	3304      	adds	r3, #4
 800f032:	3401      	adds	r4, #1
 800f034:	3e03      	subs	r6, #3
 800f036:	42b4      	cmp	r4, r6
 800f038:	bf88      	it	hi
 800f03a:	2304      	movhi	r3, #4
 800f03c:	4443      	add	r3, r8
 800f03e:	2200      	movs	r2, #0
 800f040:	f843 2b04 	str.w	r2, [r3], #4
 800f044:	429f      	cmp	r7, r3
 800f046:	d2fb      	bcs.n	800f040 <__hexnan+0xcc>
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	b91b      	cbnz	r3, 800f054 <__hexnan+0xe0>
 800f04c:	4547      	cmp	r7, r8
 800f04e:	d127      	bne.n	800f0a0 <__hexnan+0x12c>
 800f050:	2301      	movs	r3, #1
 800f052:	603b      	str	r3, [r7, #0]
 800f054:	2005      	movs	r0, #5
 800f056:	e026      	b.n	800f0a6 <__hexnan+0x132>
 800f058:	3501      	adds	r5, #1
 800f05a:	2d08      	cmp	r5, #8
 800f05c:	f10b 0b01 	add.w	fp, fp, #1
 800f060:	dd06      	ble.n	800f070 <__hexnan+0xfc>
 800f062:	4544      	cmp	r4, r8
 800f064:	d9c3      	bls.n	800efee <__hexnan+0x7a>
 800f066:	2300      	movs	r3, #0
 800f068:	f844 3c04 	str.w	r3, [r4, #-4]
 800f06c:	2501      	movs	r5, #1
 800f06e:	3c04      	subs	r4, #4
 800f070:	6822      	ldr	r2, [r4, #0]
 800f072:	f000 000f 	and.w	r0, r0, #15
 800f076:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f07a:	6022      	str	r2, [r4, #0]
 800f07c:	e7b7      	b.n	800efee <__hexnan+0x7a>
 800f07e:	2508      	movs	r5, #8
 800f080:	e7b5      	b.n	800efee <__hexnan+0x7a>
 800f082:	9b01      	ldr	r3, [sp, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d0df      	beq.n	800f048 <__hexnan+0xd4>
 800f088:	f04f 32ff 	mov.w	r2, #4294967295
 800f08c:	f1c3 0320 	rsb	r3, r3, #32
 800f090:	fa22 f303 	lsr.w	r3, r2, r3
 800f094:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f098:	401a      	ands	r2, r3
 800f09a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f09e:	e7d3      	b.n	800f048 <__hexnan+0xd4>
 800f0a0:	3f04      	subs	r7, #4
 800f0a2:	e7d1      	b.n	800f048 <__hexnan+0xd4>
 800f0a4:	2004      	movs	r0, #4
 800f0a6:	b007      	add	sp, #28
 800f0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0ac <_localeconv_r>:
 800f0ac:	4800      	ldr	r0, [pc, #0]	; (800f0b0 <_localeconv_r+0x4>)
 800f0ae:	4770      	bx	lr
 800f0b0:	20000fa0 	.word	0x20000fa0

0800f0b4 <__retarget_lock_init_recursive>:
 800f0b4:	4770      	bx	lr

0800f0b6 <__retarget_lock_acquire_recursive>:
 800f0b6:	4770      	bx	lr

0800f0b8 <__retarget_lock_release_recursive>:
 800f0b8:	4770      	bx	lr

0800f0ba <__swhatbuf_r>:
 800f0ba:	b570      	push	{r4, r5, r6, lr}
 800f0bc:	460e      	mov	r6, r1
 800f0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c2:	2900      	cmp	r1, #0
 800f0c4:	b096      	sub	sp, #88	; 0x58
 800f0c6:	4614      	mov	r4, r2
 800f0c8:	461d      	mov	r5, r3
 800f0ca:	da08      	bge.n	800f0de <__swhatbuf_r+0x24>
 800f0cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	602a      	str	r2, [r5, #0]
 800f0d4:	061a      	lsls	r2, r3, #24
 800f0d6:	d410      	bmi.n	800f0fa <__swhatbuf_r+0x40>
 800f0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0dc:	e00e      	b.n	800f0fc <__swhatbuf_r+0x42>
 800f0de:	466a      	mov	r2, sp
 800f0e0:	f000 ffbc 	bl	801005c <_fstat_r>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	dbf1      	blt.n	800f0cc <__swhatbuf_r+0x12>
 800f0e8:	9a01      	ldr	r2, [sp, #4]
 800f0ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0f2:	425a      	negs	r2, r3
 800f0f4:	415a      	adcs	r2, r3
 800f0f6:	602a      	str	r2, [r5, #0]
 800f0f8:	e7ee      	b.n	800f0d8 <__swhatbuf_r+0x1e>
 800f0fa:	2340      	movs	r3, #64	; 0x40
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	6023      	str	r3, [r4, #0]
 800f100:	b016      	add	sp, #88	; 0x58
 800f102:	bd70      	pop	{r4, r5, r6, pc}

0800f104 <__smakebuf_r>:
 800f104:	898b      	ldrh	r3, [r1, #12]
 800f106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f108:	079d      	lsls	r5, r3, #30
 800f10a:	4606      	mov	r6, r0
 800f10c:	460c      	mov	r4, r1
 800f10e:	d507      	bpl.n	800f120 <__smakebuf_r+0x1c>
 800f110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	6123      	str	r3, [r4, #16]
 800f118:	2301      	movs	r3, #1
 800f11a:	6163      	str	r3, [r4, #20]
 800f11c:	b002      	add	sp, #8
 800f11e:	bd70      	pop	{r4, r5, r6, pc}
 800f120:	ab01      	add	r3, sp, #4
 800f122:	466a      	mov	r2, sp
 800f124:	f7ff ffc9 	bl	800f0ba <__swhatbuf_r>
 800f128:	9900      	ldr	r1, [sp, #0]
 800f12a:	4605      	mov	r5, r0
 800f12c:	4630      	mov	r0, r6
 800f12e:	f7fc fc1b 	bl	800b968 <_malloc_r>
 800f132:	b948      	cbnz	r0, 800f148 <__smakebuf_r+0x44>
 800f134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f138:	059a      	lsls	r2, r3, #22
 800f13a:	d4ef      	bmi.n	800f11c <__smakebuf_r+0x18>
 800f13c:	f023 0303 	bic.w	r3, r3, #3
 800f140:	f043 0302 	orr.w	r3, r3, #2
 800f144:	81a3      	strh	r3, [r4, #12]
 800f146:	e7e3      	b.n	800f110 <__smakebuf_r+0xc>
 800f148:	4b0d      	ldr	r3, [pc, #52]	; (800f180 <__smakebuf_r+0x7c>)
 800f14a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	6020      	str	r0, [r4, #0]
 800f150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f154:	81a3      	strh	r3, [r4, #12]
 800f156:	9b00      	ldr	r3, [sp, #0]
 800f158:	6163      	str	r3, [r4, #20]
 800f15a:	9b01      	ldr	r3, [sp, #4]
 800f15c:	6120      	str	r0, [r4, #16]
 800f15e:	b15b      	cbz	r3, 800f178 <__smakebuf_r+0x74>
 800f160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f164:	4630      	mov	r0, r6
 800f166:	f000 ff8b 	bl	8010080 <_isatty_r>
 800f16a:	b128      	cbz	r0, 800f178 <__smakebuf_r+0x74>
 800f16c:	89a3      	ldrh	r3, [r4, #12]
 800f16e:	f023 0303 	bic.w	r3, r3, #3
 800f172:	f043 0301 	orr.w	r3, r3, #1
 800f176:	81a3      	strh	r3, [r4, #12]
 800f178:	89a0      	ldrh	r0, [r4, #12]
 800f17a:	4305      	orrs	r5, r0
 800f17c:	81a5      	strh	r5, [r4, #12]
 800f17e:	e7cd      	b.n	800f11c <__smakebuf_r+0x18>
 800f180:	0800e82d 	.word	0x0800e82d

0800f184 <__ascii_mbtowc>:
 800f184:	b082      	sub	sp, #8
 800f186:	b901      	cbnz	r1, 800f18a <__ascii_mbtowc+0x6>
 800f188:	a901      	add	r1, sp, #4
 800f18a:	b142      	cbz	r2, 800f19e <__ascii_mbtowc+0x1a>
 800f18c:	b14b      	cbz	r3, 800f1a2 <__ascii_mbtowc+0x1e>
 800f18e:	7813      	ldrb	r3, [r2, #0]
 800f190:	600b      	str	r3, [r1, #0]
 800f192:	7812      	ldrb	r2, [r2, #0]
 800f194:	1e10      	subs	r0, r2, #0
 800f196:	bf18      	it	ne
 800f198:	2001      	movne	r0, #1
 800f19a:	b002      	add	sp, #8
 800f19c:	4770      	bx	lr
 800f19e:	4610      	mov	r0, r2
 800f1a0:	e7fb      	b.n	800f19a <__ascii_mbtowc+0x16>
 800f1a2:	f06f 0001 	mvn.w	r0, #1
 800f1a6:	e7f8      	b.n	800f19a <__ascii_mbtowc+0x16>

0800f1a8 <memmove>:
 800f1a8:	4288      	cmp	r0, r1
 800f1aa:	b510      	push	{r4, lr}
 800f1ac:	eb01 0402 	add.w	r4, r1, r2
 800f1b0:	d902      	bls.n	800f1b8 <memmove+0x10>
 800f1b2:	4284      	cmp	r4, r0
 800f1b4:	4623      	mov	r3, r4
 800f1b6:	d807      	bhi.n	800f1c8 <memmove+0x20>
 800f1b8:	1e43      	subs	r3, r0, #1
 800f1ba:	42a1      	cmp	r1, r4
 800f1bc:	d008      	beq.n	800f1d0 <memmove+0x28>
 800f1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1c6:	e7f8      	b.n	800f1ba <memmove+0x12>
 800f1c8:	4402      	add	r2, r0
 800f1ca:	4601      	mov	r1, r0
 800f1cc:	428a      	cmp	r2, r1
 800f1ce:	d100      	bne.n	800f1d2 <memmove+0x2a>
 800f1d0:	bd10      	pop	{r4, pc}
 800f1d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1da:	e7f7      	b.n	800f1cc <memmove+0x24>

0800f1dc <__malloc_lock>:
 800f1dc:	4801      	ldr	r0, [pc, #4]	; (800f1e4 <__malloc_lock+0x8>)
 800f1de:	f7ff bf6a 	b.w	800f0b6 <__retarget_lock_acquire_recursive>
 800f1e2:	bf00      	nop
 800f1e4:	20013c2c 	.word	0x20013c2c

0800f1e8 <__malloc_unlock>:
 800f1e8:	4801      	ldr	r0, [pc, #4]	; (800f1f0 <__malloc_unlock+0x8>)
 800f1ea:	f7ff bf65 	b.w	800f0b8 <__retarget_lock_release_recursive>
 800f1ee:	bf00      	nop
 800f1f0:	20013c2c 	.word	0x20013c2c

0800f1f4 <_Balloc>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	460d      	mov	r5, r1
 800f1fc:	b976      	cbnz	r6, 800f21c <_Balloc+0x28>
 800f1fe:	2010      	movs	r0, #16
 800f200:	f7fc fb28 	bl	800b854 <malloc>
 800f204:	4602      	mov	r2, r0
 800f206:	6260      	str	r0, [r4, #36]	; 0x24
 800f208:	b920      	cbnz	r0, 800f214 <_Balloc+0x20>
 800f20a:	4b18      	ldr	r3, [pc, #96]	; (800f26c <_Balloc+0x78>)
 800f20c:	4818      	ldr	r0, [pc, #96]	; (800f270 <_Balloc+0x7c>)
 800f20e:	2166      	movs	r1, #102	; 0x66
 800f210:	f7fc facc 	bl	800b7ac <__assert_func>
 800f214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f218:	6006      	str	r6, [r0, #0]
 800f21a:	60c6      	str	r6, [r0, #12]
 800f21c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f21e:	68f3      	ldr	r3, [r6, #12]
 800f220:	b183      	cbz	r3, 800f244 <_Balloc+0x50>
 800f222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f22a:	b9b8      	cbnz	r0, 800f25c <_Balloc+0x68>
 800f22c:	2101      	movs	r1, #1
 800f22e:	fa01 f605 	lsl.w	r6, r1, r5
 800f232:	1d72      	adds	r2, r6, #5
 800f234:	0092      	lsls	r2, r2, #2
 800f236:	4620      	mov	r0, r4
 800f238:	f000 fc9d 	bl	800fb76 <_calloc_r>
 800f23c:	b160      	cbz	r0, 800f258 <_Balloc+0x64>
 800f23e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f242:	e00e      	b.n	800f262 <_Balloc+0x6e>
 800f244:	2221      	movs	r2, #33	; 0x21
 800f246:	2104      	movs	r1, #4
 800f248:	4620      	mov	r0, r4
 800f24a:	f000 fc94 	bl	800fb76 <_calloc_r>
 800f24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f250:	60f0      	str	r0, [r6, #12]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1e4      	bne.n	800f222 <_Balloc+0x2e>
 800f258:	2000      	movs	r0, #0
 800f25a:	bd70      	pop	{r4, r5, r6, pc}
 800f25c:	6802      	ldr	r2, [r0, #0]
 800f25e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f262:	2300      	movs	r3, #0
 800f264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f268:	e7f7      	b.n	800f25a <_Balloc+0x66>
 800f26a:	bf00      	nop
 800f26c:	0805af2e 	.word	0x0805af2e
 800f270:	0805b090 	.word	0x0805b090

0800f274 <_Bfree>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f278:	4605      	mov	r5, r0
 800f27a:	460c      	mov	r4, r1
 800f27c:	b976      	cbnz	r6, 800f29c <_Bfree+0x28>
 800f27e:	2010      	movs	r0, #16
 800f280:	f7fc fae8 	bl	800b854 <malloc>
 800f284:	4602      	mov	r2, r0
 800f286:	6268      	str	r0, [r5, #36]	; 0x24
 800f288:	b920      	cbnz	r0, 800f294 <_Bfree+0x20>
 800f28a:	4b09      	ldr	r3, [pc, #36]	; (800f2b0 <_Bfree+0x3c>)
 800f28c:	4809      	ldr	r0, [pc, #36]	; (800f2b4 <_Bfree+0x40>)
 800f28e:	218a      	movs	r1, #138	; 0x8a
 800f290:	f7fc fa8c 	bl	800b7ac <__assert_func>
 800f294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f298:	6006      	str	r6, [r0, #0]
 800f29a:	60c6      	str	r6, [r0, #12]
 800f29c:	b13c      	cbz	r4, 800f2ae <_Bfree+0x3a>
 800f29e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f2a0:	6862      	ldr	r2, [r4, #4]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2a8:	6021      	str	r1, [r4, #0]
 800f2aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2ae:	bd70      	pop	{r4, r5, r6, pc}
 800f2b0:	0805af2e 	.word	0x0805af2e
 800f2b4:	0805b090 	.word	0x0805b090

0800f2b8 <__multadd>:
 800f2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2bc:	690d      	ldr	r5, [r1, #16]
 800f2be:	4607      	mov	r7, r0
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	461e      	mov	r6, r3
 800f2c4:	f101 0c14 	add.w	ip, r1, #20
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	f8dc 3000 	ldr.w	r3, [ip]
 800f2ce:	b299      	uxth	r1, r3
 800f2d0:	fb02 6101 	mla	r1, r2, r1, r6
 800f2d4:	0c1e      	lsrs	r6, r3, #16
 800f2d6:	0c0b      	lsrs	r3, r1, #16
 800f2d8:	fb02 3306 	mla	r3, r2, r6, r3
 800f2dc:	b289      	uxth	r1, r1
 800f2de:	3001      	adds	r0, #1
 800f2e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f2e4:	4285      	cmp	r5, r0
 800f2e6:	f84c 1b04 	str.w	r1, [ip], #4
 800f2ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f2ee:	dcec      	bgt.n	800f2ca <__multadd+0x12>
 800f2f0:	b30e      	cbz	r6, 800f336 <__multadd+0x7e>
 800f2f2:	68a3      	ldr	r3, [r4, #8]
 800f2f4:	42ab      	cmp	r3, r5
 800f2f6:	dc19      	bgt.n	800f32c <__multadd+0x74>
 800f2f8:	6861      	ldr	r1, [r4, #4]
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	3101      	adds	r1, #1
 800f2fe:	f7ff ff79 	bl	800f1f4 <_Balloc>
 800f302:	4680      	mov	r8, r0
 800f304:	b928      	cbnz	r0, 800f312 <__multadd+0x5a>
 800f306:	4602      	mov	r2, r0
 800f308:	4b0c      	ldr	r3, [pc, #48]	; (800f33c <__multadd+0x84>)
 800f30a:	480d      	ldr	r0, [pc, #52]	; (800f340 <__multadd+0x88>)
 800f30c:	21b5      	movs	r1, #181	; 0xb5
 800f30e:	f7fc fa4d 	bl	800b7ac <__assert_func>
 800f312:	6922      	ldr	r2, [r4, #16]
 800f314:	3202      	adds	r2, #2
 800f316:	f104 010c 	add.w	r1, r4, #12
 800f31a:	0092      	lsls	r2, r2, #2
 800f31c:	300c      	adds	r0, #12
 800f31e:	f7fc faa1 	bl	800b864 <memcpy>
 800f322:	4621      	mov	r1, r4
 800f324:	4638      	mov	r0, r7
 800f326:	f7ff ffa5 	bl	800f274 <_Bfree>
 800f32a:	4644      	mov	r4, r8
 800f32c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f330:	3501      	adds	r5, #1
 800f332:	615e      	str	r6, [r3, #20]
 800f334:	6125      	str	r5, [r4, #16]
 800f336:	4620      	mov	r0, r4
 800f338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f33c:	0805afa0 	.word	0x0805afa0
 800f340:	0805b090 	.word	0x0805b090

0800f344 <__s2b>:
 800f344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f348:	460c      	mov	r4, r1
 800f34a:	4615      	mov	r5, r2
 800f34c:	461f      	mov	r7, r3
 800f34e:	2209      	movs	r2, #9
 800f350:	3308      	adds	r3, #8
 800f352:	4606      	mov	r6, r0
 800f354:	fb93 f3f2 	sdiv	r3, r3, r2
 800f358:	2100      	movs	r1, #0
 800f35a:	2201      	movs	r2, #1
 800f35c:	429a      	cmp	r2, r3
 800f35e:	db09      	blt.n	800f374 <__s2b+0x30>
 800f360:	4630      	mov	r0, r6
 800f362:	f7ff ff47 	bl	800f1f4 <_Balloc>
 800f366:	b940      	cbnz	r0, 800f37a <__s2b+0x36>
 800f368:	4602      	mov	r2, r0
 800f36a:	4b19      	ldr	r3, [pc, #100]	; (800f3d0 <__s2b+0x8c>)
 800f36c:	4819      	ldr	r0, [pc, #100]	; (800f3d4 <__s2b+0x90>)
 800f36e:	21ce      	movs	r1, #206	; 0xce
 800f370:	f7fc fa1c 	bl	800b7ac <__assert_func>
 800f374:	0052      	lsls	r2, r2, #1
 800f376:	3101      	adds	r1, #1
 800f378:	e7f0      	b.n	800f35c <__s2b+0x18>
 800f37a:	9b08      	ldr	r3, [sp, #32]
 800f37c:	6143      	str	r3, [r0, #20]
 800f37e:	2d09      	cmp	r5, #9
 800f380:	f04f 0301 	mov.w	r3, #1
 800f384:	6103      	str	r3, [r0, #16]
 800f386:	dd16      	ble.n	800f3b6 <__s2b+0x72>
 800f388:	f104 0909 	add.w	r9, r4, #9
 800f38c:	46c8      	mov	r8, r9
 800f38e:	442c      	add	r4, r5
 800f390:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f394:	4601      	mov	r1, r0
 800f396:	3b30      	subs	r3, #48	; 0x30
 800f398:	220a      	movs	r2, #10
 800f39a:	4630      	mov	r0, r6
 800f39c:	f7ff ff8c 	bl	800f2b8 <__multadd>
 800f3a0:	45a0      	cmp	r8, r4
 800f3a2:	d1f5      	bne.n	800f390 <__s2b+0x4c>
 800f3a4:	f1a5 0408 	sub.w	r4, r5, #8
 800f3a8:	444c      	add	r4, r9
 800f3aa:	1b2d      	subs	r5, r5, r4
 800f3ac:	1963      	adds	r3, r4, r5
 800f3ae:	42bb      	cmp	r3, r7
 800f3b0:	db04      	blt.n	800f3bc <__s2b+0x78>
 800f3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3b6:	340a      	adds	r4, #10
 800f3b8:	2509      	movs	r5, #9
 800f3ba:	e7f6      	b.n	800f3aa <__s2b+0x66>
 800f3bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f3c0:	4601      	mov	r1, r0
 800f3c2:	3b30      	subs	r3, #48	; 0x30
 800f3c4:	220a      	movs	r2, #10
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	f7ff ff76 	bl	800f2b8 <__multadd>
 800f3cc:	e7ee      	b.n	800f3ac <__s2b+0x68>
 800f3ce:	bf00      	nop
 800f3d0:	0805afa0 	.word	0x0805afa0
 800f3d4:	0805b090 	.word	0x0805b090

0800f3d8 <__hi0bits>:
 800f3d8:	0c03      	lsrs	r3, r0, #16
 800f3da:	041b      	lsls	r3, r3, #16
 800f3dc:	b9d3      	cbnz	r3, 800f414 <__hi0bits+0x3c>
 800f3de:	0400      	lsls	r0, r0, #16
 800f3e0:	2310      	movs	r3, #16
 800f3e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f3e6:	bf04      	itt	eq
 800f3e8:	0200      	lsleq	r0, r0, #8
 800f3ea:	3308      	addeq	r3, #8
 800f3ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f3f0:	bf04      	itt	eq
 800f3f2:	0100      	lsleq	r0, r0, #4
 800f3f4:	3304      	addeq	r3, #4
 800f3f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f3fa:	bf04      	itt	eq
 800f3fc:	0080      	lsleq	r0, r0, #2
 800f3fe:	3302      	addeq	r3, #2
 800f400:	2800      	cmp	r0, #0
 800f402:	db05      	blt.n	800f410 <__hi0bits+0x38>
 800f404:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f408:	f103 0301 	add.w	r3, r3, #1
 800f40c:	bf08      	it	eq
 800f40e:	2320      	moveq	r3, #32
 800f410:	4618      	mov	r0, r3
 800f412:	4770      	bx	lr
 800f414:	2300      	movs	r3, #0
 800f416:	e7e4      	b.n	800f3e2 <__hi0bits+0xa>

0800f418 <__lo0bits>:
 800f418:	6803      	ldr	r3, [r0, #0]
 800f41a:	f013 0207 	ands.w	r2, r3, #7
 800f41e:	4601      	mov	r1, r0
 800f420:	d00b      	beq.n	800f43a <__lo0bits+0x22>
 800f422:	07da      	lsls	r2, r3, #31
 800f424:	d423      	bmi.n	800f46e <__lo0bits+0x56>
 800f426:	0798      	lsls	r0, r3, #30
 800f428:	bf49      	itett	mi
 800f42a:	085b      	lsrmi	r3, r3, #1
 800f42c:	089b      	lsrpl	r3, r3, #2
 800f42e:	2001      	movmi	r0, #1
 800f430:	600b      	strmi	r3, [r1, #0]
 800f432:	bf5c      	itt	pl
 800f434:	600b      	strpl	r3, [r1, #0]
 800f436:	2002      	movpl	r0, #2
 800f438:	4770      	bx	lr
 800f43a:	b298      	uxth	r0, r3
 800f43c:	b9a8      	cbnz	r0, 800f46a <__lo0bits+0x52>
 800f43e:	0c1b      	lsrs	r3, r3, #16
 800f440:	2010      	movs	r0, #16
 800f442:	b2da      	uxtb	r2, r3
 800f444:	b90a      	cbnz	r2, 800f44a <__lo0bits+0x32>
 800f446:	3008      	adds	r0, #8
 800f448:	0a1b      	lsrs	r3, r3, #8
 800f44a:	071a      	lsls	r2, r3, #28
 800f44c:	bf04      	itt	eq
 800f44e:	091b      	lsreq	r3, r3, #4
 800f450:	3004      	addeq	r0, #4
 800f452:	079a      	lsls	r2, r3, #30
 800f454:	bf04      	itt	eq
 800f456:	089b      	lsreq	r3, r3, #2
 800f458:	3002      	addeq	r0, #2
 800f45a:	07da      	lsls	r2, r3, #31
 800f45c:	d403      	bmi.n	800f466 <__lo0bits+0x4e>
 800f45e:	085b      	lsrs	r3, r3, #1
 800f460:	f100 0001 	add.w	r0, r0, #1
 800f464:	d005      	beq.n	800f472 <__lo0bits+0x5a>
 800f466:	600b      	str	r3, [r1, #0]
 800f468:	4770      	bx	lr
 800f46a:	4610      	mov	r0, r2
 800f46c:	e7e9      	b.n	800f442 <__lo0bits+0x2a>
 800f46e:	2000      	movs	r0, #0
 800f470:	4770      	bx	lr
 800f472:	2020      	movs	r0, #32
 800f474:	4770      	bx	lr
	...

0800f478 <__i2b>:
 800f478:	b510      	push	{r4, lr}
 800f47a:	460c      	mov	r4, r1
 800f47c:	2101      	movs	r1, #1
 800f47e:	f7ff feb9 	bl	800f1f4 <_Balloc>
 800f482:	4602      	mov	r2, r0
 800f484:	b928      	cbnz	r0, 800f492 <__i2b+0x1a>
 800f486:	4b05      	ldr	r3, [pc, #20]	; (800f49c <__i2b+0x24>)
 800f488:	4805      	ldr	r0, [pc, #20]	; (800f4a0 <__i2b+0x28>)
 800f48a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f48e:	f7fc f98d 	bl	800b7ac <__assert_func>
 800f492:	2301      	movs	r3, #1
 800f494:	6144      	str	r4, [r0, #20]
 800f496:	6103      	str	r3, [r0, #16]
 800f498:	bd10      	pop	{r4, pc}
 800f49a:	bf00      	nop
 800f49c:	0805afa0 	.word	0x0805afa0
 800f4a0:	0805b090 	.word	0x0805b090

0800f4a4 <__multiply>:
 800f4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a8:	4691      	mov	r9, r2
 800f4aa:	690a      	ldr	r2, [r1, #16]
 800f4ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	bfb8      	it	lt
 800f4b4:	460b      	movlt	r3, r1
 800f4b6:	460c      	mov	r4, r1
 800f4b8:	bfbc      	itt	lt
 800f4ba:	464c      	movlt	r4, r9
 800f4bc:	4699      	movlt	r9, r3
 800f4be:	6927      	ldr	r7, [r4, #16]
 800f4c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f4c4:	68a3      	ldr	r3, [r4, #8]
 800f4c6:	6861      	ldr	r1, [r4, #4]
 800f4c8:	eb07 060a 	add.w	r6, r7, sl
 800f4cc:	42b3      	cmp	r3, r6
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	bfb8      	it	lt
 800f4d2:	3101      	addlt	r1, #1
 800f4d4:	f7ff fe8e 	bl	800f1f4 <_Balloc>
 800f4d8:	b930      	cbnz	r0, 800f4e8 <__multiply+0x44>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	4b44      	ldr	r3, [pc, #272]	; (800f5f0 <__multiply+0x14c>)
 800f4de:	4845      	ldr	r0, [pc, #276]	; (800f5f4 <__multiply+0x150>)
 800f4e0:	f240 115d 	movw	r1, #349	; 0x15d
 800f4e4:	f7fc f962 	bl	800b7ac <__assert_func>
 800f4e8:	f100 0514 	add.w	r5, r0, #20
 800f4ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f4f0:	462b      	mov	r3, r5
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	4543      	cmp	r3, r8
 800f4f6:	d321      	bcc.n	800f53c <__multiply+0x98>
 800f4f8:	f104 0314 	add.w	r3, r4, #20
 800f4fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f500:	f109 0314 	add.w	r3, r9, #20
 800f504:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f508:	9202      	str	r2, [sp, #8]
 800f50a:	1b3a      	subs	r2, r7, r4
 800f50c:	3a15      	subs	r2, #21
 800f50e:	f022 0203 	bic.w	r2, r2, #3
 800f512:	3204      	adds	r2, #4
 800f514:	f104 0115 	add.w	r1, r4, #21
 800f518:	428f      	cmp	r7, r1
 800f51a:	bf38      	it	cc
 800f51c:	2204      	movcc	r2, #4
 800f51e:	9201      	str	r2, [sp, #4]
 800f520:	9a02      	ldr	r2, [sp, #8]
 800f522:	9303      	str	r3, [sp, #12]
 800f524:	429a      	cmp	r2, r3
 800f526:	d80c      	bhi.n	800f542 <__multiply+0x9e>
 800f528:	2e00      	cmp	r6, #0
 800f52a:	dd03      	ble.n	800f534 <__multiply+0x90>
 800f52c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f530:	2b00      	cmp	r3, #0
 800f532:	d05a      	beq.n	800f5ea <__multiply+0x146>
 800f534:	6106      	str	r6, [r0, #16]
 800f536:	b005      	add	sp, #20
 800f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53c:	f843 2b04 	str.w	r2, [r3], #4
 800f540:	e7d8      	b.n	800f4f4 <__multiply+0x50>
 800f542:	f8b3 a000 	ldrh.w	sl, [r3]
 800f546:	f1ba 0f00 	cmp.w	sl, #0
 800f54a:	d024      	beq.n	800f596 <__multiply+0xf2>
 800f54c:	f104 0e14 	add.w	lr, r4, #20
 800f550:	46a9      	mov	r9, r5
 800f552:	f04f 0c00 	mov.w	ip, #0
 800f556:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f55a:	f8d9 1000 	ldr.w	r1, [r9]
 800f55e:	fa1f fb82 	uxth.w	fp, r2
 800f562:	b289      	uxth	r1, r1
 800f564:	fb0a 110b 	mla	r1, sl, fp, r1
 800f568:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f56c:	f8d9 2000 	ldr.w	r2, [r9]
 800f570:	4461      	add	r1, ip
 800f572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f576:	fb0a c20b 	mla	r2, sl, fp, ip
 800f57a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f57e:	b289      	uxth	r1, r1
 800f580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f584:	4577      	cmp	r7, lr
 800f586:	f849 1b04 	str.w	r1, [r9], #4
 800f58a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f58e:	d8e2      	bhi.n	800f556 <__multiply+0xb2>
 800f590:	9a01      	ldr	r2, [sp, #4]
 800f592:	f845 c002 	str.w	ip, [r5, r2]
 800f596:	9a03      	ldr	r2, [sp, #12]
 800f598:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f59c:	3304      	adds	r3, #4
 800f59e:	f1b9 0f00 	cmp.w	r9, #0
 800f5a2:	d020      	beq.n	800f5e6 <__multiply+0x142>
 800f5a4:	6829      	ldr	r1, [r5, #0]
 800f5a6:	f104 0c14 	add.w	ip, r4, #20
 800f5aa:	46ae      	mov	lr, r5
 800f5ac:	f04f 0a00 	mov.w	sl, #0
 800f5b0:	f8bc b000 	ldrh.w	fp, [ip]
 800f5b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f5b8:	fb09 220b 	mla	r2, r9, fp, r2
 800f5bc:	4492      	add	sl, r2
 800f5be:	b289      	uxth	r1, r1
 800f5c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f5c4:	f84e 1b04 	str.w	r1, [lr], #4
 800f5c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f5cc:	f8be 1000 	ldrh.w	r1, [lr]
 800f5d0:	0c12      	lsrs	r2, r2, #16
 800f5d2:	fb09 1102 	mla	r1, r9, r2, r1
 800f5d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f5da:	4567      	cmp	r7, ip
 800f5dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f5e0:	d8e6      	bhi.n	800f5b0 <__multiply+0x10c>
 800f5e2:	9a01      	ldr	r2, [sp, #4]
 800f5e4:	50a9      	str	r1, [r5, r2]
 800f5e6:	3504      	adds	r5, #4
 800f5e8:	e79a      	b.n	800f520 <__multiply+0x7c>
 800f5ea:	3e01      	subs	r6, #1
 800f5ec:	e79c      	b.n	800f528 <__multiply+0x84>
 800f5ee:	bf00      	nop
 800f5f0:	0805afa0 	.word	0x0805afa0
 800f5f4:	0805b090 	.word	0x0805b090

0800f5f8 <__pow5mult>:
 800f5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5fc:	4615      	mov	r5, r2
 800f5fe:	f012 0203 	ands.w	r2, r2, #3
 800f602:	4606      	mov	r6, r0
 800f604:	460f      	mov	r7, r1
 800f606:	d007      	beq.n	800f618 <__pow5mult+0x20>
 800f608:	4c25      	ldr	r4, [pc, #148]	; (800f6a0 <__pow5mult+0xa8>)
 800f60a:	3a01      	subs	r2, #1
 800f60c:	2300      	movs	r3, #0
 800f60e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f612:	f7ff fe51 	bl	800f2b8 <__multadd>
 800f616:	4607      	mov	r7, r0
 800f618:	10ad      	asrs	r5, r5, #2
 800f61a:	d03d      	beq.n	800f698 <__pow5mult+0xa0>
 800f61c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f61e:	b97c      	cbnz	r4, 800f640 <__pow5mult+0x48>
 800f620:	2010      	movs	r0, #16
 800f622:	f7fc f917 	bl	800b854 <malloc>
 800f626:	4602      	mov	r2, r0
 800f628:	6270      	str	r0, [r6, #36]	; 0x24
 800f62a:	b928      	cbnz	r0, 800f638 <__pow5mult+0x40>
 800f62c:	4b1d      	ldr	r3, [pc, #116]	; (800f6a4 <__pow5mult+0xac>)
 800f62e:	481e      	ldr	r0, [pc, #120]	; (800f6a8 <__pow5mult+0xb0>)
 800f630:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f634:	f7fc f8ba 	bl	800b7ac <__assert_func>
 800f638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f63c:	6004      	str	r4, [r0, #0]
 800f63e:	60c4      	str	r4, [r0, #12]
 800f640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f648:	b94c      	cbnz	r4, 800f65e <__pow5mult+0x66>
 800f64a:	f240 2171 	movw	r1, #625	; 0x271
 800f64e:	4630      	mov	r0, r6
 800f650:	f7ff ff12 	bl	800f478 <__i2b>
 800f654:	2300      	movs	r3, #0
 800f656:	f8c8 0008 	str.w	r0, [r8, #8]
 800f65a:	4604      	mov	r4, r0
 800f65c:	6003      	str	r3, [r0, #0]
 800f65e:	f04f 0900 	mov.w	r9, #0
 800f662:	07eb      	lsls	r3, r5, #31
 800f664:	d50a      	bpl.n	800f67c <__pow5mult+0x84>
 800f666:	4639      	mov	r1, r7
 800f668:	4622      	mov	r2, r4
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7ff ff1a 	bl	800f4a4 <__multiply>
 800f670:	4639      	mov	r1, r7
 800f672:	4680      	mov	r8, r0
 800f674:	4630      	mov	r0, r6
 800f676:	f7ff fdfd 	bl	800f274 <_Bfree>
 800f67a:	4647      	mov	r7, r8
 800f67c:	106d      	asrs	r5, r5, #1
 800f67e:	d00b      	beq.n	800f698 <__pow5mult+0xa0>
 800f680:	6820      	ldr	r0, [r4, #0]
 800f682:	b938      	cbnz	r0, 800f694 <__pow5mult+0x9c>
 800f684:	4622      	mov	r2, r4
 800f686:	4621      	mov	r1, r4
 800f688:	4630      	mov	r0, r6
 800f68a:	f7ff ff0b 	bl	800f4a4 <__multiply>
 800f68e:	6020      	str	r0, [r4, #0]
 800f690:	f8c0 9000 	str.w	r9, [r0]
 800f694:	4604      	mov	r4, r0
 800f696:	e7e4      	b.n	800f662 <__pow5mult+0x6a>
 800f698:	4638      	mov	r0, r7
 800f69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f69e:	bf00      	nop
 800f6a0:	0805b1e0 	.word	0x0805b1e0
 800f6a4:	0805af2e 	.word	0x0805af2e
 800f6a8:	0805b090 	.word	0x0805b090

0800f6ac <__lshift>:
 800f6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	6849      	ldr	r1, [r1, #4]
 800f6b4:	6923      	ldr	r3, [r4, #16]
 800f6b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f6ba:	68a3      	ldr	r3, [r4, #8]
 800f6bc:	4607      	mov	r7, r0
 800f6be:	4691      	mov	r9, r2
 800f6c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f6c4:	f108 0601 	add.w	r6, r8, #1
 800f6c8:	42b3      	cmp	r3, r6
 800f6ca:	db0b      	blt.n	800f6e4 <__lshift+0x38>
 800f6cc:	4638      	mov	r0, r7
 800f6ce:	f7ff fd91 	bl	800f1f4 <_Balloc>
 800f6d2:	4605      	mov	r5, r0
 800f6d4:	b948      	cbnz	r0, 800f6ea <__lshift+0x3e>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	4b2a      	ldr	r3, [pc, #168]	; (800f784 <__lshift+0xd8>)
 800f6da:	482b      	ldr	r0, [pc, #172]	; (800f788 <__lshift+0xdc>)
 800f6dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f6e0:	f7fc f864 	bl	800b7ac <__assert_func>
 800f6e4:	3101      	adds	r1, #1
 800f6e6:	005b      	lsls	r3, r3, #1
 800f6e8:	e7ee      	b.n	800f6c8 <__lshift+0x1c>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	f100 0114 	add.w	r1, r0, #20
 800f6f0:	f100 0210 	add.w	r2, r0, #16
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	4553      	cmp	r3, sl
 800f6f8:	db37      	blt.n	800f76a <__lshift+0xbe>
 800f6fa:	6920      	ldr	r0, [r4, #16]
 800f6fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f700:	f104 0314 	add.w	r3, r4, #20
 800f704:	f019 091f 	ands.w	r9, r9, #31
 800f708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f70c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f710:	d02f      	beq.n	800f772 <__lshift+0xc6>
 800f712:	f1c9 0e20 	rsb	lr, r9, #32
 800f716:	468a      	mov	sl, r1
 800f718:	f04f 0c00 	mov.w	ip, #0
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	fa02 f209 	lsl.w	r2, r2, r9
 800f722:	ea42 020c 	orr.w	r2, r2, ip
 800f726:	f84a 2b04 	str.w	r2, [sl], #4
 800f72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f72e:	4298      	cmp	r0, r3
 800f730:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f734:	d8f2      	bhi.n	800f71c <__lshift+0x70>
 800f736:	1b03      	subs	r3, r0, r4
 800f738:	3b15      	subs	r3, #21
 800f73a:	f023 0303 	bic.w	r3, r3, #3
 800f73e:	3304      	adds	r3, #4
 800f740:	f104 0215 	add.w	r2, r4, #21
 800f744:	4290      	cmp	r0, r2
 800f746:	bf38      	it	cc
 800f748:	2304      	movcc	r3, #4
 800f74a:	f841 c003 	str.w	ip, [r1, r3]
 800f74e:	f1bc 0f00 	cmp.w	ip, #0
 800f752:	d001      	beq.n	800f758 <__lshift+0xac>
 800f754:	f108 0602 	add.w	r6, r8, #2
 800f758:	3e01      	subs	r6, #1
 800f75a:	4638      	mov	r0, r7
 800f75c:	612e      	str	r6, [r5, #16]
 800f75e:	4621      	mov	r1, r4
 800f760:	f7ff fd88 	bl	800f274 <_Bfree>
 800f764:	4628      	mov	r0, r5
 800f766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f76a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f76e:	3301      	adds	r3, #1
 800f770:	e7c1      	b.n	800f6f6 <__lshift+0x4a>
 800f772:	3904      	subs	r1, #4
 800f774:	f853 2b04 	ldr.w	r2, [r3], #4
 800f778:	f841 2f04 	str.w	r2, [r1, #4]!
 800f77c:	4298      	cmp	r0, r3
 800f77e:	d8f9      	bhi.n	800f774 <__lshift+0xc8>
 800f780:	e7ea      	b.n	800f758 <__lshift+0xac>
 800f782:	bf00      	nop
 800f784:	0805afa0 	.word	0x0805afa0
 800f788:	0805b090 	.word	0x0805b090

0800f78c <__mcmp>:
 800f78c:	b530      	push	{r4, r5, lr}
 800f78e:	6902      	ldr	r2, [r0, #16]
 800f790:	690c      	ldr	r4, [r1, #16]
 800f792:	1b12      	subs	r2, r2, r4
 800f794:	d10e      	bne.n	800f7b4 <__mcmp+0x28>
 800f796:	f100 0314 	add.w	r3, r0, #20
 800f79a:	3114      	adds	r1, #20
 800f79c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f7a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f7a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f7a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f7ac:	42a5      	cmp	r5, r4
 800f7ae:	d003      	beq.n	800f7b8 <__mcmp+0x2c>
 800f7b0:	d305      	bcc.n	800f7be <__mcmp+0x32>
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	bd30      	pop	{r4, r5, pc}
 800f7b8:	4283      	cmp	r3, r0
 800f7ba:	d3f3      	bcc.n	800f7a4 <__mcmp+0x18>
 800f7bc:	e7fa      	b.n	800f7b4 <__mcmp+0x28>
 800f7be:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c2:	e7f7      	b.n	800f7b4 <__mcmp+0x28>

0800f7c4 <__mdiff>:
 800f7c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c8:	460c      	mov	r4, r1
 800f7ca:	4606      	mov	r6, r0
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	4690      	mov	r8, r2
 800f7d2:	f7ff ffdb 	bl	800f78c <__mcmp>
 800f7d6:	1e05      	subs	r5, r0, #0
 800f7d8:	d110      	bne.n	800f7fc <__mdiff+0x38>
 800f7da:	4629      	mov	r1, r5
 800f7dc:	4630      	mov	r0, r6
 800f7de:	f7ff fd09 	bl	800f1f4 <_Balloc>
 800f7e2:	b930      	cbnz	r0, 800f7f2 <__mdiff+0x2e>
 800f7e4:	4b3a      	ldr	r3, [pc, #232]	; (800f8d0 <__mdiff+0x10c>)
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	f240 2132 	movw	r1, #562	; 0x232
 800f7ec:	4839      	ldr	r0, [pc, #228]	; (800f8d4 <__mdiff+0x110>)
 800f7ee:	f7fb ffdd 	bl	800b7ac <__assert_func>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fc:	bfa4      	itt	ge
 800f7fe:	4643      	movge	r3, r8
 800f800:	46a0      	movge	r8, r4
 800f802:	4630      	mov	r0, r6
 800f804:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f808:	bfa6      	itte	ge
 800f80a:	461c      	movge	r4, r3
 800f80c:	2500      	movge	r5, #0
 800f80e:	2501      	movlt	r5, #1
 800f810:	f7ff fcf0 	bl	800f1f4 <_Balloc>
 800f814:	b920      	cbnz	r0, 800f820 <__mdiff+0x5c>
 800f816:	4b2e      	ldr	r3, [pc, #184]	; (800f8d0 <__mdiff+0x10c>)
 800f818:	4602      	mov	r2, r0
 800f81a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f81e:	e7e5      	b.n	800f7ec <__mdiff+0x28>
 800f820:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f824:	6926      	ldr	r6, [r4, #16]
 800f826:	60c5      	str	r5, [r0, #12]
 800f828:	f104 0914 	add.w	r9, r4, #20
 800f82c:	f108 0514 	add.w	r5, r8, #20
 800f830:	f100 0e14 	add.w	lr, r0, #20
 800f834:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f838:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f83c:	f108 0210 	add.w	r2, r8, #16
 800f840:	46f2      	mov	sl, lr
 800f842:	2100      	movs	r1, #0
 800f844:	f859 3b04 	ldr.w	r3, [r9], #4
 800f848:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f84c:	fa1f f883 	uxth.w	r8, r3
 800f850:	fa11 f18b 	uxtah	r1, r1, fp
 800f854:	0c1b      	lsrs	r3, r3, #16
 800f856:	eba1 0808 	sub.w	r8, r1, r8
 800f85a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f85e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f862:	fa1f f888 	uxth.w	r8, r8
 800f866:	1419      	asrs	r1, r3, #16
 800f868:	454e      	cmp	r6, r9
 800f86a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f86e:	f84a 3b04 	str.w	r3, [sl], #4
 800f872:	d8e7      	bhi.n	800f844 <__mdiff+0x80>
 800f874:	1b33      	subs	r3, r6, r4
 800f876:	3b15      	subs	r3, #21
 800f878:	f023 0303 	bic.w	r3, r3, #3
 800f87c:	3304      	adds	r3, #4
 800f87e:	3415      	adds	r4, #21
 800f880:	42a6      	cmp	r6, r4
 800f882:	bf38      	it	cc
 800f884:	2304      	movcc	r3, #4
 800f886:	441d      	add	r5, r3
 800f888:	4473      	add	r3, lr
 800f88a:	469e      	mov	lr, r3
 800f88c:	462e      	mov	r6, r5
 800f88e:	4566      	cmp	r6, ip
 800f890:	d30e      	bcc.n	800f8b0 <__mdiff+0xec>
 800f892:	f10c 0203 	add.w	r2, ip, #3
 800f896:	1b52      	subs	r2, r2, r5
 800f898:	f022 0203 	bic.w	r2, r2, #3
 800f89c:	3d03      	subs	r5, #3
 800f89e:	45ac      	cmp	ip, r5
 800f8a0:	bf38      	it	cc
 800f8a2:	2200      	movcc	r2, #0
 800f8a4:	441a      	add	r2, r3
 800f8a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f8aa:	b17b      	cbz	r3, 800f8cc <__mdiff+0x108>
 800f8ac:	6107      	str	r7, [r0, #16]
 800f8ae:	e7a3      	b.n	800f7f8 <__mdiff+0x34>
 800f8b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800f8b4:	fa11 f288 	uxtah	r2, r1, r8
 800f8b8:	1414      	asrs	r4, r2, #16
 800f8ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f8be:	b292      	uxth	r2, r2
 800f8c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f8c4:	f84e 2b04 	str.w	r2, [lr], #4
 800f8c8:	1421      	asrs	r1, r4, #16
 800f8ca:	e7e0      	b.n	800f88e <__mdiff+0xca>
 800f8cc:	3f01      	subs	r7, #1
 800f8ce:	e7ea      	b.n	800f8a6 <__mdiff+0xe2>
 800f8d0:	0805afa0 	.word	0x0805afa0
 800f8d4:	0805b090 	.word	0x0805b090

0800f8d8 <__ulp>:
 800f8d8:	b082      	sub	sp, #8
 800f8da:	ed8d 0b00 	vstr	d0, [sp]
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	4912      	ldr	r1, [pc, #72]	; (800f92c <__ulp+0x54>)
 800f8e2:	4019      	ands	r1, r3
 800f8e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f8e8:	2900      	cmp	r1, #0
 800f8ea:	dd05      	ble.n	800f8f8 <__ulp+0x20>
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	ec43 2b10 	vmov	d0, r2, r3
 800f8f4:	b002      	add	sp, #8
 800f8f6:	4770      	bx	lr
 800f8f8:	4249      	negs	r1, r1
 800f8fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f8fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f902:	f04f 0200 	mov.w	r2, #0
 800f906:	f04f 0300 	mov.w	r3, #0
 800f90a:	da04      	bge.n	800f916 <__ulp+0x3e>
 800f90c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f910:	fa41 f300 	asr.w	r3, r1, r0
 800f914:	e7ec      	b.n	800f8f0 <__ulp+0x18>
 800f916:	f1a0 0114 	sub.w	r1, r0, #20
 800f91a:	291e      	cmp	r1, #30
 800f91c:	bfda      	itte	le
 800f91e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f922:	fa20 f101 	lsrle.w	r1, r0, r1
 800f926:	2101      	movgt	r1, #1
 800f928:	460a      	mov	r2, r1
 800f92a:	e7e1      	b.n	800f8f0 <__ulp+0x18>
 800f92c:	7ff00000 	.word	0x7ff00000

0800f930 <__b2d>:
 800f930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f932:	6905      	ldr	r5, [r0, #16]
 800f934:	f100 0714 	add.w	r7, r0, #20
 800f938:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f93c:	1f2e      	subs	r6, r5, #4
 800f93e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f942:	4620      	mov	r0, r4
 800f944:	f7ff fd48 	bl	800f3d8 <__hi0bits>
 800f948:	f1c0 0320 	rsb	r3, r0, #32
 800f94c:	280a      	cmp	r0, #10
 800f94e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f9cc <__b2d+0x9c>
 800f952:	600b      	str	r3, [r1, #0]
 800f954:	dc14      	bgt.n	800f980 <__b2d+0x50>
 800f956:	f1c0 0e0b 	rsb	lr, r0, #11
 800f95a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f95e:	42b7      	cmp	r7, r6
 800f960:	ea41 030c 	orr.w	r3, r1, ip
 800f964:	bf34      	ite	cc
 800f966:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f96a:	2100      	movcs	r1, #0
 800f96c:	3015      	adds	r0, #21
 800f96e:	fa04 f000 	lsl.w	r0, r4, r0
 800f972:	fa21 f10e 	lsr.w	r1, r1, lr
 800f976:	ea40 0201 	orr.w	r2, r0, r1
 800f97a:	ec43 2b10 	vmov	d0, r2, r3
 800f97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f980:	42b7      	cmp	r7, r6
 800f982:	bf3a      	itte	cc
 800f984:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f988:	f1a5 0608 	subcc.w	r6, r5, #8
 800f98c:	2100      	movcs	r1, #0
 800f98e:	380b      	subs	r0, #11
 800f990:	d017      	beq.n	800f9c2 <__b2d+0x92>
 800f992:	f1c0 0c20 	rsb	ip, r0, #32
 800f996:	fa04 f500 	lsl.w	r5, r4, r0
 800f99a:	42be      	cmp	r6, r7
 800f99c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f9a0:	ea45 0504 	orr.w	r5, r5, r4
 800f9a4:	bf8c      	ite	hi
 800f9a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f9aa:	2400      	movls	r4, #0
 800f9ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f9b0:	fa01 f000 	lsl.w	r0, r1, r0
 800f9b4:	fa24 f40c 	lsr.w	r4, r4, ip
 800f9b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f9bc:	ea40 0204 	orr.w	r2, r0, r4
 800f9c0:	e7db      	b.n	800f97a <__b2d+0x4a>
 800f9c2:	ea44 030c 	orr.w	r3, r4, ip
 800f9c6:	460a      	mov	r2, r1
 800f9c8:	e7d7      	b.n	800f97a <__b2d+0x4a>
 800f9ca:	bf00      	nop
 800f9cc:	3ff00000 	.word	0x3ff00000

0800f9d0 <__d2b>:
 800f9d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9d4:	4689      	mov	r9, r1
 800f9d6:	2101      	movs	r1, #1
 800f9d8:	ec57 6b10 	vmov	r6, r7, d0
 800f9dc:	4690      	mov	r8, r2
 800f9de:	f7ff fc09 	bl	800f1f4 <_Balloc>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	b930      	cbnz	r0, 800f9f4 <__d2b+0x24>
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	4b25      	ldr	r3, [pc, #148]	; (800fa80 <__d2b+0xb0>)
 800f9ea:	4826      	ldr	r0, [pc, #152]	; (800fa84 <__d2b+0xb4>)
 800f9ec:	f240 310a 	movw	r1, #778	; 0x30a
 800f9f0:	f7fb fedc 	bl	800b7ac <__assert_func>
 800f9f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f9f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9fc:	bb35      	cbnz	r5, 800fa4c <__d2b+0x7c>
 800f9fe:	2e00      	cmp	r6, #0
 800fa00:	9301      	str	r3, [sp, #4]
 800fa02:	d028      	beq.n	800fa56 <__d2b+0x86>
 800fa04:	4668      	mov	r0, sp
 800fa06:	9600      	str	r6, [sp, #0]
 800fa08:	f7ff fd06 	bl	800f418 <__lo0bits>
 800fa0c:	9900      	ldr	r1, [sp, #0]
 800fa0e:	b300      	cbz	r0, 800fa52 <__d2b+0x82>
 800fa10:	9a01      	ldr	r2, [sp, #4]
 800fa12:	f1c0 0320 	rsb	r3, r0, #32
 800fa16:	fa02 f303 	lsl.w	r3, r2, r3
 800fa1a:	430b      	orrs	r3, r1
 800fa1c:	40c2      	lsrs	r2, r0
 800fa1e:	6163      	str	r3, [r4, #20]
 800fa20:	9201      	str	r2, [sp, #4]
 800fa22:	9b01      	ldr	r3, [sp, #4]
 800fa24:	61a3      	str	r3, [r4, #24]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	bf14      	ite	ne
 800fa2a:	2202      	movne	r2, #2
 800fa2c:	2201      	moveq	r2, #1
 800fa2e:	6122      	str	r2, [r4, #16]
 800fa30:	b1d5      	cbz	r5, 800fa68 <__d2b+0x98>
 800fa32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fa36:	4405      	add	r5, r0
 800fa38:	f8c9 5000 	str.w	r5, [r9]
 800fa3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa40:	f8c8 0000 	str.w	r0, [r8]
 800fa44:	4620      	mov	r0, r4
 800fa46:	b003      	add	sp, #12
 800fa48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa50:	e7d5      	b.n	800f9fe <__d2b+0x2e>
 800fa52:	6161      	str	r1, [r4, #20]
 800fa54:	e7e5      	b.n	800fa22 <__d2b+0x52>
 800fa56:	a801      	add	r0, sp, #4
 800fa58:	f7ff fcde 	bl	800f418 <__lo0bits>
 800fa5c:	9b01      	ldr	r3, [sp, #4]
 800fa5e:	6163      	str	r3, [r4, #20]
 800fa60:	2201      	movs	r2, #1
 800fa62:	6122      	str	r2, [r4, #16]
 800fa64:	3020      	adds	r0, #32
 800fa66:	e7e3      	b.n	800fa30 <__d2b+0x60>
 800fa68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa70:	f8c9 0000 	str.w	r0, [r9]
 800fa74:	6918      	ldr	r0, [r3, #16]
 800fa76:	f7ff fcaf 	bl	800f3d8 <__hi0bits>
 800fa7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa7e:	e7df      	b.n	800fa40 <__d2b+0x70>
 800fa80:	0805afa0 	.word	0x0805afa0
 800fa84:	0805b090 	.word	0x0805b090

0800fa88 <__ratio>:
 800fa88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8c:	4688      	mov	r8, r1
 800fa8e:	4669      	mov	r1, sp
 800fa90:	4681      	mov	r9, r0
 800fa92:	f7ff ff4d 	bl	800f930 <__b2d>
 800fa96:	a901      	add	r1, sp, #4
 800fa98:	4640      	mov	r0, r8
 800fa9a:	ec55 4b10 	vmov	r4, r5, d0
 800fa9e:	f7ff ff47 	bl	800f930 <__b2d>
 800faa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800faa6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800faaa:	eba3 0c02 	sub.w	ip, r3, r2
 800faae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fab2:	1a9b      	subs	r3, r3, r2
 800fab4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fab8:	ec51 0b10 	vmov	r0, r1, d0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	bfd6      	itet	le
 800fac0:	460a      	movle	r2, r1
 800fac2:	462a      	movgt	r2, r5
 800fac4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fac8:	468b      	mov	fp, r1
 800faca:	462f      	mov	r7, r5
 800facc:	bfd4      	ite	le
 800face:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fad2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fad6:	4620      	mov	r0, r4
 800fad8:	ee10 2a10 	vmov	r2, s0
 800fadc:	465b      	mov	r3, fp
 800fade:	4639      	mov	r1, r7
 800fae0:	f7f0 fec4 	bl	800086c <__aeabi_ddiv>
 800fae4:	ec41 0b10 	vmov	d0, r0, r1
 800fae8:	b003      	add	sp, #12
 800faea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800faee <__copybits>:
 800faee:	3901      	subs	r1, #1
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	1149      	asrs	r1, r1, #5
 800faf4:	6914      	ldr	r4, [r2, #16]
 800faf6:	3101      	adds	r1, #1
 800faf8:	f102 0314 	add.w	r3, r2, #20
 800fafc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb04:	1f05      	subs	r5, r0, #4
 800fb06:	42a3      	cmp	r3, r4
 800fb08:	d30c      	bcc.n	800fb24 <__copybits+0x36>
 800fb0a:	1aa3      	subs	r3, r4, r2
 800fb0c:	3b11      	subs	r3, #17
 800fb0e:	f023 0303 	bic.w	r3, r3, #3
 800fb12:	3211      	adds	r2, #17
 800fb14:	42a2      	cmp	r2, r4
 800fb16:	bf88      	it	hi
 800fb18:	2300      	movhi	r3, #0
 800fb1a:	4418      	add	r0, r3
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	4288      	cmp	r0, r1
 800fb20:	d305      	bcc.n	800fb2e <__copybits+0x40>
 800fb22:	bd70      	pop	{r4, r5, r6, pc}
 800fb24:	f853 6b04 	ldr.w	r6, [r3], #4
 800fb28:	f845 6f04 	str.w	r6, [r5, #4]!
 800fb2c:	e7eb      	b.n	800fb06 <__copybits+0x18>
 800fb2e:	f840 3b04 	str.w	r3, [r0], #4
 800fb32:	e7f4      	b.n	800fb1e <__copybits+0x30>

0800fb34 <__any_on>:
 800fb34:	f100 0214 	add.w	r2, r0, #20
 800fb38:	6900      	ldr	r0, [r0, #16]
 800fb3a:	114b      	asrs	r3, r1, #5
 800fb3c:	4298      	cmp	r0, r3
 800fb3e:	b510      	push	{r4, lr}
 800fb40:	db11      	blt.n	800fb66 <__any_on+0x32>
 800fb42:	dd0a      	ble.n	800fb5a <__any_on+0x26>
 800fb44:	f011 011f 	ands.w	r1, r1, #31
 800fb48:	d007      	beq.n	800fb5a <__any_on+0x26>
 800fb4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb4e:	fa24 f001 	lsr.w	r0, r4, r1
 800fb52:	fa00 f101 	lsl.w	r1, r0, r1
 800fb56:	428c      	cmp	r4, r1
 800fb58:	d10b      	bne.n	800fb72 <__any_on+0x3e>
 800fb5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d803      	bhi.n	800fb6a <__any_on+0x36>
 800fb62:	2000      	movs	r0, #0
 800fb64:	bd10      	pop	{r4, pc}
 800fb66:	4603      	mov	r3, r0
 800fb68:	e7f7      	b.n	800fb5a <__any_on+0x26>
 800fb6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb6e:	2900      	cmp	r1, #0
 800fb70:	d0f5      	beq.n	800fb5e <__any_on+0x2a>
 800fb72:	2001      	movs	r0, #1
 800fb74:	e7f6      	b.n	800fb64 <__any_on+0x30>

0800fb76 <_calloc_r>:
 800fb76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb78:	fba1 2402 	umull	r2, r4, r1, r2
 800fb7c:	b94c      	cbnz	r4, 800fb92 <_calloc_r+0x1c>
 800fb7e:	4611      	mov	r1, r2
 800fb80:	9201      	str	r2, [sp, #4]
 800fb82:	f7fb fef1 	bl	800b968 <_malloc_r>
 800fb86:	9a01      	ldr	r2, [sp, #4]
 800fb88:	4605      	mov	r5, r0
 800fb8a:	b930      	cbnz	r0, 800fb9a <_calloc_r+0x24>
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	b003      	add	sp, #12
 800fb90:	bd30      	pop	{r4, r5, pc}
 800fb92:	220c      	movs	r2, #12
 800fb94:	6002      	str	r2, [r0, #0]
 800fb96:	2500      	movs	r5, #0
 800fb98:	e7f8      	b.n	800fb8c <_calloc_r+0x16>
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	f7fb fe70 	bl	800b880 <memset>
 800fba0:	e7f4      	b.n	800fb8c <_calloc_r+0x16>

0800fba2 <_realloc_r>:
 800fba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fba6:	4680      	mov	r8, r0
 800fba8:	4614      	mov	r4, r2
 800fbaa:	460e      	mov	r6, r1
 800fbac:	b921      	cbnz	r1, 800fbb8 <_realloc_r+0x16>
 800fbae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	f7fb bed8 	b.w	800b968 <_malloc_r>
 800fbb8:	b92a      	cbnz	r2, 800fbc6 <_realloc_r+0x24>
 800fbba:	f7fb fe69 	bl	800b890 <_free_r>
 800fbbe:	4625      	mov	r5, r4
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc6:	f000 fa7d 	bl	80100c4 <_malloc_usable_size_r>
 800fbca:	4284      	cmp	r4, r0
 800fbcc:	4607      	mov	r7, r0
 800fbce:	d802      	bhi.n	800fbd6 <_realloc_r+0x34>
 800fbd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fbd4:	d812      	bhi.n	800fbfc <_realloc_r+0x5a>
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4640      	mov	r0, r8
 800fbda:	f7fb fec5 	bl	800b968 <_malloc_r>
 800fbde:	4605      	mov	r5, r0
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	d0ed      	beq.n	800fbc0 <_realloc_r+0x1e>
 800fbe4:	42bc      	cmp	r4, r7
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	4631      	mov	r1, r6
 800fbea:	bf28      	it	cs
 800fbec:	463a      	movcs	r2, r7
 800fbee:	f7fb fe39 	bl	800b864 <memcpy>
 800fbf2:	4631      	mov	r1, r6
 800fbf4:	4640      	mov	r0, r8
 800fbf6:	f7fb fe4b 	bl	800b890 <_free_r>
 800fbfa:	e7e1      	b.n	800fbc0 <_realloc_r+0x1e>
 800fbfc:	4635      	mov	r5, r6
 800fbfe:	e7df      	b.n	800fbc0 <_realloc_r+0x1e>

0800fc00 <__ssputs_r>:
 800fc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc04:	688e      	ldr	r6, [r1, #8]
 800fc06:	429e      	cmp	r6, r3
 800fc08:	4682      	mov	sl, r0
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	4690      	mov	r8, r2
 800fc0e:	461f      	mov	r7, r3
 800fc10:	d838      	bhi.n	800fc84 <__ssputs_r+0x84>
 800fc12:	898a      	ldrh	r2, [r1, #12]
 800fc14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc18:	d032      	beq.n	800fc80 <__ssputs_r+0x80>
 800fc1a:	6825      	ldr	r5, [r4, #0]
 800fc1c:	6909      	ldr	r1, [r1, #16]
 800fc1e:	eba5 0901 	sub.w	r9, r5, r1
 800fc22:	6965      	ldr	r5, [r4, #20]
 800fc24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	444b      	add	r3, r9
 800fc30:	106d      	asrs	r5, r5, #1
 800fc32:	429d      	cmp	r5, r3
 800fc34:	bf38      	it	cc
 800fc36:	461d      	movcc	r5, r3
 800fc38:	0553      	lsls	r3, r2, #21
 800fc3a:	d531      	bpl.n	800fca0 <__ssputs_r+0xa0>
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	f7fb fe93 	bl	800b968 <_malloc_r>
 800fc42:	4606      	mov	r6, r0
 800fc44:	b950      	cbnz	r0, 800fc5c <__ssputs_r+0x5c>
 800fc46:	230c      	movs	r3, #12
 800fc48:	f8ca 3000 	str.w	r3, [sl]
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc52:	81a3      	strh	r3, [r4, #12]
 800fc54:	f04f 30ff 	mov.w	r0, #4294967295
 800fc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc5c:	6921      	ldr	r1, [r4, #16]
 800fc5e:	464a      	mov	r2, r9
 800fc60:	f7fb fe00 	bl	800b864 <memcpy>
 800fc64:	89a3      	ldrh	r3, [r4, #12]
 800fc66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc6e:	81a3      	strh	r3, [r4, #12]
 800fc70:	6126      	str	r6, [r4, #16]
 800fc72:	6165      	str	r5, [r4, #20]
 800fc74:	444e      	add	r6, r9
 800fc76:	eba5 0509 	sub.w	r5, r5, r9
 800fc7a:	6026      	str	r6, [r4, #0]
 800fc7c:	60a5      	str	r5, [r4, #8]
 800fc7e:	463e      	mov	r6, r7
 800fc80:	42be      	cmp	r6, r7
 800fc82:	d900      	bls.n	800fc86 <__ssputs_r+0x86>
 800fc84:	463e      	mov	r6, r7
 800fc86:	6820      	ldr	r0, [r4, #0]
 800fc88:	4632      	mov	r2, r6
 800fc8a:	4641      	mov	r1, r8
 800fc8c:	f7ff fa8c 	bl	800f1a8 <memmove>
 800fc90:	68a3      	ldr	r3, [r4, #8]
 800fc92:	1b9b      	subs	r3, r3, r6
 800fc94:	60a3      	str	r3, [r4, #8]
 800fc96:	6823      	ldr	r3, [r4, #0]
 800fc98:	4433      	add	r3, r6
 800fc9a:	6023      	str	r3, [r4, #0]
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	e7db      	b.n	800fc58 <__ssputs_r+0x58>
 800fca0:	462a      	mov	r2, r5
 800fca2:	f7ff ff7e 	bl	800fba2 <_realloc_r>
 800fca6:	4606      	mov	r6, r0
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d1e1      	bne.n	800fc70 <__ssputs_r+0x70>
 800fcac:	6921      	ldr	r1, [r4, #16]
 800fcae:	4650      	mov	r0, sl
 800fcb0:	f7fb fdee 	bl	800b890 <_free_r>
 800fcb4:	e7c7      	b.n	800fc46 <__ssputs_r+0x46>
	...

0800fcb8 <_svfiprintf_r>:
 800fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcbc:	4698      	mov	r8, r3
 800fcbe:	898b      	ldrh	r3, [r1, #12]
 800fcc0:	061b      	lsls	r3, r3, #24
 800fcc2:	b09d      	sub	sp, #116	; 0x74
 800fcc4:	4607      	mov	r7, r0
 800fcc6:	460d      	mov	r5, r1
 800fcc8:	4614      	mov	r4, r2
 800fcca:	d50e      	bpl.n	800fcea <_svfiprintf_r+0x32>
 800fccc:	690b      	ldr	r3, [r1, #16]
 800fcce:	b963      	cbnz	r3, 800fcea <_svfiprintf_r+0x32>
 800fcd0:	2140      	movs	r1, #64	; 0x40
 800fcd2:	f7fb fe49 	bl	800b968 <_malloc_r>
 800fcd6:	6028      	str	r0, [r5, #0]
 800fcd8:	6128      	str	r0, [r5, #16]
 800fcda:	b920      	cbnz	r0, 800fce6 <_svfiprintf_r+0x2e>
 800fcdc:	230c      	movs	r3, #12
 800fcde:	603b      	str	r3, [r7, #0]
 800fce0:	f04f 30ff 	mov.w	r0, #4294967295
 800fce4:	e0d1      	b.n	800fe8a <_svfiprintf_r+0x1d2>
 800fce6:	2340      	movs	r3, #64	; 0x40
 800fce8:	616b      	str	r3, [r5, #20]
 800fcea:	2300      	movs	r3, #0
 800fcec:	9309      	str	r3, [sp, #36]	; 0x24
 800fcee:	2320      	movs	r3, #32
 800fcf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcf8:	2330      	movs	r3, #48	; 0x30
 800fcfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fea4 <_svfiprintf_r+0x1ec>
 800fcfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd02:	f04f 0901 	mov.w	r9, #1
 800fd06:	4623      	mov	r3, r4
 800fd08:	469a      	mov	sl, r3
 800fd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd0e:	b10a      	cbz	r2, 800fd14 <_svfiprintf_r+0x5c>
 800fd10:	2a25      	cmp	r2, #37	; 0x25
 800fd12:	d1f9      	bne.n	800fd08 <_svfiprintf_r+0x50>
 800fd14:	ebba 0b04 	subs.w	fp, sl, r4
 800fd18:	d00b      	beq.n	800fd32 <_svfiprintf_r+0x7a>
 800fd1a:	465b      	mov	r3, fp
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	4629      	mov	r1, r5
 800fd20:	4638      	mov	r0, r7
 800fd22:	f7ff ff6d 	bl	800fc00 <__ssputs_r>
 800fd26:	3001      	adds	r0, #1
 800fd28:	f000 80aa 	beq.w	800fe80 <_svfiprintf_r+0x1c8>
 800fd2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd2e:	445a      	add	r2, fp
 800fd30:	9209      	str	r2, [sp, #36]	; 0x24
 800fd32:	f89a 3000 	ldrb.w	r3, [sl]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f000 80a2 	beq.w	800fe80 <_svfiprintf_r+0x1c8>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd46:	f10a 0a01 	add.w	sl, sl, #1
 800fd4a:	9304      	str	r3, [sp, #16]
 800fd4c:	9307      	str	r3, [sp, #28]
 800fd4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd52:	931a      	str	r3, [sp, #104]	; 0x68
 800fd54:	4654      	mov	r4, sl
 800fd56:	2205      	movs	r2, #5
 800fd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd5c:	4851      	ldr	r0, [pc, #324]	; (800fea4 <_svfiprintf_r+0x1ec>)
 800fd5e:	f7f0 fa4f 	bl	8000200 <memchr>
 800fd62:	9a04      	ldr	r2, [sp, #16]
 800fd64:	b9d8      	cbnz	r0, 800fd9e <_svfiprintf_r+0xe6>
 800fd66:	06d0      	lsls	r0, r2, #27
 800fd68:	bf44      	itt	mi
 800fd6a:	2320      	movmi	r3, #32
 800fd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd70:	0711      	lsls	r1, r2, #28
 800fd72:	bf44      	itt	mi
 800fd74:	232b      	movmi	r3, #43	; 0x2b
 800fd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd7e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd80:	d015      	beq.n	800fdae <_svfiprintf_r+0xf6>
 800fd82:	9a07      	ldr	r2, [sp, #28]
 800fd84:	4654      	mov	r4, sl
 800fd86:	2000      	movs	r0, #0
 800fd88:	f04f 0c0a 	mov.w	ip, #10
 800fd8c:	4621      	mov	r1, r4
 800fd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd92:	3b30      	subs	r3, #48	; 0x30
 800fd94:	2b09      	cmp	r3, #9
 800fd96:	d94e      	bls.n	800fe36 <_svfiprintf_r+0x17e>
 800fd98:	b1b0      	cbz	r0, 800fdc8 <_svfiprintf_r+0x110>
 800fd9a:	9207      	str	r2, [sp, #28]
 800fd9c:	e014      	b.n	800fdc8 <_svfiprintf_r+0x110>
 800fd9e:	eba0 0308 	sub.w	r3, r0, r8
 800fda2:	fa09 f303 	lsl.w	r3, r9, r3
 800fda6:	4313      	orrs	r3, r2
 800fda8:	9304      	str	r3, [sp, #16]
 800fdaa:	46a2      	mov	sl, r4
 800fdac:	e7d2      	b.n	800fd54 <_svfiprintf_r+0x9c>
 800fdae:	9b03      	ldr	r3, [sp, #12]
 800fdb0:	1d19      	adds	r1, r3, #4
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	9103      	str	r1, [sp, #12]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	bfbb      	ittet	lt
 800fdba:	425b      	neglt	r3, r3
 800fdbc:	f042 0202 	orrlt.w	r2, r2, #2
 800fdc0:	9307      	strge	r3, [sp, #28]
 800fdc2:	9307      	strlt	r3, [sp, #28]
 800fdc4:	bfb8      	it	lt
 800fdc6:	9204      	strlt	r2, [sp, #16]
 800fdc8:	7823      	ldrb	r3, [r4, #0]
 800fdca:	2b2e      	cmp	r3, #46	; 0x2e
 800fdcc:	d10c      	bne.n	800fde8 <_svfiprintf_r+0x130>
 800fdce:	7863      	ldrb	r3, [r4, #1]
 800fdd0:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd2:	d135      	bne.n	800fe40 <_svfiprintf_r+0x188>
 800fdd4:	9b03      	ldr	r3, [sp, #12]
 800fdd6:	1d1a      	adds	r2, r3, #4
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	9203      	str	r2, [sp, #12]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	bfb8      	it	lt
 800fde0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fde4:	3402      	adds	r4, #2
 800fde6:	9305      	str	r3, [sp, #20]
 800fde8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800feb4 <_svfiprintf_r+0x1fc>
 800fdec:	7821      	ldrb	r1, [r4, #0]
 800fdee:	2203      	movs	r2, #3
 800fdf0:	4650      	mov	r0, sl
 800fdf2:	f7f0 fa05 	bl	8000200 <memchr>
 800fdf6:	b140      	cbz	r0, 800fe0a <_svfiprintf_r+0x152>
 800fdf8:	2340      	movs	r3, #64	; 0x40
 800fdfa:	eba0 000a 	sub.w	r0, r0, sl
 800fdfe:	fa03 f000 	lsl.w	r0, r3, r0
 800fe02:	9b04      	ldr	r3, [sp, #16]
 800fe04:	4303      	orrs	r3, r0
 800fe06:	3401      	adds	r4, #1
 800fe08:	9304      	str	r3, [sp, #16]
 800fe0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe0e:	4826      	ldr	r0, [pc, #152]	; (800fea8 <_svfiprintf_r+0x1f0>)
 800fe10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe14:	2206      	movs	r2, #6
 800fe16:	f7f0 f9f3 	bl	8000200 <memchr>
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d038      	beq.n	800fe90 <_svfiprintf_r+0x1d8>
 800fe1e:	4b23      	ldr	r3, [pc, #140]	; (800feac <_svfiprintf_r+0x1f4>)
 800fe20:	bb1b      	cbnz	r3, 800fe6a <_svfiprintf_r+0x1b2>
 800fe22:	9b03      	ldr	r3, [sp, #12]
 800fe24:	3307      	adds	r3, #7
 800fe26:	f023 0307 	bic.w	r3, r3, #7
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	9303      	str	r3, [sp, #12]
 800fe2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe30:	4433      	add	r3, r6
 800fe32:	9309      	str	r3, [sp, #36]	; 0x24
 800fe34:	e767      	b.n	800fd06 <_svfiprintf_r+0x4e>
 800fe36:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe3a:	460c      	mov	r4, r1
 800fe3c:	2001      	movs	r0, #1
 800fe3e:	e7a5      	b.n	800fd8c <_svfiprintf_r+0xd4>
 800fe40:	2300      	movs	r3, #0
 800fe42:	3401      	adds	r4, #1
 800fe44:	9305      	str	r3, [sp, #20]
 800fe46:	4619      	mov	r1, r3
 800fe48:	f04f 0c0a 	mov.w	ip, #10
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe52:	3a30      	subs	r2, #48	; 0x30
 800fe54:	2a09      	cmp	r2, #9
 800fe56:	d903      	bls.n	800fe60 <_svfiprintf_r+0x1a8>
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d0c5      	beq.n	800fde8 <_svfiprintf_r+0x130>
 800fe5c:	9105      	str	r1, [sp, #20]
 800fe5e:	e7c3      	b.n	800fde8 <_svfiprintf_r+0x130>
 800fe60:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe64:	4604      	mov	r4, r0
 800fe66:	2301      	movs	r3, #1
 800fe68:	e7f0      	b.n	800fe4c <_svfiprintf_r+0x194>
 800fe6a:	ab03      	add	r3, sp, #12
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	462a      	mov	r2, r5
 800fe70:	4b0f      	ldr	r3, [pc, #60]	; (800feb0 <_svfiprintf_r+0x1f8>)
 800fe72:	a904      	add	r1, sp, #16
 800fe74:	4638      	mov	r0, r7
 800fe76:	f7fb ffe5 	bl	800be44 <_printf_float>
 800fe7a:	1c42      	adds	r2, r0, #1
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	d1d6      	bne.n	800fe2e <_svfiprintf_r+0x176>
 800fe80:	89ab      	ldrh	r3, [r5, #12]
 800fe82:	065b      	lsls	r3, r3, #25
 800fe84:	f53f af2c 	bmi.w	800fce0 <_svfiprintf_r+0x28>
 800fe88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe8a:	b01d      	add	sp, #116	; 0x74
 800fe8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe90:	ab03      	add	r3, sp, #12
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	462a      	mov	r2, r5
 800fe96:	4b06      	ldr	r3, [pc, #24]	; (800feb0 <_svfiprintf_r+0x1f8>)
 800fe98:	a904      	add	r1, sp, #16
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	f7fc fa76 	bl	800c38c <_printf_i>
 800fea0:	e7eb      	b.n	800fe7a <_svfiprintf_r+0x1c2>
 800fea2:	bf00      	nop
 800fea4:	0805ad84 	.word	0x0805ad84
 800fea8:	0805ad8e 	.word	0x0805ad8e
 800feac:	0800be45 	.word	0x0800be45
 800feb0:	0800fc01 	.word	0x0800fc01
 800feb4:	0805ad8a 	.word	0x0805ad8a

0800feb8 <nan>:
 800feb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fec0 <nan+0x8>
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	00000000 	.word	0x00000000
 800fec4:	7ff80000 	.word	0x7ff80000

0800fec8 <_raise_r>:
 800fec8:	291f      	cmp	r1, #31
 800feca:	b538      	push	{r3, r4, r5, lr}
 800fecc:	4604      	mov	r4, r0
 800fece:	460d      	mov	r5, r1
 800fed0:	d904      	bls.n	800fedc <_raise_r+0x14>
 800fed2:	2316      	movs	r3, #22
 800fed4:	6003      	str	r3, [r0, #0]
 800fed6:	f04f 30ff 	mov.w	r0, #4294967295
 800feda:	bd38      	pop	{r3, r4, r5, pc}
 800fedc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fede:	b112      	cbz	r2, 800fee6 <_raise_r+0x1e>
 800fee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fee4:	b94b      	cbnz	r3, 800fefa <_raise_r+0x32>
 800fee6:	4620      	mov	r0, r4
 800fee8:	f000 f830 	bl	800ff4c <_getpid_r>
 800feec:	462a      	mov	r2, r5
 800feee:	4601      	mov	r1, r0
 800fef0:	4620      	mov	r0, r4
 800fef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fef6:	f000 b817 	b.w	800ff28 <_kill_r>
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d00a      	beq.n	800ff14 <_raise_r+0x4c>
 800fefe:	1c59      	adds	r1, r3, #1
 800ff00:	d103      	bne.n	800ff0a <_raise_r+0x42>
 800ff02:	2316      	movs	r3, #22
 800ff04:	6003      	str	r3, [r0, #0]
 800ff06:	2001      	movs	r0, #1
 800ff08:	e7e7      	b.n	800feda <_raise_r+0x12>
 800ff0a:	2400      	movs	r4, #0
 800ff0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff10:	4628      	mov	r0, r5
 800ff12:	4798      	blx	r3
 800ff14:	2000      	movs	r0, #0
 800ff16:	e7e0      	b.n	800feda <_raise_r+0x12>

0800ff18 <raise>:
 800ff18:	4b02      	ldr	r3, [pc, #8]	; (800ff24 <raise+0xc>)
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	6818      	ldr	r0, [r3, #0]
 800ff1e:	f7ff bfd3 	b.w	800fec8 <_raise_r>
 800ff22:	bf00      	nop
 800ff24:	20000e48 	.word	0x20000e48

0800ff28 <_kill_r>:
 800ff28:	b538      	push	{r3, r4, r5, lr}
 800ff2a:	4d07      	ldr	r5, [pc, #28]	; (800ff48 <_kill_r+0x20>)
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	4604      	mov	r4, r0
 800ff30:	4608      	mov	r0, r1
 800ff32:	4611      	mov	r1, r2
 800ff34:	602b      	str	r3, [r5, #0]
 800ff36:	f002 f8e5 	bl	8012104 <_kill>
 800ff3a:	1c43      	adds	r3, r0, #1
 800ff3c:	d102      	bne.n	800ff44 <_kill_r+0x1c>
 800ff3e:	682b      	ldr	r3, [r5, #0]
 800ff40:	b103      	cbz	r3, 800ff44 <_kill_r+0x1c>
 800ff42:	6023      	str	r3, [r4, #0]
 800ff44:	bd38      	pop	{r3, r4, r5, pc}
 800ff46:	bf00      	nop
 800ff48:	20013c30 	.word	0x20013c30

0800ff4c <_getpid_r>:
 800ff4c:	f002 b8ca 	b.w	80120e4 <_getpid>

0800ff50 <__sread>:
 800ff50:	b510      	push	{r4, lr}
 800ff52:	460c      	mov	r4, r1
 800ff54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff58:	f000 f8bc 	bl	80100d4 <_read_r>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	bfab      	itete	ge
 800ff60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff62:	89a3      	ldrhlt	r3, [r4, #12]
 800ff64:	181b      	addge	r3, r3, r0
 800ff66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff6a:	bfac      	ite	ge
 800ff6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff6e:	81a3      	strhlt	r3, [r4, #12]
 800ff70:	bd10      	pop	{r4, pc}

0800ff72 <__swrite>:
 800ff72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff76:	461f      	mov	r7, r3
 800ff78:	898b      	ldrh	r3, [r1, #12]
 800ff7a:	05db      	lsls	r3, r3, #23
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	460c      	mov	r4, r1
 800ff80:	4616      	mov	r6, r2
 800ff82:	d505      	bpl.n	800ff90 <__swrite+0x1e>
 800ff84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff88:	2302      	movs	r3, #2
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f000 f888 	bl	80100a0 <_lseek_r>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff9a:	81a3      	strh	r3, [r4, #12]
 800ff9c:	4632      	mov	r2, r6
 800ff9e:	463b      	mov	r3, r7
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa6:	f000 b837 	b.w	8010018 <_write_r>

0800ffaa <__sseek>:
 800ffaa:	b510      	push	{r4, lr}
 800ffac:	460c      	mov	r4, r1
 800ffae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb2:	f000 f875 	bl	80100a0 <_lseek_r>
 800ffb6:	1c43      	adds	r3, r0, #1
 800ffb8:	89a3      	ldrh	r3, [r4, #12]
 800ffba:	bf15      	itete	ne
 800ffbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffc6:	81a3      	strheq	r3, [r4, #12]
 800ffc8:	bf18      	it	ne
 800ffca:	81a3      	strhne	r3, [r4, #12]
 800ffcc:	bd10      	pop	{r4, pc}

0800ffce <__sclose>:
 800ffce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd2:	f000 b833 	b.w	801003c <_close_r>

0800ffd6 <strncmp>:
 800ffd6:	b510      	push	{r4, lr}
 800ffd8:	b17a      	cbz	r2, 800fffa <strncmp+0x24>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	3901      	subs	r1, #1
 800ffde:	1884      	adds	r4, r0, r2
 800ffe0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ffe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ffe8:	4290      	cmp	r0, r2
 800ffea:	d101      	bne.n	800fff0 <strncmp+0x1a>
 800ffec:	42a3      	cmp	r3, r4
 800ffee:	d101      	bne.n	800fff4 <strncmp+0x1e>
 800fff0:	1a80      	subs	r0, r0, r2
 800fff2:	bd10      	pop	{r4, pc}
 800fff4:	2800      	cmp	r0, #0
 800fff6:	d1f3      	bne.n	800ffe0 <strncmp+0xa>
 800fff8:	e7fa      	b.n	800fff0 <strncmp+0x1a>
 800fffa:	4610      	mov	r0, r2
 800fffc:	e7f9      	b.n	800fff2 <strncmp+0x1c>

0800fffe <__ascii_wctomb>:
 800fffe:	b149      	cbz	r1, 8010014 <__ascii_wctomb+0x16>
 8010000:	2aff      	cmp	r2, #255	; 0xff
 8010002:	bf85      	ittet	hi
 8010004:	238a      	movhi	r3, #138	; 0x8a
 8010006:	6003      	strhi	r3, [r0, #0]
 8010008:	700a      	strbls	r2, [r1, #0]
 801000a:	f04f 30ff 	movhi.w	r0, #4294967295
 801000e:	bf98      	it	ls
 8010010:	2001      	movls	r0, #1
 8010012:	4770      	bx	lr
 8010014:	4608      	mov	r0, r1
 8010016:	4770      	bx	lr

08010018 <_write_r>:
 8010018:	b538      	push	{r3, r4, r5, lr}
 801001a:	4d07      	ldr	r5, [pc, #28]	; (8010038 <_write_r+0x20>)
 801001c:	4604      	mov	r4, r0
 801001e:	4608      	mov	r0, r1
 8010020:	4611      	mov	r1, r2
 8010022:	2200      	movs	r2, #0
 8010024:	602a      	str	r2, [r5, #0]
 8010026:	461a      	mov	r2, r3
 8010028:	f002 f892 	bl	8012150 <_write>
 801002c:	1c43      	adds	r3, r0, #1
 801002e:	d102      	bne.n	8010036 <_write_r+0x1e>
 8010030:	682b      	ldr	r3, [r5, #0]
 8010032:	b103      	cbz	r3, 8010036 <_write_r+0x1e>
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	20013c30 	.word	0x20013c30

0801003c <_close_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4d06      	ldr	r5, [pc, #24]	; (8010058 <_close_r+0x1c>)
 8010040:	2300      	movs	r3, #0
 8010042:	4604      	mov	r4, r0
 8010044:	4608      	mov	r0, r1
 8010046:	602b      	str	r3, [r5, #0]
 8010048:	f002 f83c 	bl	80120c4 <_close>
 801004c:	1c43      	adds	r3, r0, #1
 801004e:	d102      	bne.n	8010056 <_close_r+0x1a>
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	b103      	cbz	r3, 8010056 <_close_r+0x1a>
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	bd38      	pop	{r3, r4, r5, pc}
 8010058:	20013c30 	.word	0x20013c30

0801005c <_fstat_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4d07      	ldr	r5, [pc, #28]	; (801007c <_fstat_r+0x20>)
 8010060:	2300      	movs	r3, #0
 8010062:	4604      	mov	r4, r0
 8010064:	4608      	mov	r0, r1
 8010066:	4611      	mov	r1, r2
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	f002 f833 	bl	80120d4 <_fstat>
 801006e:	1c43      	adds	r3, r0, #1
 8010070:	d102      	bne.n	8010078 <_fstat_r+0x1c>
 8010072:	682b      	ldr	r3, [r5, #0]
 8010074:	b103      	cbz	r3, 8010078 <_fstat_r+0x1c>
 8010076:	6023      	str	r3, [r4, #0]
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	bf00      	nop
 801007c:	20013c30 	.word	0x20013c30

08010080 <_isatty_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4d06      	ldr	r5, [pc, #24]	; (801009c <_isatty_r+0x1c>)
 8010084:	2300      	movs	r3, #0
 8010086:	4604      	mov	r4, r0
 8010088:	4608      	mov	r0, r1
 801008a:	602b      	str	r3, [r5, #0]
 801008c:	f002 f832 	bl	80120f4 <_isatty>
 8010090:	1c43      	adds	r3, r0, #1
 8010092:	d102      	bne.n	801009a <_isatty_r+0x1a>
 8010094:	682b      	ldr	r3, [r5, #0]
 8010096:	b103      	cbz	r3, 801009a <_isatty_r+0x1a>
 8010098:	6023      	str	r3, [r4, #0]
 801009a:	bd38      	pop	{r3, r4, r5, pc}
 801009c:	20013c30 	.word	0x20013c30

080100a0 <_lseek_r>:
 80100a0:	b538      	push	{r3, r4, r5, lr}
 80100a2:	4d07      	ldr	r5, [pc, #28]	; (80100c0 <_lseek_r+0x20>)
 80100a4:	4604      	mov	r4, r0
 80100a6:	4608      	mov	r0, r1
 80100a8:	4611      	mov	r1, r2
 80100aa:	2200      	movs	r2, #0
 80100ac:	602a      	str	r2, [r5, #0]
 80100ae:	461a      	mov	r2, r3
 80100b0:	f002 f830 	bl	8012114 <_lseek>
 80100b4:	1c43      	adds	r3, r0, #1
 80100b6:	d102      	bne.n	80100be <_lseek_r+0x1e>
 80100b8:	682b      	ldr	r3, [r5, #0]
 80100ba:	b103      	cbz	r3, 80100be <_lseek_r+0x1e>
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	bd38      	pop	{r3, r4, r5, pc}
 80100c0:	20013c30 	.word	0x20013c30

080100c4 <_malloc_usable_size_r>:
 80100c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100c8:	1f18      	subs	r0, r3, #4
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	bfbc      	itt	lt
 80100ce:	580b      	ldrlt	r3, [r1, r0]
 80100d0:	18c0      	addlt	r0, r0, r3
 80100d2:	4770      	bx	lr

080100d4 <_read_r>:
 80100d4:	b538      	push	{r3, r4, r5, lr}
 80100d6:	4d07      	ldr	r5, [pc, #28]	; (80100f4 <_read_r+0x20>)
 80100d8:	4604      	mov	r4, r0
 80100da:	4608      	mov	r0, r1
 80100dc:	4611      	mov	r1, r2
 80100de:	2200      	movs	r2, #0
 80100e0:	602a      	str	r2, [r5, #0]
 80100e2:	461a      	mov	r2, r3
 80100e4:	f002 f81e 	bl	8012124 <_read>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_read_r+0x1e>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_read_r+0x1e>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	20013c30 	.word	0x20013c30

080100f8 <cos>:
 80100f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100fa:	ec53 2b10 	vmov	r2, r3, d0
 80100fe:	4826      	ldr	r0, [pc, #152]	; (8010198 <cos+0xa0>)
 8010100:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010104:	4281      	cmp	r1, r0
 8010106:	dc06      	bgt.n	8010116 <cos+0x1e>
 8010108:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010190 <cos+0x98>
 801010c:	b005      	add	sp, #20
 801010e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010112:	f001 b94d 	b.w	80113b0 <__kernel_cos>
 8010116:	4821      	ldr	r0, [pc, #132]	; (801019c <cos+0xa4>)
 8010118:	4281      	cmp	r1, r0
 801011a:	dd09      	ble.n	8010130 <cos+0x38>
 801011c:	ee10 0a10 	vmov	r0, s0
 8010120:	4619      	mov	r1, r3
 8010122:	f7f0 f8c1 	bl	80002a8 <__aeabi_dsub>
 8010126:	ec41 0b10 	vmov	d0, r0, r1
 801012a:	b005      	add	sp, #20
 801012c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010130:	4668      	mov	r0, sp
 8010132:	f000 f995 	bl	8010460 <__ieee754_rem_pio2>
 8010136:	f000 0003 	and.w	r0, r0, #3
 801013a:	2801      	cmp	r0, #1
 801013c:	d00b      	beq.n	8010156 <cos+0x5e>
 801013e:	2802      	cmp	r0, #2
 8010140:	d016      	beq.n	8010170 <cos+0x78>
 8010142:	b9e0      	cbnz	r0, 801017e <cos+0x86>
 8010144:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010148:	ed9d 0b00 	vldr	d0, [sp]
 801014c:	f001 f930 	bl	80113b0 <__kernel_cos>
 8010150:	ec51 0b10 	vmov	r0, r1, d0
 8010154:	e7e7      	b.n	8010126 <cos+0x2e>
 8010156:	ed9d 1b02 	vldr	d1, [sp, #8]
 801015a:	ed9d 0b00 	vldr	d0, [sp]
 801015e:	f001 fd3f 	bl	8011be0 <__kernel_sin>
 8010162:	ec53 2b10 	vmov	r2, r3, d0
 8010166:	ee10 0a10 	vmov	r0, s0
 801016a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801016e:	e7da      	b.n	8010126 <cos+0x2e>
 8010170:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010174:	ed9d 0b00 	vldr	d0, [sp]
 8010178:	f001 f91a 	bl	80113b0 <__kernel_cos>
 801017c:	e7f1      	b.n	8010162 <cos+0x6a>
 801017e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010182:	ed9d 0b00 	vldr	d0, [sp]
 8010186:	2001      	movs	r0, #1
 8010188:	f001 fd2a 	bl	8011be0 <__kernel_sin>
 801018c:	e7e0      	b.n	8010150 <cos+0x58>
 801018e:	bf00      	nop
	...
 8010198:	3fe921fb 	.word	0x3fe921fb
 801019c:	7fefffff 	.word	0x7fefffff

080101a0 <fabsf>:
 80101a0:	ee10 3a10 	vmov	r3, s0
 80101a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101a8:	ee00 3a10 	vmov	s0, r3
 80101ac:	4770      	bx	lr
	...

080101b0 <roundf>:
 80101b0:	ee10 0a10 	vmov	r0, s0
 80101b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80101b8:	3a7f      	subs	r2, #127	; 0x7f
 80101ba:	2a16      	cmp	r2, #22
 80101bc:	dc15      	bgt.n	80101ea <roundf+0x3a>
 80101be:	2a00      	cmp	r2, #0
 80101c0:	da08      	bge.n	80101d4 <roundf+0x24>
 80101c2:	3201      	adds	r2, #1
 80101c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80101c8:	d101      	bne.n	80101ce <roundf+0x1e>
 80101ca:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80101ce:	ee00 3a10 	vmov	s0, r3
 80101d2:	4770      	bx	lr
 80101d4:	4907      	ldr	r1, [pc, #28]	; (80101f4 <roundf+0x44>)
 80101d6:	4111      	asrs	r1, r2
 80101d8:	4208      	tst	r0, r1
 80101da:	d0fa      	beq.n	80101d2 <roundf+0x22>
 80101dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80101e0:	4113      	asrs	r3, r2
 80101e2:	4403      	add	r3, r0
 80101e4:	ea23 0301 	bic.w	r3, r3, r1
 80101e8:	e7f1      	b.n	80101ce <roundf+0x1e>
 80101ea:	2a80      	cmp	r2, #128	; 0x80
 80101ec:	d1f1      	bne.n	80101d2 <roundf+0x22>
 80101ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80101f2:	4770      	bx	lr
 80101f4:	007fffff 	.word	0x007fffff

080101f8 <sqrt>:
 80101f8:	b538      	push	{r3, r4, r5, lr}
 80101fa:	ed2d 8b02 	vpush	{d8}
 80101fe:	ec55 4b10 	vmov	r4, r5, d0
 8010202:	f000 fb39 	bl	8010878 <__ieee754_sqrt>
 8010206:	4622      	mov	r2, r4
 8010208:	462b      	mov	r3, r5
 801020a:	4620      	mov	r0, r4
 801020c:	4629      	mov	r1, r5
 801020e:	eeb0 8a40 	vmov.f32	s16, s0
 8010212:	eef0 8a60 	vmov.f32	s17, s1
 8010216:	f7f0 fc99 	bl	8000b4c <__aeabi_dcmpun>
 801021a:	b990      	cbnz	r0, 8010242 <sqrt+0x4a>
 801021c:	2200      	movs	r2, #0
 801021e:	2300      	movs	r3, #0
 8010220:	4620      	mov	r0, r4
 8010222:	4629      	mov	r1, r5
 8010224:	f7f0 fc6a 	bl	8000afc <__aeabi_dcmplt>
 8010228:	b158      	cbz	r0, 8010242 <sqrt+0x4a>
 801022a:	f7fe fa13 	bl	800e654 <__errno>
 801022e:	2321      	movs	r3, #33	; 0x21
 8010230:	6003      	str	r3, [r0, #0]
 8010232:	2200      	movs	r2, #0
 8010234:	2300      	movs	r3, #0
 8010236:	4610      	mov	r0, r2
 8010238:	4619      	mov	r1, r3
 801023a:	f7f0 fb17 	bl	800086c <__aeabi_ddiv>
 801023e:	ec41 0b18 	vmov	d8, r0, r1
 8010242:	eeb0 0a48 	vmov.f32	s0, s16
 8010246:	eef0 0a68 	vmov.f32	s1, s17
 801024a:	ecbd 8b02 	vpop	{d8}
 801024e:	bd38      	pop	{r3, r4, r5, pc}

08010250 <expf>:
 8010250:	b508      	push	{r3, lr}
 8010252:	ed2d 8b02 	vpush	{d8}
 8010256:	eef0 8a40 	vmov.f32	s17, s0
 801025a:	f000 fbbf 	bl	80109dc <__ieee754_expf>
 801025e:	eeb0 8a40 	vmov.f32	s16, s0
 8010262:	eeb0 0a68 	vmov.f32	s0, s17
 8010266:	f001 fead 	bl	8011fc4 <finitef>
 801026a:	b160      	cbz	r0, 8010286 <expf+0x36>
 801026c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80102ac <expf+0x5c>
 8010270:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010278:	dd0a      	ble.n	8010290 <expf+0x40>
 801027a:	f7fe f9eb 	bl	800e654 <__errno>
 801027e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80102b0 <expf+0x60>
 8010282:	2322      	movs	r3, #34	; 0x22
 8010284:	6003      	str	r3, [r0, #0]
 8010286:	eeb0 0a48 	vmov.f32	s0, s16
 801028a:	ecbd 8b02 	vpop	{d8}
 801028e:	bd08      	pop	{r3, pc}
 8010290:	eddf 7a08 	vldr	s15, [pc, #32]	; 80102b4 <expf+0x64>
 8010294:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801029c:	d5f3      	bpl.n	8010286 <expf+0x36>
 801029e:	f7fe f9d9 	bl	800e654 <__errno>
 80102a2:	2322      	movs	r3, #34	; 0x22
 80102a4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80102b8 <expf+0x68>
 80102a8:	6003      	str	r3, [r0, #0]
 80102aa:	e7ec      	b.n	8010286 <expf+0x36>
 80102ac:	42b17180 	.word	0x42b17180
 80102b0:	7f800000 	.word	0x7f800000
 80102b4:	c2cff1b5 	.word	0xc2cff1b5
 80102b8:	00000000 	.word	0x00000000

080102bc <logf>:
 80102bc:	b508      	push	{r3, lr}
 80102be:	ed2d 8b02 	vpush	{d8}
 80102c2:	eeb0 8a40 	vmov.f32	s16, s0
 80102c6:	f000 fc57 	bl	8010b78 <__ieee754_logf>
 80102ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80102ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d2:	d60f      	bvs.n	80102f4 <logf+0x38>
 80102d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	dc0a      	bgt.n	80102f4 <logf+0x38>
 80102de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80102e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e6:	d108      	bne.n	80102fa <logf+0x3e>
 80102e8:	f7fe f9b4 	bl	800e654 <__errno>
 80102ec:	2322      	movs	r3, #34	; 0x22
 80102ee:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010310 <logf+0x54>
 80102f2:	6003      	str	r3, [r0, #0]
 80102f4:	ecbd 8b02 	vpop	{d8}
 80102f8:	bd08      	pop	{r3, pc}
 80102fa:	f7fe f9ab 	bl	800e654 <__errno>
 80102fe:	ecbd 8b02 	vpop	{d8}
 8010302:	2321      	movs	r3, #33	; 0x21
 8010304:	6003      	str	r3, [r0, #0]
 8010306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801030a:	4802      	ldr	r0, [pc, #8]	; (8010314 <logf+0x58>)
 801030c:	f7fc bb84 	b.w	800ca18 <nanf>
 8010310:	ff800000 	.word	0xff800000
 8010314:	08012495 	.word	0x08012495

08010318 <log10f>:
 8010318:	b508      	push	{r3, lr}
 801031a:	ed2d 8b02 	vpush	{d8}
 801031e:	eeb0 8a40 	vmov.f32	s16, s0
 8010322:	f000 fd19 	bl	8010d58 <__ieee754_log10f>
 8010326:	eeb4 8a48 	vcmp.f32	s16, s16
 801032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032e:	d60f      	bvs.n	8010350 <log10f+0x38>
 8010330:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010338:	d80a      	bhi.n	8010350 <log10f+0x38>
 801033a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	d108      	bne.n	8010356 <log10f+0x3e>
 8010344:	f7fe f986 	bl	800e654 <__errno>
 8010348:	2322      	movs	r3, #34	; 0x22
 801034a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801036c <log10f+0x54>
 801034e:	6003      	str	r3, [r0, #0]
 8010350:	ecbd 8b02 	vpop	{d8}
 8010354:	bd08      	pop	{r3, pc}
 8010356:	f7fe f97d 	bl	800e654 <__errno>
 801035a:	ecbd 8b02 	vpop	{d8}
 801035e:	2321      	movs	r3, #33	; 0x21
 8010360:	6003      	str	r3, [r0, #0]
 8010362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010366:	4802      	ldr	r0, [pc, #8]	; (8010370 <log10f+0x58>)
 8010368:	f7fc bb56 	b.w	800ca18 <nanf>
 801036c:	ff800000 	.word	0xff800000
 8010370:	08012495 	.word	0x08012495

08010374 <powf>:
 8010374:	b508      	push	{r3, lr}
 8010376:	ed2d 8b04 	vpush	{d8-d9}
 801037a:	eeb0 8a60 	vmov.f32	s16, s1
 801037e:	eeb0 9a40 	vmov.f32	s18, s0
 8010382:	f000 fd41 	bl	8010e08 <__ieee754_powf>
 8010386:	eeb4 8a48 	vcmp.f32	s16, s16
 801038a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038e:	eef0 8a40 	vmov.f32	s17, s0
 8010392:	d63e      	bvs.n	8010412 <powf+0x9e>
 8010394:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039c:	d112      	bne.n	80103c4 <powf+0x50>
 801039e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80103a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a6:	d039      	beq.n	801041c <powf+0xa8>
 80103a8:	eeb0 0a48 	vmov.f32	s0, s16
 80103ac:	f001 fe0a 	bl	8011fc4 <finitef>
 80103b0:	b378      	cbz	r0, 8010412 <powf+0x9e>
 80103b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80103b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ba:	d52a      	bpl.n	8010412 <powf+0x9e>
 80103bc:	f7fe f94a 	bl	800e654 <__errno>
 80103c0:	2322      	movs	r3, #34	; 0x22
 80103c2:	e014      	b.n	80103ee <powf+0x7a>
 80103c4:	f001 fdfe 	bl	8011fc4 <finitef>
 80103c8:	b998      	cbnz	r0, 80103f2 <powf+0x7e>
 80103ca:	eeb0 0a49 	vmov.f32	s0, s18
 80103ce:	f001 fdf9 	bl	8011fc4 <finitef>
 80103d2:	b170      	cbz	r0, 80103f2 <powf+0x7e>
 80103d4:	eeb0 0a48 	vmov.f32	s0, s16
 80103d8:	f001 fdf4 	bl	8011fc4 <finitef>
 80103dc:	b148      	cbz	r0, 80103f2 <powf+0x7e>
 80103de:	eef4 8a68 	vcmp.f32	s17, s17
 80103e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e6:	d7e9      	bvc.n	80103bc <powf+0x48>
 80103e8:	f7fe f934 	bl	800e654 <__errno>
 80103ec:	2321      	movs	r3, #33	; 0x21
 80103ee:	6003      	str	r3, [r0, #0]
 80103f0:	e00f      	b.n	8010412 <powf+0x9e>
 80103f2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80103f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103fa:	d10a      	bne.n	8010412 <powf+0x9e>
 80103fc:	eeb0 0a49 	vmov.f32	s0, s18
 8010400:	f001 fde0 	bl	8011fc4 <finitef>
 8010404:	b128      	cbz	r0, 8010412 <powf+0x9e>
 8010406:	eeb0 0a48 	vmov.f32	s0, s16
 801040a:	f001 fddb 	bl	8011fc4 <finitef>
 801040e:	2800      	cmp	r0, #0
 8010410:	d1d4      	bne.n	80103bc <powf+0x48>
 8010412:	eeb0 0a68 	vmov.f32	s0, s17
 8010416:	ecbd 8b04 	vpop	{d8-d9}
 801041a:	bd08      	pop	{r3, pc}
 801041c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010420:	e7f7      	b.n	8010412 <powf+0x9e>
	...

08010424 <sqrtf>:
 8010424:	b508      	push	{r3, lr}
 8010426:	ed2d 8b02 	vpush	{d8}
 801042a:	eeb0 8a40 	vmov.f32	s16, s0
 801042e:	f000 ffb9 	bl	80113a4 <__ieee754_sqrtf>
 8010432:	eeb4 8a48 	vcmp.f32	s16, s16
 8010436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043a:	d60c      	bvs.n	8010456 <sqrtf+0x32>
 801043c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801045c <sqrtf+0x38>
 8010440:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010448:	d505      	bpl.n	8010456 <sqrtf+0x32>
 801044a:	f7fe f903 	bl	800e654 <__errno>
 801044e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010452:	2321      	movs	r3, #33	; 0x21
 8010454:	6003      	str	r3, [r0, #0]
 8010456:	ecbd 8b02 	vpop	{d8}
 801045a:	bd08      	pop	{r3, pc}
 801045c:	00000000 	.word	0x00000000

08010460 <__ieee754_rem_pio2>:
 8010460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010464:	ed2d 8b02 	vpush	{d8}
 8010468:	ec55 4b10 	vmov	r4, r5, d0
 801046c:	4bca      	ldr	r3, [pc, #808]	; (8010798 <__ieee754_rem_pio2+0x338>)
 801046e:	b08b      	sub	sp, #44	; 0x2c
 8010470:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010474:	4598      	cmp	r8, r3
 8010476:	4682      	mov	sl, r0
 8010478:	9502      	str	r5, [sp, #8]
 801047a:	dc08      	bgt.n	801048e <__ieee754_rem_pio2+0x2e>
 801047c:	2200      	movs	r2, #0
 801047e:	2300      	movs	r3, #0
 8010480:	ed80 0b00 	vstr	d0, [r0]
 8010484:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010488:	f04f 0b00 	mov.w	fp, #0
 801048c:	e028      	b.n	80104e0 <__ieee754_rem_pio2+0x80>
 801048e:	4bc3      	ldr	r3, [pc, #780]	; (801079c <__ieee754_rem_pio2+0x33c>)
 8010490:	4598      	cmp	r8, r3
 8010492:	dc78      	bgt.n	8010586 <__ieee754_rem_pio2+0x126>
 8010494:	9b02      	ldr	r3, [sp, #8]
 8010496:	4ec2      	ldr	r6, [pc, #776]	; (80107a0 <__ieee754_rem_pio2+0x340>)
 8010498:	2b00      	cmp	r3, #0
 801049a:	ee10 0a10 	vmov	r0, s0
 801049e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010760 <__ieee754_rem_pio2+0x300>)
 80104a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a4:	4629      	mov	r1, r5
 80104a6:	dd39      	ble.n	801051c <__ieee754_rem_pio2+0xbc>
 80104a8:	f7ef fefe 	bl	80002a8 <__aeabi_dsub>
 80104ac:	45b0      	cmp	r8, r6
 80104ae:	4604      	mov	r4, r0
 80104b0:	460d      	mov	r5, r1
 80104b2:	d01b      	beq.n	80104ec <__ieee754_rem_pio2+0x8c>
 80104b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8010768 <__ieee754_rem_pio2+0x308>)
 80104b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ba:	f7ef fef5 	bl	80002a8 <__aeabi_dsub>
 80104be:	4602      	mov	r2, r0
 80104c0:	460b      	mov	r3, r1
 80104c2:	e9ca 2300 	strd	r2, r3, [sl]
 80104c6:	4620      	mov	r0, r4
 80104c8:	4629      	mov	r1, r5
 80104ca:	f7ef feed 	bl	80002a8 <__aeabi_dsub>
 80104ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8010768 <__ieee754_rem_pio2+0x308>)
 80104d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d4:	f7ef fee8 	bl	80002a8 <__aeabi_dsub>
 80104d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80104dc:	f04f 0b01 	mov.w	fp, #1
 80104e0:	4658      	mov	r0, fp
 80104e2:	b00b      	add	sp, #44	; 0x2c
 80104e4:	ecbd 8b02 	vpop	{d8}
 80104e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8010770 <__ieee754_rem_pio2+0x310>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	f7ef fed9 	bl	80002a8 <__aeabi_dsub>
 80104f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010778 <__ieee754_rem_pio2+0x318>)
 80104f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fc:	4604      	mov	r4, r0
 80104fe:	460d      	mov	r5, r1
 8010500:	f7ef fed2 	bl	80002a8 <__aeabi_dsub>
 8010504:	4602      	mov	r2, r0
 8010506:	460b      	mov	r3, r1
 8010508:	e9ca 2300 	strd	r2, r3, [sl]
 801050c:	4620      	mov	r0, r4
 801050e:	4629      	mov	r1, r5
 8010510:	f7ef feca 	bl	80002a8 <__aeabi_dsub>
 8010514:	a398      	add	r3, pc, #608	; (adr r3, 8010778 <__ieee754_rem_pio2+0x318>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	e7db      	b.n	80104d4 <__ieee754_rem_pio2+0x74>
 801051c:	f7ef fec6 	bl	80002ac <__adddf3>
 8010520:	45b0      	cmp	r8, r6
 8010522:	4604      	mov	r4, r0
 8010524:	460d      	mov	r5, r1
 8010526:	d016      	beq.n	8010556 <__ieee754_rem_pio2+0xf6>
 8010528:	a38f      	add	r3, pc, #572	; (adr r3, 8010768 <__ieee754_rem_pio2+0x308>)
 801052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052e:	f7ef febd 	bl	80002ac <__adddf3>
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	e9ca 2300 	strd	r2, r3, [sl]
 801053a:	4620      	mov	r0, r4
 801053c:	4629      	mov	r1, r5
 801053e:	f7ef feb3 	bl	80002a8 <__aeabi_dsub>
 8010542:	a389      	add	r3, pc, #548	; (adr r3, 8010768 <__ieee754_rem_pio2+0x308>)
 8010544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010548:	f7ef feb0 	bl	80002ac <__adddf3>
 801054c:	f04f 3bff 	mov.w	fp, #4294967295
 8010550:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010554:	e7c4      	b.n	80104e0 <__ieee754_rem_pio2+0x80>
 8010556:	a386      	add	r3, pc, #536	; (adr r3, 8010770 <__ieee754_rem_pio2+0x310>)
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	f7ef fea6 	bl	80002ac <__adddf3>
 8010560:	a385      	add	r3, pc, #532	; (adr r3, 8010778 <__ieee754_rem_pio2+0x318>)
 8010562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010566:	4604      	mov	r4, r0
 8010568:	460d      	mov	r5, r1
 801056a:	f7ef fe9f 	bl	80002ac <__adddf3>
 801056e:	4602      	mov	r2, r0
 8010570:	460b      	mov	r3, r1
 8010572:	e9ca 2300 	strd	r2, r3, [sl]
 8010576:	4620      	mov	r0, r4
 8010578:	4629      	mov	r1, r5
 801057a:	f7ef fe95 	bl	80002a8 <__aeabi_dsub>
 801057e:	a37e      	add	r3, pc, #504	; (adr r3, 8010778 <__ieee754_rem_pio2+0x318>)
 8010580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010584:	e7e0      	b.n	8010548 <__ieee754_rem_pio2+0xe8>
 8010586:	4b87      	ldr	r3, [pc, #540]	; (80107a4 <__ieee754_rem_pio2+0x344>)
 8010588:	4598      	cmp	r8, r3
 801058a:	f300 80d9 	bgt.w	8010740 <__ieee754_rem_pio2+0x2e0>
 801058e:	f001 fc07 	bl	8011da0 <fabs>
 8010592:	ec55 4b10 	vmov	r4, r5, d0
 8010596:	ee10 0a10 	vmov	r0, s0
 801059a:	a379      	add	r3, pc, #484	; (adr r3, 8010780 <__ieee754_rem_pio2+0x320>)
 801059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a0:	4629      	mov	r1, r5
 80105a2:	f7f0 f839 	bl	8000618 <__aeabi_dmul>
 80105a6:	4b80      	ldr	r3, [pc, #512]	; (80107a8 <__ieee754_rem_pio2+0x348>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	f7ef fe7f 	bl	80002ac <__adddf3>
 80105ae:	f7f0 fae3 	bl	8000b78 <__aeabi_d2iz>
 80105b2:	4683      	mov	fp, r0
 80105b4:	f7ef ffc6 	bl	8000544 <__aeabi_i2d>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	ec43 2b18 	vmov	d8, r2, r3
 80105c0:	a367      	add	r3, pc, #412	; (adr r3, 8010760 <__ieee754_rem_pio2+0x300>)
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	f7f0 f827 	bl	8000618 <__aeabi_dmul>
 80105ca:	4602      	mov	r2, r0
 80105cc:	460b      	mov	r3, r1
 80105ce:	4620      	mov	r0, r4
 80105d0:	4629      	mov	r1, r5
 80105d2:	f7ef fe69 	bl	80002a8 <__aeabi_dsub>
 80105d6:	a364      	add	r3, pc, #400	; (adr r3, 8010768 <__ieee754_rem_pio2+0x308>)
 80105d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105dc:	4606      	mov	r6, r0
 80105de:	460f      	mov	r7, r1
 80105e0:	ec51 0b18 	vmov	r0, r1, d8
 80105e4:	f7f0 f818 	bl	8000618 <__aeabi_dmul>
 80105e8:	f1bb 0f1f 	cmp.w	fp, #31
 80105ec:	4604      	mov	r4, r0
 80105ee:	460d      	mov	r5, r1
 80105f0:	dc0d      	bgt.n	801060e <__ieee754_rem_pio2+0x1ae>
 80105f2:	4b6e      	ldr	r3, [pc, #440]	; (80107ac <__ieee754_rem_pio2+0x34c>)
 80105f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80105f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105fc:	4543      	cmp	r3, r8
 80105fe:	d006      	beq.n	801060e <__ieee754_rem_pio2+0x1ae>
 8010600:	4622      	mov	r2, r4
 8010602:	462b      	mov	r3, r5
 8010604:	4630      	mov	r0, r6
 8010606:	4639      	mov	r1, r7
 8010608:	f7ef fe4e 	bl	80002a8 <__aeabi_dsub>
 801060c:	e00f      	b.n	801062e <__ieee754_rem_pio2+0x1ce>
 801060e:	462b      	mov	r3, r5
 8010610:	4622      	mov	r2, r4
 8010612:	4630      	mov	r0, r6
 8010614:	4639      	mov	r1, r7
 8010616:	f7ef fe47 	bl	80002a8 <__aeabi_dsub>
 801061a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801061e:	9303      	str	r3, [sp, #12]
 8010620:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010624:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010628:	f1b8 0f10 	cmp.w	r8, #16
 801062c:	dc02      	bgt.n	8010634 <__ieee754_rem_pio2+0x1d4>
 801062e:	e9ca 0100 	strd	r0, r1, [sl]
 8010632:	e039      	b.n	80106a8 <__ieee754_rem_pio2+0x248>
 8010634:	a34e      	add	r3, pc, #312	; (adr r3, 8010770 <__ieee754_rem_pio2+0x310>)
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	ec51 0b18 	vmov	r0, r1, d8
 801063e:	f7ef ffeb 	bl	8000618 <__aeabi_dmul>
 8010642:	4604      	mov	r4, r0
 8010644:	460d      	mov	r5, r1
 8010646:	4602      	mov	r2, r0
 8010648:	460b      	mov	r3, r1
 801064a:	4630      	mov	r0, r6
 801064c:	4639      	mov	r1, r7
 801064e:	f7ef fe2b 	bl	80002a8 <__aeabi_dsub>
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	4680      	mov	r8, r0
 8010658:	4689      	mov	r9, r1
 801065a:	4630      	mov	r0, r6
 801065c:	4639      	mov	r1, r7
 801065e:	f7ef fe23 	bl	80002a8 <__aeabi_dsub>
 8010662:	4622      	mov	r2, r4
 8010664:	462b      	mov	r3, r5
 8010666:	f7ef fe1f 	bl	80002a8 <__aeabi_dsub>
 801066a:	a343      	add	r3, pc, #268	; (adr r3, 8010778 <__ieee754_rem_pio2+0x318>)
 801066c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010670:	4604      	mov	r4, r0
 8010672:	460d      	mov	r5, r1
 8010674:	ec51 0b18 	vmov	r0, r1, d8
 8010678:	f7ef ffce 	bl	8000618 <__aeabi_dmul>
 801067c:	4622      	mov	r2, r4
 801067e:	462b      	mov	r3, r5
 8010680:	f7ef fe12 	bl	80002a8 <__aeabi_dsub>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	4604      	mov	r4, r0
 801068a:	460d      	mov	r5, r1
 801068c:	4640      	mov	r0, r8
 801068e:	4649      	mov	r1, r9
 8010690:	f7ef fe0a 	bl	80002a8 <__aeabi_dsub>
 8010694:	9a03      	ldr	r2, [sp, #12]
 8010696:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801069a:	1ad3      	subs	r3, r2, r3
 801069c:	2b31      	cmp	r3, #49	; 0x31
 801069e:	dc24      	bgt.n	80106ea <__ieee754_rem_pio2+0x28a>
 80106a0:	e9ca 0100 	strd	r0, r1, [sl]
 80106a4:	4646      	mov	r6, r8
 80106a6:	464f      	mov	r7, r9
 80106a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80106ac:	4630      	mov	r0, r6
 80106ae:	4642      	mov	r2, r8
 80106b0:	464b      	mov	r3, r9
 80106b2:	4639      	mov	r1, r7
 80106b4:	f7ef fdf8 	bl	80002a8 <__aeabi_dsub>
 80106b8:	462b      	mov	r3, r5
 80106ba:	4622      	mov	r2, r4
 80106bc:	f7ef fdf4 	bl	80002a8 <__aeabi_dsub>
 80106c0:	9b02      	ldr	r3, [sp, #8]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80106c8:	f6bf af0a 	bge.w	80104e0 <__ieee754_rem_pio2+0x80>
 80106cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80106d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80106d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106d8:	f8ca 8000 	str.w	r8, [sl]
 80106dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80106e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80106e4:	f1cb 0b00 	rsb	fp, fp, #0
 80106e8:	e6fa      	b.n	80104e0 <__ieee754_rem_pio2+0x80>
 80106ea:	a327      	add	r3, pc, #156	; (adr r3, 8010788 <__ieee754_rem_pio2+0x328>)
 80106ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f0:	ec51 0b18 	vmov	r0, r1, d8
 80106f4:	f7ef ff90 	bl	8000618 <__aeabi_dmul>
 80106f8:	4604      	mov	r4, r0
 80106fa:	460d      	mov	r5, r1
 80106fc:	4602      	mov	r2, r0
 80106fe:	460b      	mov	r3, r1
 8010700:	4640      	mov	r0, r8
 8010702:	4649      	mov	r1, r9
 8010704:	f7ef fdd0 	bl	80002a8 <__aeabi_dsub>
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	4606      	mov	r6, r0
 801070e:	460f      	mov	r7, r1
 8010710:	4640      	mov	r0, r8
 8010712:	4649      	mov	r1, r9
 8010714:	f7ef fdc8 	bl	80002a8 <__aeabi_dsub>
 8010718:	4622      	mov	r2, r4
 801071a:	462b      	mov	r3, r5
 801071c:	f7ef fdc4 	bl	80002a8 <__aeabi_dsub>
 8010720:	a31b      	add	r3, pc, #108	; (adr r3, 8010790 <__ieee754_rem_pio2+0x330>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	4604      	mov	r4, r0
 8010728:	460d      	mov	r5, r1
 801072a:	ec51 0b18 	vmov	r0, r1, d8
 801072e:	f7ef ff73 	bl	8000618 <__aeabi_dmul>
 8010732:	4622      	mov	r2, r4
 8010734:	462b      	mov	r3, r5
 8010736:	f7ef fdb7 	bl	80002a8 <__aeabi_dsub>
 801073a:	4604      	mov	r4, r0
 801073c:	460d      	mov	r5, r1
 801073e:	e75f      	b.n	8010600 <__ieee754_rem_pio2+0x1a0>
 8010740:	4b1b      	ldr	r3, [pc, #108]	; (80107b0 <__ieee754_rem_pio2+0x350>)
 8010742:	4598      	cmp	r8, r3
 8010744:	dd36      	ble.n	80107b4 <__ieee754_rem_pio2+0x354>
 8010746:	ee10 2a10 	vmov	r2, s0
 801074a:	462b      	mov	r3, r5
 801074c:	4620      	mov	r0, r4
 801074e:	4629      	mov	r1, r5
 8010750:	f7ef fdaa 	bl	80002a8 <__aeabi_dsub>
 8010754:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010758:	e9ca 0100 	strd	r0, r1, [sl]
 801075c:	e694      	b.n	8010488 <__ieee754_rem_pio2+0x28>
 801075e:	bf00      	nop
 8010760:	54400000 	.word	0x54400000
 8010764:	3ff921fb 	.word	0x3ff921fb
 8010768:	1a626331 	.word	0x1a626331
 801076c:	3dd0b461 	.word	0x3dd0b461
 8010770:	1a600000 	.word	0x1a600000
 8010774:	3dd0b461 	.word	0x3dd0b461
 8010778:	2e037073 	.word	0x2e037073
 801077c:	3ba3198a 	.word	0x3ba3198a
 8010780:	6dc9c883 	.word	0x6dc9c883
 8010784:	3fe45f30 	.word	0x3fe45f30
 8010788:	2e000000 	.word	0x2e000000
 801078c:	3ba3198a 	.word	0x3ba3198a
 8010790:	252049c1 	.word	0x252049c1
 8010794:	397b839a 	.word	0x397b839a
 8010798:	3fe921fb 	.word	0x3fe921fb
 801079c:	4002d97b 	.word	0x4002d97b
 80107a0:	3ff921fb 	.word	0x3ff921fb
 80107a4:	413921fb 	.word	0x413921fb
 80107a8:	3fe00000 	.word	0x3fe00000
 80107ac:	0805b1ec 	.word	0x0805b1ec
 80107b0:	7fefffff 	.word	0x7fefffff
 80107b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80107b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80107bc:	ee10 0a10 	vmov	r0, s0
 80107c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80107c4:	ee10 6a10 	vmov	r6, s0
 80107c8:	460f      	mov	r7, r1
 80107ca:	f7f0 f9d5 	bl	8000b78 <__aeabi_d2iz>
 80107ce:	f7ef feb9 	bl	8000544 <__aeabi_i2d>
 80107d2:	4602      	mov	r2, r0
 80107d4:	460b      	mov	r3, r1
 80107d6:	4630      	mov	r0, r6
 80107d8:	4639      	mov	r1, r7
 80107da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80107de:	f7ef fd63 	bl	80002a8 <__aeabi_dsub>
 80107e2:	4b23      	ldr	r3, [pc, #140]	; (8010870 <__ieee754_rem_pio2+0x410>)
 80107e4:	2200      	movs	r2, #0
 80107e6:	f7ef ff17 	bl	8000618 <__aeabi_dmul>
 80107ea:	460f      	mov	r7, r1
 80107ec:	4606      	mov	r6, r0
 80107ee:	f7f0 f9c3 	bl	8000b78 <__aeabi_d2iz>
 80107f2:	f7ef fea7 	bl	8000544 <__aeabi_i2d>
 80107f6:	4602      	mov	r2, r0
 80107f8:	460b      	mov	r3, r1
 80107fa:	4630      	mov	r0, r6
 80107fc:	4639      	mov	r1, r7
 80107fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010802:	f7ef fd51 	bl	80002a8 <__aeabi_dsub>
 8010806:	4b1a      	ldr	r3, [pc, #104]	; (8010870 <__ieee754_rem_pio2+0x410>)
 8010808:	2200      	movs	r2, #0
 801080a:	f7ef ff05 	bl	8000618 <__aeabi_dmul>
 801080e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010812:	ad04      	add	r5, sp, #16
 8010814:	f04f 0803 	mov.w	r8, #3
 8010818:	46a9      	mov	r9, r5
 801081a:	2600      	movs	r6, #0
 801081c:	2700      	movs	r7, #0
 801081e:	4632      	mov	r2, r6
 8010820:	463b      	mov	r3, r7
 8010822:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8010826:	46c3      	mov	fp, r8
 8010828:	3d08      	subs	r5, #8
 801082a:	f108 38ff 	add.w	r8, r8, #4294967295
 801082e:	f7f0 f95b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010832:	2800      	cmp	r0, #0
 8010834:	d1f3      	bne.n	801081e <__ieee754_rem_pio2+0x3be>
 8010836:	4b0f      	ldr	r3, [pc, #60]	; (8010874 <__ieee754_rem_pio2+0x414>)
 8010838:	9301      	str	r3, [sp, #4]
 801083a:	2302      	movs	r3, #2
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	4622      	mov	r2, r4
 8010840:	465b      	mov	r3, fp
 8010842:	4651      	mov	r1, sl
 8010844:	4648      	mov	r0, r9
 8010846:	f000 fe7b 	bl	8011540 <__kernel_rem_pio2>
 801084a:	9b02      	ldr	r3, [sp, #8]
 801084c:	2b00      	cmp	r3, #0
 801084e:	4683      	mov	fp, r0
 8010850:	f6bf ae46 	bge.w	80104e0 <__ieee754_rem_pio2+0x80>
 8010854:	e9da 2100 	ldrd	r2, r1, [sl]
 8010858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801085c:	e9ca 2300 	strd	r2, r3, [sl]
 8010860:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010868:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801086c:	e73a      	b.n	80106e4 <__ieee754_rem_pio2+0x284>
 801086e:	bf00      	nop
 8010870:	41700000 	.word	0x41700000
 8010874:	0805b26c 	.word	0x0805b26c

08010878 <__ieee754_sqrt>:
 8010878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801087c:	ec55 4b10 	vmov	r4, r5, d0
 8010880:	4e55      	ldr	r6, [pc, #340]	; (80109d8 <__ieee754_sqrt+0x160>)
 8010882:	43ae      	bics	r6, r5
 8010884:	ee10 0a10 	vmov	r0, s0
 8010888:	ee10 3a10 	vmov	r3, s0
 801088c:	462a      	mov	r2, r5
 801088e:	4629      	mov	r1, r5
 8010890:	d110      	bne.n	80108b4 <__ieee754_sqrt+0x3c>
 8010892:	ee10 2a10 	vmov	r2, s0
 8010896:	462b      	mov	r3, r5
 8010898:	f7ef febe 	bl	8000618 <__aeabi_dmul>
 801089c:	4602      	mov	r2, r0
 801089e:	460b      	mov	r3, r1
 80108a0:	4620      	mov	r0, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	f7ef fd02 	bl	80002ac <__adddf3>
 80108a8:	4604      	mov	r4, r0
 80108aa:	460d      	mov	r5, r1
 80108ac:	ec45 4b10 	vmov	d0, r4, r5
 80108b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b4:	2d00      	cmp	r5, #0
 80108b6:	dc10      	bgt.n	80108da <__ieee754_sqrt+0x62>
 80108b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80108bc:	4330      	orrs	r0, r6
 80108be:	d0f5      	beq.n	80108ac <__ieee754_sqrt+0x34>
 80108c0:	b15d      	cbz	r5, 80108da <__ieee754_sqrt+0x62>
 80108c2:	ee10 2a10 	vmov	r2, s0
 80108c6:	462b      	mov	r3, r5
 80108c8:	ee10 0a10 	vmov	r0, s0
 80108cc:	f7ef fcec 	bl	80002a8 <__aeabi_dsub>
 80108d0:	4602      	mov	r2, r0
 80108d2:	460b      	mov	r3, r1
 80108d4:	f7ef ffca 	bl	800086c <__aeabi_ddiv>
 80108d8:	e7e6      	b.n	80108a8 <__ieee754_sqrt+0x30>
 80108da:	1512      	asrs	r2, r2, #20
 80108dc:	d074      	beq.n	80109c8 <__ieee754_sqrt+0x150>
 80108de:	07d4      	lsls	r4, r2, #31
 80108e0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80108e4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80108e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80108ec:	bf5e      	ittt	pl
 80108ee:	0fda      	lsrpl	r2, r3, #31
 80108f0:	005b      	lslpl	r3, r3, #1
 80108f2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80108f6:	2400      	movs	r4, #0
 80108f8:	0fda      	lsrs	r2, r3, #31
 80108fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80108fe:	107f      	asrs	r7, r7, #1
 8010900:	005b      	lsls	r3, r3, #1
 8010902:	2516      	movs	r5, #22
 8010904:	4620      	mov	r0, r4
 8010906:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801090a:	1886      	adds	r6, r0, r2
 801090c:	428e      	cmp	r6, r1
 801090e:	bfde      	ittt	le
 8010910:	1b89      	suble	r1, r1, r6
 8010912:	18b0      	addle	r0, r6, r2
 8010914:	18a4      	addle	r4, r4, r2
 8010916:	0049      	lsls	r1, r1, #1
 8010918:	3d01      	subs	r5, #1
 801091a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801091e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010922:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010926:	d1f0      	bne.n	801090a <__ieee754_sqrt+0x92>
 8010928:	462a      	mov	r2, r5
 801092a:	f04f 0e20 	mov.w	lr, #32
 801092e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010932:	4281      	cmp	r1, r0
 8010934:	eb06 0c05 	add.w	ip, r6, r5
 8010938:	dc02      	bgt.n	8010940 <__ieee754_sqrt+0xc8>
 801093a:	d113      	bne.n	8010964 <__ieee754_sqrt+0xec>
 801093c:	459c      	cmp	ip, r3
 801093e:	d811      	bhi.n	8010964 <__ieee754_sqrt+0xec>
 8010940:	f1bc 0f00 	cmp.w	ip, #0
 8010944:	eb0c 0506 	add.w	r5, ip, r6
 8010948:	da43      	bge.n	80109d2 <__ieee754_sqrt+0x15a>
 801094a:	2d00      	cmp	r5, #0
 801094c:	db41      	blt.n	80109d2 <__ieee754_sqrt+0x15a>
 801094e:	f100 0801 	add.w	r8, r0, #1
 8010952:	1a09      	subs	r1, r1, r0
 8010954:	459c      	cmp	ip, r3
 8010956:	bf88      	it	hi
 8010958:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801095c:	eba3 030c 	sub.w	r3, r3, ip
 8010960:	4432      	add	r2, r6
 8010962:	4640      	mov	r0, r8
 8010964:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010968:	f1be 0e01 	subs.w	lr, lr, #1
 801096c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010974:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010978:	d1db      	bne.n	8010932 <__ieee754_sqrt+0xba>
 801097a:	430b      	orrs	r3, r1
 801097c:	d006      	beq.n	801098c <__ieee754_sqrt+0x114>
 801097e:	1c50      	adds	r0, r2, #1
 8010980:	bf13      	iteet	ne
 8010982:	3201      	addne	r2, #1
 8010984:	3401      	addeq	r4, #1
 8010986:	4672      	moveq	r2, lr
 8010988:	f022 0201 	bicne.w	r2, r2, #1
 801098c:	1063      	asrs	r3, r4, #1
 801098e:	0852      	lsrs	r2, r2, #1
 8010990:	07e1      	lsls	r1, r4, #31
 8010992:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010996:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801099a:	bf48      	it	mi
 801099c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80109a0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80109a4:	4614      	mov	r4, r2
 80109a6:	e781      	b.n	80108ac <__ieee754_sqrt+0x34>
 80109a8:	0ad9      	lsrs	r1, r3, #11
 80109aa:	3815      	subs	r0, #21
 80109ac:	055b      	lsls	r3, r3, #21
 80109ae:	2900      	cmp	r1, #0
 80109b0:	d0fa      	beq.n	80109a8 <__ieee754_sqrt+0x130>
 80109b2:	02cd      	lsls	r5, r1, #11
 80109b4:	d50a      	bpl.n	80109cc <__ieee754_sqrt+0x154>
 80109b6:	f1c2 0420 	rsb	r4, r2, #32
 80109ba:	fa23 f404 	lsr.w	r4, r3, r4
 80109be:	1e55      	subs	r5, r2, #1
 80109c0:	4093      	lsls	r3, r2
 80109c2:	4321      	orrs	r1, r4
 80109c4:	1b42      	subs	r2, r0, r5
 80109c6:	e78a      	b.n	80108de <__ieee754_sqrt+0x66>
 80109c8:	4610      	mov	r0, r2
 80109ca:	e7f0      	b.n	80109ae <__ieee754_sqrt+0x136>
 80109cc:	0049      	lsls	r1, r1, #1
 80109ce:	3201      	adds	r2, #1
 80109d0:	e7ef      	b.n	80109b2 <__ieee754_sqrt+0x13a>
 80109d2:	4680      	mov	r8, r0
 80109d4:	e7bd      	b.n	8010952 <__ieee754_sqrt+0xda>
 80109d6:	bf00      	nop
 80109d8:	7ff00000 	.word	0x7ff00000

080109dc <__ieee754_expf>:
 80109dc:	ee10 2a10 	vmov	r2, s0
 80109e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80109e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80109e8:	d902      	bls.n	80109f0 <__ieee754_expf+0x14>
 80109ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80109ee:	4770      	bx	lr
 80109f0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80109f4:	d106      	bne.n	8010a04 <__ieee754_expf+0x28>
 80109f6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8010b30 <__ieee754_expf+0x154>
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	bf18      	it	ne
 80109fe:	eeb0 0a67 	vmovne.f32	s0, s15
 8010a02:	4770      	bx	lr
 8010a04:	484b      	ldr	r0, [pc, #300]	; (8010b34 <__ieee754_expf+0x158>)
 8010a06:	4282      	cmp	r2, r0
 8010a08:	dd02      	ble.n	8010a10 <__ieee754_expf+0x34>
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	f001 b9c2 	b.w	8011d94 <__math_oflowf>
 8010a10:	2a00      	cmp	r2, #0
 8010a12:	da05      	bge.n	8010a20 <__ieee754_expf+0x44>
 8010a14:	4a48      	ldr	r2, [pc, #288]	; (8010b38 <__ieee754_expf+0x15c>)
 8010a16:	4291      	cmp	r1, r2
 8010a18:	d902      	bls.n	8010a20 <__ieee754_expf+0x44>
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	f001 b9b4 	b.w	8011d88 <__math_uflowf>
 8010a20:	4a46      	ldr	r2, [pc, #280]	; (8010b3c <__ieee754_expf+0x160>)
 8010a22:	4291      	cmp	r1, r2
 8010a24:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010a28:	d952      	bls.n	8010ad0 <__ieee754_expf+0xf4>
 8010a2a:	4a45      	ldr	r2, [pc, #276]	; (8010b40 <__ieee754_expf+0x164>)
 8010a2c:	4291      	cmp	r1, r2
 8010a2e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010a32:	d834      	bhi.n	8010a9e <__ieee754_expf+0xc2>
 8010a34:	4943      	ldr	r1, [pc, #268]	; (8010b44 <__ieee754_expf+0x168>)
 8010a36:	4411      	add	r1, r2
 8010a38:	ed91 7a00 	vldr	s14, [r1]
 8010a3c:	4942      	ldr	r1, [pc, #264]	; (8010b48 <__ieee754_expf+0x16c>)
 8010a3e:	440a      	add	r2, r1
 8010a40:	edd2 7a00 	vldr	s15, [r2]
 8010a44:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010a48:	f1c3 0201 	rsb	r2, r3, #1
 8010a4c:	1ad2      	subs	r2, r2, r3
 8010a4e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010a52:	ee20 6a00 	vmul.f32	s12, s0, s0
 8010a56:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8010b4c <__ieee754_expf+0x170>
 8010a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010b50 <__ieee754_expf+0x174>
 8010a5e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8010a62:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8010b54 <__ieee754_expf+0x178>
 8010a66:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010a6a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010b58 <__ieee754_expf+0x17c>
 8010a6e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8010a72:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8010b5c <__ieee754_expf+0x180>
 8010a76:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010a7a:	eef0 6a40 	vmov.f32	s13, s0
 8010a7e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8010a82:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8010a86:	ee20 5a26 	vmul.f32	s10, s0, s13
 8010a8a:	bb92      	cbnz	r2, 8010af2 <__ieee754_expf+0x116>
 8010a8c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8010a90:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010a94:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010a98:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8010a9c:	4770      	bx	lr
 8010a9e:	4b30      	ldr	r3, [pc, #192]	; (8010b60 <__ieee754_expf+0x184>)
 8010aa0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8010b64 <__ieee754_expf+0x188>
 8010aa4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010b68 <__ieee754_expf+0x18c>
 8010aa8:	4413      	add	r3, r2
 8010aaa:	edd3 7a00 	vldr	s15, [r3]
 8010aae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8010ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010aba:	ee17 2a90 	vmov	r2, s15
 8010abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ac2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8010ac6:	eddf 6a29 	vldr	s13, [pc, #164]	; 8010b6c <__ieee754_expf+0x190>
 8010aca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010ace:	e7be      	b.n	8010a4e <__ieee754_expf+0x72>
 8010ad0:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8010ad4:	d20b      	bcs.n	8010aee <__ieee754_expf+0x112>
 8010ad6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010b70 <__ieee754_expf+0x194>
 8010ada:	ee70 6a26 	vadd.f32	s13, s0, s13
 8010ade:	eef4 6ae5 	vcmpe.f32	s13, s11
 8010ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae6:	dd02      	ble.n	8010aee <__ieee754_expf+0x112>
 8010ae8:	ee30 0a25 	vadd.f32	s0, s0, s11
 8010aec:	4770      	bx	lr
 8010aee:	2200      	movs	r2, #0
 8010af0:	e7af      	b.n	8010a52 <__ieee754_expf+0x76>
 8010af2:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010af6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8010afa:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8010afe:	bfb8      	it	lt
 8010b00:	3264      	addlt	r2, #100	; 0x64
 8010b02:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010b06:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010b0a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8010b0e:	ee17 3a90 	vmov	r3, s15
 8010b12:	bfab      	itete	ge
 8010b14:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010b18:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010b1c:	ee00 3a10 	vmovge	s0, r3
 8010b20:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8010b74 <__ieee754_expf+0x198>
 8010b24:	bfbc      	itt	lt
 8010b26:	ee00 3a10 	vmovlt	s0, r3
 8010b2a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8010b2e:	4770      	bx	lr
 8010b30:	00000000 	.word	0x00000000
 8010b34:	42b17217 	.word	0x42b17217
 8010b38:	42cff1b5 	.word	0x42cff1b5
 8010b3c:	3eb17218 	.word	0x3eb17218
 8010b40:	3f851591 	.word	0x3f851591
 8010b44:	0805b37c 	.word	0x0805b37c
 8010b48:	0805b384 	.word	0x0805b384
 8010b4c:	3331bb4c 	.word	0x3331bb4c
 8010b50:	b5ddea0e 	.word	0xb5ddea0e
 8010b54:	388ab355 	.word	0x388ab355
 8010b58:	bb360b61 	.word	0xbb360b61
 8010b5c:	3e2aaaab 	.word	0x3e2aaaab
 8010b60:	0805b374 	.word	0x0805b374
 8010b64:	3fb8aa3b 	.word	0x3fb8aa3b
 8010b68:	3f317180 	.word	0x3f317180
 8010b6c:	3717f7d1 	.word	0x3717f7d1
 8010b70:	7149f2ca 	.word	0x7149f2ca
 8010b74:	0d800000 	.word	0x0d800000

08010b78 <__ieee754_logf>:
 8010b78:	ee10 3a10 	vmov	r3, s0
 8010b7c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010b80:	d106      	bne.n	8010b90 <__ieee754_logf+0x18>
 8010b82:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8010d18 <__ieee754_logf+0x1a0>
 8010b86:	eddf 7a65 	vldr	s15, [pc, #404]	; 8010d1c <__ieee754_logf+0x1a4>
 8010b8a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010b8e:	4770      	bx	lr
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	da02      	bge.n	8010b9a <__ieee754_logf+0x22>
 8010b94:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010b98:	e7f5      	b.n	8010b86 <__ieee754_logf+0xe>
 8010b9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010b9e:	db02      	blt.n	8010ba6 <__ieee754_logf+0x2e>
 8010ba0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ba4:	4770      	bx	lr
 8010ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010baa:	bfb8      	it	lt
 8010bac:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8010d20 <__ieee754_logf+0x1a8>
 8010bb0:	485c      	ldr	r0, [pc, #368]	; (8010d24 <__ieee754_logf+0x1ac>)
 8010bb2:	bfbe      	ittt	lt
 8010bb4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8010bb8:	f06f 0118 	mvnlt.w	r1, #24
 8010bbc:	ee17 3a90 	vmovlt	r3, s15
 8010bc0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8010bc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010bc8:	4418      	add	r0, r3
 8010bca:	bfa8      	it	ge
 8010bcc:	2100      	movge	r1, #0
 8010bce:	3a7f      	subs	r2, #127	; 0x7f
 8010bd0:	440a      	add	r2, r1
 8010bd2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8010bd6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8010bda:	4319      	orrs	r1, r3
 8010bdc:	ee00 1a10 	vmov	s0, r1
 8010be0:	4951      	ldr	r1, [pc, #324]	; (8010d28 <__ieee754_logf+0x1b0>)
 8010be2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8010be6:	f103 000f 	add.w	r0, r3, #15
 8010bea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bee:	4001      	ands	r1, r0
 8010bf0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010bf4:	bb89      	cbnz	r1, 8010c5a <__ieee754_logf+0xe2>
 8010bf6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfe:	d10f      	bne.n	8010c20 <__ieee754_logf+0xa8>
 8010c00:	2a00      	cmp	r2, #0
 8010c02:	f000 8085 	beq.w	8010d10 <__ieee754_logf+0x198>
 8010c06:	ee07 2a90 	vmov	s15, r2
 8010c0a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8010d2c <__ieee754_logf+0x1b4>
 8010c0e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010d30 <__ieee754_logf+0x1b8>
 8010c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010c1a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8010c1e:	4770      	bx	lr
 8010c20:	eddf 6a44 	vldr	s13, [pc, #272]	; 8010d34 <__ieee754_logf+0x1bc>
 8010c24:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c28:	eee0 7a66 	vfms.f32	s15, s0, s13
 8010c2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010c34:	b912      	cbnz	r2, 8010c3c <__ieee754_logf+0xc4>
 8010c36:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010c3a:	4770      	bx	lr
 8010c3c:	ee07 2a90 	vmov	s15, r2
 8010c40:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8010d2c <__ieee754_logf+0x1b4>
 8010c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c48:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8010c4c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010c50:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8010d30 <__ieee754_logf+0x1b8>
 8010c54:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8010c58:	4770      	bx	lr
 8010c5a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010c5e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010c62:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010d38 <__ieee754_logf+0x1c0>
 8010c66:	eddf 4a35 	vldr	s9, [pc, #212]	; 8010d3c <__ieee754_logf+0x1c4>
 8010c6a:	4935      	ldr	r1, [pc, #212]	; (8010d40 <__ieee754_logf+0x1c8>)
 8010c6c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8010c70:	4419      	add	r1, r3
 8010c72:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8010c76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010c7a:	430b      	orrs	r3, r1
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	ee07 2a90 	vmov	s15, r2
 8010c82:	ee26 5a06 	vmul.f32	s10, s12, s12
 8010c86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010c8a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8010c8e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8010d44 <__ieee754_logf+0x1cc>
 8010c92:	eee7 7a25 	vfma.f32	s15, s14, s11
 8010c96:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8010d48 <__ieee754_logf+0x1d0>
 8010c9a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010c9e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010d4c <__ieee754_logf+0x1d4>
 8010ca2:	eee7 7a24 	vfma.f32	s15, s14, s9
 8010ca6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8010d50 <__ieee754_logf+0x1d8>
 8010caa:	eee7 4a87 	vfma.f32	s9, s15, s14
 8010cae:	eddf 7a29 	vldr	s15, [pc, #164]	; 8010d54 <__ieee754_logf+0x1dc>
 8010cb2:	eee4 7a87 	vfma.f32	s15, s9, s14
 8010cb6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010cba:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010cbe:	dd1c      	ble.n	8010cfa <__ieee754_logf+0x182>
 8010cc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010cc4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8010cc8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010cd4:	b922      	cbnz	r2, 8010ce0 <__ieee754_logf+0x168>
 8010cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cda:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010cde:	4770      	bx	lr
 8010ce0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8010d2c <__ieee754_logf+0x1b4>
 8010ce4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010cf0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010d30 <__ieee754_logf+0x1b8>
 8010cf4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8010cf8:	4770      	bx	lr
 8010cfa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010cfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010d02:	2a00      	cmp	r2, #0
 8010d04:	d0e9      	beq.n	8010cda <__ieee754_logf+0x162>
 8010d06:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8010d2c <__ieee754_logf+0x1b4>
 8010d0a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010d0e:	e7ed      	b.n	8010cec <__ieee754_logf+0x174>
 8010d10:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8010d1c <__ieee754_logf+0x1a4>
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	cc000000 	.word	0xcc000000
 8010d1c:	00000000 	.word	0x00000000
 8010d20:	4c000000 	.word	0x4c000000
 8010d24:	004afb20 	.word	0x004afb20
 8010d28:	007ffff0 	.word	0x007ffff0
 8010d2c:	3717f7d1 	.word	0x3717f7d1
 8010d30:	3f317180 	.word	0x3f317180
 8010d34:	3eaaaaab 	.word	0x3eaaaaab
 8010d38:	3e1cd04f 	.word	0x3e1cd04f
 8010d3c:	3e178897 	.word	0x3e178897
 8010d40:	ffcf5c30 	.word	0xffcf5c30
 8010d44:	3e638e29 	.word	0x3e638e29
 8010d48:	3ecccccd 	.word	0x3ecccccd
 8010d4c:	3e3a3325 	.word	0x3e3a3325
 8010d50:	3e924925 	.word	0x3e924925
 8010d54:	3f2aaaab 	.word	0x3f2aaaab

08010d58 <__ieee754_log10f>:
 8010d58:	b508      	push	{r3, lr}
 8010d5a:	ee10 2a10 	vmov	r2, s0
 8010d5e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8010d62:	ed2d 8b02 	vpush	{d8}
 8010d66:	d108      	bne.n	8010d7a <__ieee754_log10f+0x22>
 8010d68:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8010df0 <__ieee754_log10f+0x98>
 8010d6c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8010df4 <__ieee754_log10f+0x9c>
 8010d70:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010d74:	ecbd 8b02 	vpop	{d8}
 8010d78:	bd08      	pop	{r3, pc}
 8010d7a:	2a00      	cmp	r2, #0
 8010d7c:	da02      	bge.n	8010d84 <__ieee754_log10f+0x2c>
 8010d7e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010d82:	e7f3      	b.n	8010d6c <__ieee754_log10f+0x14>
 8010d84:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010d88:	db02      	blt.n	8010d90 <__ieee754_log10f+0x38>
 8010d8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d8e:	e7f1      	b.n	8010d74 <__ieee754_log10f+0x1c>
 8010d90:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8010d94:	bfbf      	itttt	lt
 8010d96:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8010df8 <__ieee754_log10f+0xa0>
 8010d9a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8010d9e:	f06f 0118 	mvnlt.w	r1, #24
 8010da2:	ee17 2a90 	vmovlt	r2, s15
 8010da6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8010daa:	bfa8      	it	ge
 8010dac:	2100      	movge	r1, #0
 8010dae:	3b7f      	subs	r3, #127	; 0x7f
 8010db0:	440b      	add	r3, r1
 8010db2:	0fd9      	lsrs	r1, r3, #31
 8010db4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8010db8:	ee07 3a90 	vmov	s15, r3
 8010dbc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8010dc0:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8010dc4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010dc8:	ee00 3a10 	vmov	s0, r3
 8010dcc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8010dd0:	f7ff fed2 	bl	8010b78 <__ieee754_logf>
 8010dd4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010dfc <__ieee754_log10f+0xa4>
 8010dd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010ddc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010e00 <__ieee754_log10f+0xa8>
 8010de0:	eea8 0a27 	vfma.f32	s0, s16, s15
 8010de4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010e04 <__ieee754_log10f+0xac>
 8010de8:	eea8 0a27 	vfma.f32	s0, s16, s15
 8010dec:	e7c2      	b.n	8010d74 <__ieee754_log10f+0x1c>
 8010dee:	bf00      	nop
 8010df0:	cc000000 	.word	0xcc000000
 8010df4:	00000000 	.word	0x00000000
 8010df8:	4c000000 	.word	0x4c000000
 8010dfc:	3ede5bd9 	.word	0x3ede5bd9
 8010e00:	355427db 	.word	0x355427db
 8010e04:	3e9a2080 	.word	0x3e9a2080

08010e08 <__ieee754_powf>:
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	ee10 4a90 	vmov	r4, s1
 8010e10:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8010e14:	ed2d 8b02 	vpush	{d8}
 8010e18:	ee10 6a10 	vmov	r6, s0
 8010e1c:	eeb0 8a40 	vmov.f32	s16, s0
 8010e20:	eef0 8a60 	vmov.f32	s17, s1
 8010e24:	d10c      	bne.n	8010e40 <__ieee754_powf+0x38>
 8010e26:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8010e2a:	0076      	lsls	r6, r6, #1
 8010e2c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8010e30:	f240 8296 	bls.w	8011360 <__ieee754_powf+0x558>
 8010e34:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010e38:	ecbd 8b02 	vpop	{d8}
 8010e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e40:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010e44:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010e48:	dcf4      	bgt.n	8010e34 <__ieee754_powf+0x2c>
 8010e4a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010e4e:	dd08      	ble.n	8010e62 <__ieee754_powf+0x5a>
 8010e50:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8010e54:	d1ee      	bne.n	8010e34 <__ieee754_powf+0x2c>
 8010e56:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8010e5a:	0064      	lsls	r4, r4, #1
 8010e5c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8010e60:	e7e6      	b.n	8010e30 <__ieee754_powf+0x28>
 8010e62:	2e00      	cmp	r6, #0
 8010e64:	da20      	bge.n	8010ea8 <__ieee754_powf+0xa0>
 8010e66:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8010e6a:	da2d      	bge.n	8010ec8 <__ieee754_powf+0xc0>
 8010e6c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010e70:	f2c0 827f 	blt.w	8011372 <__ieee754_powf+0x56a>
 8010e74:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8010e78:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010e7c:	fa48 f703 	asr.w	r7, r8, r3
 8010e80:	fa07 f303 	lsl.w	r3, r7, r3
 8010e84:	4543      	cmp	r3, r8
 8010e86:	f040 8274 	bne.w	8011372 <__ieee754_powf+0x56a>
 8010e8a:	f007 0701 	and.w	r7, r7, #1
 8010e8e:	f1c7 0702 	rsb	r7, r7, #2
 8010e92:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010e96:	d11f      	bne.n	8010ed8 <__ieee754_powf+0xd0>
 8010e98:	2c00      	cmp	r4, #0
 8010e9a:	f280 8267 	bge.w	801136c <__ieee754_powf+0x564>
 8010e9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010ea2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010ea6:	e7c7      	b.n	8010e38 <__ieee754_powf+0x30>
 8010ea8:	2700      	movs	r7, #0
 8010eaa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010eae:	d1f0      	bne.n	8010e92 <__ieee754_powf+0x8a>
 8010eb0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8010eb4:	f000 8254 	beq.w	8011360 <__ieee754_powf+0x558>
 8010eb8:	dd08      	ble.n	8010ecc <__ieee754_powf+0xc4>
 8010eba:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80111c4 <__ieee754_powf+0x3bc>
 8010ebe:	2c00      	cmp	r4, #0
 8010ec0:	bfa8      	it	ge
 8010ec2:	eeb0 0a68 	vmovge.f32	s0, s17
 8010ec6:	e7b7      	b.n	8010e38 <__ieee754_powf+0x30>
 8010ec8:	2702      	movs	r7, #2
 8010eca:	e7ee      	b.n	8010eaa <__ieee754_powf+0xa2>
 8010ecc:	2c00      	cmp	r4, #0
 8010ece:	f280 824a 	bge.w	8011366 <__ieee754_powf+0x55e>
 8010ed2:	eeb1 0a68 	vneg.f32	s0, s17
 8010ed6:	e7af      	b.n	8010e38 <__ieee754_powf+0x30>
 8010ed8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8010edc:	d102      	bne.n	8010ee4 <__ieee754_powf+0xdc>
 8010ede:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010ee2:	e7a9      	b.n	8010e38 <__ieee754_powf+0x30>
 8010ee4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8010ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8010eec:	d107      	bne.n	8010efe <__ieee754_powf+0xf6>
 8010eee:	2e00      	cmp	r6, #0
 8010ef0:	db05      	blt.n	8010efe <__ieee754_powf+0xf6>
 8010ef2:	ecbd 8b02 	vpop	{d8}
 8010ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010efa:	f000 ba53 	b.w	80113a4 <__ieee754_sqrtf>
 8010efe:	f7ff f94f 	bl	80101a0 <fabsf>
 8010f02:	b125      	cbz	r5, 8010f0e <__ieee754_powf+0x106>
 8010f04:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8010f08:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010f0c:	d116      	bne.n	8010f3c <__ieee754_powf+0x134>
 8010f0e:	2c00      	cmp	r4, #0
 8010f10:	bfbc      	itt	lt
 8010f12:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8010f16:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010f1a:	2e00      	cmp	r6, #0
 8010f1c:	da8c      	bge.n	8010e38 <__ieee754_powf+0x30>
 8010f1e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8010f22:	ea55 0307 	orrs.w	r3, r5, r7
 8010f26:	d104      	bne.n	8010f32 <__ieee754_powf+0x12a>
 8010f28:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010f2c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010f30:	e782      	b.n	8010e38 <__ieee754_powf+0x30>
 8010f32:	2f01      	cmp	r7, #1
 8010f34:	d180      	bne.n	8010e38 <__ieee754_powf+0x30>
 8010f36:	eeb1 0a40 	vneg.f32	s0, s0
 8010f3a:	e77d      	b.n	8010e38 <__ieee754_powf+0x30>
 8010f3c:	0ff0      	lsrs	r0, r6, #31
 8010f3e:	3801      	subs	r0, #1
 8010f40:	ea57 0300 	orrs.w	r3, r7, r0
 8010f44:	d104      	bne.n	8010f50 <__ieee754_powf+0x148>
 8010f46:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010f4a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010f4e:	e773      	b.n	8010e38 <__ieee754_powf+0x30>
 8010f50:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8010f54:	dd74      	ble.n	8011040 <__ieee754_powf+0x238>
 8010f56:	4b9c      	ldr	r3, [pc, #624]	; (80111c8 <__ieee754_powf+0x3c0>)
 8010f58:	429d      	cmp	r5, r3
 8010f5a:	dc08      	bgt.n	8010f6e <__ieee754_powf+0x166>
 8010f5c:	2c00      	cmp	r4, #0
 8010f5e:	da0b      	bge.n	8010f78 <__ieee754_powf+0x170>
 8010f60:	2000      	movs	r0, #0
 8010f62:	ecbd 8b02 	vpop	{d8}
 8010f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6a:	f000 bf13 	b.w	8011d94 <__math_oflowf>
 8010f6e:	4b97      	ldr	r3, [pc, #604]	; (80111cc <__ieee754_powf+0x3c4>)
 8010f70:	429d      	cmp	r5, r3
 8010f72:	dd08      	ble.n	8010f86 <__ieee754_powf+0x17e>
 8010f74:	2c00      	cmp	r4, #0
 8010f76:	dcf3      	bgt.n	8010f60 <__ieee754_powf+0x158>
 8010f78:	2000      	movs	r0, #0
 8010f7a:	ecbd 8b02 	vpop	{d8}
 8010f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f82:	f000 bf01 	b.w	8011d88 <__math_uflowf>
 8010f86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010f8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010f8e:	eddf 6a90 	vldr	s13, [pc, #576]	; 80111d0 <__ieee754_powf+0x3c8>
 8010f92:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010f96:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010f9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010f9e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010fa2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010faa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80111d4 <__ieee754_powf+0x3cc>
 8010fae:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8010fb2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80111d8 <__ieee754_powf+0x3d0>
 8010fb6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010fba:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80111dc <__ieee754_powf+0x3d4>
 8010fbe:	eef0 6a67 	vmov.f32	s13, s15
 8010fc2:	eee0 6a07 	vfma.f32	s13, s0, s14
 8010fc6:	ee16 3a90 	vmov	r3, s13
 8010fca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010fce:	f023 030f 	bic.w	r3, r3, #15
 8010fd2:	ee00 3a90 	vmov	s1, r3
 8010fd6:	eee0 0a47 	vfms.f32	s1, s0, s14
 8010fda:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010fde:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8010fe2:	f024 040f 	bic.w	r4, r4, #15
 8010fe6:	ee07 4a10 	vmov	s14, r4
 8010fea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010fee:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8010ff2:	ee07 3a90 	vmov	s15, r3
 8010ff6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8010ffa:	3f01      	subs	r7, #1
 8010ffc:	ea57 0200 	orrs.w	r2, r7, r0
 8011000:	ee07 4a10 	vmov	s14, r4
 8011004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011008:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801100c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011010:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011014:	ee17 4a10 	vmov	r4, s14
 8011018:	bf08      	it	eq
 801101a:	eeb0 8a40 	vmoveq.f32	s16, s0
 801101e:	2c00      	cmp	r4, #0
 8011020:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011024:	f340 817e 	ble.w	8011324 <__ieee754_powf+0x51c>
 8011028:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801102c:	f340 80f8 	ble.w	8011220 <__ieee754_powf+0x418>
 8011030:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011038:	bf4c      	ite	mi
 801103a:	2001      	movmi	r0, #1
 801103c:	2000      	movpl	r0, #0
 801103e:	e790      	b.n	8010f62 <__ieee754_powf+0x15a>
 8011040:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8011044:	bf01      	itttt	eq
 8011046:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80111e0 <__ieee754_powf+0x3d8>
 801104a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801104e:	f06f 0217 	mvneq.w	r2, #23
 8011052:	ee17 5a90 	vmoveq	r5, s15
 8011056:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801105a:	bf18      	it	ne
 801105c:	2200      	movne	r2, #0
 801105e:	3b7f      	subs	r3, #127	; 0x7f
 8011060:	4413      	add	r3, r2
 8011062:	4a60      	ldr	r2, [pc, #384]	; (80111e4 <__ieee754_powf+0x3dc>)
 8011064:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8011068:	4295      	cmp	r5, r2
 801106a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801106e:	dd06      	ble.n	801107e <__ieee754_powf+0x276>
 8011070:	4a5d      	ldr	r2, [pc, #372]	; (80111e8 <__ieee754_powf+0x3e0>)
 8011072:	4295      	cmp	r5, r2
 8011074:	f340 80a4 	ble.w	80111c0 <__ieee754_powf+0x3b8>
 8011078:	3301      	adds	r3, #1
 801107a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801107e:	2500      	movs	r5, #0
 8011080:	4a5a      	ldr	r2, [pc, #360]	; (80111ec <__ieee754_powf+0x3e4>)
 8011082:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8011086:	ee07 1a90 	vmov	s15, r1
 801108a:	ed92 7a00 	vldr	s14, [r2]
 801108e:	4a58      	ldr	r2, [pc, #352]	; (80111f0 <__ieee754_powf+0x3e8>)
 8011090:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011094:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011098:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801109c:	1049      	asrs	r1, r1, #1
 801109e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80110a2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80110a6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80110aa:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80110ae:	ee06 1a10 	vmov	s12, r1
 80110b2:	ee65 4a26 	vmul.f32	s9, s10, s13
 80110b6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80110ba:	ee14 6a90 	vmov	r6, s9
 80110be:	4016      	ands	r6, r2
 80110c0:	ee05 6a90 	vmov	s11, r6
 80110c4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80110c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80110cc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80111f4 <__ieee754_powf+0x3ec>
 80110d0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80110d4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80110d8:	ee25 6a26 	vmul.f32	s12, s10, s13
 80110dc:	eddf 6a46 	vldr	s13, [pc, #280]	; 80111f8 <__ieee754_powf+0x3f0>
 80110e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80110e4:	eddf 6a45 	vldr	s13, [pc, #276]	; 80111fc <__ieee754_powf+0x3f4>
 80110e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80110ec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80111d0 <__ieee754_powf+0x3c8>
 80110f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110f4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8011200 <__ieee754_powf+0x3f8>
 80110f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80110fc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8011204 <__ieee754_powf+0x3fc>
 8011100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011104:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8011108:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801110c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011110:	eee5 6a07 	vfma.f32	s13, s10, s14
 8011114:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011118:	eef0 7a45 	vmov.f32	s15, s10
 801111c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011124:	ee17 1a90 	vmov	r1, s15
 8011128:	4011      	ands	r1, r2
 801112a:	ee07 1a90 	vmov	s15, r1
 801112e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8011132:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8011136:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801113a:	ee27 7a24 	vmul.f32	s14, s14, s9
 801113e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011142:	eeb0 6a47 	vmov.f32	s12, s14
 8011146:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801114a:	ee16 1a10 	vmov	r1, s12
 801114e:	4011      	ands	r1, r2
 8011150:	ee06 1a90 	vmov	s13, r1
 8011154:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8011158:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011208 <__ieee754_powf+0x400>
 801115c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801120c <__ieee754_powf+0x404>
 8011160:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011164:	ee06 1a10 	vmov	s12, r1
 8011168:	ee27 7a27 	vmul.f32	s14, s14, s15
 801116c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8011210 <__ieee754_powf+0x408>
 8011170:	4928      	ldr	r1, [pc, #160]	; (8011214 <__ieee754_powf+0x40c>)
 8011172:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011176:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801117a:	edd1 7a00 	vldr	s15, [r1]
 801117e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011182:	ee07 3a90 	vmov	s15, r3
 8011186:	4b24      	ldr	r3, [pc, #144]	; (8011218 <__ieee754_powf+0x410>)
 8011188:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801118c:	eef0 7a47 	vmov.f32	s15, s14
 8011190:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011194:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011198:	edd5 0a00 	vldr	s1, [r5]
 801119c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80111a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111a4:	ee17 3a90 	vmov	r3, s15
 80111a8:	4013      	ands	r3, r2
 80111aa:	ee07 3a90 	vmov	s15, r3
 80111ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80111b2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80111b6:	eee6 6a65 	vfms.f32	s13, s12, s11
 80111ba:	ee77 7a66 	vsub.f32	s15, s14, s13
 80111be:	e70e      	b.n	8010fde <__ieee754_powf+0x1d6>
 80111c0:	2501      	movs	r5, #1
 80111c2:	e75d      	b.n	8011080 <__ieee754_powf+0x278>
 80111c4:	00000000 	.word	0x00000000
 80111c8:	3f7ffff3 	.word	0x3f7ffff3
 80111cc:	3f800007 	.word	0x3f800007
 80111d0:	3eaaaaab 	.word	0x3eaaaaab
 80111d4:	3fb8aa3b 	.word	0x3fb8aa3b
 80111d8:	36eca570 	.word	0x36eca570
 80111dc:	3fb8aa00 	.word	0x3fb8aa00
 80111e0:	4b800000 	.word	0x4b800000
 80111e4:	001cc471 	.word	0x001cc471
 80111e8:	005db3d6 	.word	0x005db3d6
 80111ec:	0805b38c 	.word	0x0805b38c
 80111f0:	fffff000 	.word	0xfffff000
 80111f4:	3e6c3255 	.word	0x3e6c3255
 80111f8:	3e53f142 	.word	0x3e53f142
 80111fc:	3e8ba305 	.word	0x3e8ba305
 8011200:	3edb6db7 	.word	0x3edb6db7
 8011204:	3f19999a 	.word	0x3f19999a
 8011208:	3f76384f 	.word	0x3f76384f
 801120c:	3f763800 	.word	0x3f763800
 8011210:	369dc3a0 	.word	0x369dc3a0
 8011214:	0805b39c 	.word	0x0805b39c
 8011218:	0805b394 	.word	0x0805b394
 801121c:	3338aa3c 	.word	0x3338aa3c
 8011220:	f040 8095 	bne.w	801134e <__ieee754_powf+0x546>
 8011224:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801121c <__ieee754_powf+0x414>
 8011228:	ee37 7a67 	vsub.f32	s14, s14, s15
 801122c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011230:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011238:	f73f aefa 	bgt.w	8011030 <__ieee754_powf+0x228>
 801123c:	15db      	asrs	r3, r3, #23
 801123e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8011242:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011246:	4103      	asrs	r3, r0
 8011248:	4423      	add	r3, r4
 801124a:	494b      	ldr	r1, [pc, #300]	; (8011378 <__ieee754_powf+0x570>)
 801124c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011250:	3a7f      	subs	r2, #127	; 0x7f
 8011252:	4111      	asrs	r1, r2
 8011254:	ea23 0101 	bic.w	r1, r3, r1
 8011258:	ee07 1a10 	vmov	s14, r1
 801125c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8011260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011264:	f1c2 0217 	rsb	r2, r2, #23
 8011268:	4110      	asrs	r0, r2
 801126a:	2c00      	cmp	r4, #0
 801126c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011270:	bfb8      	it	lt
 8011272:	4240      	neglt	r0, r0
 8011274:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011278:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801137c <__ieee754_powf+0x574>
 801127c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8011380 <__ieee754_powf+0x578>
 8011280:	ee17 3a10 	vmov	r3, s14
 8011284:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011288:	f023 030f 	bic.w	r3, r3, #15
 801128c:	ee07 3a10 	vmov	s14, r3
 8011290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011294:	ee27 0a00 	vmul.f32	s0, s14, s0
 8011298:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801129c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8011384 <__ieee754_powf+0x57c>
 80112a0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80112a4:	eef0 7a40 	vmov.f32	s15, s0
 80112a8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80112ac:	eeb0 6a67 	vmov.f32	s12, s15
 80112b0:	eea7 6a66 	vfms.f32	s12, s14, s13
 80112b4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80112b8:	ee30 0a46 	vsub.f32	s0, s0, s12
 80112bc:	eddf 6a32 	vldr	s13, [pc, #200]	; 8011388 <__ieee754_powf+0x580>
 80112c0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801138c <__ieee754_powf+0x584>
 80112c4:	eee7 6a06 	vfma.f32	s13, s14, s12
 80112c8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8011390 <__ieee754_powf+0x588>
 80112cc:	eea6 6a87 	vfma.f32	s12, s13, s14
 80112d0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8011394 <__ieee754_powf+0x58c>
 80112d4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80112d8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8011398 <__ieee754_powf+0x590>
 80112dc:	eea6 6a87 	vfma.f32	s12, s13, s14
 80112e0:	eef0 6a67 	vmov.f32	s13, s15
 80112e4:	eee6 6a47 	vfms.f32	s13, s12, s14
 80112e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80112ec:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80112f0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80112f4:	eea7 0a80 	vfma.f32	s0, s15, s0
 80112f8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80112fc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011300:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011308:	ee30 0a67 	vsub.f32	s0, s0, s15
 801130c:	ee10 3a10 	vmov	r3, s0
 8011310:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011314:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011318:	da1f      	bge.n	801135a <__ieee754_powf+0x552>
 801131a:	f000 fe61 	bl	8011fe0 <scalbnf>
 801131e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011322:	e589      	b.n	8010e38 <__ieee754_powf+0x30>
 8011324:	4a1d      	ldr	r2, [pc, #116]	; (801139c <__ieee754_powf+0x594>)
 8011326:	4293      	cmp	r3, r2
 8011328:	dd07      	ble.n	801133a <__ieee754_powf+0x532>
 801132a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011332:	bf4c      	ite	mi
 8011334:	2001      	movmi	r0, #1
 8011336:	2000      	movpl	r0, #0
 8011338:	e61f      	b.n	8010f7a <__ieee754_powf+0x172>
 801133a:	d108      	bne.n	801134e <__ieee754_powf+0x546>
 801133c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011340:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011348:	f6ff af78 	blt.w	801123c <__ieee754_powf+0x434>
 801134c:	e7ed      	b.n	801132a <__ieee754_powf+0x522>
 801134e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8011352:	f73f af73 	bgt.w	801123c <__ieee754_powf+0x434>
 8011356:	2000      	movs	r0, #0
 8011358:	e78c      	b.n	8011274 <__ieee754_powf+0x46c>
 801135a:	ee00 3a10 	vmov	s0, r3
 801135e:	e7de      	b.n	801131e <__ieee754_powf+0x516>
 8011360:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011364:	e568      	b.n	8010e38 <__ieee754_powf+0x30>
 8011366:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80113a0 <__ieee754_powf+0x598>
 801136a:	e565      	b.n	8010e38 <__ieee754_powf+0x30>
 801136c:	eeb0 0a48 	vmov.f32	s0, s16
 8011370:	e562      	b.n	8010e38 <__ieee754_powf+0x30>
 8011372:	2700      	movs	r7, #0
 8011374:	e58d      	b.n	8010e92 <__ieee754_powf+0x8a>
 8011376:	bf00      	nop
 8011378:	007fffff 	.word	0x007fffff
 801137c:	35bfbe8c 	.word	0x35bfbe8c
 8011380:	3f317200 	.word	0x3f317200
 8011384:	3f317218 	.word	0x3f317218
 8011388:	b5ddea0e 	.word	0xb5ddea0e
 801138c:	3331bb4c 	.word	0x3331bb4c
 8011390:	388ab355 	.word	0x388ab355
 8011394:	bb360b61 	.word	0xbb360b61
 8011398:	3e2aaaab 	.word	0x3e2aaaab
 801139c:	43160000 	.word	0x43160000
 80113a0:	00000000 	.word	0x00000000

080113a4 <__ieee754_sqrtf>:
 80113a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80113a8:	4770      	bx	lr
 80113aa:	0000      	movs	r0, r0
 80113ac:	0000      	movs	r0, r0
	...

080113b0 <__kernel_cos>:
 80113b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	ec57 6b10 	vmov	r6, r7, d0
 80113b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80113bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80113c0:	ed8d 1b00 	vstr	d1, [sp]
 80113c4:	da07      	bge.n	80113d6 <__kernel_cos+0x26>
 80113c6:	ee10 0a10 	vmov	r0, s0
 80113ca:	4639      	mov	r1, r7
 80113cc:	f7ef fbd4 	bl	8000b78 <__aeabi_d2iz>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	f000 8088 	beq.w	80114e6 <__kernel_cos+0x136>
 80113d6:	4632      	mov	r2, r6
 80113d8:	463b      	mov	r3, r7
 80113da:	4630      	mov	r0, r6
 80113dc:	4639      	mov	r1, r7
 80113de:	f7ef f91b 	bl	8000618 <__aeabi_dmul>
 80113e2:	4b51      	ldr	r3, [pc, #324]	; (8011528 <__kernel_cos+0x178>)
 80113e4:	2200      	movs	r2, #0
 80113e6:	4604      	mov	r4, r0
 80113e8:	460d      	mov	r5, r1
 80113ea:	f7ef f915 	bl	8000618 <__aeabi_dmul>
 80113ee:	a340      	add	r3, pc, #256	; (adr r3, 80114f0 <__kernel_cos+0x140>)
 80113f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f4:	4682      	mov	sl, r0
 80113f6:	468b      	mov	fp, r1
 80113f8:	4620      	mov	r0, r4
 80113fa:	4629      	mov	r1, r5
 80113fc:	f7ef f90c 	bl	8000618 <__aeabi_dmul>
 8011400:	a33d      	add	r3, pc, #244	; (adr r3, 80114f8 <__kernel_cos+0x148>)
 8011402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011406:	f7ee ff51 	bl	80002ac <__adddf3>
 801140a:	4622      	mov	r2, r4
 801140c:	462b      	mov	r3, r5
 801140e:	f7ef f903 	bl	8000618 <__aeabi_dmul>
 8011412:	a33b      	add	r3, pc, #236	; (adr r3, 8011500 <__kernel_cos+0x150>)
 8011414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011418:	f7ee ff46 	bl	80002a8 <__aeabi_dsub>
 801141c:	4622      	mov	r2, r4
 801141e:	462b      	mov	r3, r5
 8011420:	f7ef f8fa 	bl	8000618 <__aeabi_dmul>
 8011424:	a338      	add	r3, pc, #224	; (adr r3, 8011508 <__kernel_cos+0x158>)
 8011426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142a:	f7ee ff3f 	bl	80002ac <__adddf3>
 801142e:	4622      	mov	r2, r4
 8011430:	462b      	mov	r3, r5
 8011432:	f7ef f8f1 	bl	8000618 <__aeabi_dmul>
 8011436:	a336      	add	r3, pc, #216	; (adr r3, 8011510 <__kernel_cos+0x160>)
 8011438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143c:	f7ee ff34 	bl	80002a8 <__aeabi_dsub>
 8011440:	4622      	mov	r2, r4
 8011442:	462b      	mov	r3, r5
 8011444:	f7ef f8e8 	bl	8000618 <__aeabi_dmul>
 8011448:	a333      	add	r3, pc, #204	; (adr r3, 8011518 <__kernel_cos+0x168>)
 801144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144e:	f7ee ff2d 	bl	80002ac <__adddf3>
 8011452:	4622      	mov	r2, r4
 8011454:	462b      	mov	r3, r5
 8011456:	f7ef f8df 	bl	8000618 <__aeabi_dmul>
 801145a:	4622      	mov	r2, r4
 801145c:	462b      	mov	r3, r5
 801145e:	f7ef f8db 	bl	8000618 <__aeabi_dmul>
 8011462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011466:	4604      	mov	r4, r0
 8011468:	460d      	mov	r5, r1
 801146a:	4630      	mov	r0, r6
 801146c:	4639      	mov	r1, r7
 801146e:	f7ef f8d3 	bl	8000618 <__aeabi_dmul>
 8011472:	460b      	mov	r3, r1
 8011474:	4602      	mov	r2, r0
 8011476:	4629      	mov	r1, r5
 8011478:	4620      	mov	r0, r4
 801147a:	f7ee ff15 	bl	80002a8 <__aeabi_dsub>
 801147e:	4b2b      	ldr	r3, [pc, #172]	; (801152c <__kernel_cos+0x17c>)
 8011480:	4598      	cmp	r8, r3
 8011482:	4606      	mov	r6, r0
 8011484:	460f      	mov	r7, r1
 8011486:	dc10      	bgt.n	80114aa <__kernel_cos+0xfa>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	4650      	mov	r0, sl
 801148e:	4659      	mov	r1, fp
 8011490:	f7ee ff0a 	bl	80002a8 <__aeabi_dsub>
 8011494:	460b      	mov	r3, r1
 8011496:	4926      	ldr	r1, [pc, #152]	; (8011530 <__kernel_cos+0x180>)
 8011498:	4602      	mov	r2, r0
 801149a:	2000      	movs	r0, #0
 801149c:	f7ee ff04 	bl	80002a8 <__aeabi_dsub>
 80114a0:	ec41 0b10 	vmov	d0, r0, r1
 80114a4:	b003      	add	sp, #12
 80114a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114aa:	4b22      	ldr	r3, [pc, #136]	; (8011534 <__kernel_cos+0x184>)
 80114ac:	4920      	ldr	r1, [pc, #128]	; (8011530 <__kernel_cos+0x180>)
 80114ae:	4598      	cmp	r8, r3
 80114b0:	bfcc      	ite	gt
 80114b2:	4d21      	ldrgt	r5, [pc, #132]	; (8011538 <__kernel_cos+0x188>)
 80114b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80114b8:	2400      	movs	r4, #0
 80114ba:	4622      	mov	r2, r4
 80114bc:	462b      	mov	r3, r5
 80114be:	2000      	movs	r0, #0
 80114c0:	f7ee fef2 	bl	80002a8 <__aeabi_dsub>
 80114c4:	4622      	mov	r2, r4
 80114c6:	4680      	mov	r8, r0
 80114c8:	4689      	mov	r9, r1
 80114ca:	462b      	mov	r3, r5
 80114cc:	4650      	mov	r0, sl
 80114ce:	4659      	mov	r1, fp
 80114d0:	f7ee feea 	bl	80002a8 <__aeabi_dsub>
 80114d4:	4632      	mov	r2, r6
 80114d6:	463b      	mov	r3, r7
 80114d8:	f7ee fee6 	bl	80002a8 <__aeabi_dsub>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	4640      	mov	r0, r8
 80114e2:	4649      	mov	r1, r9
 80114e4:	e7da      	b.n	801149c <__kernel_cos+0xec>
 80114e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011520 <__kernel_cos+0x170>
 80114ea:	e7db      	b.n	80114a4 <__kernel_cos+0xf4>
 80114ec:	f3af 8000 	nop.w
 80114f0:	be8838d4 	.word	0xbe8838d4
 80114f4:	bda8fae9 	.word	0xbda8fae9
 80114f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80114fc:	3e21ee9e 	.word	0x3e21ee9e
 8011500:	809c52ad 	.word	0x809c52ad
 8011504:	3e927e4f 	.word	0x3e927e4f
 8011508:	19cb1590 	.word	0x19cb1590
 801150c:	3efa01a0 	.word	0x3efa01a0
 8011510:	16c15177 	.word	0x16c15177
 8011514:	3f56c16c 	.word	0x3f56c16c
 8011518:	5555554c 	.word	0x5555554c
 801151c:	3fa55555 	.word	0x3fa55555
 8011520:	00000000 	.word	0x00000000
 8011524:	3ff00000 	.word	0x3ff00000
 8011528:	3fe00000 	.word	0x3fe00000
 801152c:	3fd33332 	.word	0x3fd33332
 8011530:	3ff00000 	.word	0x3ff00000
 8011534:	3fe90000 	.word	0x3fe90000
 8011538:	3fd20000 	.word	0x3fd20000
 801153c:	00000000 	.word	0x00000000

08011540 <__kernel_rem_pio2>:
 8011540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011544:	ed2d 8b02 	vpush	{d8}
 8011548:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801154c:	f112 0f14 	cmn.w	r2, #20
 8011550:	9308      	str	r3, [sp, #32]
 8011552:	9101      	str	r1, [sp, #4]
 8011554:	4bc4      	ldr	r3, [pc, #784]	; (8011868 <__kernel_rem_pio2+0x328>)
 8011556:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011558:	900b      	str	r0, [sp, #44]	; 0x2c
 801155a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801155e:	9302      	str	r3, [sp, #8]
 8011560:	9b08      	ldr	r3, [sp, #32]
 8011562:	f103 33ff 	add.w	r3, r3, #4294967295
 8011566:	bfa8      	it	ge
 8011568:	1ed4      	subge	r4, r2, #3
 801156a:	9306      	str	r3, [sp, #24]
 801156c:	bfb2      	itee	lt
 801156e:	2400      	movlt	r4, #0
 8011570:	2318      	movge	r3, #24
 8011572:	fb94 f4f3 	sdivge	r4, r4, r3
 8011576:	f06f 0317 	mvn.w	r3, #23
 801157a:	fb04 3303 	mla	r3, r4, r3, r3
 801157e:	eb03 0a02 	add.w	sl, r3, r2
 8011582:	9b02      	ldr	r3, [sp, #8]
 8011584:	9a06      	ldr	r2, [sp, #24]
 8011586:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011858 <__kernel_rem_pio2+0x318>
 801158a:	eb03 0802 	add.w	r8, r3, r2
 801158e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011590:	1aa7      	subs	r7, r4, r2
 8011592:	ae22      	add	r6, sp, #136	; 0x88
 8011594:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011598:	2500      	movs	r5, #0
 801159a:	4545      	cmp	r5, r8
 801159c:	dd13      	ble.n	80115c6 <__kernel_rem_pio2+0x86>
 801159e:	9b08      	ldr	r3, [sp, #32]
 80115a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011858 <__kernel_rem_pio2+0x318>
 80115a4:	aa22      	add	r2, sp, #136	; 0x88
 80115a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80115aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80115ae:	f04f 0800 	mov.w	r8, #0
 80115b2:	9b02      	ldr	r3, [sp, #8]
 80115b4:	4598      	cmp	r8, r3
 80115b6:	dc2f      	bgt.n	8011618 <__kernel_rem_pio2+0xd8>
 80115b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80115bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80115c0:	462f      	mov	r7, r5
 80115c2:	2600      	movs	r6, #0
 80115c4:	e01b      	b.n	80115fe <__kernel_rem_pio2+0xbe>
 80115c6:	42ef      	cmn	r7, r5
 80115c8:	d407      	bmi.n	80115da <__kernel_rem_pio2+0x9a>
 80115ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80115ce:	f7ee ffb9 	bl	8000544 <__aeabi_i2d>
 80115d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80115d6:	3501      	adds	r5, #1
 80115d8:	e7df      	b.n	801159a <__kernel_rem_pio2+0x5a>
 80115da:	ec51 0b18 	vmov	r0, r1, d8
 80115de:	e7f8      	b.n	80115d2 <__kernel_rem_pio2+0x92>
 80115e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80115e8:	f7ef f816 	bl	8000618 <__aeabi_dmul>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115f4:	f7ee fe5a 	bl	80002ac <__adddf3>
 80115f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80115fc:	3601      	adds	r6, #1
 80115fe:	9b06      	ldr	r3, [sp, #24]
 8011600:	429e      	cmp	r6, r3
 8011602:	f1a7 0708 	sub.w	r7, r7, #8
 8011606:	ddeb      	ble.n	80115e0 <__kernel_rem_pio2+0xa0>
 8011608:	ed9d 7b04 	vldr	d7, [sp, #16]
 801160c:	f108 0801 	add.w	r8, r8, #1
 8011610:	ecab 7b02 	vstmia	fp!, {d7}
 8011614:	3508      	adds	r5, #8
 8011616:	e7cc      	b.n	80115b2 <__kernel_rem_pio2+0x72>
 8011618:	9b02      	ldr	r3, [sp, #8]
 801161a:	aa0e      	add	r2, sp, #56	; 0x38
 801161c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011620:	930d      	str	r3, [sp, #52]	; 0x34
 8011622:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011624:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011628:	9c02      	ldr	r4, [sp, #8]
 801162a:	930c      	str	r3, [sp, #48]	; 0x30
 801162c:	00e3      	lsls	r3, r4, #3
 801162e:	930a      	str	r3, [sp, #40]	; 0x28
 8011630:	ab9a      	add	r3, sp, #616	; 0x268
 8011632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011636:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801163a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801163e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011640:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011644:	46c3      	mov	fp, r8
 8011646:	46a1      	mov	r9, r4
 8011648:	f1b9 0f00 	cmp.w	r9, #0
 801164c:	f1a5 0508 	sub.w	r5, r5, #8
 8011650:	dc77      	bgt.n	8011742 <__kernel_rem_pio2+0x202>
 8011652:	ec47 6b10 	vmov	d0, r6, r7
 8011656:	4650      	mov	r0, sl
 8011658:	f000 fc2e 	bl	8011eb8 <scalbn>
 801165c:	ec57 6b10 	vmov	r6, r7, d0
 8011660:	2200      	movs	r2, #0
 8011662:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011666:	ee10 0a10 	vmov	r0, s0
 801166a:	4639      	mov	r1, r7
 801166c:	f7ee ffd4 	bl	8000618 <__aeabi_dmul>
 8011670:	ec41 0b10 	vmov	d0, r0, r1
 8011674:	f000 fba0 	bl	8011db8 <floor>
 8011678:	4b7c      	ldr	r3, [pc, #496]	; (801186c <__kernel_rem_pio2+0x32c>)
 801167a:	ec51 0b10 	vmov	r0, r1, d0
 801167e:	2200      	movs	r2, #0
 8011680:	f7ee ffca 	bl	8000618 <__aeabi_dmul>
 8011684:	4602      	mov	r2, r0
 8011686:	460b      	mov	r3, r1
 8011688:	4630      	mov	r0, r6
 801168a:	4639      	mov	r1, r7
 801168c:	f7ee fe0c 	bl	80002a8 <__aeabi_dsub>
 8011690:	460f      	mov	r7, r1
 8011692:	4606      	mov	r6, r0
 8011694:	f7ef fa70 	bl	8000b78 <__aeabi_d2iz>
 8011698:	9004      	str	r0, [sp, #16]
 801169a:	f7ee ff53 	bl	8000544 <__aeabi_i2d>
 801169e:	4602      	mov	r2, r0
 80116a0:	460b      	mov	r3, r1
 80116a2:	4630      	mov	r0, r6
 80116a4:	4639      	mov	r1, r7
 80116a6:	f7ee fdff 	bl	80002a8 <__aeabi_dsub>
 80116aa:	f1ba 0f00 	cmp.w	sl, #0
 80116ae:	4606      	mov	r6, r0
 80116b0:	460f      	mov	r7, r1
 80116b2:	dd6d      	ble.n	8011790 <__kernel_rem_pio2+0x250>
 80116b4:	1e62      	subs	r2, r4, #1
 80116b6:	ab0e      	add	r3, sp, #56	; 0x38
 80116b8:	9d04      	ldr	r5, [sp, #16]
 80116ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80116be:	f1ca 0118 	rsb	r1, sl, #24
 80116c2:	fa40 f301 	asr.w	r3, r0, r1
 80116c6:	441d      	add	r5, r3
 80116c8:	408b      	lsls	r3, r1
 80116ca:	1ac0      	subs	r0, r0, r3
 80116cc:	ab0e      	add	r3, sp, #56	; 0x38
 80116ce:	9504      	str	r5, [sp, #16]
 80116d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80116d4:	f1ca 0317 	rsb	r3, sl, #23
 80116d8:	fa40 fb03 	asr.w	fp, r0, r3
 80116dc:	f1bb 0f00 	cmp.w	fp, #0
 80116e0:	dd65      	ble.n	80117ae <__kernel_rem_pio2+0x26e>
 80116e2:	9b04      	ldr	r3, [sp, #16]
 80116e4:	2200      	movs	r2, #0
 80116e6:	3301      	adds	r3, #1
 80116e8:	9304      	str	r3, [sp, #16]
 80116ea:	4615      	mov	r5, r2
 80116ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80116f0:	4294      	cmp	r4, r2
 80116f2:	f300 809c 	bgt.w	801182e <__kernel_rem_pio2+0x2ee>
 80116f6:	f1ba 0f00 	cmp.w	sl, #0
 80116fa:	dd07      	ble.n	801170c <__kernel_rem_pio2+0x1cc>
 80116fc:	f1ba 0f01 	cmp.w	sl, #1
 8011700:	f000 80c0 	beq.w	8011884 <__kernel_rem_pio2+0x344>
 8011704:	f1ba 0f02 	cmp.w	sl, #2
 8011708:	f000 80c6 	beq.w	8011898 <__kernel_rem_pio2+0x358>
 801170c:	f1bb 0f02 	cmp.w	fp, #2
 8011710:	d14d      	bne.n	80117ae <__kernel_rem_pio2+0x26e>
 8011712:	4632      	mov	r2, r6
 8011714:	463b      	mov	r3, r7
 8011716:	4956      	ldr	r1, [pc, #344]	; (8011870 <__kernel_rem_pio2+0x330>)
 8011718:	2000      	movs	r0, #0
 801171a:	f7ee fdc5 	bl	80002a8 <__aeabi_dsub>
 801171e:	4606      	mov	r6, r0
 8011720:	460f      	mov	r7, r1
 8011722:	2d00      	cmp	r5, #0
 8011724:	d043      	beq.n	80117ae <__kernel_rem_pio2+0x26e>
 8011726:	4650      	mov	r0, sl
 8011728:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011860 <__kernel_rem_pio2+0x320>
 801172c:	f000 fbc4 	bl	8011eb8 <scalbn>
 8011730:	4630      	mov	r0, r6
 8011732:	4639      	mov	r1, r7
 8011734:	ec53 2b10 	vmov	r2, r3, d0
 8011738:	f7ee fdb6 	bl	80002a8 <__aeabi_dsub>
 801173c:	4606      	mov	r6, r0
 801173e:	460f      	mov	r7, r1
 8011740:	e035      	b.n	80117ae <__kernel_rem_pio2+0x26e>
 8011742:	4b4c      	ldr	r3, [pc, #304]	; (8011874 <__kernel_rem_pio2+0x334>)
 8011744:	2200      	movs	r2, #0
 8011746:	4630      	mov	r0, r6
 8011748:	4639      	mov	r1, r7
 801174a:	f7ee ff65 	bl	8000618 <__aeabi_dmul>
 801174e:	f7ef fa13 	bl	8000b78 <__aeabi_d2iz>
 8011752:	f7ee fef7 	bl	8000544 <__aeabi_i2d>
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	ec43 2b18 	vmov	d8, r2, r3
 801175e:	4b46      	ldr	r3, [pc, #280]	; (8011878 <__kernel_rem_pio2+0x338>)
 8011760:	2200      	movs	r2, #0
 8011762:	f7ee ff59 	bl	8000618 <__aeabi_dmul>
 8011766:	4602      	mov	r2, r0
 8011768:	460b      	mov	r3, r1
 801176a:	4630      	mov	r0, r6
 801176c:	4639      	mov	r1, r7
 801176e:	f7ee fd9b 	bl	80002a8 <__aeabi_dsub>
 8011772:	f7ef fa01 	bl	8000b78 <__aeabi_d2iz>
 8011776:	e9d5 2300 	ldrd	r2, r3, [r5]
 801177a:	f84b 0b04 	str.w	r0, [fp], #4
 801177e:	ec51 0b18 	vmov	r0, r1, d8
 8011782:	f7ee fd93 	bl	80002ac <__adddf3>
 8011786:	f109 39ff 	add.w	r9, r9, #4294967295
 801178a:	4606      	mov	r6, r0
 801178c:	460f      	mov	r7, r1
 801178e:	e75b      	b.n	8011648 <__kernel_rem_pio2+0x108>
 8011790:	d106      	bne.n	80117a0 <__kernel_rem_pio2+0x260>
 8011792:	1e63      	subs	r3, r4, #1
 8011794:	aa0e      	add	r2, sp, #56	; 0x38
 8011796:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801179a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801179e:	e79d      	b.n	80116dc <__kernel_rem_pio2+0x19c>
 80117a0:	4b36      	ldr	r3, [pc, #216]	; (801187c <__kernel_rem_pio2+0x33c>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	f7ef f9be 	bl	8000b24 <__aeabi_dcmpge>
 80117a8:	2800      	cmp	r0, #0
 80117aa:	d13d      	bne.n	8011828 <__kernel_rem_pio2+0x2e8>
 80117ac:	4683      	mov	fp, r0
 80117ae:	2200      	movs	r2, #0
 80117b0:	2300      	movs	r3, #0
 80117b2:	4630      	mov	r0, r6
 80117b4:	4639      	mov	r1, r7
 80117b6:	f7ef f997 	bl	8000ae8 <__aeabi_dcmpeq>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	f000 80c0 	beq.w	8011940 <__kernel_rem_pio2+0x400>
 80117c0:	1e65      	subs	r5, r4, #1
 80117c2:	462b      	mov	r3, r5
 80117c4:	2200      	movs	r2, #0
 80117c6:	9902      	ldr	r1, [sp, #8]
 80117c8:	428b      	cmp	r3, r1
 80117ca:	da6c      	bge.n	80118a6 <__kernel_rem_pio2+0x366>
 80117cc:	2a00      	cmp	r2, #0
 80117ce:	f000 8089 	beq.w	80118e4 <__kernel_rem_pio2+0x3a4>
 80117d2:	ab0e      	add	r3, sp, #56	; 0x38
 80117d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80117d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f000 80ad 	beq.w	801193c <__kernel_rem_pio2+0x3fc>
 80117e2:	4650      	mov	r0, sl
 80117e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011860 <__kernel_rem_pio2+0x320>
 80117e8:	f000 fb66 	bl	8011eb8 <scalbn>
 80117ec:	ab9a      	add	r3, sp, #616	; 0x268
 80117ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80117f2:	ec57 6b10 	vmov	r6, r7, d0
 80117f6:	00ec      	lsls	r4, r5, #3
 80117f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80117fc:	46aa      	mov	sl, r5
 80117fe:	f1ba 0f00 	cmp.w	sl, #0
 8011802:	f280 80d6 	bge.w	80119b2 <__kernel_rem_pio2+0x472>
 8011806:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011858 <__kernel_rem_pio2+0x318>
 801180a:	462e      	mov	r6, r5
 801180c:	2e00      	cmp	r6, #0
 801180e:	f2c0 8104 	blt.w	8011a1a <__kernel_rem_pio2+0x4da>
 8011812:	ab72      	add	r3, sp, #456	; 0x1c8
 8011814:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011818:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011880 <__kernel_rem_pio2+0x340>
 801181c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011820:	f04f 0800 	mov.w	r8, #0
 8011824:	1baf      	subs	r7, r5, r6
 8011826:	e0ea      	b.n	80119fe <__kernel_rem_pio2+0x4be>
 8011828:	f04f 0b02 	mov.w	fp, #2
 801182c:	e759      	b.n	80116e2 <__kernel_rem_pio2+0x1a2>
 801182e:	f8d8 3000 	ldr.w	r3, [r8]
 8011832:	b955      	cbnz	r5, 801184a <__kernel_rem_pio2+0x30a>
 8011834:	b123      	cbz	r3, 8011840 <__kernel_rem_pio2+0x300>
 8011836:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801183a:	f8c8 3000 	str.w	r3, [r8]
 801183e:	2301      	movs	r3, #1
 8011840:	3201      	adds	r2, #1
 8011842:	f108 0804 	add.w	r8, r8, #4
 8011846:	461d      	mov	r5, r3
 8011848:	e752      	b.n	80116f0 <__kernel_rem_pio2+0x1b0>
 801184a:	1acb      	subs	r3, r1, r3
 801184c:	f8c8 3000 	str.w	r3, [r8]
 8011850:	462b      	mov	r3, r5
 8011852:	e7f5      	b.n	8011840 <__kernel_rem_pio2+0x300>
 8011854:	f3af 8000 	nop.w
	...
 8011864:	3ff00000 	.word	0x3ff00000
 8011868:	0805b3e8 	.word	0x0805b3e8
 801186c:	40200000 	.word	0x40200000
 8011870:	3ff00000 	.word	0x3ff00000
 8011874:	3e700000 	.word	0x3e700000
 8011878:	41700000 	.word	0x41700000
 801187c:	3fe00000 	.word	0x3fe00000
 8011880:	0805b3a8 	.word	0x0805b3a8
 8011884:	1e62      	subs	r2, r4, #1
 8011886:	ab0e      	add	r3, sp, #56	; 0x38
 8011888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801188c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011890:	a90e      	add	r1, sp, #56	; 0x38
 8011892:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011896:	e739      	b.n	801170c <__kernel_rem_pio2+0x1cc>
 8011898:	1e62      	subs	r2, r4, #1
 801189a:	ab0e      	add	r3, sp, #56	; 0x38
 801189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80118a4:	e7f4      	b.n	8011890 <__kernel_rem_pio2+0x350>
 80118a6:	a90e      	add	r1, sp, #56	; 0x38
 80118a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80118ac:	3b01      	subs	r3, #1
 80118ae:	430a      	orrs	r2, r1
 80118b0:	e789      	b.n	80117c6 <__kernel_rem_pio2+0x286>
 80118b2:	3301      	adds	r3, #1
 80118b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80118b8:	2900      	cmp	r1, #0
 80118ba:	d0fa      	beq.n	80118b2 <__kernel_rem_pio2+0x372>
 80118bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118be:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80118c2:	446a      	add	r2, sp
 80118c4:	3a98      	subs	r2, #152	; 0x98
 80118c6:	920a      	str	r2, [sp, #40]	; 0x28
 80118c8:	9a08      	ldr	r2, [sp, #32]
 80118ca:	18e3      	adds	r3, r4, r3
 80118cc:	18a5      	adds	r5, r4, r2
 80118ce:	aa22      	add	r2, sp, #136	; 0x88
 80118d0:	f104 0801 	add.w	r8, r4, #1
 80118d4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80118d8:	9304      	str	r3, [sp, #16]
 80118da:	9b04      	ldr	r3, [sp, #16]
 80118dc:	4543      	cmp	r3, r8
 80118de:	da04      	bge.n	80118ea <__kernel_rem_pio2+0x3aa>
 80118e0:	461c      	mov	r4, r3
 80118e2:	e6a3      	b.n	801162c <__kernel_rem_pio2+0xec>
 80118e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118e6:	2301      	movs	r3, #1
 80118e8:	e7e4      	b.n	80118b4 <__kernel_rem_pio2+0x374>
 80118ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80118f0:	f7ee fe28 	bl	8000544 <__aeabi_i2d>
 80118f4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80118f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118fa:	46ab      	mov	fp, r5
 80118fc:	461c      	mov	r4, r3
 80118fe:	f04f 0900 	mov.w	r9, #0
 8011902:	2600      	movs	r6, #0
 8011904:	2700      	movs	r7, #0
 8011906:	9b06      	ldr	r3, [sp, #24]
 8011908:	4599      	cmp	r9, r3
 801190a:	dd06      	ble.n	801191a <__kernel_rem_pio2+0x3da>
 801190c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801190e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011912:	f108 0801 	add.w	r8, r8, #1
 8011916:	930a      	str	r3, [sp, #40]	; 0x28
 8011918:	e7df      	b.n	80118da <__kernel_rem_pio2+0x39a>
 801191a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801191e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011922:	f7ee fe79 	bl	8000618 <__aeabi_dmul>
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	4630      	mov	r0, r6
 801192c:	4639      	mov	r1, r7
 801192e:	f7ee fcbd 	bl	80002ac <__adddf3>
 8011932:	f109 0901 	add.w	r9, r9, #1
 8011936:	4606      	mov	r6, r0
 8011938:	460f      	mov	r7, r1
 801193a:	e7e4      	b.n	8011906 <__kernel_rem_pio2+0x3c6>
 801193c:	3d01      	subs	r5, #1
 801193e:	e748      	b.n	80117d2 <__kernel_rem_pio2+0x292>
 8011940:	ec47 6b10 	vmov	d0, r6, r7
 8011944:	f1ca 0000 	rsb	r0, sl, #0
 8011948:	f000 fab6 	bl	8011eb8 <scalbn>
 801194c:	ec57 6b10 	vmov	r6, r7, d0
 8011950:	4ba0      	ldr	r3, [pc, #640]	; (8011bd4 <__kernel_rem_pio2+0x694>)
 8011952:	ee10 0a10 	vmov	r0, s0
 8011956:	2200      	movs	r2, #0
 8011958:	4639      	mov	r1, r7
 801195a:	f7ef f8e3 	bl	8000b24 <__aeabi_dcmpge>
 801195e:	b1f8      	cbz	r0, 80119a0 <__kernel_rem_pio2+0x460>
 8011960:	4b9d      	ldr	r3, [pc, #628]	; (8011bd8 <__kernel_rem_pio2+0x698>)
 8011962:	2200      	movs	r2, #0
 8011964:	4630      	mov	r0, r6
 8011966:	4639      	mov	r1, r7
 8011968:	f7ee fe56 	bl	8000618 <__aeabi_dmul>
 801196c:	f7ef f904 	bl	8000b78 <__aeabi_d2iz>
 8011970:	4680      	mov	r8, r0
 8011972:	f7ee fde7 	bl	8000544 <__aeabi_i2d>
 8011976:	4b97      	ldr	r3, [pc, #604]	; (8011bd4 <__kernel_rem_pio2+0x694>)
 8011978:	2200      	movs	r2, #0
 801197a:	f7ee fe4d 	bl	8000618 <__aeabi_dmul>
 801197e:	460b      	mov	r3, r1
 8011980:	4602      	mov	r2, r0
 8011982:	4639      	mov	r1, r7
 8011984:	4630      	mov	r0, r6
 8011986:	f7ee fc8f 	bl	80002a8 <__aeabi_dsub>
 801198a:	f7ef f8f5 	bl	8000b78 <__aeabi_d2iz>
 801198e:	1c65      	adds	r5, r4, #1
 8011990:	ab0e      	add	r3, sp, #56	; 0x38
 8011992:	f10a 0a18 	add.w	sl, sl, #24
 8011996:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801199a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801199e:	e720      	b.n	80117e2 <__kernel_rem_pio2+0x2a2>
 80119a0:	4630      	mov	r0, r6
 80119a2:	4639      	mov	r1, r7
 80119a4:	f7ef f8e8 	bl	8000b78 <__aeabi_d2iz>
 80119a8:	ab0e      	add	r3, sp, #56	; 0x38
 80119aa:	4625      	mov	r5, r4
 80119ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80119b0:	e717      	b.n	80117e2 <__kernel_rem_pio2+0x2a2>
 80119b2:	ab0e      	add	r3, sp, #56	; 0x38
 80119b4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80119b8:	f7ee fdc4 	bl	8000544 <__aeabi_i2d>
 80119bc:	4632      	mov	r2, r6
 80119be:	463b      	mov	r3, r7
 80119c0:	f7ee fe2a 	bl	8000618 <__aeabi_dmul>
 80119c4:	4b84      	ldr	r3, [pc, #528]	; (8011bd8 <__kernel_rem_pio2+0x698>)
 80119c6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80119ca:	2200      	movs	r2, #0
 80119cc:	4630      	mov	r0, r6
 80119ce:	4639      	mov	r1, r7
 80119d0:	f7ee fe22 	bl	8000618 <__aeabi_dmul>
 80119d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119d8:	4606      	mov	r6, r0
 80119da:	460f      	mov	r7, r1
 80119dc:	e70f      	b.n	80117fe <__kernel_rem_pio2+0x2be>
 80119de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80119e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80119e6:	f7ee fe17 	bl	8000618 <__aeabi_dmul>
 80119ea:	4602      	mov	r2, r0
 80119ec:	460b      	mov	r3, r1
 80119ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119f2:	f7ee fc5b 	bl	80002ac <__adddf3>
 80119f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80119fa:	f108 0801 	add.w	r8, r8, #1
 80119fe:	9b02      	ldr	r3, [sp, #8]
 8011a00:	4598      	cmp	r8, r3
 8011a02:	dc01      	bgt.n	8011a08 <__kernel_rem_pio2+0x4c8>
 8011a04:	45b8      	cmp	r8, r7
 8011a06:	ddea      	ble.n	80119de <__kernel_rem_pio2+0x49e>
 8011a08:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011a0c:	ab4a      	add	r3, sp, #296	; 0x128
 8011a0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011a12:	ed87 7b00 	vstr	d7, [r7]
 8011a16:	3e01      	subs	r6, #1
 8011a18:	e6f8      	b.n	801180c <__kernel_rem_pio2+0x2cc>
 8011a1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011a1c:	2b02      	cmp	r3, #2
 8011a1e:	dc0b      	bgt.n	8011a38 <__kernel_rem_pio2+0x4f8>
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	dc35      	bgt.n	8011a90 <__kernel_rem_pio2+0x550>
 8011a24:	d059      	beq.n	8011ada <__kernel_rem_pio2+0x59a>
 8011a26:	9b04      	ldr	r3, [sp, #16]
 8011a28:	f003 0007 	and.w	r0, r3, #7
 8011a2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011a30:	ecbd 8b02 	vpop	{d8}
 8011a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011a3a:	2b03      	cmp	r3, #3
 8011a3c:	d1f3      	bne.n	8011a26 <__kernel_rem_pio2+0x4e6>
 8011a3e:	ab4a      	add	r3, sp, #296	; 0x128
 8011a40:	4423      	add	r3, r4
 8011a42:	9306      	str	r3, [sp, #24]
 8011a44:	461c      	mov	r4, r3
 8011a46:	469a      	mov	sl, r3
 8011a48:	9502      	str	r5, [sp, #8]
 8011a4a:	9b02      	ldr	r3, [sp, #8]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f1aa 0a08 	sub.w	sl, sl, #8
 8011a52:	dc6b      	bgt.n	8011b2c <__kernel_rem_pio2+0x5ec>
 8011a54:	46aa      	mov	sl, r5
 8011a56:	f1ba 0f01 	cmp.w	sl, #1
 8011a5a:	f1a4 0408 	sub.w	r4, r4, #8
 8011a5e:	f300 8085 	bgt.w	8011b6c <__kernel_rem_pio2+0x62c>
 8011a62:	9c06      	ldr	r4, [sp, #24]
 8011a64:	2000      	movs	r0, #0
 8011a66:	3408      	adds	r4, #8
 8011a68:	2100      	movs	r1, #0
 8011a6a:	2d01      	cmp	r5, #1
 8011a6c:	f300 809d 	bgt.w	8011baa <__kernel_rem_pio2+0x66a>
 8011a70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011a74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011a78:	f1bb 0f00 	cmp.w	fp, #0
 8011a7c:	f040 809b 	bne.w	8011bb6 <__kernel_rem_pio2+0x676>
 8011a80:	9b01      	ldr	r3, [sp, #4]
 8011a82:	e9c3 5600 	strd	r5, r6, [r3]
 8011a86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011a8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011a8e:	e7ca      	b.n	8011a26 <__kernel_rem_pio2+0x4e6>
 8011a90:	3408      	adds	r4, #8
 8011a92:	ab4a      	add	r3, sp, #296	; 0x128
 8011a94:	441c      	add	r4, r3
 8011a96:	462e      	mov	r6, r5
 8011a98:	2000      	movs	r0, #0
 8011a9a:	2100      	movs	r1, #0
 8011a9c:	2e00      	cmp	r6, #0
 8011a9e:	da36      	bge.n	8011b0e <__kernel_rem_pio2+0x5ce>
 8011aa0:	f1bb 0f00 	cmp.w	fp, #0
 8011aa4:	d039      	beq.n	8011b1a <__kernel_rem_pio2+0x5da>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011aac:	9c01      	ldr	r4, [sp, #4]
 8011aae:	e9c4 2300 	strd	r2, r3, [r4]
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011aba:	f7ee fbf5 	bl	80002a8 <__aeabi_dsub>
 8011abe:	ae4c      	add	r6, sp, #304	; 0x130
 8011ac0:	2401      	movs	r4, #1
 8011ac2:	42a5      	cmp	r5, r4
 8011ac4:	da2c      	bge.n	8011b20 <__kernel_rem_pio2+0x5e0>
 8011ac6:	f1bb 0f00 	cmp.w	fp, #0
 8011aca:	d002      	beq.n	8011ad2 <__kernel_rem_pio2+0x592>
 8011acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	9b01      	ldr	r3, [sp, #4]
 8011ad4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011ad8:	e7a5      	b.n	8011a26 <__kernel_rem_pio2+0x4e6>
 8011ada:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011ade:	eb0d 0403 	add.w	r4, sp, r3
 8011ae2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	2100      	movs	r1, #0
 8011aea:	2d00      	cmp	r5, #0
 8011aec:	da09      	bge.n	8011b02 <__kernel_rem_pio2+0x5c2>
 8011aee:	f1bb 0f00 	cmp.w	fp, #0
 8011af2:	d002      	beq.n	8011afa <__kernel_rem_pio2+0x5ba>
 8011af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011af8:	4619      	mov	r1, r3
 8011afa:	9b01      	ldr	r3, [sp, #4]
 8011afc:	e9c3 0100 	strd	r0, r1, [r3]
 8011b00:	e791      	b.n	8011a26 <__kernel_rem_pio2+0x4e6>
 8011b02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011b06:	f7ee fbd1 	bl	80002ac <__adddf3>
 8011b0a:	3d01      	subs	r5, #1
 8011b0c:	e7ed      	b.n	8011aea <__kernel_rem_pio2+0x5aa>
 8011b0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011b12:	f7ee fbcb 	bl	80002ac <__adddf3>
 8011b16:	3e01      	subs	r6, #1
 8011b18:	e7c0      	b.n	8011a9c <__kernel_rem_pio2+0x55c>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	e7c5      	b.n	8011aac <__kernel_rem_pio2+0x56c>
 8011b20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011b24:	f7ee fbc2 	bl	80002ac <__adddf3>
 8011b28:	3401      	adds	r4, #1
 8011b2a:	e7ca      	b.n	8011ac2 <__kernel_rem_pio2+0x582>
 8011b2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011b30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011b34:	9b02      	ldr	r3, [sp, #8]
 8011b36:	3b01      	subs	r3, #1
 8011b38:	9302      	str	r3, [sp, #8]
 8011b3a:	4632      	mov	r2, r6
 8011b3c:	463b      	mov	r3, r7
 8011b3e:	4640      	mov	r0, r8
 8011b40:	4649      	mov	r1, r9
 8011b42:	f7ee fbb3 	bl	80002ac <__adddf3>
 8011b46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	4640      	mov	r0, r8
 8011b50:	4649      	mov	r1, r9
 8011b52:	f7ee fba9 	bl	80002a8 <__aeabi_dsub>
 8011b56:	4632      	mov	r2, r6
 8011b58:	463b      	mov	r3, r7
 8011b5a:	f7ee fba7 	bl	80002ac <__adddf3>
 8011b5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011b62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011b66:	ed8a 7b00 	vstr	d7, [sl]
 8011b6a:	e76e      	b.n	8011a4a <__kernel_rem_pio2+0x50a>
 8011b6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011b70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011b74:	4640      	mov	r0, r8
 8011b76:	4632      	mov	r2, r6
 8011b78:	463b      	mov	r3, r7
 8011b7a:	4649      	mov	r1, r9
 8011b7c:	f7ee fb96 	bl	80002ac <__adddf3>
 8011b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	4640      	mov	r0, r8
 8011b8a:	4649      	mov	r1, r9
 8011b8c:	f7ee fb8c 	bl	80002a8 <__aeabi_dsub>
 8011b90:	4632      	mov	r2, r6
 8011b92:	463b      	mov	r3, r7
 8011b94:	f7ee fb8a 	bl	80002ac <__adddf3>
 8011b98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011ba0:	ed84 7b00 	vstr	d7, [r4]
 8011ba4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ba8:	e755      	b.n	8011a56 <__kernel_rem_pio2+0x516>
 8011baa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011bae:	f7ee fb7d 	bl	80002ac <__adddf3>
 8011bb2:	3d01      	subs	r5, #1
 8011bb4:	e759      	b.n	8011a6a <__kernel_rem_pio2+0x52a>
 8011bb6:	9b01      	ldr	r3, [sp, #4]
 8011bb8:	9a01      	ldr	r2, [sp, #4]
 8011bba:	601d      	str	r5, [r3, #0]
 8011bbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011bc0:	605c      	str	r4, [r3, #4]
 8011bc2:	609f      	str	r7, [r3, #8]
 8011bc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011bc8:	60d3      	str	r3, [r2, #12]
 8011bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bce:	6110      	str	r0, [r2, #16]
 8011bd0:	6153      	str	r3, [r2, #20]
 8011bd2:	e728      	b.n	8011a26 <__kernel_rem_pio2+0x4e6>
 8011bd4:	41700000 	.word	0x41700000
 8011bd8:	3e700000 	.word	0x3e700000
 8011bdc:	00000000 	.word	0x00000000

08011be0 <__kernel_sin>:
 8011be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	ed2d 8b04 	vpush	{d8-d9}
 8011be8:	eeb0 8a41 	vmov.f32	s16, s2
 8011bec:	eef0 8a61 	vmov.f32	s17, s3
 8011bf0:	ec55 4b10 	vmov	r4, r5, d0
 8011bf4:	b083      	sub	sp, #12
 8011bf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011bfa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011bfe:	9001      	str	r0, [sp, #4]
 8011c00:	da06      	bge.n	8011c10 <__kernel_sin+0x30>
 8011c02:	ee10 0a10 	vmov	r0, s0
 8011c06:	4629      	mov	r1, r5
 8011c08:	f7ee ffb6 	bl	8000b78 <__aeabi_d2iz>
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	d051      	beq.n	8011cb4 <__kernel_sin+0xd4>
 8011c10:	4622      	mov	r2, r4
 8011c12:	462b      	mov	r3, r5
 8011c14:	4620      	mov	r0, r4
 8011c16:	4629      	mov	r1, r5
 8011c18:	f7ee fcfe 	bl	8000618 <__aeabi_dmul>
 8011c1c:	4682      	mov	sl, r0
 8011c1e:	468b      	mov	fp, r1
 8011c20:	4602      	mov	r2, r0
 8011c22:	460b      	mov	r3, r1
 8011c24:	4620      	mov	r0, r4
 8011c26:	4629      	mov	r1, r5
 8011c28:	f7ee fcf6 	bl	8000618 <__aeabi_dmul>
 8011c2c:	a341      	add	r3, pc, #260	; (adr r3, 8011d34 <__kernel_sin+0x154>)
 8011c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c32:	4680      	mov	r8, r0
 8011c34:	4689      	mov	r9, r1
 8011c36:	4650      	mov	r0, sl
 8011c38:	4659      	mov	r1, fp
 8011c3a:	f7ee fced 	bl	8000618 <__aeabi_dmul>
 8011c3e:	a33f      	add	r3, pc, #252	; (adr r3, 8011d3c <__kernel_sin+0x15c>)
 8011c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c44:	f7ee fb30 	bl	80002a8 <__aeabi_dsub>
 8011c48:	4652      	mov	r2, sl
 8011c4a:	465b      	mov	r3, fp
 8011c4c:	f7ee fce4 	bl	8000618 <__aeabi_dmul>
 8011c50:	a33c      	add	r3, pc, #240	; (adr r3, 8011d44 <__kernel_sin+0x164>)
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	f7ee fb29 	bl	80002ac <__adddf3>
 8011c5a:	4652      	mov	r2, sl
 8011c5c:	465b      	mov	r3, fp
 8011c5e:	f7ee fcdb 	bl	8000618 <__aeabi_dmul>
 8011c62:	a33a      	add	r3, pc, #232	; (adr r3, 8011d4c <__kernel_sin+0x16c>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	f7ee fb1e 	bl	80002a8 <__aeabi_dsub>
 8011c6c:	4652      	mov	r2, sl
 8011c6e:	465b      	mov	r3, fp
 8011c70:	f7ee fcd2 	bl	8000618 <__aeabi_dmul>
 8011c74:	a337      	add	r3, pc, #220	; (adr r3, 8011d54 <__kernel_sin+0x174>)
 8011c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7a:	f7ee fb17 	bl	80002ac <__adddf3>
 8011c7e:	9b01      	ldr	r3, [sp, #4]
 8011c80:	4606      	mov	r6, r0
 8011c82:	460f      	mov	r7, r1
 8011c84:	b9eb      	cbnz	r3, 8011cc2 <__kernel_sin+0xe2>
 8011c86:	4602      	mov	r2, r0
 8011c88:	460b      	mov	r3, r1
 8011c8a:	4650      	mov	r0, sl
 8011c8c:	4659      	mov	r1, fp
 8011c8e:	f7ee fcc3 	bl	8000618 <__aeabi_dmul>
 8011c92:	a325      	add	r3, pc, #148	; (adr r3, 8011d28 <__kernel_sin+0x148>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	f7ee fb06 	bl	80002a8 <__aeabi_dsub>
 8011c9c:	4642      	mov	r2, r8
 8011c9e:	464b      	mov	r3, r9
 8011ca0:	f7ee fcba 	bl	8000618 <__aeabi_dmul>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4620      	mov	r0, r4
 8011caa:	4629      	mov	r1, r5
 8011cac:	f7ee fafe 	bl	80002ac <__adddf3>
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	460d      	mov	r5, r1
 8011cb4:	ec45 4b10 	vmov	d0, r4, r5
 8011cb8:	b003      	add	sp, #12
 8011cba:	ecbd 8b04 	vpop	{d8-d9}
 8011cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc2:	4b1b      	ldr	r3, [pc, #108]	; (8011d30 <__kernel_sin+0x150>)
 8011cc4:	ec51 0b18 	vmov	r0, r1, d8
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f7ee fca5 	bl	8000618 <__aeabi_dmul>
 8011cce:	4632      	mov	r2, r6
 8011cd0:	ec41 0b19 	vmov	d9, r0, r1
 8011cd4:	463b      	mov	r3, r7
 8011cd6:	4640      	mov	r0, r8
 8011cd8:	4649      	mov	r1, r9
 8011cda:	f7ee fc9d 	bl	8000618 <__aeabi_dmul>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	ec51 0b19 	vmov	r0, r1, d9
 8011ce6:	f7ee fadf 	bl	80002a8 <__aeabi_dsub>
 8011cea:	4652      	mov	r2, sl
 8011cec:	465b      	mov	r3, fp
 8011cee:	f7ee fc93 	bl	8000618 <__aeabi_dmul>
 8011cf2:	ec53 2b18 	vmov	r2, r3, d8
 8011cf6:	f7ee fad7 	bl	80002a8 <__aeabi_dsub>
 8011cfa:	a30b      	add	r3, pc, #44	; (adr r3, 8011d28 <__kernel_sin+0x148>)
 8011cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d00:	4606      	mov	r6, r0
 8011d02:	460f      	mov	r7, r1
 8011d04:	4640      	mov	r0, r8
 8011d06:	4649      	mov	r1, r9
 8011d08:	f7ee fc86 	bl	8000618 <__aeabi_dmul>
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	460b      	mov	r3, r1
 8011d10:	4630      	mov	r0, r6
 8011d12:	4639      	mov	r1, r7
 8011d14:	f7ee faca 	bl	80002ac <__adddf3>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	4629      	mov	r1, r5
 8011d20:	f7ee fac2 	bl	80002a8 <__aeabi_dsub>
 8011d24:	e7c4      	b.n	8011cb0 <__kernel_sin+0xd0>
 8011d26:	bf00      	nop
 8011d28:	55555549 	.word	0x55555549
 8011d2c:	3fc55555 	.word	0x3fc55555
 8011d30:	3fe00000 	.word	0x3fe00000
 8011d34:	5acfd57c 	.word	0x5acfd57c
 8011d38:	3de5d93a 	.word	0x3de5d93a
 8011d3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011d40:	3e5ae5e6 	.word	0x3e5ae5e6
 8011d44:	57b1fe7d 	.word	0x57b1fe7d
 8011d48:	3ec71de3 	.word	0x3ec71de3
 8011d4c:	19c161d5 	.word	0x19c161d5
 8011d50:	3f2a01a0 	.word	0x3f2a01a0
 8011d54:	1110f8a6 	.word	0x1110f8a6
 8011d58:	3f811111 	.word	0x3f811111

08011d5c <with_errnof>:
 8011d5c:	b513      	push	{r0, r1, r4, lr}
 8011d5e:	4604      	mov	r4, r0
 8011d60:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011d64:	f7fc fc76 	bl	800e654 <__errno>
 8011d68:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011d6c:	6004      	str	r4, [r0, #0]
 8011d6e:	b002      	add	sp, #8
 8011d70:	bd10      	pop	{r4, pc}

08011d72 <xflowf>:
 8011d72:	b130      	cbz	r0, 8011d82 <xflowf+0x10>
 8011d74:	eef1 7a40 	vneg.f32	s15, s0
 8011d78:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011d7c:	2022      	movs	r0, #34	; 0x22
 8011d7e:	f7ff bfed 	b.w	8011d5c <with_errnof>
 8011d82:	eef0 7a40 	vmov.f32	s15, s0
 8011d86:	e7f7      	b.n	8011d78 <xflowf+0x6>

08011d88 <__math_uflowf>:
 8011d88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011d90 <__math_uflowf+0x8>
 8011d8c:	f7ff bff1 	b.w	8011d72 <xflowf>
 8011d90:	10000000 	.word	0x10000000

08011d94 <__math_oflowf>:
 8011d94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011d9c <__math_oflowf+0x8>
 8011d98:	f7ff bfeb 	b.w	8011d72 <xflowf>
 8011d9c:	70000000 	.word	0x70000000

08011da0 <fabs>:
 8011da0:	ec51 0b10 	vmov	r0, r1, d0
 8011da4:	ee10 2a10 	vmov	r2, s0
 8011da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011dac:	ec43 2b10 	vmov	d0, r2, r3
 8011db0:	4770      	bx	lr
 8011db2:	0000      	movs	r0, r0
 8011db4:	0000      	movs	r0, r0
	...

08011db8 <floor>:
 8011db8:	ec51 0b10 	vmov	r0, r1, d0
 8011dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011dc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011dc8:	2e13      	cmp	r6, #19
 8011dca:	ee10 5a10 	vmov	r5, s0
 8011dce:	ee10 8a10 	vmov	r8, s0
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	dc32      	bgt.n	8011e3c <floor+0x84>
 8011dd6:	2e00      	cmp	r6, #0
 8011dd8:	da14      	bge.n	8011e04 <floor+0x4c>
 8011dda:	a333      	add	r3, pc, #204	; (adr r3, 8011ea8 <floor+0xf0>)
 8011ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de0:	f7ee fa64 	bl	80002ac <__adddf3>
 8011de4:	2200      	movs	r2, #0
 8011de6:	2300      	movs	r3, #0
 8011de8:	f7ee fea6 	bl	8000b38 <__aeabi_dcmpgt>
 8011dec:	b138      	cbz	r0, 8011dfe <floor+0x46>
 8011dee:	2c00      	cmp	r4, #0
 8011df0:	da57      	bge.n	8011ea2 <floor+0xea>
 8011df2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011df6:	431d      	orrs	r5, r3
 8011df8:	d001      	beq.n	8011dfe <floor+0x46>
 8011dfa:	4c2d      	ldr	r4, [pc, #180]	; (8011eb0 <floor+0xf8>)
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	4621      	mov	r1, r4
 8011e00:	4628      	mov	r0, r5
 8011e02:	e025      	b.n	8011e50 <floor+0x98>
 8011e04:	4f2b      	ldr	r7, [pc, #172]	; (8011eb4 <floor+0xfc>)
 8011e06:	4137      	asrs	r7, r6
 8011e08:	ea01 0307 	and.w	r3, r1, r7
 8011e0c:	4303      	orrs	r3, r0
 8011e0e:	d01f      	beq.n	8011e50 <floor+0x98>
 8011e10:	a325      	add	r3, pc, #148	; (adr r3, 8011ea8 <floor+0xf0>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	f7ee fa49 	bl	80002ac <__adddf3>
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f7ee fe8b 	bl	8000b38 <__aeabi_dcmpgt>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d0eb      	beq.n	8011dfe <floor+0x46>
 8011e26:	2c00      	cmp	r4, #0
 8011e28:	bfbe      	ittt	lt
 8011e2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011e2e:	fa43 f606 	asrlt.w	r6, r3, r6
 8011e32:	19a4      	addlt	r4, r4, r6
 8011e34:	ea24 0407 	bic.w	r4, r4, r7
 8011e38:	2500      	movs	r5, #0
 8011e3a:	e7e0      	b.n	8011dfe <floor+0x46>
 8011e3c:	2e33      	cmp	r6, #51	; 0x33
 8011e3e:	dd0b      	ble.n	8011e58 <floor+0xa0>
 8011e40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011e44:	d104      	bne.n	8011e50 <floor+0x98>
 8011e46:	ee10 2a10 	vmov	r2, s0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	f7ee fa2e 	bl	80002ac <__adddf3>
 8011e50:	ec41 0b10 	vmov	d0, r0, r1
 8011e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e60:	fa23 f707 	lsr.w	r7, r3, r7
 8011e64:	4207      	tst	r7, r0
 8011e66:	d0f3      	beq.n	8011e50 <floor+0x98>
 8011e68:	a30f      	add	r3, pc, #60	; (adr r3, 8011ea8 <floor+0xf0>)
 8011e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6e:	f7ee fa1d 	bl	80002ac <__adddf3>
 8011e72:	2200      	movs	r2, #0
 8011e74:	2300      	movs	r3, #0
 8011e76:	f7ee fe5f 	bl	8000b38 <__aeabi_dcmpgt>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	d0bf      	beq.n	8011dfe <floor+0x46>
 8011e7e:	2c00      	cmp	r4, #0
 8011e80:	da02      	bge.n	8011e88 <floor+0xd0>
 8011e82:	2e14      	cmp	r6, #20
 8011e84:	d103      	bne.n	8011e8e <floor+0xd6>
 8011e86:	3401      	adds	r4, #1
 8011e88:	ea25 0507 	bic.w	r5, r5, r7
 8011e8c:	e7b7      	b.n	8011dfe <floor+0x46>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011e94:	fa03 f606 	lsl.w	r6, r3, r6
 8011e98:	4435      	add	r5, r6
 8011e9a:	4545      	cmp	r5, r8
 8011e9c:	bf38      	it	cc
 8011e9e:	18e4      	addcc	r4, r4, r3
 8011ea0:	e7f2      	b.n	8011e88 <floor+0xd0>
 8011ea2:	2500      	movs	r5, #0
 8011ea4:	462c      	mov	r4, r5
 8011ea6:	e7aa      	b.n	8011dfe <floor+0x46>
 8011ea8:	8800759c 	.word	0x8800759c
 8011eac:	7e37e43c 	.word	0x7e37e43c
 8011eb0:	bff00000 	.word	0xbff00000
 8011eb4:	000fffff 	.word	0x000fffff

08011eb8 <scalbn>:
 8011eb8:	b570      	push	{r4, r5, r6, lr}
 8011eba:	ec55 4b10 	vmov	r4, r5, d0
 8011ebe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011ec2:	4606      	mov	r6, r0
 8011ec4:	462b      	mov	r3, r5
 8011ec6:	b99a      	cbnz	r2, 8011ef0 <scalbn+0x38>
 8011ec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011ecc:	4323      	orrs	r3, r4
 8011ece:	d036      	beq.n	8011f3e <scalbn+0x86>
 8011ed0:	4b39      	ldr	r3, [pc, #228]	; (8011fb8 <scalbn+0x100>)
 8011ed2:	4629      	mov	r1, r5
 8011ed4:	ee10 0a10 	vmov	r0, s0
 8011ed8:	2200      	movs	r2, #0
 8011eda:	f7ee fb9d 	bl	8000618 <__aeabi_dmul>
 8011ede:	4b37      	ldr	r3, [pc, #220]	; (8011fbc <scalbn+0x104>)
 8011ee0:	429e      	cmp	r6, r3
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	460d      	mov	r5, r1
 8011ee6:	da10      	bge.n	8011f0a <scalbn+0x52>
 8011ee8:	a32b      	add	r3, pc, #172	; (adr r3, 8011f98 <scalbn+0xe0>)
 8011eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eee:	e03a      	b.n	8011f66 <scalbn+0xae>
 8011ef0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011ef4:	428a      	cmp	r2, r1
 8011ef6:	d10c      	bne.n	8011f12 <scalbn+0x5a>
 8011ef8:	ee10 2a10 	vmov	r2, s0
 8011efc:	4620      	mov	r0, r4
 8011efe:	4629      	mov	r1, r5
 8011f00:	f7ee f9d4 	bl	80002ac <__adddf3>
 8011f04:	4604      	mov	r4, r0
 8011f06:	460d      	mov	r5, r1
 8011f08:	e019      	b.n	8011f3e <scalbn+0x86>
 8011f0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011f0e:	460b      	mov	r3, r1
 8011f10:	3a36      	subs	r2, #54	; 0x36
 8011f12:	4432      	add	r2, r6
 8011f14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011f18:	428a      	cmp	r2, r1
 8011f1a:	dd08      	ble.n	8011f2e <scalbn+0x76>
 8011f1c:	2d00      	cmp	r5, #0
 8011f1e:	a120      	add	r1, pc, #128	; (adr r1, 8011fa0 <scalbn+0xe8>)
 8011f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f24:	da1c      	bge.n	8011f60 <scalbn+0xa8>
 8011f26:	a120      	add	r1, pc, #128	; (adr r1, 8011fa8 <scalbn+0xf0>)
 8011f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f2c:	e018      	b.n	8011f60 <scalbn+0xa8>
 8011f2e:	2a00      	cmp	r2, #0
 8011f30:	dd08      	ble.n	8011f44 <scalbn+0x8c>
 8011f32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011f3e:	ec45 4b10 	vmov	d0, r4, r5
 8011f42:	bd70      	pop	{r4, r5, r6, pc}
 8011f44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011f48:	da19      	bge.n	8011f7e <scalbn+0xc6>
 8011f4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011f4e:	429e      	cmp	r6, r3
 8011f50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011f54:	dd0a      	ble.n	8011f6c <scalbn+0xb4>
 8011f56:	a112      	add	r1, pc, #72	; (adr r1, 8011fa0 <scalbn+0xe8>)
 8011f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1e2      	bne.n	8011f26 <scalbn+0x6e>
 8011f60:	a30f      	add	r3, pc, #60	; (adr r3, 8011fa0 <scalbn+0xe8>)
 8011f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f66:	f7ee fb57 	bl	8000618 <__aeabi_dmul>
 8011f6a:	e7cb      	b.n	8011f04 <scalbn+0x4c>
 8011f6c:	a10a      	add	r1, pc, #40	; (adr r1, 8011f98 <scalbn+0xe0>)
 8011f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d0b8      	beq.n	8011ee8 <scalbn+0x30>
 8011f76:	a10e      	add	r1, pc, #56	; (adr r1, 8011fb0 <scalbn+0xf8>)
 8011f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f7c:	e7b4      	b.n	8011ee8 <scalbn+0x30>
 8011f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f82:	3236      	adds	r2, #54	; 0x36
 8011f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	4b0c      	ldr	r3, [pc, #48]	; (8011fc0 <scalbn+0x108>)
 8011f90:	2200      	movs	r2, #0
 8011f92:	e7e8      	b.n	8011f66 <scalbn+0xae>
 8011f94:	f3af 8000 	nop.w
 8011f98:	c2f8f359 	.word	0xc2f8f359
 8011f9c:	01a56e1f 	.word	0x01a56e1f
 8011fa0:	8800759c 	.word	0x8800759c
 8011fa4:	7e37e43c 	.word	0x7e37e43c
 8011fa8:	8800759c 	.word	0x8800759c
 8011fac:	fe37e43c 	.word	0xfe37e43c
 8011fb0:	c2f8f359 	.word	0xc2f8f359
 8011fb4:	81a56e1f 	.word	0x81a56e1f
 8011fb8:	43500000 	.word	0x43500000
 8011fbc:	ffff3cb0 	.word	0xffff3cb0
 8011fc0:	3c900000 	.word	0x3c900000

08011fc4 <finitef>:
 8011fc4:	b082      	sub	sp, #8
 8011fc6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011fca:	9801      	ldr	r0, [sp, #4]
 8011fcc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011fd0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011fd4:	bfac      	ite	ge
 8011fd6:	2000      	movge	r0, #0
 8011fd8:	2001      	movlt	r0, #1
 8011fda:	b002      	add	sp, #8
 8011fdc:	4770      	bx	lr
	...

08011fe0 <scalbnf>:
 8011fe0:	ee10 3a10 	vmov	r3, s0
 8011fe4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011fe8:	d025      	beq.n	8012036 <scalbnf+0x56>
 8011fea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011fee:	d302      	bcc.n	8011ff6 <scalbnf+0x16>
 8011ff0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011ff4:	4770      	bx	lr
 8011ff6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011ffa:	d122      	bne.n	8012042 <scalbnf+0x62>
 8011ffc:	4b2a      	ldr	r3, [pc, #168]	; (80120a8 <scalbnf+0xc8>)
 8011ffe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80120ac <scalbnf+0xcc>
 8012002:	4298      	cmp	r0, r3
 8012004:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012008:	db16      	blt.n	8012038 <scalbnf+0x58>
 801200a:	ee10 3a10 	vmov	r3, s0
 801200e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012012:	3a19      	subs	r2, #25
 8012014:	4402      	add	r2, r0
 8012016:	2afe      	cmp	r2, #254	; 0xfe
 8012018:	dd15      	ble.n	8012046 <scalbnf+0x66>
 801201a:	ee10 3a10 	vmov	r3, s0
 801201e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80120b0 <scalbnf+0xd0>
 8012022:	eddf 6a24 	vldr	s13, [pc, #144]	; 80120b4 <scalbnf+0xd4>
 8012026:	2b00      	cmp	r3, #0
 8012028:	eeb0 7a67 	vmov.f32	s14, s15
 801202c:	bfb8      	it	lt
 801202e:	eef0 7a66 	vmovlt.f32	s15, s13
 8012032:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012036:	4770      	bx	lr
 8012038:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80120b8 <scalbnf+0xd8>
 801203c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012040:	4770      	bx	lr
 8012042:	0dd2      	lsrs	r2, r2, #23
 8012044:	e7e6      	b.n	8012014 <scalbnf+0x34>
 8012046:	2a00      	cmp	r2, #0
 8012048:	dd06      	ble.n	8012058 <scalbnf+0x78>
 801204a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801204e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012052:	ee00 3a10 	vmov	s0, r3
 8012056:	4770      	bx	lr
 8012058:	f112 0f16 	cmn.w	r2, #22
 801205c:	da1a      	bge.n	8012094 <scalbnf+0xb4>
 801205e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012062:	4298      	cmp	r0, r3
 8012064:	ee10 3a10 	vmov	r3, s0
 8012068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801206c:	dd0a      	ble.n	8012084 <scalbnf+0xa4>
 801206e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80120b0 <scalbnf+0xd0>
 8012072:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80120b4 <scalbnf+0xd4>
 8012076:	eef0 7a40 	vmov.f32	s15, s0
 801207a:	2b00      	cmp	r3, #0
 801207c:	bf18      	it	ne
 801207e:	eeb0 0a47 	vmovne.f32	s0, s14
 8012082:	e7db      	b.n	801203c <scalbnf+0x5c>
 8012084:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80120b8 <scalbnf+0xd8>
 8012088:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80120bc <scalbnf+0xdc>
 801208c:	eef0 7a40 	vmov.f32	s15, s0
 8012090:	2b00      	cmp	r3, #0
 8012092:	e7f3      	b.n	801207c <scalbnf+0x9c>
 8012094:	3219      	adds	r2, #25
 8012096:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801209a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801209e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80120c0 <scalbnf+0xe0>
 80120a2:	ee07 3a10 	vmov	s14, r3
 80120a6:	e7c4      	b.n	8012032 <scalbnf+0x52>
 80120a8:	ffff3cb0 	.word	0xffff3cb0
 80120ac:	4c000000 	.word	0x4c000000
 80120b0:	7149f2ca 	.word	0x7149f2ca
 80120b4:	f149f2ca 	.word	0xf149f2ca
 80120b8:	0da24260 	.word	0x0da24260
 80120bc:	8da24260 	.word	0x8da24260
 80120c0:	33000000 	.word	0x33000000

080120c4 <_close>:
 80120c4:	4b02      	ldr	r3, [pc, #8]	; (80120d0 <_close+0xc>)
 80120c6:	2258      	movs	r2, #88	; 0x58
 80120c8:	601a      	str	r2, [r3, #0]
 80120ca:	f04f 30ff 	mov.w	r0, #4294967295
 80120ce:	4770      	bx	lr
 80120d0:	20013c30 	.word	0x20013c30

080120d4 <_fstat>:
 80120d4:	4b02      	ldr	r3, [pc, #8]	; (80120e0 <_fstat+0xc>)
 80120d6:	2258      	movs	r2, #88	; 0x58
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	f04f 30ff 	mov.w	r0, #4294967295
 80120de:	4770      	bx	lr
 80120e0:	20013c30 	.word	0x20013c30

080120e4 <_getpid>:
 80120e4:	4b02      	ldr	r3, [pc, #8]	; (80120f0 <_getpid+0xc>)
 80120e6:	2258      	movs	r2, #88	; 0x58
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	f04f 30ff 	mov.w	r0, #4294967295
 80120ee:	4770      	bx	lr
 80120f0:	20013c30 	.word	0x20013c30

080120f4 <_isatty>:
 80120f4:	4b02      	ldr	r3, [pc, #8]	; (8012100 <_isatty+0xc>)
 80120f6:	2258      	movs	r2, #88	; 0x58
 80120f8:	601a      	str	r2, [r3, #0]
 80120fa:	2000      	movs	r0, #0
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	20013c30 	.word	0x20013c30

08012104 <_kill>:
 8012104:	4b02      	ldr	r3, [pc, #8]	; (8012110 <_kill+0xc>)
 8012106:	2258      	movs	r2, #88	; 0x58
 8012108:	601a      	str	r2, [r3, #0]
 801210a:	f04f 30ff 	mov.w	r0, #4294967295
 801210e:	4770      	bx	lr
 8012110:	20013c30 	.word	0x20013c30

08012114 <_lseek>:
 8012114:	4b02      	ldr	r3, [pc, #8]	; (8012120 <_lseek+0xc>)
 8012116:	2258      	movs	r2, #88	; 0x58
 8012118:	601a      	str	r2, [r3, #0]
 801211a:	f04f 30ff 	mov.w	r0, #4294967295
 801211e:	4770      	bx	lr
 8012120:	20013c30 	.word	0x20013c30

08012124 <_read>:
 8012124:	4b02      	ldr	r3, [pc, #8]	; (8012130 <_read+0xc>)
 8012126:	2258      	movs	r2, #88	; 0x58
 8012128:	601a      	str	r2, [r3, #0]
 801212a:	f04f 30ff 	mov.w	r0, #4294967295
 801212e:	4770      	bx	lr
 8012130:	20013c30 	.word	0x20013c30

08012134 <_sbrk>:
 8012134:	4a04      	ldr	r2, [pc, #16]	; (8012148 <_sbrk+0x14>)
 8012136:	6811      	ldr	r1, [r2, #0]
 8012138:	4603      	mov	r3, r0
 801213a:	b909      	cbnz	r1, 8012140 <_sbrk+0xc>
 801213c:	4903      	ldr	r1, [pc, #12]	; (801214c <_sbrk+0x18>)
 801213e:	6011      	str	r1, [r2, #0]
 8012140:	6810      	ldr	r0, [r2, #0]
 8012142:	4403      	add	r3, r0
 8012144:	6013      	str	r3, [r2, #0]
 8012146:	4770      	bx	lr
 8012148:	20013c34 	.word	0x20013c34
 801214c:	20013c38 	.word	0x20013c38

08012150 <_write>:
 8012150:	4b02      	ldr	r3, [pc, #8]	; (801215c <_write+0xc>)
 8012152:	2258      	movs	r2, #88	; 0x58
 8012154:	601a      	str	r2, [r3, #0]
 8012156:	f04f 30ff 	mov.w	r0, #4294967295
 801215a:	4770      	bx	lr
 801215c:	20013c30 	.word	0x20013c30

08012160 <_exit>:
 8012160:	e7fe      	b.n	8012160 <_exit>
	...

08012164 <_init>:
 8012164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012166:	bf00      	nop
 8012168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801216a:	bc08      	pop	{r3}
 801216c:	469e      	mov	lr, r3
 801216e:	4770      	bx	lr

08012170 <_fini>:
 8012170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012172:	bf00      	nop
 8012174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012176:	bc08      	pop	{r3}
 8012178:	469e      	mov	lr, r3
 801217a:	4770      	bx	lr
